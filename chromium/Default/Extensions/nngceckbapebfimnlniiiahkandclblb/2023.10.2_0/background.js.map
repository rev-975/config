{"version":3,"file":"background.js","mappings":"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,cACA,aACA,YACA,gBAGc,GAAAC,uBAAmC,IAC9CF,GAA4BC,eAC/B,eAGc,GAAAE,qBAAiC,CAC/C,UACA,YACA,kBACA,aACA,OACA,OAGc,GAAAC,0BAAsC,CACpD,UACA,YACA,kBACA,aACA,UAGc,GAAAC,qBAAiC,CAC/C,YACA,SACA,cACA,WACA,SACA,KACA,QACA,UACA,cACA,eACA,QACA,eACA,YACA,UAGc,GAAAC,0BAAsC,CACpD,YACA,SACA,cACA,WACA,QACA,UACA,eACA,YACA,UAGc,GAAAC,qBAAiC,CAC/C,SACA,WACA,gBACA,kBACA,QACA,UACA,cACA,cACA,WACA,aACA,SACA,QACA,UACA,QACA,UACA,kBACA,0BACA,mBAGc,GAAAC,0BAAsC,CACpD,QACA,UACA,QACA,UACA,kBACA,2BAGc,GAAAC,sBAAkC,CAChD,YACA,eACA,WACA,aACA,QACA,UACA,SACA,cACA,YACA,wBACA,mBACA,QACA,OACA,UACA,SACA,cACA,YACA,SACA,QACA,eACA,YACA,eACA,YACA,oBACA,iBACA,oBACA,iBACA,gBACA,kBACA,aACA,eACA,0BACA,wBACA,qBACA,UACA,cACA,cACA,eACA,UAGc,GAAAC,qBAAiC,CAC/C,WACA,cACA,UACA,YACA,QACA,UACA,SACA,cACA,YACA,uBACA,kBACA,QACA,OACA,UACA,SACA,cACA,YACA,SACA,QACA,UACA,YACA,gBACA,cACA,cACA,YACA,cACA,YACA,mBACA,iBACA,mBACA,iBACA,cACA,gBACA,iBACA,mBACA,yBACA,uBACA,cACA,qBACA,uBACA,gBACA,gBACA,UAGc,GAAAC,cAA0B,CACxC,MACA,MACA,OACA,SACA,SACA,WACA,WACA,MACA,MACA,OACA,MACA,OACA,UACA,YACA,gBACA,gBACA,SACA,aACA,oBACA,MACA,OAGc,GAAAC,oBAAgC,CAC9C,UACA,YACA,aACA,WACA,WAKc,GAAAC,UAAY,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,GAAAC,cAAgB,CAAC,KAAM,KAAM,KAAM,KAA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","sources":["webpack:///webpack/runtime/chunk loaded","webpack:///webpack/runtime/create fake namespace object","webpack:///../../libs/common/src/models/response/base.response.ts","webpack:///../../libs/common/src/models/response/list.response.ts","webpack:///../../libs/common/src/platform/misc/utils.ts","webpack:///../../libs/common/src/admin-console/models/data/policy.data.ts","webpack:///../../libs/common/src/admin-console/models/response/policy.response.ts","webpack:///../../libs/common/src/admin-console/enums/organization-api-key-type.enum.ts","webpack:///../../libs/common/src/admin-console/enums/organization-connection-type.enum.ts","webpack:///../../libs/common/src/admin-console/enums/organization-user-status-type.enum.ts","webpack:///../../libs/common/src/admin-console/enums/organization-user-type.enum.ts","webpack:///../../libs/common/src/admin-console/enums/policy-type.enum.ts","webpack:///../../libs/common/src/admin-console/enums/provider-user-status-type.enum.ts","webpack:///../../libs/common/src/admin-console/enums/provider-user-type.enum.ts","webpack:///../../libs/common/src/admin-console/enums/scim-provider-type.enum.ts","webpack:///../../libs/common/src/admin-console/services/policy/policy-api.service.ts","webpack:///../../libs/common/src/models/domain/provider.ts","webpack:///../../libs/common/src/admin-console/services/provider.service.ts","webpack:///../../libs/common/src/auth/enums/authentication-status.ts","webpack:///../../libs/common/src/enums/client-type.enum.ts","webpack:///../../libs/common/src/enums/device-type.enum.ts","webpack:///../../libs/common/src/auth/services/account.service.ts","webpack:///../../libs/common/src/enums/encrypted-export-type.enum.ts","webpack:///../../libs/common/src/enums/encryption-type.enum.ts","webpack:///../../libs/common/src/enums/event-system-user.enum.ts","webpack:///../../libs/common/src/enums/event-type.enum.ts","webpack:///../../libs/common/src/enums/field-type.enum.ts","webpack:///../../libs/common/src/enums/file-upload-type.enum.ts","webpack:///../../libs/common/src/enums/hash-purpose.enum.ts","webpack:///../../libs/common/src/enums/html-storage-location.enum.ts","webpack:///../../libs/common/src/enums/http-status-code.enum.ts","webpack:///../../libs/common/src/enums/kdf-type.enum.ts","webpack:///../../libs/common/src/auth/models/domain/kdf-config.ts","webpack:///../../libs/common/src/enums/key-suffix-options.enum.ts","webpack:///../../libs/common/src/enums/linked-id-type.enum.ts","webpack:///../../libs/common/src/enums/log-level-type.enum.ts","webpack:///../../libs/common/src/enums/native-messaging-version.enum.ts","webpack:///../../libs/common/src/enums/notification-type.enum.ts","webpack:///../../libs/common/src/enums/product-type.enum.ts","webpack:///../../libs/common/src/enums/provider-type.enum.ts","webpack:///../../libs/common/src/enums/secure-note-type.enum.ts","webpack:///../../libs/common/src/enums/storage-location.enum.ts","webpack:///../../libs/common/src/enums/theme-type.enum.ts","webpack:///../../libs/common/src/enums/uri-match-type.enum.ts","webpack:///../../libs/common/src/platform/models/domain/symmetric-crypto-key.ts","webpack:///../../libs/common/src/auth/enums/authentication-type.ts","webpack:///../../libs/common/src/auth/services/auth-request-crypto.service.implementation.ts","webpack:///../../libs/common/src/models/request/prelogin.request.ts","webpack:///../../libs/common/src/models/response/error.response.ts","webpack:///../../libs/common/src/platform/models/domain/enc-string.ts","webpack:///../../libs/common/src/auth/models/domain/force-reset-password-reason.ts","webpack:///../../libs/common/src/auth/enums/two-factor-provider-type.ts","webpack:///../../libs/common/src/platform/models/domain/domain-base.ts","webpack:///../../libs/common/src/admin-console/models/domain/master-password-policy-options.ts","webpack:///../../libs/common/src/auth/models/request/identity-token/token.request.ts","webpack:///../../libs/common/src/auth/models/request/identity-token/password-token.request.ts","webpack:///../../libs/common/src/auth/models/response/identity-captcha.response.ts","webpack:///../../libs/common/src/models/request/keys.request.ts","webpack:///../../libs/common/src/auth/models/domain/admin-auth-req-storable.ts","webpack:///../../libs/common/src/auth/models/domain/environment-urls.ts","webpack:///../../libs/common/src/auth/models/domain/user-decryption-options/key-connector-user-decryption-option.ts","webpack:///../../libs/common/src/auth/models/domain/user-decryption-options/trusted-device-user-decryption-option.ts","webpack:///../../libs/common/src/platform/models/data/server-config.data.ts","webpack:///../../libs/common/src/platform/models/domain/account.ts","webpack:///../../libs/common/src/auth/models/domain/auth-result.ts","webpack:///../../libs/common/src/auth/models/request/identity-token/device.request.ts","webpack:///../../libs/common/src/auth/models/request/identity-token/token-two-factor.request.ts","webpack:///../../libs/common/src/auth/models/response/master-password-policy.response.ts","webpack:///../../libs/common/src/auth/models/response/user-decryption-options/key-connector-user-decryption-option.response.ts","webpack:///../../libs/common/src/auth/models/response/user-decryption-options/trusted-device-user-decryption-option.response.ts","webpack:///../../libs/common/src/auth/models/response/user-decryption-options/user-decryption-options.response.ts","webpack:///../../libs/common/src/auth/models/response/identity-token.response.ts","webpack:///../../libs/common/src/auth/models/response/identity-two-factor.response.ts","webpack:///../../libs/common/src/auth/login-strategies/login.strategy.ts","webpack:///../../libs/common/src/auth/login-strategies/password-login.strategy.ts","webpack:///../../libs/common/src/auth/login-strategies/passwordless-login.strategy.ts","webpack:///../../libs/common/src/auth/models/request/identity-token/sso-token.request.ts","webpack:///../../libs/common/src/auth/login-strategies/sso-login.strategy.ts","webpack:///../../libs/common/src/auth/models/request/identity-token/user-api-token.request.ts","webpack:///../../libs/common/src/auth/login-strategies/user-api-login.strategy.ts","webpack:///../../libs/common/src/auth/models/request/passwordless-auth.request.ts","webpack:///../../libs/common/src/auth/services/auth.service.ts","webpack:///../../libs/common/src/auth/models/request/secret-verification.request.ts","webpack:///../../libs/common/src/auth/models/request/update-devices-trust.request.ts","webpack:///../../libs/common/src/auth/services/device-trust-crypto.service.implementation.ts","webpack:///../../libs/common/src/auth/abstractions/devices/views/device.view.ts","webpack:///../../libs/common/src/auth/services/devices/devices.service.implementation.ts","webpack:///../../libs/common/src/auth/abstractions/devices/responses/device.response.ts","webpack:///../../libs/common/src/auth/models/response/protected-device.response.ts","webpack:///../../libs/common/src/auth/services/devices/requests/trusted-device-keys.request.ts","webpack:///../../libs/common/src/auth/services/devices-api.service.implementation.ts","webpack:///../../libs/common/src/auth/models/request/key-connector-user-key.request.ts","webpack:///../../libs/common/src/auth/models/request/set-key-connector-key.request.ts","webpack:///../../libs/common/src/auth/services/key-connector.service.ts","webpack:///../../libs/common/src/auth/services/token.service.ts","webpack:///../../libs/common/src/auth/services/two-factor.service.ts","webpack:///../../libs/common/src/auth/enums/verification-type.ts","webpack:///../../libs/common/src/auth/services/user-verification/user-verification-api.service.ts","webpack:///../../libs/common/src/auth/models/request/verify-otp.request.ts","webpack:///../../libs/common/src/auth/services/user-verification/user-verification.service.ts","webpack:///../../libs/common/src/platform/abstractions/messaging.service.ts","webpack:///../../libs/common/src/platform/factories/account-factory.ts","webpack:///../../libs/common/src/platform/factories/global-state-factory.ts","webpack:///../../libs/common/src/platform/factories/state-factory.ts","webpack:///../../libs/common/src/models/domain/window-state.ts","webpack:///../../libs/common/src/platform/models/domain/global-state.ts","webpack:///../../libs/common/src/platform/services/app-id.service.ts","webpack:///../../libs/common/src/platform/models/response/server-config.response.ts","webpack:///../../libs/common/src/platform/services/config/config-api.service.ts","webpack:///../../libs/common/src/platform/services/console-log.service.ts","webpack:///../../libs/common/src/platform/services/container.service.ts","webpack:///../../libs/common/src/platform/models/domain/enc-array-buffer.ts","webpack:///../../libs/common/src/platform/models/domain/encrypted-object.ts","webpack:///../../libs/common/src/platform/services/cryptography/encrypt.service.implementation.ts","webpack:///../../libs/common/src/platform/services/cryptography/initializer-key.ts","webpack:///../../libs/common/src/vault/enums/cipher-type.ts","webpack:///../../libs/common/src/vault/enums/cipher-reprompt-type.ts","webpack:///../../libs/common/src/vault/models/data/attachment.data.ts","webpack:///../../libs/common/src/vault/models/data/card.data.ts","webpack:///../../libs/common/src/vault/models/data/field.data.ts","webpack:///../../libs/common/src/vault/models/data/identity.data.ts","webpack:///../../libs/common/src/vault/models/data/fido2-credential.data.ts","webpack:///../../libs/common/src/vault/models/data/login-uri.data.ts","webpack:///../../libs/common/src/vault/models/data/login.data.ts","webpack:///../../libs/common/src/vault/models/data/password-history.data.ts","webpack:///../../libs/common/src/vault/models/data/secure-note.data.ts","webpack:///../../libs/common/src/vault/models/data/cipher.data.ts","webpack:///../../libs/common/src/vault/models/view/attachment.view.ts","webpack:///../../libs/common/src/misc/linkedFieldOption.decorator.ts","webpack:///../../libs/common/src/vault/models/view/item.view.ts","webpack:///../../libs/common/src/vault/models/view/card.view.ts","webpack:///../../libs/common/src/vault/models/view/field.view.ts","webpack:///../../libs/common/src/vault/models/view/identity.view.ts","webpack:///../../libs/common/src/vault/models/view/fido2-credential.view.ts","webpack:///../../libs/common/src/vault/models/view/login-uri.view.ts","webpack:///../../libs/common/src/vault/models/view/login.view.ts","webpack:///../../libs/common/src/vault/models/view/password-history.view.ts","webpack:///../../libs/common/src/vault/models/view/secure-note.view.ts","webpack:///../../libs/common/src/vault/models/view/cipher.view.ts","webpack:///../../libs/common/src/vault/models/domain/attachment.ts","webpack:///../../libs/common/src/vault/models/domain/card.ts","webpack:///../../libs/common/src/vault/models/domain/field.ts","webpack:///../../libs/common/src/vault/models/domain/identity.ts","webpack:///../../libs/common/src/vault/models/domain/fido2-credential.ts","webpack:///../../libs/common/src/vault/models/domain/login-uri.ts","webpack:///../../libs/common/src/vault/models/domain/login.ts","webpack:///../../libs/common/src/vault/models/domain/password.ts","webpack:///../../libs/common/src/vault/models/domain/secure-note.ts","webpack:///../../libs/common/src/vault/models/domain/cipher.ts","webpack:///../../libs/common/src/platform/services/cryptography/get-class-initializer.ts","webpack:///../../libs/common/src/platform/services/cryptography/multithread-encrypt.service.implementation.ts","webpack:///../../libs/common/src/platform/services/file-upload/azure-file-upload.service.ts","webpack:///../../libs/common/src/platform/services/file-upload/bitwarden-file-upload.service.ts","webpack:///../../libs/common/src/platform/services/file-upload/file-upload.service.ts","webpack:///../../libs/common/src/platform/abstractions/storage.service.ts","webpack:///../../libs/common/src/platform/services/memory-storage.service.ts","webpack:///../../libs/common/src/platform/services/system.service.ts","webpack:///../../libs/common/src/platform/models/domain/decrypt-parameters.ts","webpack:///../../libs/common/src/platform/services/web-crypto-function.service.ts","webpack:///../../libs/common/src/models/request/update-avatar.request.ts","webpack:///../../libs/common/src/services/account/avatar-update.service.ts","webpack:///../../libs/common/src/admin-console/models/response/organization-connection.response.ts","webpack:///../../libs/common/src/models/api/card.api.ts","webpack:///../../libs/common/src/models/api/field.api.ts","webpack:///../../libs/common/src/models/api/identity.api.ts","webpack:///../../libs/common/src/vault/api/fido2-credential.api.ts","webpack:///../../libs/common/src/models/api/login-uri.api.ts","webpack:///../../libs/common/src/models/api/login.api.ts","webpack:///../../libs/common/src/models/api/secure-note.api.ts","webpack:///../../libs/common/src/vault/models/response/attachment.response.ts","webpack:///../../libs/common/src/vault/models/response/password-history.response.ts","webpack:///../../libs/common/src/vault/models/response/cipher.response.ts","webpack:///../../libs/common/src/admin-console/models/response/selection-read-only.response.ts","webpack:///../../libs/common/src/vault/models/response/collection.response.ts","webpack:///../../libs/common/src/admin-console/models/response/organization-export.response.ts","webpack:///../../libs/common/src/admin-console/models/response/organization-sponsorship-sync-status.response.ts","webpack:///../../libs/common/src/admin-console/models/response/provider/provider-organization.response.ts","webpack:///../../libs/common/src/abstractions/organization-user/responses/organization-user-bulk-public-key.response.ts","webpack:///../../libs/common/src/admin-console/models/response/provider/provider-user-bulk-public-key.response.ts","webpack:///../../libs/common/src/admin-console/models/response/provider/provider-user-bulk.response.ts","webpack:///../../libs/common/src/admin-console/models/api/permissions.api.ts","webpack:///../../libs/common/src/admin-console/models/response/provider/provider-user.response.ts","webpack:///../../libs/common/src/admin-console/models/response/provider/provider.response.ts","webpack:///../../libs/common/src/auth/models/response/api-key.response.ts","webpack:///../../libs/common/src/auth/models/response/auth-request.response.ts","webpack:///../../libs/common/src/auth/models/response/device-verification.response.ts","webpack:///../../libs/common/src/auth/models/response/emergency-access.response.ts","webpack:///../../libs/common/src/auth/models/response/key-connector-user-key.response.ts","webpack:///../../libs/common/src/auth/models/response/prelogin.response.ts","webpack:///../../libs/common/src/auth/models/response/register.response.ts","webpack:///../../libs/common/src/auth/models/response/sso-pre-validate.response.ts","webpack:///../../libs/common/src/auth/models/response/two-factor-authenticator.response.ts","webpack:///../../libs/common/src/auth/models/response/two-factor-duo.response.ts","webpack:///../../libs/common/src/auth/models/response/two-factor-email.response.ts","webpack:///../../libs/common/src/auth/models/response/two-factor-provider.response.ts","webpack:///../../libs/common/src/auth/models/response/two-factor-recover.response.ts","webpack:///../../libs/common/src/auth/models/response/two-factor-web-authn.response.ts","webpack:///../../libs/common/src/auth/models/response/two-factor-yubi-key.response.ts","webpack:///../../libs/common/src/billing/models/response/billing.response.ts","webpack:///../../libs/common/src/billing/models/response/billing-history.response.ts","webpack:///../../libs/common/src/billing/models/response/billing-payment.response.ts","webpack:///../../libs/common/src/admin-console/models/response/profile-organization.response.ts","webpack:///../../libs/common/src/admin-console/models/response/profile-provider-organization.response.ts","webpack:///../../libs/common/src/admin-console/models/response/profile-provider.response.ts","webpack:///../../libs/common/src/models/response/profile.response.ts","webpack:///../../libs/common/src/billing/models/response/payment.response.ts","webpack:///../../libs/common/src/billing/models/response/plan.response.ts","webpack:///../../libs/common/src/billing/models/response/subscription.response.ts","webpack:///../../libs/common/src/billing/models/response/tax-info.response.ts","webpack:///../../libs/common/src/billing/models/response/tax-rate.response.ts","webpack:///../../libs/common/src/models/response/breach-account.response.ts","webpack:///../../libs/common/src/models/response/global-domain.response.ts","webpack:///../../libs/common/src/models/response/domains.response.ts","webpack:///../../libs/common/src/models/response/event.response.ts","webpack:///../../libs/common/src/models/response/user-key.response.ts","webpack:///../../libs/common/src/vault/models/response/attachment-upload-data.response.ts","webpack:///../../libs/common/src/tools/send/models/api/send-file.api.ts","webpack:///../../libs/common/src/tools/send/models/api/send-text.api.ts","webpack:///../../libs/common/src/tools/send/models/response/send.response.ts","webpack:///../../libs/common/src/vault/models/response/folder.response.ts","webpack:///../../libs/common/src/vault/models/response/sync.response.ts","webpack:///../../libs/common/src/services/api.service.ts","webpack:///../../libs/common/src/services/audit.service.ts","webpack:///../../libs/common/src/platform/misc/throttle.ts","webpack:///../../libs/common/src/models/data/event.data.ts","webpack:///../../libs/common/src/services/event/event-collection.service.ts","webpack:///../../libs/common/src/models/request/event.request.ts","webpack:///../../libs/common/src/services/event/event-upload.service.ts","webpack:///../../libs/common/src/models/response/notification.response.ts","webpack:///../../libs/common/src/services/notifications.service.ts","webpack:///../../libs/common/src/services/search.service.ts","webpack:///../../libs/common/src/services/totp.service.ts","webpack:///../../libs/common/src/enums/vault-timeout-action.enum.ts","webpack:///../../libs/common/src/services/vault-timeout/vault-timeout-settings.service.ts","webpack:///../../libs/common/src/admin-console/models/domain/password-generator-policy-options.ts","webpack:///../../libs/common/src/platform/misc/wordlist.ts","webpack:///../../libs/common/src/tools/generator/password/generated-password-history.ts","webpack:///../../libs/common/src/tools/generator/password/password-generation.service.ts","webpack:///../../libs/common/src/tools/generator/username/email-forwarders/anon-addy-forwarder.ts","webpack:///../../libs/common/src/tools/generator/username/email-forwarders/duck-duck-go-forwarder.ts","webpack:///../../libs/common/src/tools/generator/username/email-forwarders/fastmail-forwarder.ts","webpack:///../../libs/common/src/tools/generator/username/email-forwarders/firefox-relay-forwarder.ts","webpack:///../../libs/common/src/tools/generator/username/email-forwarders/forwarder-options.ts","webpack:///../../libs/common/src/tools/generator/username/email-forwarders/simple-login-forwarder.ts","webpack:///../../libs/common/src/tools/generator/username/email-forwarders/forward-email-forwarder.ts","webpack:///../../libs/common/src/tools/generator/username/username-generation.service.ts","webpack:///../../libs/common/src/tools/send/enums/send-type.ts","webpack:///../../libs/common/src/tools/password-strength/password-strength.service.ts","webpack:///../../libs/common/src/tools/send/models/data/send-file.data.ts","webpack:///../../libs/common/src/tools/send/models/data/send-text.data.ts","webpack:///../../libs/common/src/tools/send/models/data/send.data.ts","webpack:///../../libs/common/src/tools/send/models/request/send.request.ts","webpack:///../../libs/common/src/tools/send/models/response/send-access.response.ts","webpack:///../../libs/common/src/tools/send/models/response/send-file-download-data.response.ts","webpack:///../../libs/common/src/tools/send/models/response/send-file-upload-data.response.ts","webpack:///../../libs/common/src/tools/send/services/send-api.service.ts","webpack:///../../libs/common/src/platform/misc/flags.ts","webpack:///../../libs/common/src/platform/misc/sequentialize.ts","webpack:///../../libs/common/src/vault/models/domain/sorted-ciphers-cache.ts","webpack:///../../libs/common/src/vault/models/request/cipher-bulk-delete.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher-bulk-move.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher-bulk-restore.request.ts","webpack:///../../libs/common/src/vault/models/request/attachment.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher-with-id.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher-bulk-share.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher-collections.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher-create.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher-partial.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher-share.request.ts","webpack:///../../libs/common/src/vault/services/cipher.service.ts","webpack:///../../libs/common/src/models/domain/tree-node.ts","webpack:///../../libs/common/src/misc/serviceUtils.ts","webpack:///../../libs/common/src/vault/models/data/collection.data.ts","webpack:///../../libs/common/src/vault/models/view/collection.view.ts","webpack:///../../libs/common/src/vault/models/domain/collection.ts","webpack:///../../libs/common/src/vault/services/collection.service.ts","webpack:///../../libs/common/src/vault/abstractions/fido2/fido2-authenticator.service.abstraction.ts","webpack:///../../libs/common/src/vault/abstractions/fido2/fido2-client.service.abstraction.ts","webpack:///../../libs/common/src/vault/services/fido2/cbor.ts","webpack:///../../libs/common/src/vault/services/fido2/ecdsa-utils.ts","webpack:///../../libs/common/src/vault/services/fido2/fido2-utils.ts","webpack:///../../libs/common/src/vault/services/fido2/guid-utils.ts","webpack:///../../libs/common/src/vault/services/fido2/fido2-authenticator.service.ts","webpack:///../../libs/common/src/enums/feature-flag.enum.ts","webpack:///../../libs/common/src/vault/services/fido2/domain-utils.ts","webpack:///../../libs/common/src/vault/services/fido2/fido2-client.service.ts","webpack:///../../libs/common/src/vault/services/file-upload/cipher-file-upload.service.ts","webpack:///../../libs/common/src/vault/models/data/folder.data.ts","webpack:///../../libs/common/src/vault/models/request/folder.request.ts","webpack:///../../libs/common/src/vault/services/folder/folder-api.service.ts","webpack:///../../libs/common/src/vault/services/sync/sync-notifier.service.ts","webpack:///../../libs/common/src/admin-console/models/data/organization.data.ts","webpack:///../../libs/common/src/admin-console/models/data/provider.data.ts","webpack:///../../libs/common/src/vault/services/sync/sync.service.ts","webpack:///../../libs/common/src/models/export/card.export.ts","webpack:///../../libs/common/src/models/export/field.export.ts","webpack:///../../libs/common/src/models/export/identity.export.ts","webpack:///../../libs/common/src/models/export/fido2-credential.export.ts","webpack:///../../libs/common/src/models/export/login-uri.export.ts","webpack:///../../libs/common/src/models/export/login.export.ts","webpack:///../../libs/common/src/models/export/password-history.export.ts","webpack:///../../libs/common/src/models/export/secure-note.export.ts","webpack:///../../libs/common/src/models/export/cipher.export.ts","webpack:///../../libs/common/src/models/export/cipher-with-ids.export.ts","webpack:///../../libs/common/src/models/export/collection.export.ts","webpack:///../../libs/common/src/models/export/collection-with-id.export.ts","webpack:///../../libs/common/src/vault/models/view/folder.view.ts","webpack:///../../libs/common/src/vault/models/domain/folder.ts","webpack:///../../libs/common/src/models/export/folder.export.ts","webpack:///../../libs/common/src/models/export/folder-with-id.export.ts","webpack:///../../libs/exporter/src/export-helper.ts","webpack:///../../libs/exporter/src/vault-export/services/vault-export.service.ts","webpack:///../../libs/importer/src/services/import-api.service.ts","webpack:///../../libs/common/src/models/request/import-ciphers.request.ts","webpack:///../../libs/common/src/models/request/import-organization-ciphers.request.ts","webpack:///../../libs/common/src/models/request/kvp.request.ts","webpack:///../../libs/common/src/vault/models/request/collection.request.ts","webpack:///../../libs/common/src/vault/models/request/collection-with-id.request.ts","webpack:///../../libs/common/src/vault/models/request/folder-with-id.request.ts","webpack:///../../libs/importer/src/models/import-result.ts","webpack:///../../libs/importer/src/importers/base-importer.ts","webpack:///../../libs/importer/src/importers/ascendo-csv-importer.ts","webpack:///../../libs/importer/src/importers/avast/avast-csv-importer.ts","webpack:///../../libs/importer/src/importers/avast/avast-json-importer.ts","webpack:///../../libs/importer/src/importers/avira-csv-importer.ts","webpack:///../../libs/importer/src/importers/blackberry-csv-importer.ts","webpack:///../../libs/importer/src/importers/chrome-csv-importer.ts","webpack:///../../libs/importer/src/importers/bitwarden/bitwarden-csv-importer.ts","webpack:///../../libs/importer/src/importers/bitwarden/bitwarden-json-importer.ts","webpack:///../../libs/importer/src/importers/bitwarden/bitwarden-password-protected-importer.ts","webpack:///../../libs/importer/src/importers/blur-csv-importer.ts","webpack:///../../libs/importer/src/importers/buttercup-csv-importer.ts","webpack:///../../libs/importer/src/importers/clipperz-html-importer.ts","webpack:///../../libs/importer/src/importers/codebook-csv-importer.ts","webpack:///../../libs/importer/src/importers/dashlane/dashlane-csv-importer.ts","webpack:///../../libs/importer/src/importers/dashlane/dashlane-json-importer.ts","webpack:///../../libs/importer/src/importers/encryptr-csv-importer.ts","webpack:///../../libs/importer/src/importers/enpass/enpass-csv-importer.ts","webpack:///../../libs/importer/src/importers/enpass/enpass-json-importer.ts","webpack:///../../libs/importer/src/importers/firefox-csv-importer.ts","webpack:///../../libs/importer/src/importers/fsecure/fsecure-fsk-types.ts","webpack:///../../libs/importer/src/importers/fsecure/fsecure-fsk-importer.ts","webpack:///../../libs/importer/src/importers/gnome-json-importer.ts","webpack:///../../libs/importer/src/importers/kaspersky-txt-importer.ts","webpack:///../../libs/importer/src/importers/keepass2-xml-importer.ts","webpack:///../../libs/importer/src/importers/keepassx-csv-importer.ts","webpack:///../../libs/importer/src/importers/keeper/keeper-csv-importer.ts","webpack:///../../libs/importer/src/importers/lastpass-csv-importer.ts","webpack:///../../libs/importer/src/importers/logmeonce-csv-importer.ts","webpack:///../../libs/importer/src/importers/meldium-csv-importer.ts","webpack:///../../libs/importer/src/importers/msecure-csv-importer.ts","webpack:///../../libs/importer/src/importers/myki-csv-importer.ts","webpack:///../../libs/importer/src/importers/nordpass-csv-importer.ts","webpack:///../../libs/importer/src/importers/onepassword/onepassword-1pif-importer.ts","webpack:///../../libs/importer/src/importers/onepassword/types/onepassword-1pux-importer-types.ts","webpack:///../../libs/importer/src/importers/onepassword/onepassword-1pux-importer.ts","webpack:///../../libs/importer/src/importers/onepassword/cipher-import-context.ts","webpack:///../../libs/importer/src/importers/onepassword/onepassword-csv-importer.ts","webpack:///../../libs/importer/src/importers/onepassword/onepassword-mac-csv-importer.ts","webpack:///../../libs/importer/src/importers/onepassword/onepassword-win-csv-importer.ts","webpack:///../../libs/importer/src/importers/padlock-csv-importer.ts","webpack:///../../libs/importer/src/importers/passkeep-csv-importer.ts","webpack:///../../libs/importer/src/importers/passky/passky-json-importer.ts","webpack:///../../libs/importer/src/importers/passman-json-importer.ts","webpack:///../../libs/importer/src/importers/passpack-csv-importer.ts","webpack:///../../libs/importer/src/importers/passwordagent-csv-importer.ts","webpack:///../../libs/importer/src/importers/passwordboss-json-importer.ts","webpack:///../../libs/importer/src/importers/passworddragon-xml-importer.ts","webpack:///../../libs/importer/src/importers/passwordsafe-xml-importer.ts","webpack:///../../libs/importer/src/importers/passwordwallet-txt-importer.ts","webpack:///../../libs/importer/src/importers/protonpass/types/protonpass-json-type.ts","webpack:///../../libs/importer/src/importers/protonpass/protonpass-json-importer.ts","webpack:///../../libs/importer/src/importers/psono/psono-json-importer.ts","webpack:///../../libs/importer/src/importers/remembear-csv-importer.ts","webpack:///../../libs/importer/src/importers/roboform-csv-importer.ts","webpack:///../../libs/importer/src/importers/safari-csv-importer.ts","webpack:///../../libs/importer/src/importers/safeincloud-xml-importer.ts","webpack:///../../libs/importer/src/importers/saferpass-csv-importer.ts","webpack:///../../libs/importer/src/importers/securesafe-csv-importer.ts","webpack:///../../libs/importer/src/importers/splashid-csv-importer.ts","webpack:///../../libs/importer/src/importers/stickypassword-xml-importer.ts","webpack:///../../libs/importer/src/importers/truekey-csv-importer.ts","webpack:///../../libs/importer/src/importers/upm-csv-importer.ts","webpack:///../../libs/importer/src/importers/yoti-csv-importer.ts","webpack:///../../libs/importer/src/importers/zohovault-csv-importer.ts","webpack:///../../libs/importer/src/models/import-options.ts","webpack:///../../libs/importer/src/services/import.service.ts","webpack:///../../libs/common/src/admin-console/models/domain/organization.ts","webpack:///../../libs/common/src/admin-console/abstractions/organization/organization.service.abstraction.ts","webpack:///../../libs/common/src/admin-console/services/organization/organization.service.ts","webpack:///./src/browser/safariApp.ts","webpack:///./src/platform/services/browser-platform-utils.service.ts","webpack:///./src/platform/browser/browser-api.ts","webpack:///./src/platform/decorators/session-sync-observable/sync-item-metadata.ts","webpack:///./src/platform/decorators/session-sync-observable/session-syncer.ts","webpack:///./src/platform/decorators/session-sync-observable/browser-session.decorator.ts","webpack:///./src/platform/decorators/session-sync-observable/session-sync.decorator.ts","webpack:///./src/admin-console/services/browser-organization.service.ts","webpack:///../../libs/common/src/admin-console/models/domain/policy.ts","webpack:///../../libs/common/src/admin-console/models/domain/reset-password-policy-options.ts","webpack:///../../libs/common/src/admin-console/services/policy/policy.service.ts","webpack:///../../libs/common/src/platform/abstractions/state.service.ts","webpack:///./src/admin-console/services/browser-policy.service.ts","webpack:///./src/autofill/background/context-menus.background.ts","webpack:///./src/background/models/notificationQueueMessage.ts","webpack:///./src/background/models/addLoginQueueMessage.ts","webpack:///./src/background/models/notificationQueueMessageType.ts","webpack:///./src/autofill/background/notification.background.ts","webpack:///./src/autofill/background/tabs.background.ts","webpack:///./src/platform/background/service-factories/factory-options.ts","webpack:///./src/platform/background/service-factories/log-service.factory.ts","webpack:///./src/platform/services/browser-messaging.service.ts","webpack:///./src/platform/background/service-factories/messaging-service.factory.ts","webpack:///../../libs/common/src/auth/abstractions/account.service.ts","webpack:///../../libs/common/src/platform/abstractions/log.service.ts","webpack:///../../libs/common/src/state-migrations/migration-builder.ts","webpack:///../../libs/common/src/state-migrations/migration-helper.ts","webpack:///../../libs/common/src/state-migrations/migrator.ts","webpack:///../../libs/common/src/state-migrations/migrations/3-fix-premium.ts","webpack:///../../libs/common/src/state-migrations/migrations/4-remove-ever-been-unlocked.ts","webpack:///../../libs/common/src/state-migrations/migrations/5-add-key-type-to-org-keys.ts","webpack:///../../libs/common/src/state-migrations/migrations/6-remove-legacy-etm-key.ts","webpack:///../../libs/common/src/state-migrations/migrations/7-move-biometric-auto-prompt-to-account.ts","webpack:///../../libs/common/src/state-migrations/migrations/8-move-state-version.ts","webpack:///../../libs/common/src/state-migrations/migrations/min-version.ts","webpack:///../../libs/common/src/state-migrations/migrate.ts","webpack:///../../libs/common/src/tools/send/models/view/send-file.view.ts","webpack:///../../libs/common/src/tools/send/models/view/send-text.view.ts","webpack:///../../libs/common/src/tools/send/models/view/send.view.ts","webpack:///../../libs/common/src/platform/models/domain/state.ts","webpack:///../../libs/common/src/platform/services/state.service.ts","webpack:///./src/models/browserComponentState.ts","webpack:///./src/models/browserGroupingsComponentState.ts","webpack:///./src/models/browserSendComponentState.ts","webpack:///./src/models/account.ts","webpack:///./src/platform/services/browser-state.service.ts","webpack:///./src/platform/services/abstractions/abstract-chrome-storage-api.service.ts","webpack:///./src/platform/services/browser-local-storage.service.ts","webpack:///./src/platform/services/browser-memory-storage.service.ts","webpack:///./src/platform/services/local-backed-session-storage.service.ts","webpack:///./src/platform/background/service-factories/crypto-function-service.factory.ts","webpack:///./src/platform/decorators/dev-flag.decorator.ts","webpack:///./src/platform/background/service-factories/encrypt-service.factory.ts","webpack:///./src/platform/services/key-generation.service.ts","webpack:///./src/platform/background/service-factories/storage-service.factory.ts","webpack:///./src/platform/background/service-factories/key-generation-service.factory.ts","webpack:///./src/platform/background/service-factories/state-service.factory.ts","webpack:///./src/auth/background/service-factories/account-service.factory.ts","webpack:///./src/admin-console/background/service-factories/organization-service.factory.ts","webpack:///./src/admin-console/background/service-factories/policy-service.factory.ts","webpack:///./src/auth/background/service-factories/token-service.factory.ts","webpack:///../../libs/common/src/platform/abstractions/environment.service.ts","webpack:///./src/platform/background/service-factories/app-id-service.factory.ts","webpack:///../../libs/common/src/platform/services/environment.service.ts","webpack:///./src/platform/services/browser-environment.service.ts","webpack:///./src/platform/background/service-factories/environment-service.factory.ts","webpack:///./src/platform/background/service-factories/platform-utils-service.factory.ts","webpack:///./src/platform/background/service-factories/api-service.factory.ts","webpack:///../../libs/common/src/admin-console/models/domain/encrypted-organization-key.ts","webpack:///../../libs/common/src/platform/services/crypto.service.ts","webpack:///./src/platform/services/browser-crypto.service.ts","webpack:///./src/platform/background/service-factories/crypto-service.factory.ts","webpack:///../../libs/common/src/platform/services/translation.service.ts","webpack:///../../libs/common/src/platform/services/i18n.service.ts","webpack:///./src/platform/services/i18n.service.ts","webpack:///./src/platform/background/service-factories/i18n-service.factory.ts","webpack:///./src/auth/background/service-factories/device-trust-crypto-service.factory.ts","webpack:///./src/background/service-factories/devices-api-service.factory.ts","webpack:///./src/auth/background/service-factories/auth-service.factory.ts","webpack:///./src/auth/background/service-factories/key-connector-service.factory.ts","webpack:///./src/auth/background/service-factories/two-factor-service.factory.ts","webpack:///./src/tools/background/service_factories/password-strength-service.factory.ts","webpack:///./src/auth/background/service-factories/auth-request-crypto-service.factory.ts","webpack:///./src/background/service-factories/cipher-file-upload-service.factory.ts","webpack:///./src/platform/background/service-factories/file-upload-service.factory.ts","webpack:///../../libs/common/src/services/settings.service.ts","webpack:///./src/services/browser-settings.service.ts","webpack:///./src/background/service-factories/settings-service.factory.ts","webpack:///../../libs/common/src/platform/abstractions/config/server-config.ts","webpack:///../../libs/common/src/platform/services/config/config.service.ts","webpack:///./src/platform/background/service-factories/config-service.factory.ts","webpack:///./src/platform/background/service-factories/config-api.service.factory.ts","webpack:///./src/vault/background/service_factories/cipher-service.factory.ts","webpack:///./src/background/service-factories/search-service.factory.ts","webpack:///./src/autofill/constants.ts","webpack:///./src/autofill/browser/main-context-menu-handler.ts","webpack:///./src/autofill/browser/cipher-context-menu-handler.ts","webpack:///./src/auth/background/service-factories/totp-service.factory.ts","webpack:///./src/auth/background/service-factories/user-verification-service.factory.ts","webpack:///./src/auth/background/service-factories/user-verification-api-service.factory.ts","webpack:///./src/background/service-factories/event-collection-service.factory.ts","webpack:///./src/background/service-factories/event-upload-service.factory.ts","webpack:///./src/tools/background/service_factories/password-generation-service.factory.ts","webpack:///./src/autofill/models/autofill-script.ts","webpack:///./src/autofill/services/autofill-constants.ts","webpack:///./src/autofill/services/autofill.service.ts","webpack:///./src/autofill/background/service_factories/autofill-service.factory.ts","webpack:///./src/autofill/clipboard/clear-clipboard.ts","webpack:///./src/autofill/clipboard/copy-to-clipboard-command.ts","webpack:///./src/platform/alarms/alarm-state.ts","webpack:///./src/autofill/clipboard/generate-password-to-clipboard-command.ts","webpack:///./src/autofill/commands/autofill-tab-command.ts","webpack:///./src/autofill/browser/context-menu-clicked-handler.ts","webpack:///./src/platform/listeners/update-badge.ts","webpack:///./src/platform/popup/browser-popout-window.service.ts","webpack:///./src/platform/services/browser-config.service.ts","webpack:///../../libs/common/src/platform/abstractions/config/config-api.service.abstraction.ts","webpack:///../../libs/common/src/auth/abstractions/auth.service.ts","webpack:///./src/platform/services/browser-i18n.service.ts","webpack:///./src/platform/services/browser-messaging-private-mode-background.service.ts","webpack:///../../libs/common/src/tools/send/models/domain/send-file.ts","webpack:///../../libs/common/src/tools/send/models/domain/send-text.ts","webpack:///../../libs/common/src/tools/send/models/domain/send.ts","webpack:///../../libs/common/src/tools/send/services/send.service.ts","webpack:///./src/services/browser-send.service.ts","webpack:///../../libs/common/src/services/vault-timeout/vault-timeout.service.ts","webpack:///./src/services/vault-timeout/vault-timeout.service.ts","webpack:///./src/vault/fido2/browser-fido2-user-interface.service.ts","webpack:///../../libs/common/src/vault/services/folder/folder.service.ts","webpack:///./src/vault/services/browser-folder.service.ts","webpack:///../../libs/angular/src/vault/vault-filter/models/vault-filter.model.ts","webpack:///../../libs/angular/src/vault/vault-filter/models/dynamic-tree-node.model.ts","webpack:///../../libs/common/src/vault/abstractions/folder/folder.service.abstraction.ts","webpack:///../../libs/common/src/vault/abstractions/cipher.service.ts","webpack:///../../libs/common/src/vault/abstractions/collection.service.ts","webpack:///../../libs/common/src/admin-console/abstractions/policy/policy.service.abstraction.ts","webpack:///../../libs/angular/src/vault/vault-filter/services/vault-filter.service.ts","webpack:///./src/vault/services/vault-filter.service.ts","webpack:///./src/background/commands.background.ts","webpack:///./src/background/idle.background.ts","webpack:///./src/background/nativeMessaging.background.ts","webpack:///./src/vault/background/abort-manager.ts","webpack:///./src/background/runtime.background.ts","webpack:///./src/background/webRequest.background.ts","webpack:///./src/background/main.background.ts","webpack:///./src/platform/flags.ts","webpack:///./src/platform/alarms/on-alarm-listener.ts","webpack:///./src/platform/listeners/combine.ts","webpack:///./src/platform/listeners/on-command-listener.ts","webpack:///./src/platform/listeners/index.ts","webpack:///./src/platform/background.ts","webpack:///./src/platform/listeners/on-install-listener.ts","webpack:///./src/platform/alarms/register-alarms.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/get javascript chunk filename","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///webpack/runtime/node module decorator","webpack:///webpack/runtime/publicPath","webpack:///webpack/runtime/jsonp chunk loading","webpack:///webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","export abstract class BaseResponse {\n  private response: any;\n\n  constructor(response: any) {\n    this.response = response;\n  }\n\n  protected getResponseProperty(\n    propertyName: string,\n    response: any = null,\n    exactName = false\n  ): any {\n    if (propertyName == null || propertyName === \"\") {\n      throw new Error(\"propertyName must not be null/empty.\");\n    }\n    if (response == null && this.response != null) {\n      response = this.response;\n    }\n    if (response == null) {\n      return null;\n    }\n    if (!exactName && response[propertyName] === undefined) {\n      let otherCasePropertyName: string = null;\n      if (propertyName.charAt(0) === propertyName.charAt(0).toUpperCase()) {\n        otherCasePropertyName = propertyName.charAt(0).toLowerCase();\n      } else {\n        otherCasePropertyName = propertyName.charAt(0).toUpperCase();\n      }\n      if (propertyName.length > 1) {\n        otherCasePropertyName += propertyName.slice(1);\n      }\n\n      propertyName = otherCasePropertyName;\n      if (response[propertyName] === undefined) {\n        propertyName = propertyName.toLowerCase();\n      }\n      if (response[propertyName] === undefined) {\n        propertyName = propertyName.toUpperCase();\n      }\n    }\n    return response[propertyName];\n  }\n}\n","import { BaseResponse } from \"./base.response\";\n\nexport class ListResponse<T> extends BaseResponse {\n  data: T[];\n  continuationToken: string;\n\n  constructor(response: any, t: new (dataResponse: any) => T) {\n    super(response);\n    const data = this.getResponseProperty(\"Data\");\n    this.data = data == null ? [] : data.map((dr: any) => new t(dr));\n    this.continuationToken = this.getResponseProperty(\"ContinuationToken\");\n  }\n}\n","/* eslint-disable no-useless-escape */\nimport * as path from \"path\";\n\nimport { Observable, of, switchMap } from \"rxjs\";\nimport { getHostname, parse } from \"tldts\";\nimport { Merge } from \"type-fest\";\n\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { EncryptService } from \"../abstractions/encrypt.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\n\nconst nodeURL = typeof window === \"undefined\" ? require(\"url\") : null;\n\ndeclare global {\n  /* eslint-disable-next-line no-var */\n  var bitwardenContainerService: BitwardenContainerService;\n}\n\ninterface BitwardenContainerService {\n  getCryptoService: () => CryptoService;\n  getEncryptService: () => EncryptService;\n}\n\nexport class Utils {\n  static inited = false;\n  static isNode = false;\n  static isBrowser = true;\n  static isMobileBrowser = false;\n  static isAppleMobileBrowser = false;\n  static global: typeof global = null;\n  // Transpiled version of /\\p{Emoji_Presentation}/gu using https://mothereff.in/regexpu. Used for compatability in older browsers.\n  static regexpEmojiPresentation =\n    /(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDED5-\\uDED7\\uDEEB\\uDEEC\\uDEF4-\\uDEFC\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0C-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD78\\uDD7A-\\uDDCB\\uDDCD-\\uDDFF\\uDE70-\\uDE74\\uDE78-\\uDE7A\\uDE80-\\uDE86\\uDE90-\\uDEA8\\uDEB0-\\uDEB6\\uDEC0-\\uDEC2\\uDED0-\\uDED6])/g;\n  static readonly validHosts: string[] = [\"localhost\"];\n  static readonly originalMinimumPasswordLength = 8;\n  static readonly minimumPasswordLength = 12;\n  static readonly DomainMatchBlacklist = new Map<string, Set<string>>([\n    [\"google.com\", new Set([\"script.google.com\"])],\n  ]);\n\n  static init() {\n    if (Utils.inited) {\n      return;\n    }\n\n    Utils.inited = true;\n    Utils.isNode =\n      typeof process !== \"undefined\" &&\n      (process as any).release != null &&\n      (process as any).release.name === \"node\";\n    Utils.isBrowser = typeof window !== \"undefined\";\n\n    Utils.isMobileBrowser = Utils.isBrowser && this.isMobile(window);\n    Utils.isAppleMobileBrowser = Utils.isBrowser && this.isAppleMobile(window);\n\n    if (Utils.isNode) {\n      Utils.global = global;\n    } else if (Utils.isBrowser) {\n      Utils.global = window;\n    } else {\n      // If it's not browser or node then it must be a service worker\n      Utils.global = self;\n    }\n  }\n\n  static fromB64ToArray(str: string): Uint8Array {\n    if (str == null) {\n      return null;\n    }\n\n    if (Utils.isNode) {\n      return new Uint8Array(Buffer.from(str, \"base64\"));\n    } else {\n      const binaryString = Utils.global.atob(str);\n      const bytes = new Uint8Array(binaryString.length);\n      for (let i = 0; i < binaryString.length; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n      }\n      return bytes;\n    }\n  }\n\n  static fromUrlB64ToArray(str: string): Uint8Array {\n    return Utils.fromB64ToArray(Utils.fromUrlB64ToB64(str));\n  }\n\n  static fromHexToArray(str: string): Uint8Array {\n    if (Utils.isNode) {\n      return new Uint8Array(Buffer.from(str, \"hex\"));\n    } else {\n      const bytes = new Uint8Array(str.length / 2);\n      for (let i = 0; i < str.length; i += 2) {\n        bytes[i / 2] = parseInt(str.substr(i, 2), 16);\n      }\n      return bytes;\n    }\n  }\n\n  static fromUtf8ToArray(str: string): Uint8Array {\n    if (Utils.isNode) {\n      return new Uint8Array(Buffer.from(str, \"utf8\"));\n    } else {\n      const strUtf8 = unescape(encodeURIComponent(str));\n      const arr = new Uint8Array(strUtf8.length);\n      for (let i = 0; i < strUtf8.length; i++) {\n        arr[i] = strUtf8.charCodeAt(i);\n      }\n      return arr;\n    }\n  }\n\n  static fromByteStringToArray(str: string): Uint8Array {\n    if (str == null) {\n      return null;\n    }\n    const arr = new Uint8Array(str.length);\n    for (let i = 0; i < str.length; i++) {\n      arr[i] = str.charCodeAt(i);\n    }\n    return arr;\n  }\n\n  static fromBufferToB64(buffer: ArrayBuffer): string {\n    if (buffer == null) {\n      return null;\n    }\n    if (Utils.isNode) {\n      return Buffer.from(buffer).toString(\"base64\");\n    } else {\n      let binary = \"\";\n      const bytes = new Uint8Array(buffer);\n      for (let i = 0; i < bytes.byteLength; i++) {\n        binary += String.fromCharCode(bytes[i]);\n      }\n      return Utils.global.btoa(binary);\n    }\n  }\n\n  static fromBufferToUrlB64(buffer: ArrayBuffer): string {\n    return Utils.fromB64toUrlB64(Utils.fromBufferToB64(buffer));\n  }\n\n  static fromB64toUrlB64(b64Str: string) {\n    return b64Str.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n  }\n\n  static fromBufferToUtf8(buffer: ArrayBuffer): string {\n    if (Utils.isNode) {\n      return Buffer.from(buffer).toString(\"utf8\");\n    } else {\n      const bytes = new Uint8Array(buffer);\n      const encodedString = String.fromCharCode.apply(null, bytes);\n      return decodeURIComponent(escape(encodedString));\n    }\n  }\n\n  static fromBufferToByteString(buffer: ArrayBuffer): string {\n    return String.fromCharCode.apply(null, new Uint8Array(buffer));\n  }\n\n  // ref: https://stackoverflow.com/a/40031979/1090359\n  static fromBufferToHex(buffer: ArrayBuffer): string {\n    if (Utils.isNode) {\n      return Buffer.from(buffer).toString(\"hex\");\n    } else {\n      const bytes = new Uint8Array(buffer);\n      return Array.prototype.map\n        .call(bytes, (x: number) => (\"00\" + x.toString(16)).slice(-2))\n        .join(\"\");\n    }\n  }\n\n  static fromUrlB64ToB64(urlB64Str: string): string {\n    let output = urlB64Str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n      case 0:\n        break;\n      case 2:\n        output += \"==\";\n        break;\n      case 3:\n        output += \"=\";\n        break;\n      default:\n        throw new Error(\"Illegal base64url string!\");\n    }\n\n    return output;\n  }\n\n  static fromUrlB64ToUtf8(urlB64Str: string): string {\n    return Utils.fromB64ToUtf8(Utils.fromUrlB64ToB64(urlB64Str));\n  }\n\n  static fromUtf8ToB64(utfStr: string): string {\n    if (Utils.isNode) {\n      return Buffer.from(utfStr, \"utf8\").toString(\"base64\");\n    } else {\n      return decodeURIComponent(escape(Utils.global.btoa(utfStr)));\n    }\n  }\n\n  static fromUtf8ToUrlB64(utfStr: string): string {\n    return Utils.fromBufferToUrlB64(Utils.fromUtf8ToArray(utfStr));\n  }\n\n  static fromB64ToUtf8(b64Str: string): string {\n    if (Utils.isNode) {\n      return Buffer.from(b64Str, \"base64\").toString(\"utf8\");\n    } else {\n      return decodeURIComponent(escape(Utils.global.atob(b64Str)));\n    }\n  }\n\n  // ref: http://stackoverflow.com/a/2117523/1090359\n  static newGuid(): string {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n      const r = (Math.random() * 16) | 0;\n      const v = c === \"x\" ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  }\n\n  static isGuid(id: string) {\n    return RegExp(\n      /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/,\n      \"i\"\n    ).test(id);\n  }\n\n  static getHostname(uriString: string): string {\n    if (Utils.isNullOrWhitespace(uriString)) {\n      return null;\n    }\n\n    uriString = uriString.trim();\n\n    if (uriString.startsWith(\"data:\")) {\n      return null;\n    }\n\n    if (uriString.startsWith(\"about:\")) {\n      return null;\n    }\n\n    if (uriString.startsWith(\"file:\")) {\n      return null;\n    }\n\n    // Does uriString contain invalid characters\n    // TODO Needs to possibly be extended, although '!' is a reserved character\n    if (uriString.indexOf(\"!\") > 0) {\n      return null;\n    }\n\n    try {\n      const hostname = getHostname(uriString, { validHosts: this.validHosts });\n      if (hostname != null) {\n        return hostname;\n      }\n    } catch {\n      return null;\n    }\n    return null;\n  }\n\n  static getHost(uriString: string): string {\n    const url = Utils.getUrl(uriString);\n    try {\n      return url != null && url.host !== \"\" ? url.host : null;\n    } catch {\n      return null;\n    }\n  }\n\n  static getDomain(uriString: string): string {\n    if (Utils.isNullOrWhitespace(uriString)) {\n      return null;\n    }\n\n    uriString = uriString.trim();\n\n    if (uriString.startsWith(\"data:\")) {\n      return null;\n    }\n\n    if (uriString.startsWith(\"about:\")) {\n      return null;\n    }\n\n    try {\n      const parseResult = parse(uriString, { validHosts: this.validHosts });\n      if (parseResult != null && parseResult.hostname != null) {\n        if (parseResult.hostname === \"localhost\" || parseResult.isIp) {\n          return parseResult.hostname;\n        }\n\n        if (parseResult.domain != null) {\n          return parseResult.domain;\n        }\n        return null;\n      }\n    } catch {\n      return null;\n    }\n    return null;\n  }\n\n  static getQueryParams(uriString: string): Map<string, string> {\n    const url = Utils.getUrl(uriString);\n    if (url == null || url.search == null || url.search === \"\") {\n      return null;\n    }\n    const map = new Map<string, string>();\n    const pairs = (url.search[0] === \"?\" ? url.search.substr(1) : url.search).split(\"&\");\n    pairs.forEach((pair) => {\n      const parts = pair.split(\"=\");\n      if (parts.length < 1) {\n        return;\n      }\n      map.set(\n        decodeURIComponent(parts[0]).toLowerCase(),\n        parts[1] == null ? \"\" : decodeURIComponent(parts[1])\n      );\n    });\n    return map;\n  }\n\n  static getSortFunction<T>(\n    i18nService: I18nService,\n    prop: { [K in keyof T]: T[K] extends string ? K : never }[keyof T]\n  ): (a: T, b: T) => number {\n    return (a, b) => {\n      if (a[prop] == null && b[prop] != null) {\n        return -1;\n      }\n      if (a[prop] != null && b[prop] == null) {\n        return 1;\n      }\n      if (a[prop] == null && b[prop] == null) {\n        return 0;\n      }\n\n      // The `as unknown as string` here is unfortunate because typescript doesn't property understand that the return of T[prop] will be a string\n      return i18nService.collator\n        ? i18nService.collator.compare(a[prop] as unknown as string, b[prop] as unknown as string)\n        : (a[prop] as unknown as string).localeCompare(b[prop] as unknown as string);\n    };\n  }\n\n  static isNullOrWhitespace(str: string): boolean {\n    return str == null || typeof str !== \"string\" || str.trim() === \"\";\n  }\n\n  static isNullOrEmpty(str: string): boolean {\n    return str == null || typeof str !== \"string\" || str == \"\";\n  }\n\n  static isPromise(obj: any): obj is Promise<unknown> {\n    return (\n      obj != undefined && typeof obj[\"then\"] === \"function\" && typeof obj[\"catch\"] === \"function\"\n    );\n  }\n\n  static nameOf<T>(name: string & keyof T) {\n    return name;\n  }\n\n  static assign<T>(target: T, source: Partial<T>): T {\n    return Object.assign(target, source);\n  }\n\n  static iterateEnum<O extends object, K extends keyof O = keyof O>(obj: O) {\n    return (Object.keys(obj).filter((k) => Number.isNaN(+k)) as K[]).map((k) => obj[k]);\n  }\n\n  static getUrl(uriString: string): URL {\n    if (this.isNullOrWhitespace(uriString)) {\n      return null;\n    }\n\n    uriString = uriString.trim();\n\n    return Utils.getUrlObject(uriString);\n  }\n\n  static camelToPascalCase(s: string) {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n  }\n\n  /**\n   * There are a few ways to calculate text color for contrast, this one seems to fit accessibility guidelines best.\n   * https://stackoverflow.com/a/3943023/6869691\n   *\n   * @param {string} bgColor\n   * @param {number} [threshold] see stackoverflow link above\n   * @param {boolean} [svgTextFill]\n   * Indicates if this method is performed on an SVG <text> 'fill' attribute (e.g. <text fill=\"black\"></text>).\n   * This check is necessary because the '!important' tag cannot be used in a 'fill' attribute.\n   */\n  static pickTextColorBasedOnBgColor(bgColor: string, threshold = 186, svgTextFill = false) {\n    const bgColorHexNums = bgColor.charAt(0) === \"#\" ? bgColor.substring(1, 7) : bgColor;\n    const r = parseInt(bgColorHexNums.substring(0, 2), 16); // hexToR\n    const g = parseInt(bgColorHexNums.substring(2, 4), 16); // hexToG\n    const b = parseInt(bgColorHexNums.substring(4, 6), 16); // hexToB\n    const blackColor = svgTextFill ? \"black\" : \"black !important\";\n    const whiteColor = svgTextFill ? \"white\" : \"white !important\";\n    return r * 0.299 + g * 0.587 + b * 0.114 > threshold ? blackColor : whiteColor;\n  }\n\n  static stringToColor(str: string): string {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    let color = \"#\";\n    for (let i = 0; i < 3; i++) {\n      const value = (hash >> (i * 8)) & 0xff;\n      color += (\"00\" + value.toString(16)).substr(-2);\n    }\n    return color;\n  }\n\n  /**\n   * @throws Will throw an error if the ContainerService has not been attached to the window object\n   */\n  static getContainerService(): BitwardenContainerService {\n    if (this.global.bitwardenContainerService == null) {\n      throw new Error(\"global bitwardenContainerService not initialized.\");\n    }\n    return this.global.bitwardenContainerService;\n  }\n\n  static validateHexColor(color: string) {\n    return /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(color);\n  }\n\n  /**\n   * Converts map to a Record<string, V> with the same data. Inverse of recordToMap\n   * Useful in toJSON methods, since Maps are not serializable\n   * @param map\n   * @returns\n   */\n  static mapToRecord<K extends string | number, V>(map: Map<K, V>): Record<string, V> {\n    if (map == null) {\n      return null;\n    }\n    if (!(map instanceof Map)) {\n      return map;\n    }\n    return Object.fromEntries(map);\n  }\n\n  /**\n   * Converts record to a Map<string, V> with the same data. Inverse of mapToRecord\n   * Useful in fromJSON methods, since Maps are not serializable\n   *\n   * Warning: If the record has string keys that are numbers, they will be converted to numbers in the map\n   * @param record\n   * @returns\n   */\n  static recordToMap<K extends string | number, V>(record: Record<K, V>): Map<K, V> {\n    if (record == null) {\n      return null;\n    } else if (record instanceof Map) {\n      return record;\n    }\n\n    const entries = Object.entries(record);\n    if (entries.length === 0) {\n      return new Map();\n    }\n\n    if (isNaN(Number(entries[0][0]))) {\n      return new Map(entries) as Map<K, V>;\n    } else {\n      return new Map(entries.map((e) => [Number(e[0]), e[1]])) as Map<K, V>;\n    }\n  }\n\n  /** Applies Object.assign, but converts the type nicely using Type-Fest Merge<Destination, Source> */\n  static merge<Destination, Source>(\n    destination: Destination,\n    source: Source\n  ): Merge<Destination, Source> {\n    return Object.assign(destination, source) as unknown as Merge<Destination, Source>;\n  }\n\n  /**\n   * encodeURIComponent escapes all characters except the following:\n   * alphabetic, decimal digits, - _ . ! ~ * ' ( )\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent#encoding_for_rfc3986\n   */\n  static encodeRFC3986URIComponent(str: string): string {\n    return encodeURIComponent(str).replace(\n      /[!'()*]/g,\n      (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`\n    );\n  }\n\n  /**\n   * Normalizes a path for defense against attacks like traversals\n   * @param denormalizedPath\n   * @returns\n   */\n  static normalizePath(denormalizedPath: string): string {\n    return path.normalize(decodeURIComponent(denormalizedPath)).replace(/^(\\.\\.(\\/|\\\\|$))+/, \"\");\n  }\n\n  private static isMobile(win: Window) {\n    let mobile = false;\n    ((a) => {\n      if (\n        /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(\n          a\n        ) ||\n        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n          a.substr(0, 4)\n        )\n      ) {\n        mobile = true;\n      }\n    })(win.navigator.userAgent || win.navigator.vendor || (win as any).opera);\n    return mobile || win.navigator.userAgent.match(/iPad/i) != null;\n  }\n\n  static delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Generate an observable from a function that returns a promise.\n   * Similar to the rxjs function {@link from} with one big exception:\n   * {@link from} will not re-execute the function when observers resubscribe.\n   * {@link Util.asyncToObservable} will execute `generator` for every\n   * subscribe, making it ideal if the value ever needs to be refreshed.\n   * */\n  static asyncToObservable<T>(generator: () => Promise<T>): Observable<T> {\n    return of(undefined).pipe(switchMap(() => generator()));\n  }\n\n  /**\n   * Return the number of days remaining before a target date arrives.\n   * Returns 0 if the day has already passed.\n   */\n  static daysRemaining(targetDate: Date): number {\n    const diffTime = targetDate.getTime() - Date.now();\n    const msPerDay = 86400000;\n    return Math.max(0, Math.floor(diffTime / msPerDay));\n  }\n\n  private static isAppleMobile(win: Window) {\n    return (\n      win.navigator.userAgent.match(/iPhone/i) != null ||\n      win.navigator.userAgent.match(/iPad/i) != null\n    );\n  }\n\n  private static getUrlObject(uriString: string): URL {\n    // All the methods below require a protocol to properly parse a URL string\n    // Assume http if no other protocol is present\n    const hasProtocol = uriString.indexOf(\"://\") > -1;\n    if (!hasProtocol && uriString.indexOf(\".\") > -1) {\n      uriString = \"http://\" + uriString;\n    } else if (!hasProtocol) {\n      return null;\n    }\n\n    try {\n      if (nodeURL != null) {\n        return new nodeURL.URL(uriString);\n      }\n\n      return new URL(uriString);\n    } catch (e) {\n      // Ignore error\n    }\n\n    return null;\n  }\n}\n\nUtils.init();\n","import { PolicyType } from \"../../enums\";\nimport { PolicyResponse } from \"../response/policy.response\";\n\nexport class PolicyData {\n  id: string;\n  organizationId: string;\n  type: PolicyType;\n  data: any;\n  enabled: boolean;\n\n  constructor(response: PolicyResponse) {\n    this.id = response.id;\n    this.organizationId = response.organizationId;\n    this.type = response.type;\n    this.data = response.data;\n    this.enabled = response.enabled;\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { PolicyType } from \"../../enums\";\n\nexport class PolicyResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  type: PolicyType;\n  data: any;\n  enabled: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.data = this.getResponseProperty(\"Data\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n  }\n}\n","export enum OrganizationApiKeyType {\n  Default = 0,\n  BillingSync = 1,\n  Scim = 2,\n}\n","export enum OrganizationConnectionType {\n  CloudBillingSync = 1,\n  Scim = 2,\n}\n","export enum OrganizationUserStatusType {\n  Invited = 0,\n  Accepted = 1,\n  Confirmed = 2,\n  Revoked = -1,\n}\n","export enum OrganizationUserType {\n  Owner = 0,\n  Admin = 1,\n  User = 2,\n  Manager = 3,\n  Custom = 4,\n}\n","export enum PolicyType {\n  TwoFactorAuthentication = 0, // Requires users to have 2fa enabled\n  MasterPassword = 1, // Sets minimum requirements for master password complexity\n  PasswordGenerator = 2, // Sets minimum requirements/default type for generated passwords/passphrases\n  SingleOrg = 3, // Allows users to only be apart of one organization\n  RequireSso = 4, // Requires users to authenticate with SSO\n  PersonalOwnership = 5, // Disables personal vault ownership for adding/cloning items\n  DisableSend = 6, // Disables the ability to create and edit Bitwarden Sends\n  SendOptions = 7, // Sets restrictions or defaults for Bitwarden Sends\n  ResetPassword = 8, // Allows orgs to use reset password : also can enable auto-enrollment during invite flow\n  MaximumVaultTimeout = 9, // Sets the maximum allowed vault timeout\n  DisablePersonalVaultExport = 10, // Disable personal vault export\n  ActivateAutofill = 11, // Activates autofill with page load on the browser extension\n}\n","export enum ProviderUserStatusType {\n  Invited = 0,\n  Accepted = 1,\n  Confirmed = 2,\n  Revoked = -1, // Not used, compile-time support only\n}\n","export enum ProviderUserType {\n  ProviderAdmin = 0,\n  ServiceUser = 1,\n}\n","export enum ScimProviderType {\n  Default = 0,\n  AzureAd = 1,\n  Okta = 2,\n  OneLogin = 3,\n  JumpCloud = 4,\n  GoogleWorkspace = 5,\n  Rippling = 6,\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { ApiService } from \"../../../abstractions/api.service\";\nimport { ListResponse } from \"../../../models/response/list.response\";\nimport { StateService } from \"../../../platform/abstractions/state.service\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { PolicyApiServiceAbstraction } from \"../../abstractions/policy/policy-api.service.abstraction\";\nimport { InternalPolicyService } from \"../../abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"../../enums\";\nimport { PolicyData } from \"../../models/data/policy.data\";\nimport { MasterPasswordPolicyOptions } from \"../../models/domain/master-password-policy-options\";\nimport { PolicyRequest } from \"../../models/request/policy.request\";\nimport { PolicyResponse } from \"../../models/response/policy.response\";\n\nexport class PolicyApiService implements PolicyApiServiceAbstraction {\n  constructor(\n    private policyService: InternalPolicyService,\n    private apiService: ApiService,\n    private stateService: StateService\n  ) {}\n\n  async getPolicy(organizationId: string, type: PolicyType): Promise<PolicyResponse> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/policies/\" + type,\n      null,\n      true,\n      true\n    );\n    return new PolicyResponse(r);\n  }\n\n  async getPolicies(organizationId: string): Promise<ListResponse<PolicyResponse>> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/policies\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, PolicyResponse);\n  }\n\n  async getPoliciesByToken(\n    organizationId: string,\n    token: string,\n    email: string,\n    organizationUserId: string\n  ): Promise<ListResponse<PolicyResponse>> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" +\n        organizationId +\n        \"/policies/token?\" +\n        \"token=\" +\n        encodeURIComponent(token) +\n        \"&email=\" +\n        Utils.encodeRFC3986URIComponent(email) +\n        \"&organizationUserId=\" +\n        organizationUserId,\n      null,\n      false,\n      true\n    );\n    return new ListResponse(r, PolicyResponse);\n  }\n\n  async getPoliciesByInvitedUser(\n    organizationId: string,\n    userId: string\n  ): Promise<ListResponse<PolicyResponse>> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/policies/invited-user?\" + \"userId=\" + userId,\n      null,\n      false,\n      true\n    );\n    return new ListResponse(r, PolicyResponse);\n  }\n\n  async getMasterPasswordPoliciesForInvitedUsers(\n    orgId: string\n  ): Promise<MasterPasswordPolicyOptions> {\n    const userId = await this.stateService.getUserId();\n    const response = await this.getPoliciesByInvitedUser(orgId, userId);\n    const policies = await this.policyService.mapPoliciesFromToken(response);\n    return await firstValueFrom(this.policyService.masterPasswordPolicyOptions$(policies));\n  }\n\n  async putPolicy(organizationId: string, type: PolicyType, request: PolicyRequest): Promise<any> {\n    const r = await this.apiService.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/policies/\" + type,\n      request,\n      true,\n      true\n    );\n    const response = new PolicyResponse(r);\n    const data = new PolicyData(response);\n    await this.policyService.upsert(data);\n  }\n}\n","import { ProviderUserStatusType, ProviderUserType } from \"../../admin-console/enums\";\nimport { ProviderData } from \"../../admin-console/models/data/provider.data\";\n\nexport class Provider {\n  id: string;\n  name: string;\n  status: ProviderUserStatusType;\n  type: ProviderUserType;\n  enabled: boolean;\n  userId: string;\n  useEvents: boolean;\n\n  constructor(obj?: ProviderData) {\n    if (obj == null) {\n      return;\n    }\n\n    this.id = obj.id;\n    this.name = obj.name;\n    this.status = obj.status;\n    this.type = obj.type;\n    this.enabled = obj.enabled;\n    this.userId = obj.userId;\n    this.useEvents = obj.useEvents;\n  }\n\n  get canAccess() {\n    if (this.isProviderAdmin) {\n      return true;\n    }\n    return this.enabled && this.status === ProviderUserStatusType.Confirmed;\n  }\n\n  get canCreateOrganizations() {\n    return this.enabled && this.isProviderAdmin;\n  }\n\n  get canManageUsers() {\n    return this.isProviderAdmin;\n  }\n\n  get canAccessEventLogs() {\n    return this.isProviderAdmin;\n  }\n\n  get isProviderAdmin() {\n    return this.type === ProviderUserType.ProviderAdmin;\n  }\n}\n","import { Provider } from \"../../models/domain/provider\";\nimport { StateService } from \"../../platform/abstractions/state.service\";\nimport { ProviderService as ProviderServiceAbstraction } from \"../abstractions/provider.service\";\nimport { ProviderData } from \"../models/data/provider.data\";\n\nexport class ProviderService implements ProviderServiceAbstraction {\n  constructor(private stateService: StateService) {}\n\n  async get(id: string): Promise<Provider> {\n    const providers = await this.stateService.getProviders();\n    // eslint-disable-next-line\n    if (providers == null || !providers.hasOwnProperty(id)) {\n      return null;\n    }\n\n    return new Provider(providers[id]);\n  }\n\n  async getAll(): Promise<Provider[]> {\n    const providers = await this.stateService.getProviders();\n    const response: Provider[] = [];\n    for (const id in providers) {\n      // eslint-disable-next-line\n      if (providers.hasOwnProperty(id)) {\n        response.push(new Provider(providers[id]));\n      }\n    }\n    return response;\n  }\n\n  async save(providers: { [id: string]: ProviderData }) {\n    await this.stateService.setProviders(providers);\n  }\n}\n","export enum AuthenticationStatus {\n  LoggedOut = 0,\n  Locked = 1,\n  Unlocked = 2,\n}\n","export enum ClientType {\n  Web = \"web\",\n  Browser = \"browser\",\n  Desktop = \"desktop\",\n  // Mobile = \"mobile\",\n  Cli = \"cli\",\n  // DirectoryConnector = \"connector\",\n}\n","export enum DeviceType {\n  Android = 0,\n  iOS = 1,\n  ChromeExtension = 2,\n  FirefoxExtension = 3,\n  OperaExtension = 4,\n  EdgeExtension = 5,\n  WindowsDesktop = 6,\n  MacOsDesktop = 7,\n  LinuxDesktop = 8,\n  ChromeBrowser = 9,\n  FirefoxBrowser = 10,\n  OperaBrowser = 11,\n  EdgeBrowser = 12,\n  IEBrowser = 13,\n  UnknownBrowser = 14,\n  AndroidAmazon = 15,\n  UWP = 16,\n  SafariBrowser = 17,\n  VivaldiBrowser = 18,\n  VivaldiExtension = 19,\n  SafariExtension = 20,\n  SDK = 21,\n  Server = 22,\n}\n\nexport const MobileDeviceTypes: Set<DeviceType> = new Set([\n  DeviceType.Android,\n  DeviceType.iOS,\n  DeviceType.AndroidAmazon,\n]);\n\nexport const DesktopDeviceTypes: Set<DeviceType> = new Set([\n  DeviceType.WindowsDesktop,\n  DeviceType.MacOsDesktop,\n  DeviceType.LinuxDesktop,\n  DeviceType.UWP,\n]);\n","import {\n  BehaviorSubject,\n  Subject,\n  combineLatestWith,\n  map,\n  distinctUntilChanged,\n  shareReplay,\n} from \"rxjs\";\n\nimport { AccountInfo, InternalAccountService } from \"../../auth/abstractions/account.service\";\nimport { LogService } from \"../../platform/abstractions/log.service\";\nimport { MessagingService } from \"../../platform/abstractions/messaging.service\";\nimport { UserId } from \"../../types/guid\";\nimport { AuthenticationStatus } from \"../enums/authentication-status\";\n\nexport class AccountServiceImplementation implements InternalAccountService {\n  private accounts = new BehaviorSubject<Record<UserId, AccountInfo>>({});\n  private activeAccountId = new BehaviorSubject<UserId | undefined>(undefined);\n  private lock = new Subject<UserId>();\n  private logout = new Subject<UserId>();\n\n  accounts$ = this.accounts.asObservable();\n  activeAccount$ = this.activeAccountId.pipe(\n    combineLatestWith(this.accounts$),\n    map(([id, accounts]) => (id ? { id, ...accounts[id] } : undefined)),\n    distinctUntilChanged(),\n    shareReplay({ bufferSize: 1, refCount: false })\n  );\n  accountLock$ = this.lock.asObservable();\n  accountLogout$ = this.logout.asObservable();\n  constructor(private messagingService: MessagingService, private logService: LogService) {}\n\n  addAccount(userId: UserId, accountData: AccountInfo): void {\n    this.accounts.value[userId] = accountData;\n    this.accounts.next(this.accounts.value);\n  }\n\n  setAccountName(userId: UserId, name: string): void {\n    this.setAccountInfo(userId, { ...this.accounts.value[userId], name });\n  }\n\n  setAccountEmail(userId: UserId, email: string): void {\n    this.setAccountInfo(userId, { ...this.accounts.value[userId], email });\n  }\n\n  setAccountStatus(userId: UserId, status: AuthenticationStatus): void {\n    this.setAccountInfo(userId, { ...this.accounts.value[userId], status });\n\n    if (status === AuthenticationStatus.LoggedOut) {\n      this.logout.next(userId);\n    } else if (status === AuthenticationStatus.Locked) {\n      this.lock.next(userId);\n    }\n  }\n\n  switchAccount(userId: UserId) {\n    if (userId == null) {\n      // indicates no account is active\n      this.activeAccountId.next(undefined);\n      return;\n    }\n\n    if (this.accounts.value[userId] == null) {\n      throw new Error(\"Account does not exist\");\n    }\n    this.activeAccountId.next(userId);\n  }\n\n  // TODO: update to use our own account status settings. Requires inverting direction of state service accounts flow\n  async delete(): Promise<void> {\n    try {\n      this.messagingService?.send(\"logout\");\n    } catch (e) {\n      this.logService.error(e);\n      throw e;\n    }\n  }\n\n  private setAccountInfo(userId: UserId, accountInfo: AccountInfo) {\n    if (this.accounts.value[userId] == null) {\n      throw new Error(\"Account does not exist\");\n    }\n\n    // Avoid unnecessary updates\n    // TODO: Faster comparison, maybe include a hash on the objects?\n    if (JSON.stringify(this.accounts.value[userId]) === JSON.stringify(accountInfo)) {\n      return;\n    }\n\n    this.accounts.value[userId] = accountInfo;\n    this.accounts.next(this.accounts.value);\n  }\n}\n","export enum EncryptedExportType {\n  AccountEncrypted = 0,\n  FileEncrypted = 1,\n}\n","export enum EncryptionType {\n  AesCbc256_B64 = 0,\n  AesCbc128_HmacSha256_B64 = 1,\n  AesCbc256_HmacSha256_B64 = 2,\n  Rsa2048_OaepSha256_B64 = 3,\n  Rsa2048_OaepSha1_B64 = 4,\n  Rsa2048_OaepSha256_HmacSha256_B64 = 5,\n  Rsa2048_OaepSha1_HmacSha256_B64 = 6,\n}\n\n/** The expected number of parts to a serialized EncString of the given encryption type.\n * For example, an EncString of type AesCbc256_B64 will have 2 parts, and an EncString of type\n * AesCbc128_HmacSha256_B64 will have 3 parts.\n *\n * Example of annotated serialized EncStrings:\n * 0.iv|data\n * 1.iv|data|mac\n * 2.iv|data|mac\n * 3.data\n * 4.data\n *\n * @see EncString\n * @see EncryptionType\n * @see EncString.parseEncryptedString\n */\nexport const EXPECTED_NUM_PARTS_BY_ENCRYPTION_TYPE = {\n  [EncryptionType.AesCbc256_B64]: 2,\n  [EncryptionType.AesCbc128_HmacSha256_B64]: 3,\n  [EncryptionType.AesCbc256_HmacSha256_B64]: 3,\n  [EncryptionType.Rsa2048_OaepSha256_B64]: 1,\n  [EncryptionType.Rsa2048_OaepSha1_B64]: 1,\n  [EncryptionType.Rsa2048_OaepSha256_HmacSha256_B64]: 2,\n  [EncryptionType.Rsa2048_OaepSha1_HmacSha256_B64]: 2,\n};\n","// Note: the enum key is used to describe the EventSystemUser in the UI. Be careful about changing it.\nexport enum EventSystemUser {\n  SCIM = 1,\n  DomainVerification = 2,\n}\n","// Increment by 100 for each new set of events\nexport enum EventType {\n  User_LoggedIn = 1000,\n  User_ChangedPassword = 1001,\n  User_Updated2fa = 1002,\n  User_Disabled2fa = 1003,\n  User_Recovered2fa = 1004,\n  User_FailedLogIn = 1005,\n  User_FailedLogIn2fa = 1006,\n  User_ClientExportedVault = 1007,\n  User_UpdatedTempPassword = 1008,\n  User_MigratedKeyToKeyConnector = 1009,\n  User_RequestedDeviceApproval = 1010,\n\n  Cipher_Created = 1100,\n  Cipher_Updated = 1101,\n  Cipher_Deleted = 1102,\n  Cipher_AttachmentCreated = 1103,\n  Cipher_AttachmentDeleted = 1104,\n  Cipher_Shared = 1105,\n  Cipher_UpdatedCollections = 1106,\n  Cipher_ClientViewed = 1107,\n  Cipher_ClientToggledPasswordVisible = 1108,\n  Cipher_ClientToggledHiddenFieldVisible = 1109,\n  Cipher_ClientToggledCardCodeVisible = 1110,\n  Cipher_ClientCopiedPassword = 1111,\n  Cipher_ClientCopiedHiddenField = 1112,\n  Cipher_ClientCopiedCardCode = 1113,\n  Cipher_ClientAutofilled = 1114,\n  Cipher_SoftDeleted = 1115,\n  Cipher_Restored = 1116,\n  Cipher_ClientToggledCardNumberVisible = 1117,\n\n  Collection_Created = 1300,\n  Collection_Updated = 1301,\n  Collection_Deleted = 1302,\n\n  Group_Created = 1400,\n  Group_Updated = 1401,\n  Group_Deleted = 1402,\n\n  OrganizationUser_Invited = 1500,\n  OrganizationUser_Confirmed = 1501,\n  OrganizationUser_Updated = 1502,\n  OrganizationUser_Removed = 1503,\n  OrganizationUser_UpdatedGroups = 1504,\n  OrganizationUser_UnlinkedSso = 1505,\n  OrganizationUser_ResetPassword_Enroll = 1506,\n  OrganizationUser_ResetPassword_Withdraw = 1507,\n  OrganizationUser_AdminResetPassword = 1508,\n  OrganizationUser_ResetSsoLink = 1509,\n  OrganizationUser_FirstSsoLogin = 1510,\n  OrganizationUser_Revoked = 1511,\n  OrganizationUser_Restored = 1512,\n  OrganizationUser_ApprovedAuthRequest = 1513,\n  OrganizationUser_RejectedAuthRequest = 1514,\n\n  Organization_Updated = 1600,\n  Organization_PurgedVault = 1601,\n  Organization_ClientExportedVault = 1602,\n  Organization_VaultAccessed = 1603,\n  Organization_EnabledSso = 1604,\n  Organization_DisabledSso = 1605,\n  Organization_EnabledKeyConnector = 1606,\n  Organization_DisabledKeyConnector = 1607,\n  Organization_SponsorshipsSynced = 1608,\n\n  Policy_Updated = 1700,\n\n  ProviderUser_Invited = 1800,\n  ProviderUser_Confirmed = 1801,\n  ProviderUser_Updated = 1802,\n  ProviderUser_Removed = 1803,\n\n  ProviderOrganization_Created = 1900,\n  ProviderOrganization_Added = 1901,\n  ProviderOrganization_Removed = 1902,\n  ProviderOrganization_VaultAccessed = 1903,\n\n  OrganizationDomain_Added = 2000,\n  OrganizationDomain_Removed = 2001,\n  OrganizationDomain_Verified = 2002,\n  OrganizationDomain_NotVerified = 2003,\n\n  Secret_Retrieved = 2100,\n}\n","export enum FieldType {\n  Text = 0,\n  Hidden = 1,\n  Boolean = 2,\n  Linked = 3,\n}\n","export enum FileUploadType {\n  Direct = 0,\n  Azure = 1,\n}\n","export enum HashPurpose {\n  ServerAuthorization = 1,\n  LocalAuthorization = 2,\n}\n","export enum HtmlStorageLocation {\n  Local = \"local\",\n  Memory = \"memory\",\n  Session = \"session\",\n}\n","/**\n * Hypertext Transfer Protocol (HTTP) response status codes.\n *\n * @see {@link https://en.wikipedia.org/wiki/List_of_HTTP_status_codes}\n * src: https://gist.github.com/RWOverdijk/6cef816cfdf5722228e01cc05fd4b094\n */\nexport enum HttpStatusCode {\n  /**\n   * The server has received the request headers and the client should proceed to send the request body\n   * (in the case of a request for which a body needs to be sent; for example, a POST request).\n   * Sending a large request body to a server after a request has been rejected for inappropriate headers would be inefficient.\n   * To have a server check the request's headers, a client must send Expect: 100-continue as a header in its initial request\n   * and receive a 100 Continue status code in response before sending the body. The response 417 Expectation Failed indicates the request should not be continued.\n   */\n  Continue = 100,\n\n  /**\n   * The requester has asked the server to switch protocols and the server has agreed to do so.\n   */\n  SwitchingProtocols = 101,\n\n  /**\n   * A WebDAV request may contain many sub-requests involving file operations, requiring a long time to complete the request.\n   * This code indicates that the server has received and is processing the request, but no response is available yet.\n   * This prevents the client from timing out and assuming the request was lost.\n   */\n  Processing = 102,\n\n  // **********************************************************************************************************\n  // 200s - SUCCESS\n  // **********************************************************************************************************\n\n  /**\n   * Standard response for successful HTTP requests.\n   * The actual response will depend on the request method used.\n   * In a GET request, the response will contain an entity corresponding to the requested resource.\n   * In a POST request, the response will contain an entity describing or containing the result of the action.\n   */\n  Ok = 200,\n\n  /**\n   * The request has been fulfilled, resulting in the creation of a new resource.\n   */\n  Created = 201,\n\n  /**\n   * The request has been accepted for processing, but the processing has not been completed.\n   * The request might or might not be eventually acted upon, and may be disallowed when processing occurs.\n   */\n  Accepted = 202,\n\n  /**\n   * SINCE HTTP/1.1\n   * The server is a transforming proxy that received a 200 OK from its origin,\n   * but is returning a modified version of the origin's response.\n   */\n  NonAuthoritativeInformation = 203,\n\n  /**\n   * The server successfully processed the request and is not returning any content.\n   */\n  NoContent = 204,\n\n  /**\n   * The server successfully processed the request, but is not returning any content.\n   * Unlike a 204 response, this response requires that the requester reset the document view.\n   */\n  ResetContent = 205,\n\n  /**\n   * The server is delivering only part of the resource (byte serving) due to a range header sent by the client.\n   * The range header is used by HTTP clients to enable resuming of interrupted downloads,\n   * or split a download into multiple simultaneous streams.\n   */\n  PartialContent = 206,\n\n  /**\n   * The message body that follows is an XML message and can contain a number of separate response codes,\n   * depending on how many sub-requests were made.\n   */\n  MultiStatus = 207,\n\n  /**\n   * The members of a DAV binding have already been enumerated in a preceding part of the (multistatus) response,\n   * and are not being included again.\n   */\n  AlreadyReported = 208,\n\n  /**\n   * The server has fulfilled a request for the resource,\n   * and the response is a representation of the result of one or more instance-manipulations applied to the current instance.\n   */\n  ImUsed = 226,\n\n  // **********************************************************************************************************\n  // 300s - Redirections\n  // **********************************************************************************************************\n\n  /**\n   * Indicates multiple options for the resource from which the client may choose (via agent-driven content negotiation).\n   * For example, this code could be used to present multiple video format options,\n   * to list files with different filename extensions, or to suggest word-sense disambiguation.\n   */\n  MultipleChoices = 300,\n\n  /**\n   * This and all future requests should be directed to the given URI.\n   */\n  MovedPermanently = 301,\n\n  /**\n   * This is an example of industry practice contradicting the standard.\n   * The HTTP/1.0 specification (RFC 1945) required the client to perform a temporary redirect\n   * (the original describing phrase was \"Moved Temporarily\"), but popular browsers implemented 302\n   * with the functionality of a 303 See Other. Therefore, HTTP/1.1 added status codes 303 and 307\n   * to distinguish between the two behaviours. However, some Web applications and frameworks\n   * use the 302 status code as if it were the 303.\n   */\n  Found = 302,\n\n  /**\n   * SINCE HTTP/1.1\n   * The response to the request can be found under another URI using a GET method.\n   * When received in response to a POST (or PUT/DELETE), the client should presume that\n   * the server has received the data and should issue a redirect with a separate GET message.\n   */\n  SeeOther = 303,\n\n  /**\n   * Indicates that the resource has not been modified since the version specified by the request headers If-Modified-Since or If-None-Match.\n   * In such case, there is no need to retransmit the resource since the client still has a previously-downloaded copy.\n   */\n  NotModified = 304,\n\n  /**\n   * SINCE HTTP/1.1\n   * The requested resource is available only through a proxy, the address for which is provided in the response.\n   * Many HTTP clients (such as Mozilla and Internet Explorer) do not correctly handle responses with this status code, primarily for security reasons.\n   */\n  UseProxy = 305,\n\n  /**\n   * No longer used. Originally meant \"Subsequent requests should use the specified proxy.\"\n   */\n  SwitchProxy = 306,\n\n  /**\n   * SINCE HTTP/1.1\n   * In this case, the request should be repeated with another URI; however, future requests should still use the original URI.\n   * In contrast to how 302 was historically implemented, the request method is not allowed to be changed when reissuing the original request.\n   * For example, a POST request should be repeated using another POST request.\n   */\n  TemporaryRedirect = 307,\n\n  /**\n   * The request and all future requests should be repeated using another URI.\n   * 307 and 308 parallel the behaviors of 302 and 301, but do not allow the HTTP method to change.\n   * So, for example, submitting a form to a permanently redirected resource may continue smoothly.\n   */\n  PermanentRedirect = 308,\n\n  // **********************************************************************************************************\n  // 400s - Client / User messed up\n  // **********************************************************************************************************\n\n  /**\n   * The server cannot or will not process the request due to an apparent client error\n   * (e.g., malformed request syntax, too large size, invalid request message framing, or deceptive request routing).\n   */\n  BadRequest = 400,\n\n  /**\n   * Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet\n   * been provided. The response must include a WWW-Authenticate header field containing a challenge applicable to the\n   * requested resource. See Basic access authentication and Digest access authentication. 401 semantically means\n   * \"unauthenticated\",i.e. the user does not have the necessary credentials.\n   */\n  Unauthorized = 401,\n\n  /**\n   * Reserved for future use. The original intention was that this code might be used as part of some form of digital\n   * cash or micro payment scheme, but that has not happened, and this code is not usually used.\n   * Google Developers API uses this status if a particular developer has exceeded the daily limit on requests.\n   */\n  PaymentRequired = 402,\n\n  /**\n   * The request was valid, but the server is refusing action.\n   * The user might not have the necessary permissions for a resource.\n   */\n  Forbidden = 403,\n\n  /**\n   * The requested resource could not be found but may be available in the future.\n   * Subsequent requests by the client are permissible.\n   */\n  NotFound = 404,\n\n  /**\n   * A request method is not supported for the requested resource;\n   * for example, a GET request on a form that requires data to be presented via POST, or a PUT request on a read-only resource.\n   */\n  MethodNotAllowed = 405,\n\n  /**\n   * The requested resource is capable of generating only content not acceptable according to the Accept headers sent in the request.\n   */\n  NotAcceptable = 406,\n\n  /**\n   * The client must first authenticate itself with the proxy.\n   */\n  ProxyAuthenticationRequired = 407,\n\n  /**\n   * The server timed out waiting for the request.\n   * According to HTTP specifications:\n   * \"The client did not produce a request within the time that the server was prepared to wait. The client MAY repeat the request without modifications at any later time.\"\n   */\n  RequestTimeout = 408,\n\n  /**\n   * Indicates that the request could not be processed because of conflict in the request,\n   * such as an edit conflict between multiple simultaneous updates.\n   */\n  Conflict = 409,\n\n  /**\n   * Indicates that the resource requested is no longer available and will not be available again.\n   * This should be used when a resource has been intentionally removed and the resource should be purged.\n   * Upon receiving a 410 status code, the client should not request the resource in the future.\n   * Clients such as search engines should remove the resource from their indices.\n   * Most use cases do not require clients and search engines to purge the resource, and a \"404 Not Found\" may be used instead.\n   */\n  Gone = 410,\n\n  /**\n   * The request did not specify the length of its content, which is required by the requested resource.\n   */\n  LengthRequired = 411,\n\n  /**\n   * The server does not meet one of the preconditions that the requester put on the request.\n   */\n  PreconditionFailed = 412,\n\n  /**\n   * The request is larger than the server is willing or able to process. Previously called \"Request Entity Too Large\".\n   */\n  PayloadTooLarge = 413,\n\n  /**\n   * The URI provided was too long for the server to process. Often the result of too much data being encoded as a query-string of a GET request,\n   * in which case it should be converted to a POST request.\n   * Called \"Request-URI Too Long\" previously.\n   */\n  UriTooLong = 414,\n\n  /**\n   * The request entity has a media type which the server or resource does not support.\n   * For example, the client uploads an image as image/svg+xml, but the server requires that images use a different format.\n   */\n  UnsupportedMediaType = 415,\n\n  /**\n   * The client has asked for a portion of the file (byte serving), but the server cannot supply that portion.\n   * For example, if the client asked for a part of the file that lies beyond the end of the file.\n   * Called \"Requested Range Not Satisfiable\" previously.\n   */\n  RangeNotSatisfiable = 416,\n\n  /**\n   * The server cannot meet the requirements of the Expect request-header field.\n   */\n  ExpectationFailed = 417,\n\n  /**\n   * This code was defined in 1998 as one of the traditional IETF April Fools' jokes, in RFC 2324, Hyper Text Coffee Pot Control Protocol,\n   * and is not expected to be implemented by actual HTTP servers. The RFC specifies this code should be returned by\n   * teapots requested to brew coffee. This HTTP status is used as an Easter egg in some websites, including Google.com.\n   */\n  IAmATeapot = 418,\n\n  /**\n   * The request was directed at a server that is not able to produce a response (for example because a connection reuse).\n   */\n  MisdirectedRequest = 421,\n\n  /**\n   * The request was well-formed but was unable to be followed due to semantic errors.\n   */\n  UnprocessableEntity = 422,\n\n  /**\n   * The resource that is being accessed is locked.\n   */\n  Locked = 423,\n\n  /**\n   * The request failed due to failure of a previous request (e.g., a PROPPATCH).\n   */\n  FailedDependency = 424,\n\n  /**\n   * The client should switch to a different protocol such as TLS/1.0, given in the Upgrade header field.\n   */\n  UpgradeRequired = 426,\n\n  /**\n   * The origin server requires the request to be conditional.\n   * Intended to prevent \"the 'lost update' problem, where a client\n   * GETs a resource's state, modifies it, and PUTs it back to the server,\n   * when meanwhile a third party has modified the state on the server, leading to a conflict.\"\n   */\n  PreconditionRequired = 428,\n\n  /**\n   * The user has sent too many requests in a given amount of time. Intended for use with rate-limiting schemes.\n   */\n  TooManyRequests = 429,\n\n  /**\n   * The server is unwilling to process the request because either an individual header field,\n   * or all the header fields collectively, are too large.\n   */\n  RequestHeaderFieldsTooLarge = 431,\n\n  /**\n   * A server operator has received a legal demand to deny access to a resource or to a set of resources\n   * that includes the requested resource. The code 451 was chosen as a reference to the novel Fahrenheit 451.\n   */\n  UnavailableForLegalReasons = 451,\n\n  // **********************************************************************************************************\n  // 500s - Server messed up\n  // **********************************************************************************************************\n\n  /**\n   * A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.\n   */\n  InternalServerError = 500,\n\n  /**\n   * The server either does not recognize the request method, or it lacks the ability to fulfill the request.\n   * Usually this implies future availability (e.g., a new feature of a web-service API).\n   */\n  NotImplemented = 501,\n\n  /**\n   * The server was acting as a gateway or proxy and received an invalid response from the upstream server.\n   */\n  BadGateway = 502,\n\n  /**\n   * The server is currently unavailable (because it is overloaded or down for maintenance).\n   * Generally, this is a temporary state.\n   */\n  ServiceUnavailable = 503,\n\n  /**\n   * The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.\n   */\n  GatewayTimeout = 504,\n\n  /**\n   * The server does not support the HTTP protocol version used in the request\n   */\n  HttpVersionNotSupported = 505,\n\n  /**\n   * Transparent content negotiation for the request results in a circular reference.\n   */\n  VariantAlsoNegotiates = 506,\n\n  /**\n   * The server is unable to store the representation needed to complete the request.\n   */\n  InsufficientStorage = 507,\n\n  /**\n   * The server detected an infinite loop while processing the request.\n   */\n  LoopDetected = 508,\n\n  /**\n   * Further extensions to the request are required for the server to fulfill it.\n   */\n  NotExtended = 510,\n\n  /**\n   * The client needs to authenticate to gain network access.\n   * Intended for use by intercepting proxies used to control access to the network (e.g., \"captive portals\" used\n   * to require agreement to Terms of Service before granting full Internet access via a Wi-Fi hotspot).\n   */\n  NetworkAuthenticationRequired = 511,\n}\n","import { KdfConfig } from \"../auth/models/domain/kdf-config\";\n\nexport enum KdfType {\n  PBKDF2_SHA256 = 0,\n  Argon2id = 1,\n}\n\nexport const DEFAULT_ARGON2_MEMORY = 64;\nexport const DEFAULT_ARGON2_PARALLELISM = 4;\nexport const DEFAULT_ARGON2_ITERATIONS = 3;\n\nexport const DEFAULT_KDF_TYPE = KdfType.PBKDF2_SHA256;\nexport const DEFAULT_PBKDF2_ITERATIONS = 600000;\nexport const DEFAULT_KDF_CONFIG = new KdfConfig(DEFAULT_PBKDF2_ITERATIONS);\nexport const SEND_KDF_ITERATIONS = 100000;\n","export class KdfConfig {\n  iterations: number;\n  memory?: number;\n  parallelism?: number;\n\n  constructor(iterations: number, memory?: number, parallelism?: number) {\n    this.iterations = iterations;\n    this.memory = memory;\n    this.parallelism = parallelism;\n  }\n}\n","export enum KeySuffixOptions {\n  Auto = \"auto\",\n  Biometric = \"biometric\",\n  Pin = \"pin\",\n}\n","export type LinkedIdType = LoginLinkedId | CardLinkedId | IdentityLinkedId;\n\n// LoginView\nexport enum LoginLinkedId {\n  Username = 100,\n  Password = 101,\n}\n\n// CardView\nexport enum CardLinkedId {\n  CardholderName = 300,\n  ExpMonth = 301,\n  ExpYear = 302,\n  Code = 303,\n  Brand = 304,\n  Number = 305,\n}\n\n// IdentityView\nexport enum IdentityLinkedId {\n  Title = 400,\n  MiddleName = 401,\n  Address1 = 402,\n  Address2 = 403,\n  Address3 = 404,\n  City = 405,\n  State = 406,\n  PostalCode = 407,\n  Country = 408,\n  Company = 409,\n  Email = 410,\n  Phone = 411,\n  Ssn = 412,\n  Username = 413,\n  PassportNumber = 414,\n  LicenseNumber = 415,\n  FirstName = 416,\n  LastName = 417,\n  FullName = 418,\n}\n","export enum LogLevelType {\n  Debug,\n  Info,\n  Warning,\n  Error,\n}\n","export enum NativeMessagingVersion {\n  One = 1, // Original implementation\n  Latest = One,\n}\n","export enum NotificationType {\n  SyncCipherUpdate = 0,\n  SyncCipherCreate = 1,\n  SyncLoginDelete = 2,\n  SyncFolderDelete = 3,\n  SyncCiphers = 4,\n\n  SyncVault = 5,\n  SyncOrgKeys = 6,\n  SyncFolderCreate = 7,\n  SyncFolderUpdate = 8,\n  SyncCipherDelete = 9,\n  SyncSettings = 10,\n\n  LogOut = 11,\n\n  SyncSendCreate = 12,\n  SyncSendUpdate = 13,\n  SyncSendDelete = 14,\n\n  AuthRequest = 15,\n  AuthRequestResponse = 16,\n}\n","export enum ProductType {\n  Free = 0,\n  Families = 1,\n  Teams = 2,\n  Enterprise = 3,\n}\n","export enum ProviderType {\n  Msp = 0,\n  Reseller = 1,\n}\n","export enum SecureNoteType {\n  Generic = 0,\n}\n","export enum StorageLocation {\n  Both = \"both\",\n  Disk = \"disk\",\n  Memory = \"memory\",\n}\n","export enum ThemeType {\n  System = \"system\",\n  Light = \"light\",\n  Dark = \"dark\",\n  Nord = \"nord\",\n  SolarizedDark = \"solarizedDark\",\n}\n","export enum UriMatchType {\n  Domain = 0,\n  Host = 1,\n  StartsWith = 2,\n  Exact = 3,\n  RegularExpression = 4,\n  Never = 5,\n}\n","import { Jsonify, Opaque } from \"type-fest\";\n\nimport { EncryptionType } from \"../../../enums\";\nimport { Utils } from \"../../../platform/misc/utils\";\n\nexport class SymmetricCryptoKey {\n  key: Uint8Array;\n  encKey?: Uint8Array;\n  macKey?: Uint8Array;\n  encType: EncryptionType;\n\n  keyB64: string;\n  encKeyB64: string;\n  macKeyB64: string;\n\n  meta: any;\n\n  constructor(key: Uint8Array, encType?: EncryptionType) {\n    if (key == null) {\n      throw new Error(\"Must provide key\");\n    }\n\n    if (encType == null) {\n      if (key.byteLength === 32) {\n        encType = EncryptionType.AesCbc256_B64;\n      } else if (key.byteLength === 64) {\n        encType = EncryptionType.AesCbc256_HmacSha256_B64;\n      } else {\n        throw new Error(\"Unable to determine encType.\");\n      }\n    }\n\n    this.key = key;\n    this.encType = encType;\n\n    if (encType === EncryptionType.AesCbc256_B64 && key.byteLength === 32) {\n      this.encKey = key;\n      this.macKey = null;\n    } else if (encType === EncryptionType.AesCbc128_HmacSha256_B64 && key.byteLength === 32) {\n      this.encKey = key.slice(0, 16);\n      this.macKey = key.slice(16, 32);\n    } else if (encType === EncryptionType.AesCbc256_HmacSha256_B64 && key.byteLength === 64) {\n      this.encKey = key.slice(0, 32);\n      this.macKey = key.slice(32, 64);\n    } else {\n      throw new Error(\"Unsupported encType/key length.\");\n    }\n\n    if (this.key != null) {\n      this.keyB64 = Utils.fromBufferToB64(this.key);\n    }\n    if (this.encKey != null) {\n      this.encKeyB64 = Utils.fromBufferToB64(this.encKey);\n    }\n    if (this.macKey != null) {\n      this.macKeyB64 = Utils.fromBufferToB64(this.macKey);\n    }\n  }\n\n  toJSON() {\n    // The whole object is constructed from the initial key, so just store the B64 key\n    return { keyB64: this.keyB64 };\n  }\n\n  static fromString(s: string): SymmetricCryptoKey {\n    if (s == null) {\n      return null;\n    }\n\n    const arrayBuffer = Utils.fromB64ToArray(s);\n    return new SymmetricCryptoKey(arrayBuffer);\n  }\n\n  static fromJSON(obj: Jsonify<SymmetricCryptoKey>): SymmetricCryptoKey {\n    return SymmetricCryptoKey.fromString(obj?.keyB64);\n  }\n}\n\n// Setup all separate key types as opaque types\nexport type DeviceKey = Opaque<SymmetricCryptoKey, \"DeviceKey\">;\nexport type UserKey = Opaque<SymmetricCryptoKey, \"UserKey\">;\nexport type MasterKey = Opaque<SymmetricCryptoKey, \"MasterKey\">;\nexport type PinKey = Opaque<SymmetricCryptoKey, \"PinKey\">;\nexport type OrgKey = Opaque<SymmetricCryptoKey, \"OrgKey\">;\nexport type ProviderKey = Opaque<SymmetricCryptoKey, \"ProviderKey\">;\nexport type CipherKey = Opaque<SymmetricCryptoKey, \"CipherKey\">;\n","export enum AuthenticationType {\n  Password = 0,\n  Sso = 1,\n  UserApi = 2,\n  Passwordless = 3,\n}\n","import { CryptoService } from \"../../platform/abstractions/crypto.service\";\nimport { Utils } from \"../../platform/misc/utils\";\nimport {\n  UserKey,\n  SymmetricCryptoKey,\n  MasterKey,\n} from \"../../platform/models/domain/symmetric-crypto-key\";\nimport { AuthRequestCryptoServiceAbstraction } from \"../abstractions/auth-request-crypto.service.abstraction\";\nimport { AuthRequestResponse } from \"../models/response/auth-request.response\";\n\nexport class AuthRequestCryptoServiceImplementation implements AuthRequestCryptoServiceAbstraction {\n  constructor(private cryptoService: CryptoService) {}\n\n  async setUserKeyAfterDecryptingSharedUserKey(\n    authReqResponse: AuthRequestResponse,\n    authReqPrivateKey: Uint8Array\n  ) {\n    const userKey = await this.decryptPubKeyEncryptedUserKey(\n      authReqResponse.key,\n      authReqPrivateKey\n    );\n    await this.cryptoService.setUserKey(userKey);\n  }\n\n  async setKeysAfterDecryptingSharedMasterKeyAndHash(\n    authReqResponse: AuthRequestResponse,\n    authReqPrivateKey: Uint8Array\n  ) {\n    const { masterKey, masterKeyHash } = await this.decryptPubKeyEncryptedMasterKeyAndHash(\n      authReqResponse.key,\n      authReqResponse.masterPasswordHash,\n      authReqPrivateKey\n    );\n\n    // Decrypt and set user key in state\n    const userKey = await this.cryptoService.decryptUserKeyWithMasterKey(masterKey);\n\n    // Set masterKey + masterKeyHash in state after decryption (in case decryption fails)\n    await this.cryptoService.setMasterKey(masterKey);\n    await this.cryptoService.setMasterKeyHash(masterKeyHash);\n\n    await this.cryptoService.setUserKey(userKey);\n  }\n\n  // Decryption helpers\n  async decryptPubKeyEncryptedUserKey(\n    pubKeyEncryptedUserKey: string,\n    privateKey: Uint8Array\n  ): Promise<UserKey> {\n    const decryptedUserKeyBytes = await this.cryptoService.rsaDecrypt(\n      pubKeyEncryptedUserKey,\n      privateKey\n    );\n\n    return new SymmetricCryptoKey(decryptedUserKeyBytes) as UserKey;\n  }\n\n  async decryptPubKeyEncryptedMasterKeyAndHash(\n    pubKeyEncryptedMasterKey: string,\n    pubKeyEncryptedMasterKeyHash: string,\n    privateKey: Uint8Array\n  ): Promise<{ masterKey: MasterKey; masterKeyHash: string }> {\n    const decryptedMasterKeyArrayBuffer = await this.cryptoService.rsaDecrypt(\n      pubKeyEncryptedMasterKey,\n      privateKey\n    );\n\n    const decryptedMasterKeyHashArrayBuffer = await this.cryptoService.rsaDecrypt(\n      pubKeyEncryptedMasterKeyHash,\n      privateKey\n    );\n\n    const masterKey = new SymmetricCryptoKey(decryptedMasterKeyArrayBuffer) as MasterKey;\n    const masterKeyHash = Utils.fromBufferToUtf8(decryptedMasterKeyHashArrayBuffer);\n\n    return {\n      masterKey,\n      masterKeyHash,\n    };\n  }\n}\n","export class PreloginRequest {\n  email: string;\n\n  constructor(email: string) {\n    this.email = email;\n  }\n}\n","import { Utils } from \"../../platform/misc/utils\";\n\nimport { BaseResponse } from \"./base.response\";\n\nexport class ErrorResponse extends BaseResponse {\n  message: string;\n  validationErrors: { [key: string]: string[] };\n  statusCode: number;\n  captchaRequired: boolean;\n  captchaSiteKey: string;\n\n  constructor(response: any, status: number, identityResponse?: boolean) {\n    super(response);\n    let errorModel = null;\n    if (response != null) {\n      const responseErrorModel = this.getResponseProperty(\"ErrorModel\");\n      if (responseErrorModel && identityResponse) {\n        errorModel = responseErrorModel;\n      } else {\n        errorModel = response;\n      }\n    }\n\n    if (status === 429) {\n      this.message = \"Rate limit exceeded. Try again later.\";\n    } else if (errorModel) {\n      this.message = this.getResponseProperty(\"Message\", errorModel);\n      this.validationErrors = this.getResponseProperty(\"ValidationErrors\", errorModel);\n      this.captchaSiteKey = this.validationErrors?.HCaptcha_SiteKey?.[0];\n      this.captchaRequired = !Utils.isNullOrWhitespace(this.captchaSiteKey);\n    }\n    this.statusCode = status;\n  }\n\n  getSingleMessage(): string {\n    if (this.validationErrors == null) {\n      return this.message;\n    }\n    for (const key in this.validationErrors) {\n      // eslint-disable-next-line\n      if (!this.validationErrors.hasOwnProperty(key)) {\n        continue;\n      }\n      if (this.validationErrors[key].length) {\n        return this.validationErrors[key][0];\n      }\n    }\n    return this.message;\n  }\n\n  getAllMessages(): string[] {\n    const messages: string[] = [];\n    if (this.validationErrors == null) {\n      return messages;\n    }\n    for (const key in this.validationErrors) {\n      // eslint-disable-next-line\n      if (!this.validationErrors.hasOwnProperty(key)) {\n        continue;\n      }\n      this.validationErrors[key].forEach((item: string) => {\n        let prefix = \"\";\n        if (key.indexOf(\"[\") > -1 && key.indexOf(\"]\") > -1) {\n          const lastSep = key.lastIndexOf(\".\");\n          prefix = key.substr(0, lastSep > -1 ? lastSep : key.length) + \": \";\n        }\n        messages.push(prefix + item);\n      });\n    }\n    return messages;\n  }\n}\n","import { Jsonify, Opaque } from \"type-fest\";\n\nimport { EncryptionType, EXPECTED_NUM_PARTS_BY_ENCRYPTION_TYPE } from \"../../../enums\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { Encrypted } from \"../../interfaces/encrypted\";\n\nimport { SymmetricCryptoKey } from \"./symmetric-crypto-key\";\n\nexport class EncString implements Encrypted {\n  encryptedString?: EncryptedString;\n  encryptionType?: EncryptionType;\n  decryptedValue?: string;\n  data?: string;\n  iv?: string;\n  mac?: string;\n\n  constructor(\n    encryptedStringOrType: string | EncryptionType,\n    data?: string,\n    iv?: string,\n    mac?: string\n  ) {\n    if (data != null) {\n      this.initFromData(encryptedStringOrType as EncryptionType, data, iv, mac);\n    } else {\n      this.initFromEncryptedString(encryptedStringOrType as string);\n    }\n  }\n\n  get ivBytes(): Uint8Array {\n    return this.iv == null ? null : Utils.fromB64ToArray(this.iv);\n  }\n\n  get macBytes(): Uint8Array {\n    return this.mac == null ? null : Utils.fromB64ToArray(this.mac);\n  }\n\n  get dataBytes(): Uint8Array {\n    return this.data == null ? null : Utils.fromB64ToArray(this.data);\n  }\n\n  toJSON() {\n    return this.encryptedString;\n  }\n\n  static fromJSON(obj: Jsonify<EncString>): EncString {\n    if (obj == null) {\n      return null;\n    }\n\n    return new EncString(obj);\n  }\n\n  private initFromData(encType: EncryptionType, data: string, iv: string, mac: string) {\n    if (iv != null) {\n      this.encryptedString = (encType + \".\" + iv + \"|\" + data) as EncryptedString;\n    } else {\n      this.encryptedString = (encType + \".\" + data) as EncryptedString;\n    }\n\n    // mac\n    if (mac != null) {\n      this.encryptedString = (this.encryptedString + \"|\" + mac) as EncryptedString;\n    }\n\n    this.encryptionType = encType;\n    this.data = data;\n    this.iv = iv;\n    this.mac = mac;\n  }\n\n  private initFromEncryptedString(encryptedString: string) {\n    this.encryptedString = encryptedString as EncryptedString;\n    if (!this.encryptedString) {\n      return;\n    }\n\n    const { encType, encPieces } = EncString.parseEncryptedString(this.encryptedString);\n    this.encryptionType = encType;\n\n    if (encPieces.length !== EXPECTED_NUM_PARTS_BY_ENCRYPTION_TYPE[encType]) {\n      return;\n    }\n\n    switch (encType) {\n      case EncryptionType.AesCbc128_HmacSha256_B64:\n      case EncryptionType.AesCbc256_HmacSha256_B64:\n        this.iv = encPieces[0];\n        this.data = encPieces[1];\n        this.mac = encPieces[2];\n        break;\n      case EncryptionType.AesCbc256_B64:\n        this.iv = encPieces[0];\n        this.data = encPieces[1];\n        break;\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n        this.data = encPieces[0];\n        break;\n      default:\n        return;\n    }\n  }\n\n  private static parseEncryptedString(encryptedString: string): {\n    encType: EncryptionType;\n    encPieces: string[];\n  } {\n    const headerPieces = encryptedString.split(\".\");\n    let encType: EncryptionType;\n    let encPieces: string[] = null;\n\n    if (headerPieces.length === 2) {\n      try {\n        encType = parseInt(headerPieces[0], null);\n        encPieces = headerPieces[1].split(\"|\");\n      } catch (e) {\n        return;\n      }\n    } else {\n      encPieces = encryptedString.split(\"|\");\n      encType =\n        encPieces.length === 3\n          ? EncryptionType.AesCbc128_HmacSha256_B64\n          : EncryptionType.AesCbc256_B64;\n    }\n\n    return {\n      encType,\n      encPieces,\n    };\n  }\n\n  static isSerializedEncString(s: string): boolean {\n    const { encType, encPieces } = this.parseEncryptedString(s);\n\n    return EXPECTED_NUM_PARTS_BY_ENCRYPTION_TYPE[encType] === encPieces.length;\n  }\n\n  async decrypt(orgId: string, key: SymmetricCryptoKey = null): Promise<string> {\n    if (this.decryptedValue != null) {\n      return this.decryptedValue;\n    }\n\n    try {\n      if (key == null) {\n        key = await this.getKeyForDecryption(orgId);\n      }\n      if (key == null) {\n        throw new Error(\"No key to decrypt EncString with orgId \" + orgId);\n      }\n\n      const encryptService = Utils.getContainerService().getEncryptService();\n      this.decryptedValue = await encryptService.decryptToUtf8(this, key);\n    } catch (e) {\n      this.decryptedValue = \"[error: cannot decrypt]\";\n    }\n    return this.decryptedValue;\n  }\n\n  private async getKeyForDecryption(orgId: string) {\n    const cryptoService = Utils.getContainerService().getCryptoService();\n    return orgId != null\n      ? await cryptoService.getOrgKey(orgId)\n      : await cryptoService.getUserKeyWithLegacySupport();\n  }\n}\n\nexport type EncryptedString = Opaque<string, \"EncString\">;\n","/*\n * This enum is used to determine if a user should be forced to reset their password\n * on login (server flag) or unlock via MP (client evaluation).\n */\nexport enum ForceResetPasswordReason {\n  /**\n   * A password reset should not be forced.\n   */\n  None,\n\n  /**\n   * Occurs when an organization admin forces a user to reset their password.\n   * Communicated via server flag.\n   */\n  AdminForcePasswordReset,\n\n  /**\n   * Occurs when a user logs in / unlocks their vault with a master password that does not meet an organization's\n   * master password policy that is enforced on login/unlock.\n   * Only set client side b/c server can't evaluate MP.\n   */\n  WeakMasterPassword,\n}\n","export enum TwoFactorProviderType {\n  Authenticator = 0,\n  Email = 1,\n  Duo = 2,\n  Yubikey = 3,\n  U2f = 4,\n  Remember = 5,\n  OrganizationDuo = 6,\n  WebAuthn = 7,\n}\n","import { View } from \"../../../models/view/view\";\n\nimport { EncString } from \"./enc-string\";\nimport { SymmetricCryptoKey } from \"./symmetric-crypto-key\";\n\n// https://contributing.bitwarden.com/architecture/clients/data-model#domain\nexport default class Domain {\n  protected buildDomainModel<D extends Domain>(\n    domain: D,\n    dataObj: any,\n    map: any,\n    notEncList: any[] = []\n  ) {\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      const objProp = dataObj[map[prop] || prop];\n      if (notEncList.indexOf(prop) > -1) {\n        (domain as any)[prop] = objProp ? objProp : null;\n      } else {\n        (domain as any)[prop] = objProp ? new EncString(objProp) : null;\n      }\n    }\n  }\n  protected buildDataModel<D extends Domain>(\n    domain: D,\n    dataObj: any,\n    map: any,\n    notEncStringList: any[] = []\n  ) {\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      const objProp = (domain as any)[map[prop] || prop];\n      if (notEncStringList.indexOf(prop) > -1) {\n        (dataObj as any)[prop] = objProp != null ? objProp : null;\n      } else {\n        (dataObj as any)[prop] = objProp != null ? (objProp as EncString).encryptedString : null;\n      }\n    }\n  }\n\n  protected async decryptObj<T extends View>(\n    viewModel: T,\n    map: any,\n    orgId: string,\n    key: SymmetricCryptoKey = null\n  ): Promise<T> {\n    const promises = [];\n    const self: any = this;\n\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      (function (theProp) {\n        const p = Promise.resolve()\n          .then(() => {\n            const mapProp = map[theProp] || theProp;\n            if (self[mapProp]) {\n              return self[mapProp].decrypt(orgId, key);\n            }\n            return null;\n          })\n          .then((val: any) => {\n            (viewModel as any)[theProp] = val;\n          });\n        promises.push(p);\n      })(prop);\n    }\n\n    await Promise.all(promises);\n    return viewModel;\n  }\n}\n","import { MasterPasswordPolicyResponse } from \"../../../auth/models/response/master-password-policy.response\";\nimport Domain from \"../../../platform/models/domain/domain-base\";\n\nexport class MasterPasswordPolicyOptions extends Domain {\n  minComplexity = 0;\n  minLength = 0;\n  requireUpper = false;\n  requireLower = false;\n  requireNumbers = false;\n  requireSpecial = false;\n\n  /**\n   * Flag to indicate if the policy should be enforced on login.\n   * If true, and the user's password does not meet the policy requirements,\n   * the user will be forced to update their password.\n   */\n  enforceOnLogin = false;\n\n  static fromResponse(policy: MasterPasswordPolicyResponse): MasterPasswordPolicyOptions {\n    if (policy == null) {\n      return null;\n    }\n    const options = new MasterPasswordPolicyOptions();\n    options.minComplexity = policy.minComplexity;\n    options.minLength = policy.minLength;\n    options.requireUpper = policy.requireUpper;\n    options.requireLower = policy.requireLower;\n    options.requireNumbers = policy.requireNumbers;\n    options.requireSpecial = policy.requireSpecial;\n    options.enforceOnLogin = policy.enforceOnLogin;\n    return options;\n  }\n}\n","import { DeviceRequest } from \"./device.request\";\nimport { TokenTwoFactorRequest } from \"./token-two-factor.request\";\n\nexport abstract class TokenRequest {\n  protected device?: DeviceRequest;\n  protected passwordlessAuthRequest: string;\n\n  constructor(protected twoFactor: TokenTwoFactorRequest, device?: DeviceRequest) {\n    this.device = device != null ? device : null;\n  }\n\n  // eslint-disable-next-line\n  alterIdentityTokenHeaders(headers: Headers) {\n    // Implemented in subclass if required\n  }\n\n  setTwoFactor(twoFactor: TokenTwoFactorRequest) {\n    this.twoFactor = twoFactor;\n  }\n\n  setPasswordlessAccessCode(accessCode: string) {\n    this.passwordlessAuthRequest = accessCode;\n  }\n\n  protected toIdentityToken(clientId: string) {\n    const obj: any = {\n      scope: \"api offline_access\",\n      client_id: clientId,\n    };\n\n    if (this.device) {\n      obj.deviceType = this.device.type;\n      obj.deviceIdentifier = this.device.identifier;\n      obj.deviceName = this.device.name;\n      // no push tokens for browser apps yet\n      // obj.devicePushToken = this.device.pushToken;\n    }\n\n    //passswordless login\n    if (this.passwordlessAuthRequest) {\n      obj.authRequest = this.passwordlessAuthRequest;\n    }\n\n    if (this.twoFactor) {\n      if (this.twoFactor.token && this.twoFactor.provider != null) {\n        obj.twoFactorToken = this.twoFactor.token;\n        obj.twoFactorProvider = this.twoFactor.provider;\n        obj.twoFactorRemember = this.twoFactor.remember ? \"1\" : \"0\";\n      }\n    }\n\n    return obj;\n  }\n}\n","import { ClientType } from \"../../../../enums\";\nimport { Utils } from \"../../../../platform/misc/utils\";\nimport { CaptchaProtectedRequest } from \"../captcha-protected.request\";\n\nimport { DeviceRequest } from \"./device.request\";\nimport { TokenTwoFactorRequest } from \"./token-two-factor.request\";\nimport { TokenRequest } from \"./token.request\";\n\nexport class PasswordTokenRequest extends TokenRequest implements CaptchaProtectedRequest {\n  constructor(\n    public email: string,\n    public masterPasswordHash: string,\n    public captchaResponse: string,\n    protected twoFactor: TokenTwoFactorRequest,\n    device?: DeviceRequest\n  ) {\n    super(twoFactor, device);\n  }\n\n  toIdentityToken(clientId: ClientType) {\n    const obj = super.toIdentityToken(clientId);\n\n    obj.grant_type = \"password\";\n    obj.username = this.email;\n    obj.password = this.masterPasswordHash;\n\n    if (this.captchaResponse != null) {\n      obj.captchaResponse = this.captchaResponse;\n    }\n\n    return obj;\n  }\n\n  alterIdentityTokenHeaders(headers: Headers) {\n    headers.set(\"Auth-Email\", Utils.fromUtf8ToUrlB64(this.email));\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class IdentityCaptchaResponse extends BaseResponse {\n  siteKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.siteKey = this.getResponseProperty(\"HCaptcha_SiteKey\");\n  }\n}\n","export class KeysRequest {\n  publicKey: string;\n  encryptedPrivateKey: string;\n\n  constructor(publicKey: string, encryptedPrivateKey: string) {\n    this.publicKey = publicKey;\n    this.encryptedPrivateKey = encryptedPrivateKey;\n  }\n}\n","import { Utils } from \"../../../platform/misc/utils\";\n\n// TODO: Tech Debt: potentially create a type Storage shape vs using a class here in the future\n// type StorageShape {\n//   id: string;\n//   privateKey: string;\n// }\n// so we can get rid of the any type passed into fromJSON and coming out of ToJSON\nexport class AdminAuthRequestStorable {\n  id: string;\n  privateKey: Uint8Array;\n\n  constructor(init?: Partial<AdminAuthRequestStorable>) {\n    if (init) {\n      Object.assign(this, init);\n    }\n  }\n\n  toJSON() {\n    return {\n      id: this.id,\n      privateKey: Utils.fromBufferToByteString(this.privateKey),\n    };\n  }\n\n  static fromJSON(obj: any): AdminAuthRequestStorable {\n    if (obj == null) {\n      return null;\n    }\n\n    let privateKeyBuffer = null;\n    if (obj.privateKey) {\n      privateKeyBuffer = Utils.fromByteStringToArray(obj.privateKey);\n    }\n\n    return new AdminAuthRequestStorable({\n      id: obj.id,\n      privateKey: privateKeyBuffer,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nexport class EnvironmentUrls {\n  base: string = null;\n  api: string = null;\n  identity: string = null;\n  icons: string = null;\n  notifications: string = null;\n  events: string = null;\n  webVault: string = null;\n  keyConnector: string = null;\n\n  static fromJSON(obj: Jsonify<EnvironmentUrls>): EnvironmentUrls {\n    return Object.assign(new EnvironmentUrls(), obj);\n  }\n}\n","export class KeyConnectorUserDecryptionOption {\n  constructor(public keyConnectorUrl: string) {}\n}\n","export class TrustedDeviceUserDecryptionOption {\n  constructor(\n    public hasAdminApproval: boolean,\n    public hasLoginApprovingDevice: boolean,\n    public hasManageResetPasswordPermission: boolean\n  ) {}\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Region } from \"../../abstractions/environment.service\";\nimport {\n  ServerConfigResponse,\n  ThirdPartyServerConfigResponse,\n  EnvironmentServerConfigResponse,\n} from \"../response/server-config.response\";\n\nexport class ServerConfigData {\n  version: string;\n  gitHash: string;\n  server?: ThirdPartyServerConfigData;\n  environment?: EnvironmentServerConfigData;\n  utcDate: string;\n  featureStates: { [key: string]: string } = {};\n\n  constructor(serverConfigResponse: Partial<ServerConfigResponse>) {\n    this.version = serverConfigResponse?.version;\n    this.gitHash = serverConfigResponse?.gitHash;\n    this.server = serverConfigResponse?.server\n      ? new ThirdPartyServerConfigData(serverConfigResponse.server)\n      : null;\n    this.utcDate = new Date().toISOString();\n    this.environment = serverConfigResponse?.environment\n      ? new EnvironmentServerConfigData(serverConfigResponse.environment)\n      : null;\n    this.featureStates = serverConfigResponse?.featureStates;\n  }\n\n  static fromJSON(obj: Jsonify<ServerConfigData>): ServerConfigData {\n    return Object.assign(new ServerConfigData({}), obj, {\n      server: obj?.server ? ThirdPartyServerConfigData.fromJSON(obj.server) : null,\n      environment: obj?.environment ? EnvironmentServerConfigData.fromJSON(obj.environment) : null,\n    });\n  }\n}\n\nexport class ThirdPartyServerConfigData {\n  name: string;\n  url: string;\n\n  constructor(response: Partial<ThirdPartyServerConfigResponse>) {\n    this.name = response.name;\n    this.url = response.url;\n  }\n\n  static fromJSON(obj: Jsonify<ThirdPartyServerConfigData>): ThirdPartyServerConfigData {\n    return Object.assign(new ThirdPartyServerConfigData({}), obj);\n  }\n}\n\nexport class EnvironmentServerConfigData {\n  cloudRegion: Region;\n  vault: string;\n  api: string;\n  identity: string;\n  notifications: string;\n  sso: string;\n\n  constructor(response: Partial<EnvironmentServerConfigResponse>) {\n    this.cloudRegion = response.cloudRegion;\n    this.vault = response.vault;\n    this.api = response.api;\n    this.identity = response.identity;\n    this.notifications = response.notifications;\n    this.sso = response.sso;\n  }\n\n  static fromJSON(obj: Jsonify<EnvironmentServerConfigData>): EnvironmentServerConfigData {\n    return Object.assign(new EnvironmentServerConfigData({}), obj);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { EncryptedOrganizationKeyData } from \"../../../admin-console/models/data/encrypted-organization-key.data\";\nimport { OrganizationData } from \"../../../admin-console/models/data/organization.data\";\nimport { PolicyData } from \"../../../admin-console/models/data/policy.data\";\nimport { ProviderData } from \"../../../admin-console/models/data/provider.data\";\nimport { Policy } from \"../../../admin-console/models/domain/policy\";\nimport { AuthenticationStatus } from \"../../../auth/enums/authentication-status\";\nimport { AdminAuthRequestStorable } from \"../../../auth/models/domain/admin-auth-req-storable\";\nimport { EnvironmentUrls } from \"../../../auth/models/domain/environment-urls\";\nimport { ForceResetPasswordReason } from \"../../../auth/models/domain/force-reset-password-reason\";\nimport { KeyConnectorUserDecryptionOption } from \"../../../auth/models/domain/user-decryption-options/key-connector-user-decryption-option\";\nimport { TrustedDeviceUserDecryptionOption } from \"../../../auth/models/domain/user-decryption-options/trusted-device-user-decryption-option\";\nimport { IdentityTokenResponse } from \"../../../auth/models/response/identity-token.response\";\nimport { KdfType, UriMatchType } from \"../../../enums\";\nimport { EventData } from \"../../../models/data/event.data\";\nimport { GeneratorOptions } from \"../../../tools/generator/generator-options\";\nimport {\n  GeneratedPasswordHistory,\n  PasswordGeneratorOptions,\n} from \"../../../tools/generator/password\";\nimport { UsernameGeneratorOptions } from \"../../../tools/generator/username/username-generation-options\";\nimport { SendData } from \"../../../tools/send/models/data/send.data\";\nimport { SendView } from \"../../../tools/send/models/view/send.view\";\nimport { DeepJsonify } from \"../../../types/deep-jsonify\";\nimport { CipherData } from \"../../../vault/models/data/cipher.data\";\nimport { CollectionData } from \"../../../vault/models/data/collection.data\";\nimport { FolderData } from \"../../../vault/models/data/folder.data\";\nimport { CipherView } from \"../../../vault/models/view/cipher.view\";\nimport { CollectionView } from \"../../../vault/models/view/collection.view\";\nimport { Utils } from \"../../misc/utils\";\nimport { ServerConfigData } from \"../../models/data/server-config.data\";\n\nimport { EncryptedString, EncString } from \"./enc-string\";\nimport { MasterKey, SymmetricCryptoKey, UserKey } from \"./symmetric-crypto-key\";\n\nexport class EncryptionPair<TEncrypted, TDecrypted> {\n  encrypted?: TEncrypted;\n  decrypted?: TDecrypted;\n\n  toJSON() {\n    return {\n      encrypted: this.encrypted,\n      decrypted:\n        this.decrypted instanceof ArrayBuffer\n          ? Utils.fromBufferToByteString(this.decrypted)\n          : this.decrypted,\n    };\n  }\n\n  static fromJSON<TEncrypted, TDecrypted>(\n    obj: { encrypted?: Jsonify<TEncrypted>; decrypted?: string | Jsonify<TDecrypted> },\n    decryptedFromJson?: (decObj: Jsonify<TDecrypted> | string) => TDecrypted,\n    encryptedFromJson?: (encObj: Jsonify<TEncrypted>) => TEncrypted\n  ) {\n    if (obj == null) {\n      return null;\n    }\n\n    const pair = new EncryptionPair<TEncrypted, TDecrypted>();\n    if (obj?.encrypted != null) {\n      pair.encrypted = encryptedFromJson\n        ? encryptedFromJson(obj.encrypted)\n        : (obj.encrypted as TEncrypted);\n    }\n    if (obj?.decrypted != null) {\n      pair.decrypted = decryptedFromJson\n        ? decryptedFromJson(obj.decrypted)\n        : (obj.decrypted as TDecrypted);\n    }\n    return pair;\n  }\n}\n\nexport class DataEncryptionPair<TEncrypted, TDecrypted> {\n  encrypted?: { [id: string]: TEncrypted };\n  decrypted?: TDecrypted[];\n}\n\n// This is a temporary structure to handle migrated `DataEncryptionPair` to\n//  avoid needing a data migration at this stage. It should be replaced with\n//  proper data migrations when `DataEncryptionPair` is deprecated.\nexport class TemporaryDataEncryption<TEncrypted> {\n  encrypted?: { [id: string]: TEncrypted };\n}\n\nexport class AccountData {\n  ciphers?: DataEncryptionPair<CipherData, CipherView> = new DataEncryptionPair<\n    CipherData,\n    CipherView\n  >();\n  folders? = new TemporaryDataEncryption<FolderData>();\n  localData?: any;\n  sends?: DataEncryptionPair<SendData, SendView> = new DataEncryptionPair<SendData, SendView>();\n  collections?: DataEncryptionPair<CollectionData, CollectionView> = new DataEncryptionPair<\n    CollectionData,\n    CollectionView\n  >();\n  policies?: DataEncryptionPair<PolicyData, Policy> = new DataEncryptionPair<PolicyData, Policy>();\n  passwordGenerationHistory?: EncryptionPair<\n    GeneratedPasswordHistory[],\n    GeneratedPasswordHistory[]\n  > = new EncryptionPair<GeneratedPasswordHistory[], GeneratedPasswordHistory[]>();\n  addEditCipherInfo?: any;\n  eventCollection?: EventData[];\n  organizations?: { [id: string]: OrganizationData };\n  providers?: { [id: string]: ProviderData };\n}\n\nexport class AccountKeys {\n  userKey?: UserKey;\n  masterKey?: MasterKey;\n  masterKeyEncryptedUserKey?: string;\n  deviceKey?: ReturnType<SymmetricCryptoKey[\"toJSON\"]>;\n  organizationKeys?: EncryptionPair<\n    { [orgId: string]: EncryptedOrganizationKeyData },\n    Record<string, SymmetricCryptoKey>\n  > = new EncryptionPair<\n    { [orgId: string]: EncryptedOrganizationKeyData },\n    Record<string, SymmetricCryptoKey>\n  >();\n  providerKeys?: EncryptionPair<any, Record<string, SymmetricCryptoKey>> = new EncryptionPair<\n    any,\n    Record<string, SymmetricCryptoKey>\n  >();\n  privateKey?: EncryptionPair<string, Uint8Array> = new EncryptionPair<string, Uint8Array>();\n  publicKey?: Uint8Array;\n  apiKeyClientSecret?: string;\n\n  /** @deprecated July 2023, left for migration purposes*/\n  cryptoMasterKey?: SymmetricCryptoKey;\n  /** @deprecated July 2023, left for migration purposes*/\n  cryptoMasterKeyAuto?: string;\n  /** @deprecated July 2023, left for migration purposes*/\n  cryptoMasterKeyBiometric?: string;\n  /** @deprecated July 2023, left for migration purposes*/\n  cryptoSymmetricKey?: EncryptionPair<string, SymmetricCryptoKey> = new EncryptionPair<\n    string,\n    SymmetricCryptoKey\n  >();\n\n  toJSON() {\n    return Utils.merge(this, {\n      publicKey: Utils.fromBufferToByteString(this.publicKey),\n    });\n  }\n\n  static fromJSON(obj: DeepJsonify<AccountKeys>): AccountKeys {\n    if (obj == null) {\n      return null;\n    }\n\n    return Object.assign(new AccountKeys(), {\n      userKey: SymmetricCryptoKey.fromJSON(obj?.userKey),\n      masterKey: SymmetricCryptoKey.fromJSON(obj?.masterKey),\n      deviceKey: obj?.deviceKey,\n      cryptoMasterKey: SymmetricCryptoKey.fromJSON(obj?.cryptoMasterKey),\n      cryptoSymmetricKey: EncryptionPair.fromJSON(\n        obj?.cryptoSymmetricKey,\n        SymmetricCryptoKey.fromJSON\n      ),\n      organizationKeys: AccountKeys.initRecordEncryptionPairsFromJSON(obj?.organizationKeys),\n      providerKeys: AccountKeys.initRecordEncryptionPairsFromJSON(obj?.providerKeys),\n      privateKey: EncryptionPair.fromJSON<string, Uint8Array>(obj?.privateKey, (decObj: string) =>\n        Utils.fromByteStringToArray(decObj)\n      ),\n      publicKey: Utils.fromByteStringToArray(obj?.publicKey),\n    });\n  }\n\n  static initRecordEncryptionPairsFromJSON(obj: any) {\n    return EncryptionPair.fromJSON(obj, (decObj: any) => {\n      if (obj == null) {\n        return null;\n      }\n\n      const record: Record<string, SymmetricCryptoKey> = {};\n      for (const id in decObj) {\n        record[id] = SymmetricCryptoKey.fromJSON(decObj[id]);\n      }\n      return record;\n    });\n  }\n}\n\nexport class AccountProfile {\n  apiKeyClientId?: string;\n  authenticationStatus?: AuthenticationStatus;\n  convertAccountToKeyConnector?: boolean;\n  name?: string;\n  email?: string;\n  emailVerified?: boolean;\n  entityId?: string;\n  entityType?: string;\n  everHadUserKey?: boolean;\n  everBeenUnlocked?: boolean;\n  forcePasswordResetReason?: ForceResetPasswordReason;\n  hasPremiumPersonally?: boolean;\n  hasPremiumFromOrganization?: boolean;\n  lastSync?: string;\n  userId?: string;\n  usesKeyConnector?: boolean;\n  keyHash?: string;\n  kdfIterations?: number;\n  kdfMemory?: number;\n  kdfParallelism?: number;\n  kdfType?: KdfType;\n\n  static fromJSON(obj: Jsonify<AccountProfile>): AccountProfile {\n    if (obj == null) {\n      return null;\n    }\n\n    return Object.assign(new AccountProfile(), obj);\n  }\n}\n\nexport class AccountSettings {\n  autoConfirmFingerPrints?: boolean;\n  autoFillOnPageLoadDefault?: boolean;\n  biometricUnlock?: boolean;\n  clearClipboard?: number;\n  collapsedGroupings?: string[];\n  defaultUriMatch?: UriMatchType;\n  disableAddLoginNotification?: boolean;\n  disableAutoBiometricsPrompt?: boolean;\n  disableAutoTotpCopy?: boolean;\n  disableBadgeCounter?: boolean;\n  disableChangedPasswordNotification?: boolean;\n  disableContextMenuItem?: boolean;\n  disableGa?: boolean;\n  dismissedAutoFillOnPageLoadCallout?: boolean;\n  dontShowCardsCurrentTab?: boolean;\n  dontShowIdentitiesCurrentTab?: boolean;\n  enableAlwaysOnTop?: boolean;\n  enableAutoFillOnPageLoad?: boolean;\n  enableBiometric?: boolean;\n  enableFullWidth?: boolean;\n  environmentUrls: EnvironmentUrls = new EnvironmentUrls();\n  equivalentDomains?: any;\n  minimizeOnCopyToClipboard?: boolean;\n  neverDomains?: { [id: string]: any };\n  passwordGenerationOptions?: PasswordGeneratorOptions;\n  usernameGenerationOptions?: UsernameGeneratorOptions;\n  generatorOptions?: GeneratorOptions;\n  pinKeyEncryptedUserKey?: EncryptedString;\n  pinKeyEncryptedUserKeyEphemeral?: EncryptedString;\n  protectedPin?: string;\n  settings?: AccountSettingsSettings; // TODO: Merge whatever is going on here into the AccountSettings model properly\n  vaultTimeout?: number;\n  vaultTimeoutAction?: string = \"lock\";\n  serverConfig?: ServerConfigData;\n  approveLoginRequests?: boolean;\n  avatarColor?: string;\n  activateAutoFillOnPageLoadFromPolicy?: boolean;\n  region?: string;\n  smOnboardingTasks?: Record<string, Record<string, boolean>>;\n  trustDeviceChoiceForDecryption?: boolean;\n\n  /** @deprecated July 2023, left for migration purposes*/\n  pinProtected?: EncryptionPair<string, EncString> = new EncryptionPair<string, EncString>();\n\n  static fromJSON(obj: Jsonify<AccountSettings>): AccountSettings {\n    if (obj == null) {\n      return null;\n    }\n\n    return Object.assign(new AccountSettings(), obj, {\n      environmentUrls: EnvironmentUrls.fromJSON(obj?.environmentUrls),\n      pinProtected: EncryptionPair.fromJSON<string, EncString>(\n        obj?.pinProtected,\n        EncString.fromJSON\n      ),\n      serverConfig: ServerConfigData.fromJSON(obj?.serverConfig),\n    });\n  }\n}\n\nexport type AccountSettingsSettings = {\n  equivalentDomains?: string[][];\n};\n\nexport class AccountTokens {\n  accessToken?: string;\n  refreshToken?: string;\n  securityStamp?: string;\n\n  static fromJSON(obj: Jsonify<AccountTokens>): AccountTokens {\n    if (obj == null) {\n      return null;\n    }\n\n    return Object.assign(new AccountTokens(), obj);\n  }\n}\n\nexport class AccountDecryptionOptions {\n  hasMasterPassword: boolean;\n  trustedDeviceOption?: TrustedDeviceUserDecryptionOption;\n  keyConnectorOption?: KeyConnectorUserDecryptionOption;\n\n  constructor(init?: Partial<AccountDecryptionOptions>) {\n    if (init) {\n      Object.assign(this, init);\n    }\n  }\n\n  // TODO: these nice getters don't work because the Account object is not properly being deserialized out of\n  // JSON (the Account static fromJSON method is not running) so these getters don't exist on the\n  // account decryptions options object when pulled out of state.  This is a bug that needs to be fixed later on\n  // get hasTrustedDeviceOption(): boolean {\n  //   return this.trustedDeviceOption !== null && this.trustedDeviceOption !== undefined;\n  // }\n\n  // get hasKeyConnectorOption(): boolean {\n  //   return this.keyConnectorOption !== null && this.keyConnectorOption !== undefined;\n  // }\n\n  static fromResponse(response: IdentityTokenResponse): AccountDecryptionOptions {\n    if (response == null) {\n      return null;\n    }\n\n    const accountDecryptionOptions = new AccountDecryptionOptions();\n\n    if (response.userDecryptionOptions) {\n      // If the response has userDecryptionOptions, this means it's on a post-TDE server version and can interrogate\n      // the new decryption options.\n      const responseOptions = response.userDecryptionOptions;\n      accountDecryptionOptions.hasMasterPassword = responseOptions.hasMasterPassword;\n\n      if (responseOptions.trustedDeviceOption) {\n        accountDecryptionOptions.trustedDeviceOption = new TrustedDeviceUserDecryptionOption(\n          responseOptions.trustedDeviceOption.hasAdminApproval,\n          responseOptions.trustedDeviceOption.hasLoginApprovingDevice,\n          responseOptions.trustedDeviceOption.hasManageResetPasswordPermission\n        );\n      }\n\n      if (responseOptions.keyConnectorOption) {\n        accountDecryptionOptions.keyConnectorOption = new KeyConnectorUserDecryptionOption(\n          responseOptions.keyConnectorOption.keyConnectorUrl\n        );\n      }\n    } else {\n      // If the response does not have userDecryptionOptions, this means it's on a pre-TDE server version and so\n      // we must base our decryption options on the presence of the keyConnectorUrl.\n      // Note that the presence of keyConnectorUrl implies that the user does not have a master password, as in pre-TDE\n      // server versions, a master password short-circuited the addition of the keyConnectorUrl to the response.\n      // TODO: remove this check after 2023.10 release (https://bitwarden.atlassian.net/browse/PM-3537)\n      const usingKeyConnector = response.keyConnectorUrl != null;\n      accountDecryptionOptions.hasMasterPassword = !usingKeyConnector;\n      if (usingKeyConnector) {\n        accountDecryptionOptions.keyConnectorOption = new KeyConnectorUserDecryptionOption(\n          response.keyConnectorUrl\n        );\n      }\n    }\n    return accountDecryptionOptions;\n  }\n\n  static fromJSON(obj: Jsonify<AccountDecryptionOptions>): AccountDecryptionOptions {\n    if (obj == null) {\n      return null;\n    }\n\n    const accountDecryptionOptions = Object.assign(new AccountDecryptionOptions(), obj);\n\n    if (obj.trustedDeviceOption) {\n      accountDecryptionOptions.trustedDeviceOption = new TrustedDeviceUserDecryptionOption(\n        obj.trustedDeviceOption.hasAdminApproval,\n        obj.trustedDeviceOption.hasLoginApprovingDevice,\n        obj.trustedDeviceOption.hasManageResetPasswordPermission\n      );\n    }\n\n    if (obj.keyConnectorOption) {\n      accountDecryptionOptions.keyConnectorOption = new KeyConnectorUserDecryptionOption(\n        obj.keyConnectorOption.keyConnectorUrl\n      );\n    }\n\n    return accountDecryptionOptions;\n  }\n}\n\nexport class LoginState {\n  ssoOrganizationIdentifier?: string;\n\n  constructor(init?: Partial<LoginState>) {\n    if (init) {\n      Object.assign(this, init);\n    }\n  }\n\n  static fromJSON(obj: Jsonify<LoginState>): LoginState {\n    if (obj == null) {\n      return null;\n    }\n\n    const loginState = Object.assign(new LoginState(), obj);\n    return loginState;\n  }\n}\n\nexport class Account {\n  data?: AccountData = new AccountData();\n  keys?: AccountKeys = new AccountKeys();\n  profile?: AccountProfile = new AccountProfile();\n  settings?: AccountSettings = new AccountSettings();\n  tokens?: AccountTokens = new AccountTokens();\n  decryptionOptions?: AccountDecryptionOptions = new AccountDecryptionOptions();\n  loginState?: LoginState = new LoginState();\n  adminAuthRequest?: Jsonify<AdminAuthRequestStorable> = null;\n\n  constructor(init: Partial<Account>) {\n    Object.assign(this, {\n      data: {\n        ...new AccountData(),\n        ...init?.data,\n      },\n      keys: {\n        ...new AccountKeys(),\n        ...init?.keys,\n      },\n      profile: {\n        ...new AccountProfile(),\n        ...init?.profile,\n      },\n      settings: {\n        ...new AccountSettings(),\n        ...init?.settings,\n      },\n      tokens: {\n        ...new AccountTokens(),\n        ...init?.tokens,\n      },\n      decryptionOptions: {\n        ...new AccountDecryptionOptions(),\n        ...init?.decryptionOptions,\n      },\n      loginState: {\n        ...new LoginState(),\n        ...init?.loginState,\n      },\n      adminAuthRequest: init?.adminAuthRequest,\n    });\n  }\n\n  static fromJSON(json: Jsonify<Account>): Account {\n    if (json == null) {\n      return null;\n    }\n\n    return Object.assign(new Account({}), json, {\n      keys: AccountKeys.fromJSON(json?.keys),\n      profile: AccountProfile.fromJSON(json?.profile),\n      settings: AccountSettings.fromJSON(json?.settings),\n      tokens: AccountTokens.fromJSON(json?.tokens),\n      decryptionOptions: AccountDecryptionOptions.fromJSON(json?.decryptionOptions),\n      loginState: LoginState.fromJSON(json?.loginState),\n      adminAuthRequest: AdminAuthRequestStorable.fromJSON(json?.adminAuthRequest),\n    });\n  }\n}\n","import { Utils } from \"../../../platform/misc/utils\";\nimport { TwoFactorProviderType } from \"../../enums/two-factor-provider-type\";\n\nimport { ForceResetPasswordReason } from \"./force-reset-password-reason\";\n\nexport class AuthResult {\n  captchaSiteKey = \"\";\n  // TODO: PM-3287 - Remove this after 3 releases of backwards compatibility. - Target release 2023.12 for removal\n  /**\n   * @deprecated\n   * Replace with using AccountDecryptionOptions to determine if the user does\n   * not have a master password and is not using Key Connector.\n   * */\n  resetMasterPassword = false;\n\n  forcePasswordReset: ForceResetPasswordReason = ForceResetPasswordReason.None;\n  twoFactorProviders: Map<TwoFactorProviderType, { [key: string]: string }> = null;\n  ssoEmail2FaSessionToken?: string;\n  email: string;\n  requiresEncryptionKeyMigration: boolean;\n\n  get requiresCaptcha() {\n    return !Utils.isNullOrWhitespace(this.captchaSiteKey);\n  }\n\n  get requiresTwoFactor() {\n    return this.twoFactorProviders != null;\n  }\n}\n","import { DeviceType } from \"../../../../enums\";\nimport { PlatformUtilsService } from \"../../../../platform/abstractions/platform-utils.service\";\n\nexport class DeviceRequest {\n  type: DeviceType;\n  name: string;\n  identifier: string;\n  pushToken?: string;\n\n  constructor(appId: string, platformUtilsService: PlatformUtilsService) {\n    this.type = platformUtilsService.getDevice();\n    this.name = platformUtilsService.getDeviceString();\n    this.identifier = appId;\n    this.pushToken = null;\n  }\n}\n","import { TwoFactorProviderType } from \"../../../enums/two-factor-provider-type\";\n\nexport class TokenTwoFactorRequest {\n  constructor(\n    public provider: TwoFactorProviderType = null,\n    public token: string = null,\n    public remember: boolean = false\n  ) {}\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class MasterPasswordPolicyResponse extends BaseResponse {\n  minComplexity: number;\n  minLength: number;\n  requireUpper: boolean;\n  requireLower: boolean;\n  requireNumbers: boolean;\n  requireSpecial: boolean;\n\n  /**\n   * Flag to indicate if the policy should be enforced on login.\n   * If true, and the user's password does not meet the policy requirements,\n   * the user will be forced to update their password.\n   */\n  enforceOnLogin: boolean;\n\n  constructor(response: any) {\n    super(response);\n\n    this.minComplexity = this.getResponseProperty(\"MinComplexity\");\n    this.minLength = this.getResponseProperty(\"MinLength\");\n    this.requireUpper = this.getResponseProperty(\"RequireUpper\");\n    this.requireLower = this.getResponseProperty(\"RequireLower\");\n    this.requireNumbers = this.getResponseProperty(\"RequireNumbers\");\n    this.requireSpecial = this.getResponseProperty(\"RequireSpecial\");\n    this.enforceOnLogin = this.getResponseProperty(\"EnforceOnLogin\");\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\n\nexport interface IKeyConnectorUserDecryptionOptionServerResponse {\n  KeyConnectorUrl: string;\n}\n\nexport class KeyConnectorUserDecryptionOptionResponse extends BaseResponse {\n  keyConnectorUrl: string;\n\n  constructor(response: IKeyConnectorUserDecryptionOptionServerResponse) {\n    super(response);\n    this.keyConnectorUrl = this.getResponseProperty(\"KeyConnectorUrl\");\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\nimport { EncString } from \"../../../../platform/models/domain/enc-string\";\n\nexport interface ITrustedDeviceUserDecryptionOptionServerResponse {\n  HasAdminApproval: boolean;\n  HasLoginApprovingDevice: boolean;\n  HasManageResetPasswordPermission: boolean;\n  EncryptedPrivateKey?: string;\n  EncryptedUserKey?: string;\n}\n\nexport class TrustedDeviceUserDecryptionOptionResponse extends BaseResponse {\n  hasAdminApproval: boolean;\n  hasLoginApprovingDevice: boolean;\n  hasManageResetPasswordPermission: boolean;\n  encryptedPrivateKey: EncString;\n  encryptedUserKey: EncString;\n\n  constructor(response: any) {\n    super(response);\n    this.hasAdminApproval = this.getResponseProperty(\"HasAdminApproval\");\n\n    this.hasLoginApprovingDevice = this.getResponseProperty(\"HasLoginApprovingDevice\");\n    this.hasManageResetPasswordPermission = this.getResponseProperty(\n      \"HasManageResetPasswordPermission\"\n    );\n\n    if (response.EncryptedPrivateKey) {\n      this.encryptedPrivateKey = new EncString(this.getResponseProperty(\"EncryptedPrivateKey\"));\n    }\n    if (response.EncryptedUserKey) {\n      this.encryptedUserKey = new EncString(this.getResponseProperty(\"EncryptedUserKey\"));\n    }\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\n\nimport {\n  IKeyConnectorUserDecryptionOptionServerResponse,\n  KeyConnectorUserDecryptionOptionResponse,\n} from \"./key-connector-user-decryption-option.response\";\nimport {\n  ITrustedDeviceUserDecryptionOptionServerResponse,\n  TrustedDeviceUserDecryptionOptionResponse,\n} from \"./trusted-device-user-decryption-option.response\";\n\nexport interface IUserDecryptionOptionsServerResponse {\n  HasMasterPassword: boolean;\n  TrustedDeviceOption?: ITrustedDeviceUserDecryptionOptionServerResponse;\n  KeyConnectorOption?: IKeyConnectorUserDecryptionOptionServerResponse;\n}\n\nexport class UserDecryptionOptionsResponse extends BaseResponse {\n  hasMasterPassword: boolean;\n  trustedDeviceOption?: TrustedDeviceUserDecryptionOptionResponse;\n  keyConnectorOption?: KeyConnectorUserDecryptionOptionResponse;\n\n  constructor(response: IUserDecryptionOptionsServerResponse) {\n    super(response);\n\n    this.hasMasterPassword = this.getResponseProperty(\"HasMasterPassword\");\n\n    if (response.TrustedDeviceOption) {\n      this.trustedDeviceOption = new TrustedDeviceUserDecryptionOptionResponse(\n        this.getResponseProperty(\"TrustedDeviceOption\")\n      );\n    }\n    if (response.KeyConnectorOption) {\n      this.keyConnectorOption = new KeyConnectorUserDecryptionOptionResponse(\n        this.getResponseProperty(\"KeyConnectorOption\")\n      );\n    }\n  }\n}\n","import { KdfType } from \"../../../enums\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\n\nimport { MasterPasswordPolicyResponse } from \"./master-password-policy.response\";\nimport { UserDecryptionOptionsResponse } from \"./user-decryption-options/user-decryption-options.response\";\n\nexport class IdentityTokenResponse extends BaseResponse {\n  accessToken: string;\n  expiresIn: number;\n  refreshToken: string;\n  tokenType: string;\n\n  resetMasterPassword: boolean;\n  privateKey: string;\n  key: string;\n  twoFactorToken: string;\n  kdf: KdfType;\n  kdfIterations: number;\n  kdfMemory?: number;\n  kdfParallelism?: number;\n  forcePasswordReset: boolean;\n  masterPasswordPolicy: MasterPasswordPolicyResponse;\n  apiUseKeyConnector: boolean;\n  keyConnectorUrl: string;\n\n  userDecryptionOptions: UserDecryptionOptionsResponse;\n\n  constructor(response: any) {\n    super(response);\n    this.accessToken = response.access_token;\n    this.expiresIn = response.expires_in;\n    this.refreshToken = response.refresh_token;\n    this.tokenType = response.token_type;\n\n    this.resetMasterPassword = this.getResponseProperty(\"ResetMasterPassword\");\n    this.privateKey = this.getResponseProperty(\"PrivateKey\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.twoFactorToken = this.getResponseProperty(\"TwoFactorToken\");\n    this.kdf = this.getResponseProperty(\"Kdf\");\n    this.kdfIterations = this.getResponseProperty(\"KdfIterations\");\n    this.kdfMemory = this.getResponseProperty(\"KdfMemory\");\n    this.kdfParallelism = this.getResponseProperty(\"KdfParallelism\");\n    this.forcePasswordReset = this.getResponseProperty(\"ForcePasswordReset\");\n    this.apiUseKeyConnector = this.getResponseProperty(\"ApiUseKeyConnector\");\n    this.keyConnectorUrl = this.getResponseProperty(\"KeyConnectorUrl\");\n    this.masterPasswordPolicy = new MasterPasswordPolicyResponse(\n      this.getResponseProperty(\"MasterPasswordPolicy\")\n    );\n\n    if (response.UserDecryptionOptions) {\n      this.userDecryptionOptions = new UserDecryptionOptionsResponse(\n        this.getResponseProperty(\"UserDecryptionOptions\")\n      );\n    }\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { TwoFactorProviderType } from \"../../enums/two-factor-provider-type\";\n\nimport { MasterPasswordPolicyResponse } from \"./master-password-policy.response\";\n\nexport class IdentityTwoFactorResponse extends BaseResponse {\n  twoFactorProviders: TwoFactorProviderType[];\n  twoFactorProviders2 = new Map<TwoFactorProviderType, { [key: string]: string }>();\n  captchaToken: string;\n  ssoEmail2faSessionToken: string;\n  email?: string;\n  masterPasswordPolicy?: MasterPasswordPolicyResponse;\n\n  constructor(response: any) {\n    super(response);\n    this.captchaToken = this.getResponseProperty(\"CaptchaBypassToken\");\n    this.twoFactorProviders = this.getResponseProperty(\"TwoFactorProviders\");\n    const twoFactorProviders2 = this.getResponseProperty(\"TwoFactorProviders2\");\n    if (twoFactorProviders2 != null) {\n      for (const prop in twoFactorProviders2) {\n        // eslint-disable-next-line\n        if (twoFactorProviders2.hasOwnProperty(prop)) {\n          this.twoFactorProviders2.set(parseInt(prop, null), twoFactorProviders2[prop]);\n        }\n      }\n    }\n    this.masterPasswordPolicy = new MasterPasswordPolicyResponse(\n      this.getResponseProperty(\"MasterPasswordPolicy\")\n    );\n\n    this.ssoEmail2faSessionToken = this.getResponseProperty(\"SsoEmail2faSessionToken\");\n    this.email = this.getResponseProperty(\"Email\");\n  }\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { ClientType } from \"../../enums\";\nimport { KeysRequest } from \"../../models/request/keys.request\";\nimport { AppIdService } from \"../../platform/abstractions/app-id.service\";\nimport { CryptoService } from \"../../platform/abstractions/crypto.service\";\nimport { LogService } from \"../../platform/abstractions/log.service\";\nimport { MessagingService } from \"../../platform/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../platform/abstractions/platform-utils.service\";\nimport { StateService } from \"../../platform/abstractions/state.service\";\nimport {\n  Account,\n  AccountDecryptionOptions,\n  AccountKeys,\n  AccountProfile,\n  AccountTokens,\n} from \"../../platform/models/domain/account\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { TwoFactorService } from \"../abstractions/two-factor.service\";\nimport { TwoFactorProviderType } from \"../enums/two-factor-provider-type\";\nimport { AuthResult } from \"../models/domain/auth-result\";\nimport { ForceResetPasswordReason } from \"../models/domain/force-reset-password-reason\";\nimport {\n  PasswordlessLogInCredentials,\n  PasswordLogInCredentials,\n  SsoLogInCredentials,\n  UserApiLogInCredentials,\n} from \"../models/domain/log-in-credentials\";\nimport { DeviceRequest } from \"../models/request/identity-token/device.request\";\nimport { PasswordTokenRequest } from \"../models/request/identity-token/password-token.request\";\nimport { SsoTokenRequest } from \"../models/request/identity-token/sso-token.request\";\nimport { TokenTwoFactorRequest } from \"../models/request/identity-token/token-two-factor.request\";\nimport { UserApiTokenRequest } from \"../models/request/identity-token/user-api-token.request\";\nimport { IdentityCaptchaResponse } from \"../models/response/identity-captcha.response\";\nimport { IdentityTokenResponse } from \"../models/response/identity-token.response\";\nimport { IdentityTwoFactorResponse } from \"../models/response/identity-two-factor.response\";\n\ntype IdentityResponse = IdentityTokenResponse | IdentityTwoFactorResponse | IdentityCaptchaResponse;\n\nexport abstract class LogInStrategy {\n  protected abstract tokenRequest: UserApiTokenRequest | PasswordTokenRequest | SsoTokenRequest;\n  protected captchaBypassToken: string = null;\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected apiService: ApiService,\n    protected tokenService: TokenService,\n    protected appIdService: AppIdService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected messagingService: MessagingService,\n    protected logService: LogService,\n    protected stateService: StateService,\n    protected twoFactorService: TwoFactorService\n  ) {}\n\n  abstract logIn(\n    credentials:\n      | UserApiLogInCredentials\n      | PasswordLogInCredentials\n      | SsoLogInCredentials\n      | PasswordlessLogInCredentials\n  ): Promise<AuthResult>;\n\n  async logInTwoFactor(\n    twoFactor: TokenTwoFactorRequest,\n    captchaResponse: string = null\n  ): Promise<AuthResult> {\n    this.tokenRequest.setTwoFactor(twoFactor);\n    const [authResult] = await this.startLogIn();\n    return authResult;\n  }\n\n  protected async startLogIn(): Promise<[AuthResult, IdentityResponse]> {\n    this.twoFactorService.clearSelectedProvider();\n\n    const response = await this.apiService.postIdentityToken(this.tokenRequest);\n\n    if (response instanceof IdentityTwoFactorResponse) {\n      return [await this.processTwoFactorResponse(response), response];\n    } else if (response instanceof IdentityCaptchaResponse) {\n      return [await this.processCaptchaResponse(response), response];\n    } else if (response instanceof IdentityTokenResponse) {\n      return [await this.processTokenResponse(response), response];\n    }\n\n    throw new Error(\"Invalid response object.\");\n  }\n\n  protected async buildDeviceRequest() {\n    const appId = await this.appIdService.getAppId();\n    return new DeviceRequest(appId, this.platformUtilsService);\n  }\n\n  protected async buildTwoFactor(userProvidedTwoFactor?: TokenTwoFactorRequest) {\n    if (userProvidedTwoFactor != null) {\n      return userProvidedTwoFactor;\n    }\n\n    const storedTwoFactorToken = await this.tokenService.getTwoFactorToken();\n    if (storedTwoFactorToken != null) {\n      return new TokenTwoFactorRequest(TwoFactorProviderType.Remember, storedTwoFactorToken, false);\n    }\n\n    return new TokenTwoFactorRequest();\n  }\n\n  protected async saveAccountInformation(tokenResponse: IdentityTokenResponse) {\n    const accountInformation = await this.tokenService.decodeToken(tokenResponse.accessToken);\n\n    // Must persist existing device key if it exists for trusted device decryption to work\n    // However, we must provide a user id so that the device key can be retrieved\n    // as the state service won't have an active account at this point in time\n    // even though the data exists in local storage.\n    const userId = accountInformation.sub;\n\n    const deviceKey = await this.stateService.getDeviceKey({ userId });\n    const accountKeys = new AccountKeys();\n    if (deviceKey) {\n      accountKeys.deviceKey = deviceKey;\n    }\n\n    // If you don't persist existing admin auth requests on login, they will get deleted.\n    const adminAuthRequest = await this.stateService.getAdminAuthRequest({ userId });\n\n    await this.stateService.addAccount(\n      new Account({\n        profile: {\n          ...new AccountProfile(),\n          ...{\n            userId,\n            name: accountInformation.name,\n            email: accountInformation.email,\n            hasPremiumPersonally: accountInformation.premium,\n            kdfIterations: tokenResponse.kdfIterations,\n            kdfMemory: tokenResponse.kdfMemory,\n            kdfParallelism: tokenResponse.kdfParallelism,\n            kdfType: tokenResponse.kdf,\n          },\n        },\n        tokens: {\n          ...new AccountTokens(),\n          ...{\n            accessToken: tokenResponse.accessToken,\n            refreshToken: tokenResponse.refreshToken,\n          },\n        },\n        keys: accountKeys,\n        decryptionOptions: AccountDecryptionOptions.fromResponse(tokenResponse),\n        adminAuthRequest: adminAuthRequest?.toJSON(),\n      })\n    );\n  }\n\n  protected async processTokenResponse(response: IdentityTokenResponse): Promise<AuthResult> {\n    const result = new AuthResult();\n\n    // Old encryption keys must be migrated, but is currently only available on web.\n    // Other clients shouldn't continue the login process.\n    if (this.encryptionKeyMigrationRequired(response)) {\n      result.requiresEncryptionKeyMigration = true;\n      if (this.platformUtilsService.getClientType() !== ClientType.Web) {\n        return result;\n      }\n    }\n\n    result.resetMasterPassword = response.resetMasterPassword;\n\n    // Convert boolean to enum\n    if (response.forcePasswordReset) {\n      result.forcePasswordReset = ForceResetPasswordReason.AdminForcePasswordReset;\n    }\n\n    // Must come before setting keys, user key needs email to update additional keys\n    await this.saveAccountInformation(response);\n\n    if (response.twoFactorToken != null) {\n      await this.tokenService.setTwoFactorToken(response);\n    }\n\n    await this.setMasterKey(response);\n    await this.setUserKey(response);\n    await this.setPrivateKey(response);\n\n    this.messagingService.send(\"loggedIn\");\n\n    return result;\n  }\n\n  // The keys comes from different sources depending on the login strategy\n  protected abstract setMasterKey(response: IdentityTokenResponse): Promise<void>;\n\n  protected abstract setUserKey(response: IdentityTokenResponse): Promise<void>;\n\n  protected abstract setPrivateKey(response: IdentityTokenResponse): Promise<void>;\n\n  // Old accounts used master key for encryption. We are forcing migrations but only need to\n  // check on password logins\n  protected encryptionKeyMigrationRequired(response: IdentityTokenResponse): boolean {\n    return false;\n  }\n\n  protected async createKeyPairForOldAccount() {\n    try {\n      const [publicKey, privateKey] = await this.cryptoService.makeKeyPair();\n      await this.apiService.postAccountKeys(new KeysRequest(publicKey, privateKey.encryptedString));\n      return privateKey.encryptedString;\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  private async processTwoFactorResponse(response: IdentityTwoFactorResponse): Promise<AuthResult> {\n    const result = new AuthResult();\n    result.twoFactorProviders = response.twoFactorProviders2;\n\n    this.twoFactorService.setProviders(response);\n    this.captchaBypassToken = response.captchaToken ?? null;\n    result.ssoEmail2FaSessionToken = response.ssoEmail2faSessionToken;\n    result.email = response.email;\n    return result;\n  }\n\n  private async processCaptchaResponse(response: IdentityCaptchaResponse): Promise<AuthResult> {\n    const result = new AuthResult();\n    result.captchaSiteKey = response.siteKey;\n    return result;\n  }\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { PolicyService } from \"../../admin-console/abstractions/policy/policy.service.abstraction\";\nimport { MasterPasswordPolicyOptions } from \"../../admin-console/models/domain/master-password-policy-options\";\nimport { HashPurpose } from \"../../enums\";\nimport { AppIdService } from \"../../platform/abstractions/app-id.service\";\nimport { CryptoService } from \"../../platform/abstractions/crypto.service\";\nimport { LogService } from \"../../platform/abstractions/log.service\";\nimport { MessagingService } from \"../../platform/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../platform/abstractions/platform-utils.service\";\nimport { StateService } from \"../../platform/abstractions/state.service\";\nimport { MasterKey } from \"../../platform/models/domain/symmetric-crypto-key\";\nimport { PasswordStrengthServiceAbstraction } from \"../../tools/password-strength\";\nimport { AuthService } from \"../abstractions/auth.service\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { TwoFactorService } from \"../abstractions/two-factor.service\";\nimport { AuthResult } from \"../models/domain/auth-result\";\nimport { ForceResetPasswordReason } from \"../models/domain/force-reset-password-reason\";\nimport { PasswordLogInCredentials } from \"../models/domain/log-in-credentials\";\nimport { PasswordTokenRequest } from \"../models/request/identity-token/password-token.request\";\nimport { TokenTwoFactorRequest } from \"../models/request/identity-token/token-two-factor.request\";\nimport { IdentityCaptchaResponse } from \"../models/response/identity-captcha.response\";\nimport { IdentityTokenResponse } from \"../models/response/identity-token.response\";\nimport { IdentityTwoFactorResponse } from \"../models/response/identity-two-factor.response\";\n\nimport { LogInStrategy } from \"./login.strategy\";\n\nexport class PasswordLogInStrategy extends LogInStrategy {\n  get email() {\n    return this.tokenRequest.email;\n  }\n\n  get masterPasswordHash() {\n    return this.tokenRequest.masterPasswordHash;\n  }\n\n  tokenRequest: PasswordTokenRequest;\n\n  private localMasterKeyHash: string;\n  private masterKey: MasterKey;\n\n  /**\n   * Options to track if the user needs to update their password due to a password that does not meet an organization's\n   * master password policy.\n   */\n  private forcePasswordResetReason: ForceResetPasswordReason = ForceResetPasswordReason.None;\n\n  constructor(\n    cryptoService: CryptoService,\n    apiService: ApiService,\n    tokenService: TokenService,\n    appIdService: AppIdService,\n    platformUtilsService: PlatformUtilsService,\n    messagingService: MessagingService,\n    logService: LogService,\n    protected stateService: StateService,\n    twoFactorService: TwoFactorService,\n    private passwordStrengthService: PasswordStrengthServiceAbstraction,\n    private policyService: PolicyService,\n    private authService: AuthService\n  ) {\n    super(\n      cryptoService,\n      apiService,\n      tokenService,\n      appIdService,\n      platformUtilsService,\n      messagingService,\n      logService,\n      stateService,\n      twoFactorService\n    );\n  }\n\n  override async logInTwoFactor(\n    twoFactor: TokenTwoFactorRequest,\n    captchaResponse: string\n  ): Promise<AuthResult> {\n    this.tokenRequest.captchaResponse = captchaResponse ?? this.captchaBypassToken;\n    const result = await super.logInTwoFactor(twoFactor);\n\n    // 2FA was successful, save the force update password options with the state service if defined\n    if (\n      !result.requiresTwoFactor &&\n      !result.requiresCaptcha &&\n      this.forcePasswordResetReason != ForceResetPasswordReason.None\n    ) {\n      await this.stateService.setForcePasswordResetReason(this.forcePasswordResetReason);\n      result.forcePasswordReset = this.forcePasswordResetReason;\n    }\n\n    return result;\n  }\n\n  override async logIn(credentials: PasswordLogInCredentials) {\n    const { email, masterPassword, captchaToken, twoFactor } = credentials;\n\n    this.masterKey = await this.authService.makePreloginKey(masterPassword, email);\n\n    // Hash the password early (before authentication) so we don't persist it in memory in plaintext\n    this.localMasterKeyHash = await this.cryptoService.hashMasterKey(\n      masterPassword,\n      this.masterKey,\n      HashPurpose.LocalAuthorization\n    );\n    const masterKeyHash = await this.cryptoService.hashMasterKey(masterPassword, this.masterKey);\n\n    this.tokenRequest = new PasswordTokenRequest(\n      email,\n      masterKeyHash,\n      captchaToken,\n      await this.buildTwoFactor(twoFactor),\n      await this.buildDeviceRequest()\n    );\n\n    const [authResult, identityResponse] = await this.startLogIn();\n\n    const masterPasswordPolicyOptions =\n      this.getMasterPasswordPolicyOptionsFromResponse(identityResponse);\n\n    // The identity result can contain master password policies for the user's organizations\n    if (masterPasswordPolicyOptions?.enforceOnLogin) {\n      // If there is a policy active, evaluate the supplied password before its no longer in memory\n      const meetsRequirements = this.evaluateMasterPassword(\n        credentials,\n        masterPasswordPolicyOptions\n      );\n\n      if (!meetsRequirements) {\n        if (authResult.requiresCaptcha || authResult.requiresTwoFactor) {\n          // Save the flag to this strategy for later use as the master password is about to pass out of scope\n          this.forcePasswordResetReason = ForceResetPasswordReason.WeakMasterPassword;\n        } else {\n          // Authentication was successful, save the force update password options with the state service\n          await this.stateService.setForcePasswordResetReason(\n            ForceResetPasswordReason.WeakMasterPassword\n          );\n          authResult.forcePasswordReset = ForceResetPasswordReason.WeakMasterPassword;\n        }\n      }\n    }\n    return authResult;\n  }\n\n  protected override async setMasterKey(response: IdentityTokenResponse) {\n    await this.cryptoService.setMasterKey(this.masterKey);\n    await this.cryptoService.setMasterKeyHash(this.localMasterKeyHash);\n  }\n\n  protected override async setUserKey(response: IdentityTokenResponse): Promise<void> {\n    // If migration is required, we won't have a user key to set yet.\n    if (this.encryptionKeyMigrationRequired(response)) {\n      return;\n    }\n    await this.cryptoService.setMasterKeyEncryptedUserKey(response.key);\n\n    const masterKey = await this.cryptoService.getMasterKey();\n    if (masterKey) {\n      const userKey = await this.cryptoService.decryptUserKeyWithMasterKey(masterKey);\n      await this.cryptoService.setUserKey(userKey);\n    }\n  }\n\n  protected override async setPrivateKey(response: IdentityTokenResponse): Promise<void> {\n    await this.cryptoService.setPrivateKey(\n      response.privateKey ?? (await this.createKeyPairForOldAccount())\n    );\n  }\n\n  protected override encryptionKeyMigrationRequired(response: IdentityTokenResponse): boolean {\n    return !response.key;\n  }\n\n  private getMasterPasswordPolicyOptionsFromResponse(\n    response: IdentityTokenResponse | IdentityTwoFactorResponse | IdentityCaptchaResponse\n  ): MasterPasswordPolicyOptions {\n    if (response == null || response instanceof IdentityCaptchaResponse) {\n      return null;\n    }\n    return MasterPasswordPolicyOptions.fromResponse(response.masterPasswordPolicy);\n  }\n\n  private evaluateMasterPassword(\n    { masterPassword, email }: PasswordLogInCredentials,\n    options: MasterPasswordPolicyOptions\n  ): boolean {\n    const passwordStrength = this.passwordStrengthService.getPasswordStrength(\n      masterPassword,\n      email\n    )?.score;\n\n    return this.policyService.evaluateMasterPassword(passwordStrength, masterPassword, options);\n  }\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { AppIdService } from \"../../platform/abstractions/app-id.service\";\nimport { CryptoService } from \"../../platform/abstractions/crypto.service\";\nimport { LogService } from \"../../platform/abstractions/log.service\";\nimport { MessagingService } from \"../../platform/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../platform/abstractions/platform-utils.service\";\nimport { StateService } from \"../../platform/abstractions/state.service\";\nimport { DeviceTrustCryptoServiceAbstraction } from \"../abstractions/device-trust-crypto.service.abstraction\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { TwoFactorService } from \"../abstractions/two-factor.service\";\nimport { AuthResult } from \"../models/domain/auth-result\";\nimport { PasswordlessLogInCredentials } from \"../models/domain/log-in-credentials\";\nimport { PasswordTokenRequest } from \"../models/request/identity-token/password-token.request\";\nimport { TokenTwoFactorRequest } from \"../models/request/identity-token/token-two-factor.request\";\nimport { IdentityTokenResponse } from \"../models/response/identity-token.response\";\n\nimport { LogInStrategy } from \"./login.strategy\";\n\nexport class PasswordlessLogInStrategy extends LogInStrategy {\n  get email() {\n    return this.tokenRequest.email;\n  }\n\n  get accessCode() {\n    return this.passwordlessCredentials.accessCode;\n  }\n\n  get authRequestId() {\n    return this.passwordlessCredentials.authRequestId;\n  }\n\n  tokenRequest: PasswordTokenRequest;\n  private passwordlessCredentials: PasswordlessLogInCredentials;\n\n  constructor(\n    cryptoService: CryptoService,\n    apiService: ApiService,\n    tokenService: TokenService,\n    appIdService: AppIdService,\n    platformUtilsService: PlatformUtilsService,\n    messagingService: MessagingService,\n    logService: LogService,\n    stateService: StateService,\n    twoFactorService: TwoFactorService,\n    private deviceTrustCryptoService: DeviceTrustCryptoServiceAbstraction\n  ) {\n    super(\n      cryptoService,\n      apiService,\n      tokenService,\n      appIdService,\n      platformUtilsService,\n      messagingService,\n      logService,\n      stateService,\n      twoFactorService\n    );\n  }\n\n  override async logIn(credentials: PasswordlessLogInCredentials) {\n    this.passwordlessCredentials = credentials;\n\n    this.tokenRequest = new PasswordTokenRequest(\n      credentials.email,\n      credentials.accessCode,\n      null,\n      await this.buildTwoFactor(credentials.twoFactor),\n      await this.buildDeviceRequest()\n    );\n\n    this.tokenRequest.setPasswordlessAccessCode(credentials.authRequestId);\n    const [authResult] = await this.startLogIn();\n    return authResult;\n  }\n\n  override async logInTwoFactor(\n    twoFactor: TokenTwoFactorRequest,\n    captchaResponse: string\n  ): Promise<AuthResult> {\n    this.tokenRequest.captchaResponse = captchaResponse ?? this.captchaBypassToken;\n    return super.logInTwoFactor(twoFactor);\n  }\n\n  protected override async setMasterKey(response: IdentityTokenResponse) {\n    if (\n      this.passwordlessCredentials.decryptedMasterKey &&\n      this.passwordlessCredentials.decryptedMasterKeyHash\n    ) {\n      await this.cryptoService.setMasterKey(this.passwordlessCredentials.decryptedMasterKey);\n      await this.cryptoService.setMasterKeyHash(\n        this.passwordlessCredentials.decryptedMasterKeyHash\n      );\n    }\n  }\n\n  protected override async setUserKey(response: IdentityTokenResponse): Promise<void> {\n    // User now may or may not have a master password\n    // but set the master key encrypted user key if it exists regardless\n    await this.cryptoService.setMasterKeyEncryptedUserKey(response.key);\n\n    if (this.passwordlessCredentials.decryptedUserKey) {\n      await this.cryptoService.setUserKey(this.passwordlessCredentials.decryptedUserKey);\n    } else {\n      await this.trySetUserKeyWithMasterKey();\n      // Establish trust if required after setting user key\n      await this.deviceTrustCryptoService.trustDeviceIfRequired();\n    }\n  }\n\n  private async trySetUserKeyWithMasterKey(): Promise<void> {\n    const masterKey = await this.cryptoService.getMasterKey();\n    if (masterKey) {\n      const userKey = await this.cryptoService.decryptUserKeyWithMasterKey(masterKey);\n      await this.cryptoService.setUserKey(userKey);\n    }\n  }\n\n  protected override async setPrivateKey(response: IdentityTokenResponse): Promise<void> {\n    await this.cryptoService.setPrivateKey(\n      response.privateKey ?? (await this.createKeyPairForOldAccount())\n    );\n  }\n}\n","import { DeviceRequest } from \"./device.request\";\nimport { TokenTwoFactorRequest } from \"./token-two-factor.request\";\nimport { TokenRequest } from \"./token.request\";\n\nexport class SsoTokenRequest extends TokenRequest {\n  constructor(\n    public code: string,\n    public codeVerifier: string,\n    public redirectUri: string,\n    protected twoFactor: TokenTwoFactorRequest,\n    device?: DeviceRequest\n  ) {\n    super(twoFactor, device);\n  }\n\n  toIdentityToken(clientId: string) {\n    const obj = super.toIdentityToken(clientId);\n\n    obj.grant_type = \"authorization_code\";\n    obj.code = this.code;\n    obj.code_verifier = this.codeVerifier;\n    obj.redirect_uri = this.redirectUri;\n\n    return obj;\n  }\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { AuthRequestResponse } from \"../../auth/models/response/auth-request.response\";\nimport { HttpStatusCode } from \"../../enums\";\nimport { ErrorResponse } from \"../../models/response/error.response\";\nimport { AppIdService } from \"../../platform/abstractions/app-id.service\";\nimport { CryptoService } from \"../../platform/abstractions/crypto.service\";\nimport { I18nService } from \"../../platform/abstractions/i18n.service\";\nimport { LogService } from \"../../platform/abstractions/log.service\";\nimport { MessagingService } from \"../../platform/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../platform/abstractions/platform-utils.service\";\nimport { StateService } from \"../../platform/abstractions/state.service\";\nimport { AuthRequestCryptoServiceAbstraction } from \"../abstractions/auth-request-crypto.service.abstraction\";\nimport { DeviceTrustCryptoServiceAbstraction } from \"../abstractions/device-trust-crypto.service.abstraction\";\nimport { KeyConnectorService } from \"../abstractions/key-connector.service\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { TwoFactorService } from \"../abstractions/two-factor.service\";\nimport { ForceResetPasswordReason } from \"../models/domain/force-reset-password-reason\";\nimport { SsoLogInCredentials } from \"../models/domain/log-in-credentials\";\nimport { SsoTokenRequest } from \"../models/request/identity-token/sso-token.request\";\nimport { IdentityTokenResponse } from \"../models/response/identity-token.response\";\n\nimport { LogInStrategy } from \"./login.strategy\";\n\nexport class SsoLogInStrategy extends LogInStrategy {\n  tokenRequest: SsoTokenRequest;\n  orgId: string;\n\n  // A session token server side to serve as an authentication factor for the user\n  // in order to send email OTPs to the user's configured 2FA email address\n  // as we don't have a master password hash or other verifiable secret when using SSO.\n  ssoEmail2FaSessionToken?: string;\n  email?: string; // email not preserved through SSO process so get from server\n\n  constructor(\n    cryptoService: CryptoService,\n    apiService: ApiService,\n    tokenService: TokenService,\n    appIdService: AppIdService,\n    platformUtilsService: PlatformUtilsService,\n    messagingService: MessagingService,\n    logService: LogService,\n    stateService: StateService,\n    twoFactorService: TwoFactorService,\n    private keyConnectorService: KeyConnectorService,\n    private deviceTrustCryptoService: DeviceTrustCryptoServiceAbstraction,\n    private authReqCryptoService: AuthRequestCryptoServiceAbstraction,\n    private i18nService: I18nService\n  ) {\n    super(\n      cryptoService,\n      apiService,\n      tokenService,\n      appIdService,\n      platformUtilsService,\n      messagingService,\n      logService,\n      stateService,\n      twoFactorService\n    );\n  }\n\n  async logIn(credentials: SsoLogInCredentials) {\n    this.orgId = credentials.orgId;\n    this.tokenRequest = new SsoTokenRequest(\n      credentials.code,\n      credentials.codeVerifier,\n      credentials.redirectUrl,\n      await this.buildTwoFactor(credentials.twoFactor),\n      await this.buildDeviceRequest()\n    );\n\n    const [ssoAuthResult] = await this.startLogIn();\n\n    this.email = ssoAuthResult.email;\n    this.ssoEmail2FaSessionToken = ssoAuthResult.ssoEmail2FaSessionToken;\n\n    // Auth guard currently handles redirects for this.\n    if (ssoAuthResult.forcePasswordReset == ForceResetPasswordReason.AdminForcePasswordReset) {\n      await this.stateService.setForcePasswordResetReason(ssoAuthResult.forcePasswordReset);\n    }\n\n    return ssoAuthResult;\n  }\n\n  protected override async setMasterKey(tokenResponse: IdentityTokenResponse) {\n    // The only way we can be setting a master key at this point is if we are using Key Connector.\n    // First, check to make sure that we should do so based on the token response.\n    if (this.shouldSetMasterKeyFromKeyConnector(tokenResponse)) {\n      // If we're here, we know that the user should use Key Connector (they have a KeyConnectorUrl) and does not have a master password.\n      // We can now check the key on the token response to see whether they are a brand new user or an existing user.\n      // The presence of a masterKeyEncryptedUserKey indicates that the user has already been provisioned in Key Connector.\n      const newSsoUser = tokenResponse.key == null;\n      if (newSsoUser) {\n        await this.keyConnectorService.convertNewSsoUserToKeyConnector(tokenResponse, this.orgId);\n      } else {\n        const keyConnectorUrl = this.getKeyConnectorUrl(tokenResponse);\n        await this.keyConnectorService.setMasterKeyFromUrl(keyConnectorUrl);\n      }\n    }\n  }\n\n  /**\n   * Determines if it is possible set the `masterKey` from Key Connector.\n   * @param tokenResponse\n   * @returns `true` if the master key can be set from Key Connector, `false` otherwise\n   */\n  private shouldSetMasterKeyFromKeyConnector(tokenResponse: IdentityTokenResponse): boolean {\n    const userDecryptionOptions = tokenResponse?.userDecryptionOptions;\n\n    if (userDecryptionOptions != null) {\n      const userHasMasterPassword = userDecryptionOptions.hasMasterPassword;\n      const userHasKeyConnectorUrl =\n        userDecryptionOptions.keyConnectorOption?.keyConnectorUrl != null;\n\n      // In order for us to set the master key from Key Connector, we need to have a Key Connector URL\n      // and the user must not have a master password.\n      return userHasKeyConnectorUrl && !userHasMasterPassword;\n    } else {\n      // In pre-TDE versions of the server, the userDecryptionOptions will not be present.\n      // In this case, we can determine if the user has a master password and has a Key Connector URL by\n      // just checking the keyConnectorUrl property. This is because the server short-circuits on the response\n      // and will not pass back the URL in the response if the user has a master password.\n      // TODO: remove compatibility check after 2023.10 release (https://bitwarden.atlassian.net/browse/PM-3537)\n      return tokenResponse.keyConnectorUrl != null;\n    }\n  }\n\n  private getKeyConnectorUrl(tokenResponse: IdentityTokenResponse): string {\n    // TODO: remove tokenResponse.keyConnectorUrl reference after 2023.10 release (https://bitwarden.atlassian.net/browse/PM-3537)\n    const userDecryptionOptions = tokenResponse?.userDecryptionOptions;\n    return (\n      tokenResponse.keyConnectorUrl ?? userDecryptionOptions?.keyConnectorOption?.keyConnectorUrl\n    );\n  }\n\n  // TODO: future passkey login strategy will need to support setting user key (decrypting via TDE or admin approval request)\n  // so might be worth moving this logic to a common place (base login strategy or a separate service?)\n  protected override async setUserKey(tokenResponse: IdentityTokenResponse): Promise<void> {\n    const masterKeyEncryptedUserKey = tokenResponse.key;\n\n    // Note: masterKeyEncryptedUserKey is undefined for SSO JIT provisioned users\n    // on account creation and subsequent logins (confirmed or unconfirmed)\n    // but that is fine for TDE so we cannot return if it is undefined\n\n    if (masterKeyEncryptedUserKey) {\n      // set the master key encrypted user key if it exists\n      await this.cryptoService.setMasterKeyEncryptedUserKey(masterKeyEncryptedUserKey);\n    }\n\n    const userDecryptionOptions = tokenResponse?.userDecryptionOptions;\n\n    // Note: TDE and key connector are mutually exclusive\n    if (userDecryptionOptions?.trustedDeviceOption) {\n      await this.trySetUserKeyWithApprovedAdminRequestIfExists();\n\n      const hasUserKey = await this.cryptoService.hasUserKey();\n\n      // Only try to set user key with device key if admin approval request was not successful\n      if (!hasUserKey) {\n        await this.trySetUserKeyWithDeviceKey(tokenResponse);\n      }\n    } else if (\n      masterKeyEncryptedUserKey != null &&\n      this.getKeyConnectorUrl(tokenResponse) != null\n    ) {\n      // Key connector enabled for user\n      await this.trySetUserKeyWithMasterKey();\n    }\n\n    // Note: In the traditional SSO flow with MP without key connector, the lock component\n    // is responsible for deriving master key from MP entry and then decrypting the user key\n  }\n\n  private async trySetUserKeyWithApprovedAdminRequestIfExists(): Promise<void> {\n    // At this point a user could have an admin auth request that has been approved\n    const adminAuthReqStorable = await this.stateService.getAdminAuthRequest();\n\n    if (!adminAuthReqStorable) {\n      return;\n    }\n\n    // Call server to see if admin auth request has been approved\n    let adminAuthReqResponse: AuthRequestResponse;\n\n    try {\n      adminAuthReqResponse = await this.apiService.getAuthRequest(adminAuthReqStorable.id);\n    } catch (error) {\n      if (error instanceof ErrorResponse && error.statusCode === HttpStatusCode.NotFound) {\n        // if we get a 404, it means the auth request has been deleted so clear it from storage\n        await this.stateService.setAdminAuthRequest(null);\n      }\n\n      // Always return on an error here as we don't want to block the user from logging in\n      return;\n    }\n\n    if (adminAuthReqResponse?.requestApproved) {\n      // if masterPasswordHash has a value, we will always receive authReqResponse.key\n      // as authRequestPublicKey(masterKey) + authRequestPublicKey(masterPasswordHash)\n      if (adminAuthReqResponse.masterPasswordHash) {\n        await this.authReqCryptoService.setKeysAfterDecryptingSharedMasterKeyAndHash(\n          adminAuthReqResponse,\n          adminAuthReqStorable.privateKey\n        );\n      } else {\n        // if masterPasswordHash is null, we will always receive authReqResponse.key\n        // as authRequestPublicKey(userKey)\n        await this.authReqCryptoService.setUserKeyAfterDecryptingSharedUserKey(\n          adminAuthReqResponse,\n          adminAuthReqStorable.privateKey\n        );\n      }\n\n      if (await this.cryptoService.hasUserKey()) {\n        // Now that we have a decrypted user key in memory, we can check if we\n        // need to establish trust on the current device\n        await this.deviceTrustCryptoService.trustDeviceIfRequired();\n\n        // if we successfully decrypted the user key, we can delete the admin auth request out of state\n        // TODO: eventually we post and clean up DB as well once consumed on client\n        await this.stateService.setAdminAuthRequest(null);\n\n        this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"loginApproved\"));\n      }\n    }\n  }\n\n  private async trySetUserKeyWithDeviceKey(tokenResponse: IdentityTokenResponse): Promise<void> {\n    const trustedDeviceOption = tokenResponse.userDecryptionOptions?.trustedDeviceOption;\n\n    const deviceKey = await this.deviceTrustCryptoService.getDeviceKey();\n    const encDevicePrivateKey = trustedDeviceOption?.encryptedPrivateKey;\n    const encUserKey = trustedDeviceOption?.encryptedUserKey;\n\n    if (!deviceKey || !encDevicePrivateKey || !encUserKey) {\n      return;\n    }\n\n    const userKey = await this.deviceTrustCryptoService.decryptUserKeyWithDeviceKey(\n      encDevicePrivateKey,\n      encUserKey,\n      deviceKey\n    );\n\n    if (userKey) {\n      await this.cryptoService.setUserKey(userKey);\n    }\n  }\n\n  private async trySetUserKeyWithMasterKey(): Promise<void> {\n    const masterKey = await this.cryptoService.getMasterKey();\n\n    // There is a scenario in which the master key is not set here. That will occur if the user\n    // has a master password and is using Key Connector. In that case, we cannot set the master key\n    // because the user hasn't entered their master password yet.\n    // Instead, we'll return here and let the migration to Key Connector handle setting the master key.\n    if (!masterKey) {\n      return;\n    }\n\n    const userKey = await this.cryptoService.decryptUserKeyWithMasterKey(masterKey);\n    await this.cryptoService.setUserKey(userKey);\n  }\n\n  protected override async setPrivateKey(tokenResponse: IdentityTokenResponse): Promise<void> {\n    const newSsoUser = tokenResponse.key == null;\n\n    if (!newSsoUser) {\n      await this.cryptoService.setPrivateKey(\n        tokenResponse.privateKey ?? (await this.createKeyPairForOldAccount())\n      );\n    }\n  }\n}\n","import { DeviceRequest } from \"./device.request\";\nimport { TokenTwoFactorRequest } from \"./token-two-factor.request\";\nimport { TokenRequest } from \"./token.request\";\n\nexport class UserApiTokenRequest extends TokenRequest {\n  constructor(\n    public clientId: string,\n    public clientSecret: string,\n    protected twoFactor: TokenTwoFactorRequest,\n    device?: DeviceRequest\n  ) {\n    super(twoFactor, device);\n  }\n\n  toIdentityToken() {\n    const obj = super.toIdentityToken(this.clientId);\n\n    obj.scope = this.clientId.startsWith(\"organization\") ? \"api.organization\" : \"api\";\n    obj.grant_type = \"client_credentials\";\n    obj.client_secret = this.clientSecret;\n\n    return obj;\n  }\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { TokenService } from \"../../auth/abstractions/token.service\";\nimport { TwoFactorService } from \"../../auth/abstractions/two-factor.service\";\nimport { AppIdService } from \"../../platform/abstractions/app-id.service\";\nimport { CryptoService } from \"../../platform/abstractions/crypto.service\";\nimport { EnvironmentService } from \"../../platform/abstractions/environment.service\";\nimport { LogService } from \"../../platform/abstractions/log.service\";\nimport { MessagingService } from \"../../platform/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../platform/abstractions/platform-utils.service\";\nimport { StateService } from \"../../platform/abstractions/state.service\";\nimport { KeyConnectorService } from \"../abstractions/key-connector.service\";\nimport { UserApiLogInCredentials } from \"../models/domain/log-in-credentials\";\nimport { UserApiTokenRequest } from \"../models/request/identity-token/user-api-token.request\";\nimport { IdentityTokenResponse } from \"../models/response/identity-token.response\";\n\nimport { LogInStrategy } from \"./login.strategy\";\n\nexport class UserApiLogInStrategy extends LogInStrategy {\n  tokenRequest: UserApiTokenRequest;\n\n  constructor(\n    cryptoService: CryptoService,\n    apiService: ApiService,\n    tokenService: TokenService,\n    appIdService: AppIdService,\n    platformUtilsService: PlatformUtilsService,\n    messagingService: MessagingService,\n    logService: LogService,\n    stateService: StateService,\n    twoFactorService: TwoFactorService,\n    private environmentService: EnvironmentService,\n    private keyConnectorService: KeyConnectorService\n  ) {\n    super(\n      cryptoService,\n      apiService,\n      tokenService,\n      appIdService,\n      platformUtilsService,\n      messagingService,\n      logService,\n      stateService,\n      twoFactorService\n    );\n  }\n\n  override async logIn(credentials: UserApiLogInCredentials) {\n    this.tokenRequest = new UserApiTokenRequest(\n      credentials.clientId,\n      credentials.clientSecret,\n      await this.buildTwoFactor(),\n      await this.buildDeviceRequest()\n    );\n\n    const [authResult] = await this.startLogIn();\n    return authResult;\n  }\n\n  protected override async setMasterKey(response: IdentityTokenResponse) {\n    if (response.apiUseKeyConnector) {\n      const keyConnectorUrl = this.environmentService.getKeyConnectorUrl();\n      await this.keyConnectorService.setMasterKeyFromUrl(keyConnectorUrl);\n    }\n  }\n\n  protected override async setUserKey(response: IdentityTokenResponse): Promise<void> {\n    await this.cryptoService.setMasterKeyEncryptedUserKey(response.key);\n\n    if (response.apiUseKeyConnector) {\n      const masterKey = await this.cryptoService.getMasterKey();\n      if (masterKey) {\n        const userKey = await this.cryptoService.decryptUserKeyWithMasterKey(masterKey);\n        await this.cryptoService.setUserKey(userKey);\n      }\n    }\n  }\n\n  protected override async setPrivateKey(response: IdentityTokenResponse): Promise<void> {\n    await this.cryptoService.setPrivateKey(\n      response.privateKey ?? (await this.createKeyPairForOldAccount())\n    );\n  }\n\n  protected async saveAccountInformation(tokenResponse: IdentityTokenResponse) {\n    await super.saveAccountInformation(tokenResponse);\n    await this.stateService.setApiKeyClientId(this.tokenRequest.clientId);\n    await this.stateService.setApiKeyClientSecret(this.tokenRequest.clientSecret);\n  }\n}\n","export class PasswordlessAuthRequest {\n  constructor(\n    readonly key: string,\n    readonly masterPasswordHash: string,\n    readonly deviceIdentifier: string,\n    readonly requestApproved: boolean\n  ) {}\n}\n","import { Observable, Subject } from \"rxjs\";\n\nimport { ApiService } from \"../../abstractions/api.service\";\nimport { PolicyService } from \"../../admin-console/abstractions/policy/policy.service.abstraction\";\nimport { KdfType, KeySuffixOptions } from \"../../enums\";\nimport { PreloginRequest } from \"../../models/request/prelogin.request\";\nimport { ErrorResponse } from \"../../models/response/error.response\";\nimport { AuthRequestPushNotification } from \"../../models/response/notification.response\";\nimport { AppIdService } from \"../../platform/abstractions/app-id.service\";\nimport { CryptoService } from \"../../platform/abstractions/crypto.service\";\nimport { EncryptService } from \"../../platform/abstractions/encrypt.service\";\nimport { EnvironmentService } from \"../../platform/abstractions/environment.service\";\nimport { I18nService } from \"../../platform/abstractions/i18n.service\";\nimport { LogService } from \"../../platform/abstractions/log.service\";\nimport { MessagingService } from \"../../platform/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../platform/abstractions/platform-utils.service\";\nimport { StateService } from \"../../platform/abstractions/state.service\";\nimport { Utils } from \"../../platform/misc/utils\";\nimport { MasterKey } from \"../../platform/models/domain/symmetric-crypto-key\";\nimport { PasswordStrengthServiceAbstraction } from \"../../tools/password-strength\";\nimport { AuthRequestCryptoServiceAbstraction } from \"../abstractions/auth-request-crypto.service.abstraction\";\nimport { AuthService as AuthServiceAbstraction } from \"../abstractions/auth.service\";\nimport { DeviceTrustCryptoServiceAbstraction } from \"../abstractions/device-trust-crypto.service.abstraction\";\nimport { KeyConnectorService } from \"../abstractions/key-connector.service\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { TwoFactorService } from \"../abstractions/two-factor.service\";\nimport { AuthenticationStatus } from \"../enums/authentication-status\";\nimport { AuthenticationType } from \"../enums/authentication-type\";\nimport { PasswordLogInStrategy } from \"../login-strategies/password-login.strategy\";\nimport { PasswordlessLogInStrategy } from \"../login-strategies/passwordless-login.strategy\";\nimport { SsoLogInStrategy } from \"../login-strategies/sso-login.strategy\";\nimport { UserApiLogInStrategy } from \"../login-strategies/user-api-login.strategy\";\nimport { AuthResult } from \"../models/domain/auth-result\";\nimport { KdfConfig } from \"../models/domain/kdf-config\";\nimport {\n  PasswordlessLogInCredentials,\n  PasswordLogInCredentials,\n  SsoLogInCredentials,\n  UserApiLogInCredentials,\n} from \"../models/domain/log-in-credentials\";\nimport { TokenTwoFactorRequest } from \"../models/request/identity-token/token-two-factor.request\";\nimport { PasswordlessAuthRequest } from \"../models/request/passwordless-auth.request\";\nimport { AuthRequestResponse } from \"../models/response/auth-request.response\";\n\nconst sessionTimeoutLength = 2 * 60 * 1000; // 2 minutes\n\nexport class AuthService implements AuthServiceAbstraction {\n  get email(): string {\n    if (\n      this.logInStrategy instanceof PasswordLogInStrategy ||\n      this.logInStrategy instanceof PasswordlessLogInStrategy ||\n      this.logInStrategy instanceof SsoLogInStrategy\n    ) {\n      return this.logInStrategy.email;\n    }\n\n    return null;\n  }\n\n  get masterPasswordHash(): string {\n    return this.logInStrategy instanceof PasswordLogInStrategy\n      ? this.logInStrategy.masterPasswordHash\n      : null;\n  }\n\n  get accessCode(): string {\n    return this.logInStrategy instanceof PasswordlessLogInStrategy\n      ? this.logInStrategy.accessCode\n      : null;\n  }\n\n  get authRequestId(): string {\n    return this.logInStrategy instanceof PasswordlessLogInStrategy\n      ? this.logInStrategy.authRequestId\n      : null;\n  }\n\n  get ssoEmail2FaSessionToken(): string {\n    return this.logInStrategy instanceof SsoLogInStrategy\n      ? this.logInStrategy.ssoEmail2FaSessionToken\n      : null;\n  }\n\n  private logInStrategy:\n    | UserApiLogInStrategy\n    | PasswordLogInStrategy\n    | SsoLogInStrategy\n    | PasswordlessLogInStrategy;\n  private sessionTimeout: any;\n\n  private pushNotificationSubject = new Subject<string>();\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected apiService: ApiService,\n    protected tokenService: TokenService,\n    protected appIdService: AppIdService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected messagingService: MessagingService,\n    protected logService: LogService,\n    protected keyConnectorService: KeyConnectorService,\n    protected environmentService: EnvironmentService,\n    protected stateService: StateService,\n    protected twoFactorService: TwoFactorService,\n    protected i18nService: I18nService,\n    protected encryptService: EncryptService,\n    protected passwordStrengthService: PasswordStrengthServiceAbstraction,\n    protected policyService: PolicyService,\n    protected deviceTrustCryptoService: DeviceTrustCryptoServiceAbstraction,\n    protected authReqCryptoService: AuthRequestCryptoServiceAbstraction\n  ) {}\n\n  async logIn(\n    credentials:\n      | UserApiLogInCredentials\n      | PasswordLogInCredentials\n      | SsoLogInCredentials\n      | PasswordlessLogInCredentials\n  ): Promise<AuthResult> {\n    this.clearState();\n\n    let strategy:\n      | UserApiLogInStrategy\n      | PasswordLogInStrategy\n      | SsoLogInStrategy\n      | PasswordlessLogInStrategy;\n\n    switch (credentials.type) {\n      case AuthenticationType.Password:\n        strategy = new PasswordLogInStrategy(\n          this.cryptoService,\n          this.apiService,\n          this.tokenService,\n          this.appIdService,\n          this.platformUtilsService,\n          this.messagingService,\n          this.logService,\n          this.stateService,\n          this.twoFactorService,\n          this.passwordStrengthService,\n          this.policyService,\n          this\n        );\n        break;\n      case AuthenticationType.Sso:\n        strategy = new SsoLogInStrategy(\n          this.cryptoService,\n          this.apiService,\n          this.tokenService,\n          this.appIdService,\n          this.platformUtilsService,\n          this.messagingService,\n          this.logService,\n          this.stateService,\n          this.twoFactorService,\n          this.keyConnectorService,\n          this.deviceTrustCryptoService,\n          this.authReqCryptoService,\n          this.i18nService\n        );\n        break;\n      case AuthenticationType.UserApi:\n        strategy = new UserApiLogInStrategy(\n          this.cryptoService,\n          this.apiService,\n          this.tokenService,\n          this.appIdService,\n          this.platformUtilsService,\n          this.messagingService,\n          this.logService,\n          this.stateService,\n          this.twoFactorService,\n          this.environmentService,\n          this.keyConnectorService\n        );\n        break;\n      case AuthenticationType.Passwordless:\n        strategy = new PasswordlessLogInStrategy(\n          this.cryptoService,\n          this.apiService,\n          this.tokenService,\n          this.appIdService,\n          this.platformUtilsService,\n          this.messagingService,\n          this.logService,\n          this.stateService,\n          this.twoFactorService,\n          this.deviceTrustCryptoService\n        );\n        break;\n    }\n\n    const result = await strategy.logIn(credentials as any);\n\n    if (result?.requiresTwoFactor) {\n      this.saveState(strategy);\n    }\n    return result;\n  }\n\n  async logInTwoFactor(\n    twoFactor: TokenTwoFactorRequest,\n    captchaResponse: string\n  ): Promise<AuthResult> {\n    if (this.logInStrategy == null) {\n      throw new Error(this.i18nService.t(\"sessionTimeout\"));\n    }\n\n    try {\n      const result = await this.logInStrategy.logInTwoFactor(twoFactor, captchaResponse);\n\n      // Only clear state if 2FA token has been accepted, otherwise we need to be able to try again\n      if (!result.requiresTwoFactor && !result.requiresCaptcha) {\n        this.clearState();\n      }\n      return result;\n    } catch (e) {\n      // API exceptions are okay, but if there are any unhandled client-side errors then clear state to be safe\n      if (!(e instanceof ErrorResponse)) {\n        this.clearState();\n      }\n      throw e;\n    }\n  }\n\n  logOut(callback: () => void) {\n    callback();\n    this.messagingService.send(\"loggedOut\");\n  }\n\n  authingWithUserApiKey(): boolean {\n    return this.logInStrategy instanceof UserApiLogInStrategy;\n  }\n\n  authingWithSso(): boolean {\n    return this.logInStrategy instanceof SsoLogInStrategy;\n  }\n\n  authingWithPassword(): boolean {\n    return this.logInStrategy instanceof PasswordLogInStrategy;\n  }\n\n  authingWithPasswordless(): boolean {\n    return this.logInStrategy instanceof PasswordlessLogInStrategy;\n  }\n\n  async getAuthStatus(userId?: string): Promise<AuthenticationStatus> {\n    // If we don't have an access token or userId, we're logged out\n    const isAuthenticated = await this.stateService.getIsAuthenticated({ userId: userId });\n    if (!isAuthenticated) {\n      return AuthenticationStatus.LoggedOut;\n    }\n\n    // If we don't have a user key in memory, we're locked\n    if (!(await this.cryptoService.hasUserKeyInMemory(userId))) {\n      // Check if the user has vault timeout set to never and verify that\n      // they've never unlocked their vault\n      const neverLock =\n        (await this.cryptoService.hasUserKeyStored(KeySuffixOptions.Auto, userId)) &&\n        !(await this.stateService.getEverBeenUnlocked({ userId: userId }));\n\n      if (neverLock) {\n        // Attempt to get the key from storage and set it in memory\n        const userKey = await this.cryptoService.getUserKeyFromStorage(\n          KeySuffixOptions.Auto,\n          userId\n        );\n        await this.cryptoService.setUserKey(userKey, userId);\n      }\n    }\n\n    // We do another check here in case setting the auto key failed\n    const hasKeyInMemory = await this.cryptoService.hasUserKeyInMemory(userId);\n    if (!hasKeyInMemory) {\n      return AuthenticationStatus.Locked;\n    }\n\n    return AuthenticationStatus.Unlocked;\n  }\n\n  async makePreloginKey(masterPassword: string, email: string): Promise<MasterKey> {\n    email = email.trim().toLowerCase();\n    let kdf: KdfType = null;\n    let kdfConfig: KdfConfig = null;\n    try {\n      const preloginResponse = await this.apiService.postPrelogin(new PreloginRequest(email));\n      if (preloginResponse != null) {\n        kdf = preloginResponse.kdf;\n        kdfConfig = new KdfConfig(\n          preloginResponse.kdfIterations,\n          preloginResponse.kdfMemory,\n          preloginResponse.kdfParallelism\n        );\n      }\n    } catch (e) {\n      if (e == null || e.statusCode !== 404) {\n        throw e;\n      }\n    }\n    return await this.cryptoService.makeMasterKey(masterPassword, email, kdf, kdfConfig);\n  }\n\n  async authResponsePushNotification(notification: AuthRequestPushNotification): Promise<any> {\n    this.pushNotificationSubject.next(notification.id);\n  }\n\n  getPushNotificationObs$(): Observable<any> {\n    return this.pushNotificationSubject.asObservable();\n  }\n\n  async passwordlessLogin(\n    id: string,\n    key: string,\n    requestApproved: boolean\n  ): Promise<AuthRequestResponse> {\n    const pubKey = Utils.fromB64ToArray(key);\n\n    const masterKey = await this.cryptoService.getMasterKey();\n    let keyToEncrypt;\n    let encryptedMasterKeyHash = null;\n\n    if (masterKey) {\n      keyToEncrypt = masterKey.encKey;\n\n      // Only encrypt the master password hash if masterKey exists as\n      // we won't have a masterKeyHash without a masterKey\n      const masterKeyHash = await this.stateService.getKeyHash();\n      if (masterKeyHash != null) {\n        encryptedMasterKeyHash = await this.cryptoService.rsaEncrypt(\n          Utils.fromUtf8ToArray(masterKeyHash),\n          pubKey\n        );\n      }\n    } else {\n      const userKey = await this.cryptoService.getUserKey();\n      keyToEncrypt = userKey.key;\n    }\n\n    const encryptedKey = await this.cryptoService.rsaEncrypt(keyToEncrypt, pubKey);\n\n    const request = new PasswordlessAuthRequest(\n      encryptedKey.encryptedString,\n      encryptedMasterKeyHash?.encryptedString,\n      await this.appIdService.getAppId(),\n      requestApproved\n    );\n    return await this.apiService.putAuthRequest(id, request);\n  }\n\n  private saveState(\n    strategy:\n      | UserApiLogInStrategy\n      | PasswordLogInStrategy\n      | SsoLogInStrategy\n      | PasswordlessLogInStrategy\n  ) {\n    this.logInStrategy = strategy;\n    this.startSessionTimeout();\n  }\n\n  private clearState() {\n    this.logInStrategy = null;\n    this.clearSessionTimeout();\n  }\n\n  private startSessionTimeout() {\n    this.clearSessionTimeout();\n    this.sessionTimeout = setTimeout(() => this.clearState(), sessionTimeoutLength);\n  }\n\n  private clearSessionTimeout() {\n    if (this.sessionTimeout != null) {\n      clearTimeout(this.sessionTimeout);\n    }\n  }\n}\n","export class SecretVerificationRequest {\n  masterPasswordHash: string;\n  otp: string;\n  authRequestAccessCode: string;\n}\n","import { SecretVerificationRequest } from \"./secret-verification.request\";\n\nexport class UpdateDevicesTrustRequest extends SecretVerificationRequest {\n  currentDevice: DeviceKeysUpdateRequest;\n  otherDevices: OtherDeviceKeysUpdateRequest[];\n}\n\nexport class DeviceKeysUpdateRequest {\n  encryptedPublicKey: string;\n  encryptedUserKey: string;\n}\n\nexport class OtherDeviceKeysUpdateRequest extends DeviceKeysUpdateRequest {\n  id: string;\n}\n","import { AppIdService } from \"../../platform/abstractions/app-id.service\";\nimport { CryptoFunctionService } from \"../../platform/abstractions/crypto-function.service\";\nimport { CryptoService } from \"../../platform/abstractions/crypto.service\";\nimport { EncryptService } from \"../../platform/abstractions/encrypt.service\";\nimport { I18nService } from \"../../platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"../../platform/abstractions/platform-utils.service\";\nimport { StateService } from \"../../platform/abstractions/state.service\";\nimport { EncString } from \"../../platform/models/domain/enc-string\";\nimport {\n  SymmetricCryptoKey,\n  DeviceKey,\n  UserKey,\n} from \"../../platform/models/domain/symmetric-crypto-key\";\nimport { CsprngArray } from \"../../types/csprng\";\nimport { DeviceTrustCryptoServiceAbstraction } from \"../abstractions/device-trust-crypto.service.abstraction\";\nimport { DeviceResponse } from \"../abstractions/devices/responses/device.response\";\nimport { DevicesApiServiceAbstraction } from \"../abstractions/devices-api.service.abstraction\";\nimport { SecretVerificationRequest } from \"../models/request/secret-verification.request\";\nimport {\n  DeviceKeysUpdateRequest,\n  UpdateDevicesTrustRequest,\n} from \"../models/request/update-devices-trust.request\";\n\nexport class DeviceTrustCryptoService implements DeviceTrustCryptoServiceAbstraction {\n  constructor(\n    private cryptoFunctionService: CryptoFunctionService,\n    private cryptoService: CryptoService,\n    private encryptService: EncryptService,\n    private stateService: StateService,\n    private appIdService: AppIdService,\n    private devicesApiService: DevicesApiServiceAbstraction,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService\n  ) {}\n\n  /**\n   * @description Retrieves the users choice to trust the device which can only happen after decryption\n   * Note: this value should only be used once and then reset\n   */\n  async getShouldTrustDevice(): Promise<boolean> {\n    return await this.stateService.getShouldTrustDevice();\n  }\n\n  async setShouldTrustDevice(value: boolean): Promise<void> {\n    await this.stateService.setShouldTrustDevice(value);\n  }\n\n  async trustDeviceIfRequired(): Promise<void> {\n    const shouldTrustDevice = await this.getShouldTrustDevice();\n    if (shouldTrustDevice) {\n      await this.trustDevice();\n      // reset the trust choice\n      await this.setShouldTrustDevice(false);\n    }\n  }\n\n  async trustDevice(): Promise<DeviceResponse> {\n    // Attempt to get user key\n    const userKey: UserKey = await this.cryptoService.getUserKey();\n\n    // If user key is not found, throw error\n    if (!userKey) {\n      throw new Error(\"User symmetric key not found\");\n    }\n\n    // Generate deviceKey\n    const deviceKey = await this.makeDeviceKey();\n\n    // Generate asymmetric RSA key pair: devicePrivateKey, devicePublicKey\n    const [devicePublicKey, devicePrivateKey] = await this.cryptoFunctionService.rsaGenerateKeyPair(\n      2048\n    );\n\n    const [\n      devicePublicKeyEncryptedUserKey,\n      userKeyEncryptedDevicePublicKey,\n      deviceKeyEncryptedDevicePrivateKey,\n    ] = await Promise.all([\n      // Encrypt user key with the DevicePublicKey\n      this.cryptoService.rsaEncrypt(userKey.key, devicePublicKey),\n\n      // Encrypt devicePublicKey with user key\n      this.encryptService.encrypt(devicePublicKey, userKey),\n\n      // Encrypt devicePrivateKey with deviceKey\n      this.encryptService.encrypt(devicePrivateKey, deviceKey),\n    ]);\n\n    // Send encrypted keys to server\n    const deviceIdentifier = await this.appIdService.getAppId();\n    const deviceResponse = await this.devicesApiService.updateTrustedDeviceKeys(\n      deviceIdentifier,\n      devicePublicKeyEncryptedUserKey.encryptedString,\n      userKeyEncryptedDevicePublicKey.encryptedString,\n      deviceKeyEncryptedDevicePrivateKey.encryptedString\n    );\n\n    // store device key in local/secure storage if enc keys posted to server successfully\n    await this.setDeviceKey(deviceKey);\n\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"deviceTrusted\"));\n\n    return deviceResponse;\n  }\n\n  async rotateDevicesTrust(newUserKey: UserKey, masterPasswordHash: string): Promise<void> {\n    const currentDeviceKey = await this.getDeviceKey();\n    if (currentDeviceKey == null) {\n      // If the current device doesn't have a device key available to it, then we can't\n      // rotate any trust at all, so early return.\n      return;\n    }\n\n    // At this point of rotating their keys, they should still have their old user key in state\n    const oldUserKey = await this.stateService.getUserKey();\n\n    const deviceIdentifier = await this.appIdService.getAppId();\n    const secretVerificationRequest = new SecretVerificationRequest();\n    secretVerificationRequest.masterPasswordHash = masterPasswordHash;\n\n    // Get the keys that are used in rotating a devices keys from the server\n    const currentDeviceKeys = await this.devicesApiService.getDeviceKeys(\n      deviceIdentifier,\n      secretVerificationRequest\n    );\n\n    // Decrypt the existing device public key with the old user key\n    const decryptedDevicePublicKey = await this.encryptService.decryptToBytes(\n      currentDeviceKeys.encryptedPublicKey,\n      oldUserKey\n    );\n\n    // Encrypt the brand new user key with the now-decrypted public key for the device\n    const encryptedNewUserKey = await this.cryptoService.rsaEncrypt(\n      newUserKey.key,\n      decryptedDevicePublicKey\n    );\n\n    // Re-encrypt the device public key with the new user key\n    const encryptedDevicePublicKey = await this.encryptService.encrypt(\n      decryptedDevicePublicKey,\n      newUserKey\n    );\n\n    const currentDeviceUpdateRequest = new DeviceKeysUpdateRequest();\n    currentDeviceUpdateRequest.encryptedUserKey = encryptedNewUserKey.encryptedString;\n    currentDeviceUpdateRequest.encryptedPublicKey = encryptedDevicePublicKey.encryptedString;\n\n    // TODO: For device management, allow this method to take an array of device ids that can be looped over and individually rotated\n    // then it can be added to trustRequest.otherDevices.\n\n    const trustRequest = new UpdateDevicesTrustRequest();\n    trustRequest.masterPasswordHash = masterPasswordHash;\n    trustRequest.currentDevice = currentDeviceUpdateRequest;\n    trustRequest.otherDevices = [];\n\n    await this.devicesApiService.updateTrust(trustRequest);\n  }\n\n  async getDeviceKey(): Promise<DeviceKey> {\n    return await this.stateService.getDeviceKey();\n  }\n\n  private async setDeviceKey(deviceKey: DeviceKey | null): Promise<void> {\n    await this.stateService.setDeviceKey(deviceKey);\n  }\n\n  private async makeDeviceKey(): Promise<DeviceKey> {\n    // Create 512-bit device key\n    const randomBytes: CsprngArray = await this.cryptoFunctionService.aesGenerateKey(512);\n    const deviceKey = new SymmetricCryptoKey(randomBytes) as DeviceKey;\n\n    return deviceKey;\n  }\n\n  async decryptUserKeyWithDeviceKey(\n    encryptedDevicePrivateKey: EncString,\n    encryptedUserKey: EncString,\n    deviceKey?: DeviceKey\n  ): Promise<UserKey | null> {\n    // If device key provided use it, otherwise try to retrieve from storage\n    deviceKey ||= await this.getDeviceKey();\n\n    if (!deviceKey) {\n      // User doesn't have a device key anymore so device is untrusted\n      return null;\n    }\n\n    try {\n      // attempt to decrypt encryptedDevicePrivateKey with device key\n      const devicePrivateKey = await this.encryptService.decryptToBytes(\n        encryptedDevicePrivateKey,\n        deviceKey\n      );\n\n      // Attempt to decrypt encryptedUserDataKey with devicePrivateKey\n      const userKey = await this.cryptoService.rsaDecrypt(\n        encryptedUserKey.encryptedString,\n        devicePrivateKey\n      );\n\n      return new SymmetricCryptoKey(userKey) as UserKey;\n    } catch (e) {\n      // If either decryption effort fails, we want to remove the device key\n      await this.setDeviceKey(null);\n\n      return null;\n    }\n  }\n\n  async supportsDeviceTrust(): Promise<boolean> {\n    const decryptionOptions = await this.stateService.getAccountDecryptionOptions();\n    return decryptionOptions?.trustedDeviceOption != null;\n  }\n}\n","import { DeviceType } from \"../../../../enums\";\nimport { View } from \"../../../../models/view/view\";\nimport { DeviceResponse } from \"../responses/device.response\";\n\nexport class DeviceView implements View {\n  id: string;\n  userId: string;\n  name: string;\n  identifier: string;\n  type: DeviceType;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(deviceResponse: DeviceResponse) {\n    Object.assign(this, deviceResponse);\n  }\n}\n","import { Observable, defer, map } from \"rxjs\";\n\nimport { ListResponse } from \"../../../models/response/list.response\";\nimport { DevicesServiceAbstraction } from \"../../abstractions/devices/devices.service.abstraction\";\nimport { DeviceResponse } from \"../../abstractions/devices/responses/device.response\";\nimport { DeviceView } from \"../../abstractions/devices/views/device.view\";\nimport { DevicesApiServiceAbstraction } from \"../../abstractions/devices-api.service.abstraction\";\n\n/**\n * @class DevicesServiceImplementation\n * @implements {DevicesServiceAbstraction}\n * @description Observable based data store service for Devices.\n * note: defer is used to convert the promises to observables and to ensure\n * that observables are created for each subscription\n * (i.e., promsise --> observables are cold until subscribed to)\n */\nexport class DevicesServiceImplementation implements DevicesServiceAbstraction {\n  constructor(private devicesApiService: DevicesApiServiceAbstraction) {}\n\n  /**\n   * @description Gets the list of all devices.\n   */\n  getDevices$(): Observable<Array<DeviceView>> {\n    return defer(() => this.devicesApiService.getDevices()).pipe(\n      map((deviceResponses: ListResponse<DeviceResponse>) => {\n        return deviceResponses.data.map((deviceResponse: DeviceResponse) => {\n          return new DeviceView(deviceResponse);\n        });\n      })\n    );\n  }\n\n  /**\n   * @description Gets the device with the specified identifier.\n   */\n  getDeviceByIdentifier$(deviceIdentifier: string): Observable<DeviceView> {\n    return defer(() => this.devicesApiService.getDeviceByIdentifier(deviceIdentifier)).pipe(\n      map((deviceResponse: DeviceResponse) => new DeviceView(deviceResponse))\n    );\n  }\n\n  /**\n   * @description Checks if a device is known for a user by user's email and device's identifier.\n   */\n  isDeviceKnownForUser$(email: string, deviceIdentifier: string): Observable<boolean> {\n    return defer(() => this.devicesApiService.getKnownDevice(email, deviceIdentifier));\n  }\n\n  /**\n   * @description Updates the keys for the specified device.\n   */\n\n  updateTrustedDeviceKeys$(\n    deviceIdentifier: string,\n    devicePublicKeyEncryptedUserKey: string,\n    userKeyEncryptedDevicePublicKey: string,\n    deviceKeyEncryptedDevicePrivateKey: string\n  ): Observable<DeviceView> {\n    return defer(() =>\n      this.devicesApiService.updateTrustedDeviceKeys(\n        deviceIdentifier,\n        devicePublicKeyEncryptedUserKey,\n        userKeyEncryptedDevicePublicKey,\n        deviceKeyEncryptedDevicePrivateKey\n      )\n    ).pipe(map((deviceResponse: DeviceResponse) => new DeviceView(deviceResponse)));\n  }\n}\n","import { DeviceType } from \"../../../../enums\";\nimport { BaseResponse } from \"../../../../models/response/base.response\";\n\nexport class DeviceResponse extends BaseResponse {\n  id: string;\n  userId: string;\n  name: string;\n  identifier: string;\n  type: DeviceType;\n  creationDate: string;\n  revisionDate: string;\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.identifier = this.getResponseProperty(\"Identifier\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { DeviceType } from \"../../../enums\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\n\nexport class ProtectedDeviceResponse extends BaseResponse {\n  constructor(response: Jsonify<ProtectedDeviceResponse>) {\n    super(response);\n    this.id = this.getResponseProperty(\"id\");\n    this.name = this.getResponseProperty(\"name\");\n    this.identifier = this.getResponseProperty(\"identifier\");\n    this.type = this.getResponseProperty(\"type\");\n    this.creationDate = new Date(this.getResponseProperty(\"creationDate\"));\n    if (response.encryptedUserKey) {\n      this.encryptedUserKey = new EncString(this.getResponseProperty(\"encryptedUserKey\"));\n    }\n    if (response.encryptedPublicKey) {\n      this.encryptedPublicKey = new EncString(this.getResponseProperty(\"encryptedPublicKey\"));\n    }\n  }\n\n  id: string;\n  name: string;\n  type: DeviceType;\n  identifier: string;\n  creationDate: Date;\n  /**\n   * Intended to be the users symmetric key that is encrypted in some form, the current way to encrypt this is with\n   * the devices public key.\n   */\n  encryptedUserKey: EncString;\n  /**\n   * Intended to be the public key that was generated for a device upon trust and encrypted. Currenly encrypted using\n   * a users symmetric key so that when trusted and unlocked a user can decrypt the public key for all their devices.\n   * This enabled a user to rotate the keys for all of their devices.\n   */\n  encryptedPublicKey: EncString;\n}\n","export class TrustedDeviceKeysRequest {\n  constructor(\n    public encryptedUserKey: string,\n    public encryptedPublicKey: string,\n    public encryptedPrivateKey: string\n  ) {}\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { ListResponse } from \"../../models/response/list.response\";\nimport { Utils } from \"../../platform/misc/utils\";\nimport { DeviceResponse } from \"../abstractions/devices/responses/device.response\";\nimport { DevicesApiServiceAbstraction } from \"../abstractions/devices-api.service.abstraction\";\nimport { SecretVerificationRequest } from \"../models/request/secret-verification.request\";\nimport { UpdateDevicesTrustRequest } from \"../models/request/update-devices-trust.request\";\nimport { ProtectedDeviceResponse } from \"../models/response/protected-device.response\";\n\nimport { TrustedDeviceKeysRequest } from \"./devices/requests/trusted-device-keys.request\";\n\nexport class DevicesApiServiceImplementation implements DevicesApiServiceAbstraction {\n  constructor(private apiService: ApiService) {}\n\n  async getKnownDevice(email: string, deviceIdentifier: string): Promise<boolean> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/devices/knowndevice\",\n      null,\n      false,\n      true,\n      null,\n      (headers) => {\n        headers.set(\"X-Device-Identifier\", deviceIdentifier);\n        headers.set(\"X-Request-Email\", Utils.fromUtf8ToUrlB64(email));\n      }\n    );\n    return r as boolean;\n  }\n\n  /**\n   * Get device by identifier\n   * @param deviceIdentifier - client generated id (not device id in DB)\n   */\n  async getDeviceByIdentifier(deviceIdentifier: string): Promise<DeviceResponse> {\n    const r = await this.apiService.send(\n      \"GET\",\n      `/devices/identifier/${deviceIdentifier}`,\n      null,\n      true,\n      true\n    );\n    return new DeviceResponse(r);\n  }\n\n  async getDevices(): Promise<ListResponse<DeviceResponse>> {\n    const r = await this.apiService.send(\"GET\", \"/devices\", null, true, true, null);\n    return new ListResponse(r, DeviceResponse);\n  }\n\n  async updateTrustedDeviceKeys(\n    deviceIdentifier: string,\n    devicePublicKeyEncryptedUserKey: string,\n    userKeyEncryptedDevicePublicKey: string,\n    deviceKeyEncryptedDevicePrivateKey: string\n  ): Promise<DeviceResponse> {\n    const request = new TrustedDeviceKeysRequest(\n      devicePublicKeyEncryptedUserKey,\n      userKeyEncryptedDevicePublicKey,\n      deviceKeyEncryptedDevicePrivateKey\n    );\n\n    const result = await this.apiService.send(\n      \"PUT\",\n      `/devices/${deviceIdentifier}/keys`,\n      request,\n      true,\n      true\n    );\n\n    return new DeviceResponse(result);\n  }\n\n  async updateTrust(updateDevicesTrustRequestModel: UpdateDevicesTrustRequest): Promise<void> {\n    await this.apiService.send(\n      \"POST\",\n      \"/devices/update-trust\",\n      updateDevicesTrustRequestModel,\n      true,\n      false\n    );\n  }\n\n  async getDeviceKeys(\n    deviceIdentifier: string,\n    secretVerificationRequest: SecretVerificationRequest\n  ): Promise<ProtectedDeviceResponse> {\n    const result = await this.apiService.send(\n      \"POST\",\n      `/devices/${deviceIdentifier}/retrieve-keys`,\n      secretVerificationRequest,\n      true,\n      true\n    );\n    return new ProtectedDeviceResponse(result);\n  }\n}\n","export class KeyConnectorUserKeyRequest {\n  key: string;\n\n  constructor(key: string) {\n    this.key = key;\n  }\n}\n","import { KdfType } from \"../../../enums\";\nimport { KeysRequest } from \"../../../models/request/keys.request\";\nimport { KdfConfig } from \"../domain/kdf-config\";\n\nexport class SetKeyConnectorKeyRequest {\n  key: string;\n  keys: KeysRequest;\n  kdf: KdfType;\n  kdfIterations: number;\n  kdfMemory?: number;\n  kdfParallelism?: number;\n  orgIdentifier: string;\n\n  constructor(\n    key: string,\n    kdf: KdfType,\n    kdfConfig: KdfConfig,\n    orgIdentifier: string,\n    keys: KeysRequest\n  ) {\n    this.key = key;\n    this.kdf = kdf;\n    this.kdfIterations = kdfConfig.iterations;\n    this.kdfMemory = kdfConfig.memory;\n    this.kdfParallelism = kdfConfig.parallelism;\n    this.orgIdentifier = orgIdentifier;\n    this.keys = keys;\n  }\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { OrganizationService } from \"../../admin-console/abstractions/organization/organization.service.abstraction\";\nimport { OrganizationUserType } from \"../../admin-console/enums\";\nimport { KeysRequest } from \"../../models/request/keys.request\";\nimport { CryptoFunctionService } from \"../../platform/abstractions/crypto-function.service\";\nimport { CryptoService } from \"../../platform/abstractions/crypto.service\";\nimport { LogService } from \"../../platform/abstractions/log.service\";\nimport { StateService } from \"../../platform/abstractions/state.service\";\nimport { Utils } from \"../../platform/misc/utils\";\nimport { MasterKey, SymmetricCryptoKey } from \"../../platform/models/domain/symmetric-crypto-key\";\nimport { KeyConnectorService as KeyConnectorServiceAbstraction } from \"../abstractions/key-connector.service\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { KdfConfig } from \"../models/domain/kdf-config\";\nimport { KeyConnectorUserKeyRequest } from \"../models/request/key-connector-user-key.request\";\nimport { SetKeyConnectorKeyRequest } from \"../models/request/set-key-connector-key.request\";\nimport { IdentityTokenResponse } from \"../models/response/identity-token.response\";\n\nexport class KeyConnectorService implements KeyConnectorServiceAbstraction {\n  constructor(\n    private stateService: StateService,\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private tokenService: TokenService,\n    private logService: LogService,\n    private organizationService: OrganizationService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private logoutCallback: (expired: boolean, userId?: string) => Promise<void>\n  ) {}\n\n  setUsesKeyConnector(usesKeyConnector: boolean) {\n    return this.stateService.setUsesKeyConnector(usesKeyConnector);\n  }\n\n  async getUsesKeyConnector(): Promise<boolean> {\n    return await this.stateService.getUsesKeyConnector();\n  }\n\n  async userNeedsMigration() {\n    const loggedInUsingSso = await this.tokenService.getIsExternal();\n    const requiredByOrganization = (await this.getManagingOrganization()) != null;\n    const userIsNotUsingKeyConnector = !(await this.getUsesKeyConnector());\n\n    return loggedInUsingSso && requiredByOrganization && userIsNotUsingKeyConnector;\n  }\n\n  async migrateUser() {\n    const organization = await this.getManagingOrganization();\n    const masterKey = await this.cryptoService.getMasterKey();\n    const keyConnectorRequest = new KeyConnectorUserKeyRequest(masterKey.encKeyB64);\n\n    try {\n      await this.apiService.postUserKeyToKeyConnector(\n        organization.keyConnectorUrl,\n        keyConnectorRequest\n      );\n    } catch (e) {\n      this.handleKeyConnectorError(e);\n    }\n\n    await this.apiService.postConvertToKeyConnector();\n  }\n\n  // TODO: UserKey should be renamed to MasterKey and typed accordingly\n  async setMasterKeyFromUrl(url: string) {\n    try {\n      const masterKeyResponse = await this.apiService.getMasterKeyFromKeyConnector(url);\n      const keyArr = Utils.fromB64ToArray(masterKeyResponse.key);\n      const masterKey = new SymmetricCryptoKey(keyArr) as MasterKey;\n      await this.cryptoService.setMasterKey(masterKey);\n    } catch (e) {\n      this.handleKeyConnectorError(e);\n    }\n  }\n\n  async getManagingOrganization() {\n    const orgs = await this.organizationService.getAll();\n    return orgs.find(\n      (o) =>\n        o.keyConnectorEnabled &&\n        o.type !== OrganizationUserType.Admin &&\n        o.type !== OrganizationUserType.Owner &&\n        !o.isProviderUser\n    );\n  }\n\n  async convertNewSsoUserToKeyConnector(tokenResponse: IdentityTokenResponse, orgId: string) {\n    // TODO: Remove after tokenResponse.keyConnectorUrl is deprecated in 2023.10 release (https://bitwarden.atlassian.net/browse/PM-3537)\n    const {\n      kdf,\n      kdfIterations,\n      kdfMemory,\n      kdfParallelism,\n      keyConnectorUrl: legacyKeyConnectorUrl,\n      userDecryptionOptions,\n    } = tokenResponse;\n    const password = await this.cryptoFunctionService.aesGenerateKey(512);\n    const kdfConfig = new KdfConfig(kdfIterations, kdfMemory, kdfParallelism);\n\n    const masterKey = await this.cryptoService.makeMasterKey(\n      Utils.fromBufferToB64(password),\n      await this.tokenService.getEmail(),\n      kdf,\n      kdfConfig\n    );\n    const keyConnectorRequest = new KeyConnectorUserKeyRequest(masterKey.encKeyB64);\n    await this.cryptoService.setMasterKey(masterKey);\n\n    const userKey = await this.cryptoService.makeUserKey(masterKey);\n    await this.cryptoService.setUserKey(userKey[0]);\n    await this.cryptoService.setMasterKeyEncryptedUserKey(userKey[1].encryptedString);\n\n    const [pubKey, privKey] = await this.cryptoService.makeKeyPair();\n\n    try {\n      const keyConnectorUrl =\n        legacyKeyConnectorUrl ?? userDecryptionOptions?.keyConnectorOption?.keyConnectorUrl;\n      await this.apiService.postUserKeyToKeyConnector(keyConnectorUrl, keyConnectorRequest);\n    } catch (e) {\n      this.handleKeyConnectorError(e);\n    }\n\n    const keys = new KeysRequest(pubKey, privKey.encryptedString);\n    const setPasswordRequest = new SetKeyConnectorKeyRequest(\n      userKey[1].encryptedString,\n      kdf,\n      kdfConfig,\n      orgId,\n      keys\n    );\n    await this.apiService.postSetKeyConnectorKey(setPasswordRequest);\n  }\n\n  async setConvertAccountRequired(status: boolean) {\n    await this.stateService.setConvertAccountToKeyConnector(status);\n  }\n\n  async getConvertAccountRequired(): Promise<boolean> {\n    return await this.stateService.getConvertAccountToKeyConnector();\n  }\n\n  async removeConvertAccountRequired() {\n    await this.stateService.setConvertAccountToKeyConnector(null);\n  }\n\n  async clear() {\n    await this.removeConvertAccountRequired();\n  }\n\n  private handleKeyConnectorError(e: any) {\n    this.logService.error(e);\n    if (this.logoutCallback != null) {\n      this.logoutCallback(false);\n    }\n    throw new Error(\"Key Connector error\");\n  }\n}\n","import { StateService } from \"../../platform/abstractions/state.service\";\nimport { Utils } from \"../../platform/misc/utils\";\nimport { TokenService as TokenServiceAbstraction } from \"../abstractions/token.service\";\nimport { IdentityTokenResponse } from \"../models/response/identity-token.response\";\n\nexport class TokenService implements TokenServiceAbstraction {\n  static decodeToken(token: string): Promise<any> {\n    if (token == null) {\n      throw new Error(\"Token not provided.\");\n    }\n\n    const parts = token.split(\".\");\n    if (parts.length !== 3) {\n      throw new Error(\"JWT must have 3 parts\");\n    }\n\n    const decoded = Utils.fromUrlB64ToUtf8(parts[1]);\n    if (decoded == null) {\n      throw new Error(\"Cannot decode the token\");\n    }\n\n    const decodedToken = JSON.parse(decoded);\n    return decodedToken;\n  }\n\n  constructor(private stateService: StateService) {}\n\n  async setTokens(\n    accessToken: string,\n    refreshToken: string,\n    clientIdClientSecret: [string, string]\n  ): Promise<any> {\n    await this.setToken(accessToken);\n    await this.setRefreshToken(refreshToken);\n    if (clientIdClientSecret != null) {\n      await this.setClientId(clientIdClientSecret[0]);\n      await this.setClientSecret(clientIdClientSecret[1]);\n    }\n  }\n\n  async setClientId(clientId: string): Promise<any> {\n    return await this.stateService.setApiKeyClientId(clientId);\n  }\n\n  async getClientId(): Promise<string> {\n    return await this.stateService.getApiKeyClientId();\n  }\n\n  async setClientSecret(clientSecret: string): Promise<any> {\n    return await this.stateService.setApiKeyClientSecret(clientSecret);\n  }\n\n  async getClientSecret(): Promise<string> {\n    return await this.stateService.getApiKeyClientSecret();\n  }\n\n  async setToken(token: string): Promise<void> {\n    await this.stateService.setAccessToken(token);\n  }\n\n  async getToken(): Promise<string> {\n    return await this.stateService.getAccessToken();\n  }\n\n  async setRefreshToken(refreshToken: string): Promise<any> {\n    return await this.stateService.setRefreshToken(refreshToken);\n  }\n\n  async getRefreshToken(): Promise<string> {\n    return await this.stateService.getRefreshToken();\n  }\n\n  async setTwoFactorToken(tokenResponse: IdentityTokenResponse): Promise<any> {\n    return await this.stateService.setTwoFactorToken(tokenResponse.twoFactorToken);\n  }\n\n  async getTwoFactorToken(): Promise<string> {\n    return await this.stateService.getTwoFactorToken();\n  }\n\n  async clearTwoFactorToken(): Promise<any> {\n    return await this.stateService.setTwoFactorToken(null);\n  }\n\n  async clearToken(userId?: string): Promise<any> {\n    await this.stateService.setAccessToken(null, { userId: userId });\n    await this.stateService.setRefreshToken(null, { userId: userId });\n    await this.stateService.setApiKeyClientId(null, { userId: userId });\n    await this.stateService.setApiKeyClientSecret(null, { userId: userId });\n  }\n\n  // jwthelper methods\n  // ref https://github.com/auth0/angular-jwt/blob/master/src/angularJwt/services/jwt.js\n\n  async decodeToken(token?: string): Promise<any> {\n    token = token ?? (await this.stateService.getAccessToken());\n\n    if (token == null) {\n      throw new Error(\"Token not found.\");\n    }\n\n    return TokenService.decodeToken(token);\n  }\n\n  async getTokenExpirationDate(): Promise<Date> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.exp === \"undefined\") {\n      return null;\n    }\n\n    const d = new Date(0); // The 0 here is the key, which sets the date to the epoch\n    d.setUTCSeconds(decoded.exp);\n    return d;\n  }\n\n  async tokenSecondsRemaining(offsetSeconds = 0): Promise<number> {\n    const d = await this.getTokenExpirationDate();\n    if (d == null) {\n      return 0;\n    }\n\n    const msRemaining = d.valueOf() - (new Date().valueOf() + offsetSeconds * 1000);\n    return Math.round(msRemaining / 1000);\n  }\n\n  async tokenNeedsRefresh(minutes = 5): Promise<boolean> {\n    const sRemaining = await this.tokenSecondsRemaining();\n    return sRemaining < 60 * minutes;\n  }\n\n  async getUserId(): Promise<string> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.sub === \"undefined\") {\n      throw new Error(\"No user id found\");\n    }\n\n    return decoded.sub as string;\n  }\n\n  async getEmail(): Promise<string> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.email === \"undefined\") {\n      throw new Error(\"No email found\");\n    }\n\n    return decoded.email as string;\n  }\n\n  async getEmailVerified(): Promise<boolean> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.email_verified === \"undefined\") {\n      throw new Error(\"No email verification found\");\n    }\n\n    return decoded.email_verified as boolean;\n  }\n\n  async getName(): Promise<string> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.name === \"undefined\") {\n      return null;\n    }\n\n    return decoded.name as string;\n  }\n\n  async getIssuer(): Promise<string> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.iss === \"undefined\") {\n      throw new Error(\"No issuer found\");\n    }\n\n    return decoded.iss as string;\n  }\n\n  async getIsExternal(): Promise<boolean> {\n    const decoded = await this.decodeToken();\n\n    return Array.isArray(decoded.amr) && decoded.amr.includes(\"external\");\n  }\n}\n","import { I18nService } from \"../../platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"../../platform/abstractions/platform-utils.service\";\nimport {\n  TwoFactorProviderDetails,\n  TwoFactorService as TwoFactorServiceAbstraction,\n} from \"../abstractions/two-factor.service\";\nimport { TwoFactorProviderType } from \"../enums/two-factor-provider-type\";\nimport { IdentityTwoFactorResponse } from \"../models/response/identity-two-factor.response\";\n\nexport const TwoFactorProviders: Partial<Record<TwoFactorProviderType, TwoFactorProviderDetails>> =\n  {\n    [TwoFactorProviderType.Authenticator]: {\n      type: TwoFactorProviderType.Authenticator,\n      name: null as string,\n      description: null as string,\n      priority: 1,\n      sort: 1,\n      premium: false,\n    },\n    [TwoFactorProviderType.Yubikey]: {\n      type: TwoFactorProviderType.Yubikey,\n      name: null as string,\n      description: null as string,\n      priority: 3,\n      sort: 2,\n      premium: true,\n    },\n    [TwoFactorProviderType.Duo]: {\n      type: TwoFactorProviderType.Duo,\n      name: \"Duo\",\n      description: null as string,\n      priority: 2,\n      sort: 3,\n      premium: true,\n    },\n    [TwoFactorProviderType.OrganizationDuo]: {\n      type: TwoFactorProviderType.OrganizationDuo,\n      name: \"Duo (Organization)\",\n      description: null as string,\n      priority: 10,\n      sort: 4,\n      premium: false,\n    },\n    [TwoFactorProviderType.Email]: {\n      type: TwoFactorProviderType.Email,\n      name: null as string,\n      description: null as string,\n      priority: 0,\n      sort: 6,\n      premium: false,\n    },\n    [TwoFactorProviderType.WebAuthn]: {\n      type: TwoFactorProviderType.WebAuthn,\n      name: null as string,\n      description: null as string,\n      priority: 4,\n      sort: 5,\n      premium: false,\n    },\n  };\n\nexport class TwoFactorService implements TwoFactorServiceAbstraction {\n  private twoFactorProvidersData: Map<TwoFactorProviderType, { [key: string]: string }>;\n  private selectedTwoFactorProviderType: TwoFactorProviderType = null;\n\n  constructor(\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService\n  ) {}\n\n  init() {\n    TwoFactorProviders[TwoFactorProviderType.Email].name = this.i18nService.t(\"emailTitle\");\n    TwoFactorProviders[TwoFactorProviderType.Email].description = this.i18nService.t(\"emailDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.Authenticator].name =\n      this.i18nService.t(\"authenticatorAppTitle\");\n    TwoFactorProviders[TwoFactorProviderType.Authenticator].description =\n      this.i18nService.t(\"authenticatorAppDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.Duo].description = this.i18nService.t(\"duoDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.OrganizationDuo].name =\n      \"Duo (\" + this.i18nService.t(\"organization\") + \")\";\n    TwoFactorProviders[TwoFactorProviderType.OrganizationDuo].description =\n      this.i18nService.t(\"duoOrganizationDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.WebAuthn].name = this.i18nService.t(\"webAuthnTitle\");\n    TwoFactorProviders[TwoFactorProviderType.WebAuthn].description =\n      this.i18nService.t(\"webAuthnDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.Yubikey].name = this.i18nService.t(\"yubiKeyTitle\");\n    TwoFactorProviders[TwoFactorProviderType.Yubikey].description =\n      this.i18nService.t(\"yubiKeyDesc\");\n  }\n\n  getSupportedProviders(win: Window): TwoFactorProviderDetails[] {\n    const providers: any[] = [];\n    if (this.twoFactorProvidersData == null) {\n      return providers;\n    }\n\n    if (\n      this.twoFactorProvidersData.has(TwoFactorProviderType.OrganizationDuo) &&\n      this.platformUtilsService.supportsDuo()\n    ) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.OrganizationDuo]);\n    }\n\n    if (this.twoFactorProvidersData.has(TwoFactorProviderType.Authenticator)) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Authenticator]);\n    }\n\n    if (this.twoFactorProvidersData.has(TwoFactorProviderType.Yubikey)) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Yubikey]);\n    }\n\n    if (\n      this.twoFactorProvidersData.has(TwoFactorProviderType.Duo) &&\n      this.platformUtilsService.supportsDuo()\n    ) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Duo]);\n    }\n\n    if (\n      this.twoFactorProvidersData.has(TwoFactorProviderType.WebAuthn) &&\n      this.platformUtilsService.supportsWebAuthn(win)\n    ) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.WebAuthn]);\n    }\n\n    if (this.twoFactorProvidersData.has(TwoFactorProviderType.Email)) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Email]);\n    }\n\n    return providers;\n  }\n\n  getDefaultProvider(webAuthnSupported: boolean): TwoFactorProviderType {\n    if (this.twoFactorProvidersData == null) {\n      return null;\n    }\n\n    if (\n      this.selectedTwoFactorProviderType != null &&\n      this.twoFactorProvidersData.has(this.selectedTwoFactorProviderType)\n    ) {\n      return this.selectedTwoFactorProviderType;\n    }\n\n    let providerType: TwoFactorProviderType = null;\n    let providerPriority = -1;\n    this.twoFactorProvidersData.forEach((_value, type) => {\n      const provider = (TwoFactorProviders as any)[type];\n      if (provider != null && provider.priority > providerPriority) {\n        if (type === TwoFactorProviderType.WebAuthn && !webAuthnSupported) {\n          return;\n        }\n\n        providerType = type;\n        providerPriority = provider.priority;\n      }\n    });\n\n    return providerType;\n  }\n\n  setSelectedProvider(type: TwoFactorProviderType) {\n    this.selectedTwoFactorProviderType = type;\n  }\n\n  clearSelectedProvider() {\n    this.selectedTwoFactorProviderType = null;\n  }\n\n  setProviders(response: IdentityTwoFactorResponse) {\n    this.twoFactorProvidersData = response.twoFactorProviders2;\n  }\n\n  clearProviders() {\n    this.twoFactorProvidersData = null;\n  }\n\n  getProviders() {\n    return this.twoFactorProvidersData;\n  }\n}\n","export enum VerificationType {\n  MasterPassword = 0,\n  OTP = 1,\n}\n","import { ApiService } from \"../../../abstractions/api.service\";\nimport { UserVerificationApiServiceAbstraction } from \"../../abstractions/user-verification/user-verification-api.service.abstraction\";\nimport { VerifyOTPRequest } from \"../../models/request/verify-otp.request\";\n\nexport class UserVerificationApiService implements UserVerificationApiServiceAbstraction {\n  constructor(private apiService: ApiService) {}\n\n  postAccountVerifyOTP(request: VerifyOTPRequest): Promise<void> {\n    return this.apiService.send(\"POST\", \"/accounts/verify-otp\", request, true, false);\n  }\n  async postAccountRequestOTP(): Promise<void> {\n    return this.apiService.send(\"POST\", \"/accounts/request-otp\", null, true, false);\n  }\n}\n","export class VerifyOTPRequest {\n  OTP: string;\n\n  constructor(OTP: string) {\n    this.OTP = OTP;\n  }\n}\n","import { CryptoService } from \"../../../platform/abstractions/crypto.service\";\nimport { I18nService } from \"../../../platform/abstractions/i18n.service\";\nimport { StateService } from \"../../../platform/abstractions/state.service\";\nimport { Verification } from \"../../../types/verification\";\nimport { UserVerificationApiServiceAbstraction } from \"../../abstractions/user-verification/user-verification-api.service.abstraction\";\nimport { UserVerificationService as UserVerificationServiceAbstraction } from \"../../abstractions/user-verification/user-verification.service.abstraction\";\nimport { VerificationType } from \"../../enums/verification-type\";\nimport { SecretVerificationRequest } from \"../../models/request/secret-verification.request\";\nimport { VerifyOTPRequest } from \"../../models/request/verify-otp.request\";\n\n/**\n * Used for general-purpose user verification throughout the app.\n * Use it to verify the input collected by UserVerificationComponent.\n */\nexport class UserVerificationService implements UserVerificationServiceAbstraction {\n  constructor(\n    private stateService: StateService,\n    private cryptoService: CryptoService,\n    private i18nService: I18nService,\n    private userVerificationApiService: UserVerificationApiServiceAbstraction\n  ) {}\n\n  /**\n   * Create a new request model to be used for server-side verification\n   * @param verification User-supplied verification data (Master Password or OTP)\n   * @param requestClass The request model to create\n   * @param alreadyHashed Whether the master password is already hashed\n   */\n  async buildRequest<T extends SecretVerificationRequest>(\n    verification: Verification,\n    requestClass?: new () => T,\n    alreadyHashed?: boolean\n  ) {\n    this.validateInput(verification);\n\n    const request =\n      requestClass != null ? new requestClass() : (new SecretVerificationRequest() as T);\n\n    if (verification.type === VerificationType.OTP) {\n      request.otp = verification.secret;\n    } else {\n      let masterKey = await this.cryptoService.getMasterKey();\n      if (!masterKey && !alreadyHashed) {\n        masterKey = await this.cryptoService.makeMasterKey(\n          verification.secret,\n          await this.stateService.getEmail(),\n          await this.stateService.getKdfType(),\n          await this.stateService.getKdfConfig()\n        );\n      }\n      request.masterPasswordHash = alreadyHashed\n        ? verification.secret\n        : await this.cryptoService.hashMasterKey(verification.secret, masterKey);\n    }\n\n    return request;\n  }\n\n  /**\n   * Used to verify the Master Password client-side, or send the OTP to the server for verification (with no other data)\n   * Generally used for client-side verification only.\n   * @param verification User-supplied verification data (Master Password or OTP)\n   */\n  async verifyUser(verification: Verification): Promise<boolean> {\n    this.validateInput(verification);\n\n    if (verification.type === VerificationType.OTP) {\n      const request = new VerifyOTPRequest(verification.secret);\n      try {\n        await this.userVerificationApiService.postAccountVerifyOTP(request);\n      } catch (e) {\n        throw new Error(this.i18nService.t(\"invalidVerificationCode\"));\n      }\n    } else {\n      let masterKey = await this.cryptoService.getMasterKey();\n      if (!masterKey) {\n        masterKey = await this.cryptoService.makeMasterKey(\n          verification.secret,\n          await this.stateService.getEmail(),\n          await this.stateService.getKdfType(),\n          await this.stateService.getKdfConfig()\n        );\n      }\n      const passwordValid = await this.cryptoService.compareAndUpdateKeyHash(\n        verification.secret,\n        masterKey\n      );\n      if (!passwordValid) {\n        throw new Error(this.i18nService.t(\"invalidMasterPassword\"));\n      }\n      this.cryptoService.setMasterKey(masterKey);\n    }\n    return true;\n  }\n\n  async requestOTP() {\n    await this.userVerificationApiService.postAccountRequestOTP();\n  }\n\n  /**\n   * Check if user has master password or can only use passwordless technologies to log in\n   * Note: This only checks the server, not the local state\n   * @param userId The user id to check. If not provided, the current user is used\n   * @returns True if the user has a master password\n   */\n  async hasMasterPassword(userId?: string): Promise<boolean> {\n    const decryptionOptions = await this.stateService.getAccountDecryptionOptions({ userId });\n\n    if (decryptionOptions?.hasMasterPassword != undefined) {\n      return decryptionOptions.hasMasterPassword;\n    }\n\n    // TODO: PM-3518 - Left for backwards compatibility, remove after 2023.12.0\n    return !(await this.stateService.getUsesKeyConnector({ userId }));\n  }\n\n  async hasMasterPasswordAndMasterKeyHash(userId?: string): Promise<boolean> {\n    return (\n      (await this.hasMasterPassword(userId)) &&\n      (await this.cryptoService.getMasterKeyHash()) != null\n    );\n  }\n\n  private validateInput(verification: Verification) {\n    if (verification?.secret == null || verification.secret === \"\") {\n      if (verification.type === VerificationType.OTP) {\n        throw new Error(this.i18nService.t(\"verificationCodeRequired\"));\n      } else {\n        throw new Error(this.i18nService.t(\"masterPasswordRequired\"));\n      }\n    }\n  }\n}\n","export abstract class MessagingService {\n  send: (subscriber: string, arg?: any) => void;\n}\n","import { Account } from \"../models/domain/account\";\n\nexport class AccountFactory<T extends Account = Account> {\n  private accountConstructor: new (init: Partial<T>) => T;\n\n  constructor(accountConstructor: new (init: Partial<T>) => T) {\n    this.accountConstructor = accountConstructor;\n  }\n\n  create(args: Partial<T>) {\n    return new this.accountConstructor(args);\n  }\n}\n","import { GlobalState } from \"../models/domain/global-state\";\n\nexport class GlobalStateFactory<T extends GlobalState = GlobalState> {\n  private globalStateConstructor: new (init: Partial<T>) => T;\n\n  constructor(globalStateConstructor: new (init: Partial<T>) => T) {\n    this.globalStateConstructor = globalStateConstructor;\n  }\n\n  create(args?: Partial<T>) {\n    return new this.globalStateConstructor(args);\n  }\n}\n","import { Account } from \"../models/domain/account\";\nimport { GlobalState } from \"../models/domain/global-state\";\n\nimport { AccountFactory } from \"./account-factory\";\nimport { GlobalStateFactory } from \"./global-state-factory\";\n\nexport class StateFactory<\n  TGlobal extends GlobalState = GlobalState,\n  TAccount extends Account = Account\n> {\n  private globalStateFactory: GlobalStateFactory<TGlobal>;\n  private accountFactory: AccountFactory<TAccount>;\n\n  constructor(\n    globalStateConstructor: new (init: Partial<TGlobal>) => TGlobal,\n    accountConstructor: new (init: Partial<TAccount>) => TAccount\n  ) {\n    this.globalStateFactory = new GlobalStateFactory(globalStateConstructor);\n    this.accountFactory = new AccountFactory(accountConstructor);\n  }\n\n  createGlobal(args: Partial<TGlobal>): TGlobal {\n    return this.globalStateFactory.create(args);\n  }\n\n  createAccount(args: Partial<TAccount>): TAccount {\n    return this.accountFactory.create(args);\n  }\n}\n","export class WindowState {\n  width?: number;\n  height?: number;\n  isMaximized?: boolean;\n  // TODO: displayBounds is an Electron.Rectangle.\n  // We need to establish some kind of client-specific global state, similar to the way we already extend a base Account.\n  displayBounds: any;\n  x?: number;\n  y?: number;\n  zoomFactor?: number;\n}\n","import { EnvironmentUrls } from \"../../../auth/models/domain/environment-urls\";\nimport { ThemeType } from \"../../../enums\";\nimport { WindowState } from \"../../../models/domain/window-state\";\n\nexport class GlobalState {\n  enableAlwaysOnTop?: boolean;\n  installedVersion?: string;\n  locale?: string;\n  organizationInvitation?: any;\n  emergencyAccessInvitation?: any;\n  ssoCodeVerifier?: string;\n  ssoOrganizationIdentifier?: string;\n  ssoState?: string;\n  rememberedEmail?: string;\n  theme?: ThemeType = ThemeType.System;\n  window?: WindowState = new WindowState();\n  twoFactorToken?: string;\n  disableFavicon?: boolean;\n  biometricAwaitingAcceptance?: boolean;\n  biometricFingerprintValidated?: boolean;\n  vaultTimeout?: number;\n  vaultTimeoutAction?: string;\n  loginRedirect?: any;\n  mainWindowSize?: number;\n  enableBiometrics?: boolean;\n  biometricText?: string;\n  noAutoPromptBiometricsText?: string;\n  environmentUrls: EnvironmentUrls = new EnvironmentUrls();\n  enableTray?: boolean;\n  enableMinimizeToTray?: boolean;\n  enableCloseToTray?: boolean;\n  enableStartToTray?: boolean;\n  openAtLogin?: boolean;\n  alwaysShowDock?: boolean;\n  enableBrowserIntegration?: boolean;\n  enableBrowserIntegrationFingerprint?: boolean;\n  enableDuckDuckGoBrowserIntegration?: boolean;\n  region?: string;\n}\n","import { HtmlStorageLocation } from \"../../enums\";\nimport { AppIdService as AppIdServiceAbstraction } from \"../abstractions/app-id.service\";\nimport { AbstractStorageService } from \"../abstractions/storage.service\";\nimport { Utils } from \"../misc/utils\";\n\nexport class AppIdService implements AppIdServiceAbstraction {\n  constructor(private storageService: AbstractStorageService) {}\n\n  getAppId(): Promise<string> {\n    return this.makeAndGetAppId(\"appId\");\n  }\n\n  getAnonymousAppId(): Promise<string> {\n    return this.makeAndGetAppId(\"anonymousAppId\");\n  }\n\n  private async makeAndGetAppId(key: string) {\n    const existingId = await this.storageService.get<string>(key, {\n      htmlStorageLocation: HtmlStorageLocation.Local,\n    });\n    if (existingId != null) {\n      return existingId;\n    }\n\n    const guid = Utils.newGuid();\n    await this.storageService.save(key, guid, {\n      htmlStorageLocation: HtmlStorageLocation.Local,\n    });\n    return guid;\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { Region } from \"../../abstractions/environment.service\";\n\nexport class ServerConfigResponse extends BaseResponse {\n  version: string;\n  gitHash: string;\n  server: ThirdPartyServerConfigResponse;\n  environment: EnvironmentServerConfigResponse;\n  featureStates: { [key: string]: string } = {};\n\n  constructor(response: any) {\n    super(response);\n\n    if (response == null) {\n      return;\n    }\n\n    this.version = this.getResponseProperty(\"Version\");\n    this.gitHash = this.getResponseProperty(\"GitHash\");\n    this.server = new ThirdPartyServerConfigResponse(this.getResponseProperty(\"Server\"));\n    this.environment = new EnvironmentServerConfigResponse(this.getResponseProperty(\"Environment\"));\n    this.featureStates = this.getResponseProperty(\"FeatureStates\");\n  }\n}\n\nexport class EnvironmentServerConfigResponse extends BaseResponse {\n  cloudRegion: Region;\n  vault: string;\n  api: string;\n  identity: string;\n  notifications: string;\n  sso: string;\n\n  constructor(data: any = null) {\n    super(data);\n\n    if (data == null) {\n      return;\n    }\n\n    this.cloudRegion = this.getResponseProperty(\"CloudRegion\");\n    this.vault = this.getResponseProperty(\"Vault\");\n    this.api = this.getResponseProperty(\"Api\");\n    this.identity = this.getResponseProperty(\"Identity\");\n    this.notifications = this.getResponseProperty(\"Notifications\");\n    this.sso = this.getResponseProperty(\"Sso\");\n  }\n}\n\nexport class ThirdPartyServerConfigResponse extends BaseResponse {\n  name: string;\n  url: string;\n\n  constructor(data: any = null) {\n    super(data);\n\n    if (data == null) {\n      return;\n    }\n\n    this.name = this.getResponseProperty(\"Name\");\n    this.url = this.getResponseProperty(\"Url\");\n  }\n}\n","import { ApiService } from \"../../../abstractions/api.service\";\nimport { AuthService } from \"../../../auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"../../../auth/enums/authentication-status\";\nimport { ConfigApiServiceAbstraction } from \"../../abstractions/config/config-api.service.abstraction\";\nimport { ServerConfigResponse } from \"../../models/response/server-config.response\";\n\nexport class ConfigApiService implements ConfigApiServiceAbstraction {\n  constructor(private apiService: ApiService, private authService: AuthService) {}\n\n  async get(): Promise<ServerConfigResponse> {\n    const authed: boolean =\n      (await this.authService.getAuthStatus()) !== AuthenticationStatus.LoggedOut;\n\n    const r = await this.apiService.send(\"GET\", \"/config\", null, authed, true);\n    return new ServerConfigResponse(r);\n  }\n}\n","import { LogLevelType } from \"../../enums\";\nimport { LogService as LogServiceAbstraction } from \"../abstractions/log.service\";\n\nexport class ConsoleLogService implements LogServiceAbstraction {\n  protected timersMap: Map<string, [number, number]> = new Map();\n\n  constructor(\n    protected isDev: boolean,\n    protected filter: (level: LogLevelType) => boolean = null\n  ) {}\n\n  debug(message: string) {\n    if (!this.isDev) {\n      return;\n    }\n    this.write(LogLevelType.Debug, message);\n  }\n\n  info(message: string) {\n    this.write(LogLevelType.Info, message);\n  }\n\n  warning(message: string) {\n    this.write(LogLevelType.Warning, message);\n  }\n\n  error(message: string) {\n    this.write(LogLevelType.Error, message);\n  }\n\n  write(level: LogLevelType, message: string) {\n    if (this.filter != null && this.filter(level)) {\n      return;\n    }\n\n    switch (level) {\n      case LogLevelType.Debug:\n        // eslint-disable-next-line\n        console.log(message);\n        break;\n      case LogLevelType.Info:\n        // eslint-disable-next-line\n        console.log(message);\n        break;\n      case LogLevelType.Warning:\n        // eslint-disable-next-line\n        console.warn(message);\n        break;\n      case LogLevelType.Error:\n        // eslint-disable-next-line\n        console.error(message);\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { CryptoService } from \"../abstractions/crypto.service\";\nimport { EncryptService } from \"../abstractions/encrypt.service\";\n\nexport class ContainerService {\n  constructor(private cryptoService: CryptoService, private encryptService: EncryptService) {}\n\n  attachToGlobal(global: any) {\n    if (!global.bitwardenContainerService) {\n      global.bitwardenContainerService = this;\n    }\n  }\n\n  /**\n   * @throws Will throw if CryptoService was not instantiated and provided to the ContainerService constructor\n   */\n  getCryptoService(): CryptoService {\n    if (this.cryptoService == null) {\n      throw new Error(\"ContainerService.cryptoService not initialized.\");\n    }\n    return this.cryptoService;\n  }\n\n  /**\n   * @throws Will throw if EncryptService was not instantiated and provided to the ContainerService constructor\n   */\n  getEncryptService(): EncryptService {\n    if (this.encryptService == null) {\n      throw new Error(\"ContainerService.encryptService not initialized.\");\n    }\n    return this.encryptService;\n  }\n}\n","import { EncryptionType } from \"../../../enums\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { Encrypted } from \"../../interfaces/encrypted\";\n\nconst ENC_TYPE_LENGTH = 1;\nconst IV_LENGTH = 16;\nconst MAC_LENGTH = 32;\nconst MIN_DATA_LENGTH = 1;\n\nexport class EncArrayBuffer implements Encrypted {\n  readonly encryptionType: EncryptionType = null;\n  readonly dataBytes: Uint8Array = null;\n  readonly ivBytes: Uint8Array = null;\n  readonly macBytes: Uint8Array = null;\n\n  constructor(readonly buffer: Uint8Array) {\n    const encBytes = buffer;\n    const encType = encBytes[0];\n\n    switch (encType) {\n      case EncryptionType.AesCbc128_HmacSha256_B64:\n      case EncryptionType.AesCbc256_HmacSha256_B64: {\n        const minimumLength = ENC_TYPE_LENGTH + IV_LENGTH + MAC_LENGTH + MIN_DATA_LENGTH;\n        if (encBytes.length < minimumLength) {\n          this.throwDecryptionError();\n        }\n\n        this.ivBytes = encBytes.slice(ENC_TYPE_LENGTH, ENC_TYPE_LENGTH + IV_LENGTH);\n        this.macBytes = encBytes.slice(\n          ENC_TYPE_LENGTH + IV_LENGTH,\n          ENC_TYPE_LENGTH + IV_LENGTH + MAC_LENGTH\n        );\n        this.dataBytes = encBytes.slice(ENC_TYPE_LENGTH + IV_LENGTH + MAC_LENGTH);\n        break;\n      }\n      case EncryptionType.AesCbc256_B64: {\n        const minimumLength = ENC_TYPE_LENGTH + IV_LENGTH + MIN_DATA_LENGTH;\n        if (encBytes.length < minimumLength) {\n          this.throwDecryptionError();\n        }\n\n        this.ivBytes = encBytes.slice(ENC_TYPE_LENGTH, ENC_TYPE_LENGTH + IV_LENGTH);\n        this.dataBytes = encBytes.slice(ENC_TYPE_LENGTH + IV_LENGTH);\n        break;\n      }\n      default:\n        this.throwDecryptionError();\n    }\n\n    this.encryptionType = encType;\n  }\n\n  private throwDecryptionError() {\n    throw new Error(\n      \"Error parsing encrypted ArrayBuffer: data is corrupted or has an invalid format.\"\n    );\n  }\n\n  static async fromResponse(response: {\n    arrayBuffer: () => Promise<ArrayBuffer>;\n  }): Promise<EncArrayBuffer> {\n    const buffer = await response.arrayBuffer();\n    if (buffer == null) {\n      throw new Error(\"Cannot create EncArrayBuffer from Response - Response is empty\");\n    }\n    return new EncArrayBuffer(new Uint8Array(buffer));\n  }\n\n  static fromB64(b64: string) {\n    const buffer = Utils.fromB64ToArray(b64);\n    return new EncArrayBuffer(buffer);\n  }\n}\n","import { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\n\nexport class EncryptedObject {\n  iv: Uint8Array;\n  data: Uint8Array;\n  mac: Uint8Array;\n  key: SymmetricCryptoKey;\n}\n","import { EncryptionType } from \"../../../enums\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { CryptoFunctionService } from \"../../abstractions/crypto-function.service\";\nimport { EncryptService } from \"../../abstractions/encrypt.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { Decryptable } from \"../../interfaces/decryptable.interface\";\nimport { Encrypted } from \"../../interfaces/encrypted\";\nimport { InitializerMetadata } from \"../../interfaces/initializer-metadata.interface\";\nimport { EncArrayBuffer } from \"../../models/domain/enc-array-buffer\";\nimport { EncString } from \"../../models/domain/enc-string\";\nimport { EncryptedObject } from \"../../models/domain/encrypted-object\";\nimport { SymmetricCryptoKey } from \"../../models/domain/symmetric-crypto-key\";\n\nexport class EncryptServiceImplementation implements EncryptService {\n  constructor(\n    protected cryptoFunctionService: CryptoFunctionService,\n    protected logService: LogService,\n    protected logMacFailures: boolean\n  ) {}\n\n  async encrypt(plainValue: string | Uint8Array, key: SymmetricCryptoKey): Promise<EncString> {\n    if (key == null) {\n      throw new Error(\"No encryption key provided.\");\n    }\n\n    if (plainValue == null) {\n      return Promise.resolve(null);\n    }\n\n    let plainBuf: Uint8Array;\n    if (typeof plainValue === \"string\") {\n      plainBuf = Utils.fromUtf8ToArray(plainValue);\n    } else {\n      plainBuf = plainValue;\n    }\n\n    const encObj = await this.aesEncrypt(plainBuf, key);\n    const iv = Utils.fromBufferToB64(encObj.iv);\n    const data = Utils.fromBufferToB64(encObj.data);\n    const mac = encObj.mac != null ? Utils.fromBufferToB64(encObj.mac) : null;\n    return new EncString(encObj.key.encType, data, iv, mac);\n  }\n\n  async encryptToBytes(plainValue: Uint8Array, key: SymmetricCryptoKey): Promise<EncArrayBuffer> {\n    if (key == null) {\n      throw new Error(\"No encryption key provided.\");\n    }\n\n    const encValue = await this.aesEncrypt(plainValue, key);\n    let macLen = 0;\n    if (encValue.mac != null) {\n      macLen = encValue.mac.byteLength;\n    }\n\n    const encBytes = new Uint8Array(1 + encValue.iv.byteLength + macLen + encValue.data.byteLength);\n    encBytes.set([encValue.key.encType]);\n    encBytes.set(new Uint8Array(encValue.iv), 1);\n    if (encValue.mac != null) {\n      encBytes.set(new Uint8Array(encValue.mac), 1 + encValue.iv.byteLength);\n    }\n\n    encBytes.set(new Uint8Array(encValue.data), 1 + encValue.iv.byteLength + macLen);\n    return new EncArrayBuffer(encBytes);\n  }\n\n  async decryptToUtf8(encString: EncString, key: SymmetricCryptoKey): Promise<string> {\n    if (key == null) {\n      throw new Error(\"No key provided for decryption.\");\n    }\n\n    key = this.resolveLegacyKey(key, encString);\n\n    if (key.macKey != null && encString?.mac == null) {\n      this.logService.error(\"mac required.\");\n      return null;\n    }\n\n    if (key.encType !== encString.encryptionType) {\n      this.logService.error(\"encType unavailable.\");\n      return null;\n    }\n\n    const fastParams = this.cryptoFunctionService.aesDecryptFastParameters(\n      encString.data,\n      encString.iv,\n      encString.mac,\n      key\n    );\n    if (fastParams.macKey != null && fastParams.mac != null) {\n      const computedMac = await this.cryptoFunctionService.hmacFast(\n        fastParams.macData,\n        fastParams.macKey,\n        \"sha256\"\n      );\n      const macsEqual = await this.cryptoFunctionService.compareFast(fastParams.mac, computedMac);\n      if (!macsEqual) {\n        this.logMacFailed(\"mac failed.\");\n        return null;\n      }\n    }\n\n    return await this.cryptoFunctionService.aesDecryptFast(fastParams, \"cbc\");\n  }\n\n  async decryptToBytes(encThing: Encrypted, key: SymmetricCryptoKey): Promise<Uint8Array> {\n    if (key == null) {\n      throw new Error(\"No encryption key provided.\");\n    }\n\n    if (encThing == null) {\n      throw new Error(\"Nothing provided for decryption.\");\n    }\n\n    key = this.resolveLegacyKey(key, encThing);\n\n    if (key.macKey != null && encThing.macBytes == null) {\n      return null;\n    }\n\n    if (key.encType !== encThing.encryptionType) {\n      return null;\n    }\n\n    if (key.macKey != null && encThing.macBytes != null) {\n      const macData = new Uint8Array(encThing.ivBytes.byteLength + encThing.dataBytes.byteLength);\n      macData.set(new Uint8Array(encThing.ivBytes), 0);\n      macData.set(new Uint8Array(encThing.dataBytes), encThing.ivBytes.byteLength);\n      const computedMac = await this.cryptoFunctionService.hmac(macData, key.macKey, \"sha256\");\n      if (computedMac === null) {\n        return null;\n      }\n\n      const macsMatch = await this.cryptoFunctionService.compare(encThing.macBytes, computedMac);\n      if (!macsMatch) {\n        this.logMacFailed(\"mac failed.\");\n        return null;\n      }\n    }\n\n    const result = await this.cryptoFunctionService.aesDecrypt(\n      encThing.dataBytes,\n      encThing.ivBytes,\n      key.encKey,\n      \"cbc\"\n    );\n\n    return result ?? null;\n  }\n\n  async decryptItems<T extends InitializerMetadata>(\n    items: Decryptable<T>[],\n    key: SymmetricCryptoKey\n  ): Promise<T[]> {\n    if (items == null || items.length < 1) {\n      return [];\n    }\n\n    return await Promise.all(items.map((item) => item.decrypt(key)));\n  }\n\n  private async aesEncrypt(data: Uint8Array, key: SymmetricCryptoKey): Promise<EncryptedObject> {\n    const obj = new EncryptedObject();\n    obj.key = key;\n    obj.iv = await this.cryptoFunctionService.randomBytes(16);\n    obj.data = await this.cryptoFunctionService.aesEncrypt(data, obj.iv, obj.key.encKey);\n\n    if (obj.key.macKey != null) {\n      const macData = new Uint8Array(obj.iv.byteLength + obj.data.byteLength);\n      macData.set(new Uint8Array(obj.iv), 0);\n      macData.set(new Uint8Array(obj.data), obj.iv.byteLength);\n      obj.mac = await this.cryptoFunctionService.hmac(macData, obj.key.macKey, \"sha256\");\n    }\n\n    return obj;\n  }\n\n  private logMacFailed(msg: string) {\n    if (this.logMacFailures) {\n      this.logService.error(msg);\n    }\n  }\n\n  /**\n   * Transform into new key for the old encrypt-then-mac scheme if required, otherwise return the current key unchanged\n   * @param encThing The encrypted object (e.g. encString or encArrayBuffer) that you want to decrypt\n   */\n  resolveLegacyKey(key: SymmetricCryptoKey, encThing: Encrypted): SymmetricCryptoKey {\n    if (\n      encThing.encryptionType === EncryptionType.AesCbc128_HmacSha256_B64 &&\n      key.encType === EncryptionType.AesCbc256_B64\n    ) {\n      return new SymmetricCryptoKey(key.key, EncryptionType.AesCbc128_HmacSha256_B64);\n    }\n\n    return key;\n  }\n}\n","export enum InitializerKey {\n  Cipher = 0,\n  CipherView = 1,\n}\n","export enum CipherType {\n  Login = 1,\n  SecureNote = 2,\n  Card = 3,\n  Identity = 4,\n}\n","export enum CipherRepromptType {\n  None = 0,\n  Password = 1,\n}\n","import { AttachmentResponse } from \"../response/attachment.response\";\n\nexport class AttachmentData {\n  id: string;\n  url: string;\n  fileName: string;\n  key: string;\n  size: string;\n  sizeName: string;\n\n  constructor(response?: AttachmentResponse) {\n    if (response == null) {\n      return;\n    }\n    this.id = response.id;\n    this.url = response.url;\n    this.fileName = response.fileName;\n    this.key = response.key;\n    this.size = response.size;\n    this.sizeName = response.sizeName;\n  }\n}\n","import { CardApi } from \"../../../models/api/card.api\";\n\nexport class CardData {\n  cardholderName: string;\n  brand: string;\n  number: string;\n  expMonth: string;\n  expYear: string;\n  code: string;\n\n  constructor(data?: CardApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.cardholderName = data.cardholderName;\n    this.brand = data.brand;\n    this.number = data.number;\n    this.expMonth = data.expMonth;\n    this.expYear = data.expYear;\n    this.code = data.code;\n  }\n}\n","import { FieldType, LinkedIdType } from \"../../../enums\";\nimport { FieldApi } from \"../../../models/api/field.api\";\n\nexport class FieldData {\n  type: FieldType;\n  name: string;\n  value: string;\n  linkedId: LinkedIdType;\n\n  constructor(response?: FieldApi) {\n    if (response == null) {\n      return;\n    }\n    this.type = response.type;\n    this.name = response.name;\n    this.value = response.value;\n    this.linkedId = response.linkedId;\n  }\n}\n","import { IdentityApi } from \"../../../models/api/identity.api\";\n\nexport class IdentityData {\n  title: string;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  address1: string;\n  address2: string;\n  address3: string;\n  city: string;\n  state: string;\n  postalCode: string;\n  country: string;\n  company: string;\n  email: string;\n  phone: string;\n  ssn: string;\n  username: string;\n  passportNumber: string;\n  licenseNumber: string;\n\n  constructor(data?: IdentityApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.title = data.title;\n    this.firstName = data.firstName;\n    this.middleName = data.middleName;\n    this.lastName = data.lastName;\n    this.address1 = data.address1;\n    this.address2 = data.address2;\n    this.address3 = data.address3;\n    this.city = data.city;\n    this.state = data.state;\n    this.postalCode = data.postalCode;\n    this.country = data.country;\n    this.company = data.company;\n    this.email = data.email;\n    this.phone = data.phone;\n    this.ssn = data.ssn;\n    this.username = data.username;\n    this.passportNumber = data.passportNumber;\n    this.licenseNumber = data.licenseNumber;\n  }\n}\n","import { Fido2CredentialApi } from \"../../api/fido2-credential.api\";\n\nexport class Fido2CredentialData {\n  credentialId: string;\n  keyType: \"public-key\";\n  keyAlgorithm: \"ECDSA\";\n  keyCurve: \"P-256\";\n  keyValue: string;\n  rpId: string;\n  userHandle: string;\n  counter: string;\n  rpName: string;\n  userDisplayName: string;\n  discoverable: string;\n  creationDate: string;\n\n  constructor(data?: Fido2CredentialApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.credentialId = data.credentialId;\n    this.keyType = data.keyType;\n    this.keyAlgorithm = data.keyAlgorithm;\n    this.keyCurve = data.keyCurve;\n    this.keyValue = data.keyValue;\n    this.rpId = data.rpId;\n    this.userHandle = data.userHandle;\n    this.counter = data.counter;\n    this.rpName = data.rpName;\n    this.userDisplayName = data.userDisplayName;\n    this.discoverable = data.discoverable;\n    this.creationDate = data.creationDate;\n  }\n}\n","import { UriMatchType } from \"../../../enums\";\nimport { LoginUriApi } from \"../../../models/api/login-uri.api\";\n\nexport class LoginUriData {\n  uri: string;\n  match: UriMatchType = null;\n\n  constructor(data?: LoginUriApi) {\n    if (data == null) {\n      return;\n    }\n    this.uri = data.uri;\n    this.match = data.match;\n  }\n}\n","import { LoginApi } from \"../../../models/api/login.api\";\n\nimport { Fido2CredentialData } from \"./fido2-credential.data\";\nimport { LoginUriData } from \"./login-uri.data\";\n\nexport class LoginData {\n  uris: LoginUriData[];\n  username: string;\n  password: string;\n  passwordRevisionDate: string;\n  totp: string;\n  autofillOnPageLoad: boolean;\n  fido2Credentials?: Fido2CredentialData[];\n\n  constructor(data?: LoginApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.username = data.username;\n    this.password = data.password;\n    this.passwordRevisionDate = data.passwordRevisionDate;\n    this.totp = data.totp;\n    this.autofillOnPageLoad = data.autofillOnPageLoad;\n\n    if (data.uris) {\n      this.uris = data.uris.map((u) => new LoginUriData(u));\n    }\n\n    if (data.fido2Credentials) {\n      this.fido2Credentials = data.fido2Credentials?.map((key) => new Fido2CredentialData(key));\n    }\n  }\n}\n","import { PasswordHistoryResponse } from \"../response/password-history.response\";\n\nexport class PasswordHistoryData {\n  password: string;\n  lastUsedDate: string;\n\n  constructor(response?: PasswordHistoryResponse) {\n    if (response == null) {\n      return;\n    }\n\n    this.password = response.password;\n    this.lastUsedDate = response.lastUsedDate;\n  }\n}\n","import { SecureNoteType } from \"../../../enums\";\nimport { SecureNoteApi } from \"../../../models/api/secure-note.api\";\n\nexport class SecureNoteData {\n  type: SecureNoteType;\n\n  constructor(data?: SecureNoteApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.type = data.type;\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipher-reprompt-type\";\nimport { CipherType } from \"../../enums/cipher-type\";\nimport { CipherResponse } from \"../response/cipher.response\";\n\nimport { AttachmentData } from \"./attachment.data\";\nimport { CardData } from \"./card.data\";\nimport { FieldData } from \"./field.data\";\nimport { IdentityData } from \"./identity.data\";\nimport { LoginData } from \"./login.data\";\nimport { PasswordHistoryData } from \"./password-history.data\";\nimport { SecureNoteData } from \"./secure-note.data\";\n\nexport class CipherData {\n  id: string;\n  organizationId: string;\n  folderId: string;\n  edit: boolean;\n  viewPassword: boolean;\n  organizationUseTotp: boolean;\n  favorite: boolean;\n  revisionDate: string;\n  type: CipherType;\n  name: string;\n  notes: string;\n  login?: LoginData;\n  secureNote?: SecureNoteData;\n  card?: CardData;\n  identity?: IdentityData;\n  fields?: FieldData[];\n  attachments?: AttachmentData[];\n  passwordHistory?: PasswordHistoryData[];\n  collectionIds?: string[];\n  creationDate: string;\n  deletedDate: string;\n  reprompt: CipherRepromptType;\n  key: string;\n\n  constructor(response?: CipherResponse, collectionIds?: string[]) {\n    if (response == null) {\n      return;\n    }\n\n    this.id = response.id;\n    this.organizationId = response.organizationId;\n    this.folderId = response.folderId;\n    this.edit = response.edit;\n    this.viewPassword = response.viewPassword;\n    this.organizationUseTotp = response.organizationUseTotp;\n    this.favorite = response.favorite;\n    this.revisionDate = response.revisionDate;\n    this.type = response.type;\n    this.name = response.name;\n    this.notes = response.notes;\n    this.collectionIds = collectionIds != null ? collectionIds : response.collectionIds;\n    this.creationDate = response.creationDate;\n    this.deletedDate = response.deletedDate;\n    this.reprompt = response.reprompt;\n    this.key = response.key;\n\n    switch (this.type) {\n      case CipherType.Login:\n        this.login = new LoginData(response.login);\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNoteData(response.secureNote);\n        break;\n      case CipherType.Card:\n        this.card = new CardData(response.card);\n        break;\n      case CipherType.Identity:\n        this.identity = new IdentityData(response.identity);\n        break;\n      default:\n        break;\n    }\n\n    if (response.fields != null) {\n      this.fields = response.fields.map((f) => new FieldData(f));\n    }\n    if (response.attachments != null) {\n      this.attachments = response.attachments.map((a) => new AttachmentData(a));\n    }\n    if (response.passwordHistory != null) {\n      this.passwordHistory = response.passwordHistory.map((ph) => new PasswordHistoryData(ph));\n    }\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { View } from \"../../../models/view/view\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { Attachment } from \"../domain/attachment\";\n\nexport class AttachmentView implements View {\n  id: string = null;\n  url: string = null;\n  size: string = null;\n  sizeName: string = null;\n  fileName: string = null;\n  key: SymmetricCryptoKey = null;\n\n  constructor(a?: Attachment) {\n    if (!a) {\n      return;\n    }\n\n    this.id = a.id;\n    this.url = a.url;\n    this.size = a.size;\n    this.sizeName = a.sizeName;\n  }\n\n  get fileSize(): number {\n    try {\n      if (this.size != null) {\n        return parseInt(this.size, null);\n      }\n    } catch {\n      // Invalid file size.\n    }\n    return 0;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<AttachmentView>>): AttachmentView {\n    const key = obj.key == null ? null : SymmetricCryptoKey.fromJSON(obj.key);\n    return Object.assign(new AttachmentView(), obj, { key: key });\n  }\n}\n","import { LinkedIdType } from \"../enums\";\nimport { ItemView } from \"../vault/models/view/item.view\";\n\nexport class LinkedMetadata {\n  constructor(readonly propertyKey: string, private readonly _i18nKey?: string) {}\n\n  get i18nKey() {\n    return this._i18nKey ?? this.propertyKey;\n  }\n}\n\n/**\n * A decorator used to set metadata used by Linked custom fields. Apply it to a class property or getter to make it\n *    available as a Linked custom field option.\n * @param id - A unique value that is saved in the Field model. It is used to look up the decorated class property.\n * @param i18nKey - The i18n key used to describe the decorated class property in the UI. If it is null, then the name\n *    of the class property will be used as the i18n key.\n */\nexport function linkedFieldOption(id: LinkedIdType, i18nKey?: string) {\n  return (prototype: ItemView, propertyKey: string) => {\n    if (prototype.linkedFieldOptions == null) {\n      prototype.linkedFieldOptions = new Map<LinkedIdType, LinkedMetadata>();\n    }\n\n    prototype.linkedFieldOptions.set(id, new LinkedMetadata(propertyKey, i18nKey));\n  };\n}\n","import { LinkedMetadata } from \"../../../misc/linkedFieldOption.decorator\";\nimport { View } from \"../../../models/view/view\";\n\nexport abstract class ItemView implements View {\n  linkedFieldOptions: Map<number, LinkedMetadata>;\n  abstract get subTitle(): string;\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { CardLinkedId as LinkedId } from \"../../../enums\";\nimport { linkedFieldOption } from \"../../../misc/linkedFieldOption.decorator\";\n\nimport { ItemView } from \"./item.view\";\n\nexport class CardView extends ItemView {\n  @linkedFieldOption(LinkedId.CardholderName)\n  cardholderName: string = null;\n  @linkedFieldOption(LinkedId.ExpMonth, \"expirationMonth\")\n  expMonth: string = null;\n  @linkedFieldOption(LinkedId.ExpYear, \"expirationYear\")\n  expYear: string = null;\n  @linkedFieldOption(LinkedId.Code, \"securityCode\")\n  code: string = null;\n\n  private _brand: string = null;\n  private _number: string = null;\n  private _subTitle: string = null;\n\n  get maskedCode(): string {\n    return this.code != null ? \"•\".repeat(this.code.length) : null;\n  }\n\n  get maskedNumber(): string {\n    return this.number != null ? \"•\".repeat(this.number.length) : null;\n  }\n\n  @linkedFieldOption(LinkedId.Brand)\n  get brand(): string {\n    return this._brand;\n  }\n  set brand(value: string) {\n    this._brand = value;\n    this._subTitle = null;\n  }\n\n  @linkedFieldOption(LinkedId.Number)\n  get number(): string {\n    return this._number;\n  }\n  set number(value: string) {\n    this._number = value;\n    this._subTitle = null;\n  }\n\n  get subTitle(): string {\n    if (this._subTitle == null) {\n      this._subTitle = this.brand;\n      if (this.number != null && this.number.length >= 4) {\n        if (this._subTitle != null && this._subTitle !== \"\") {\n          this._subTitle += \", \";\n        } else {\n          this._subTitle = \"\";\n        }\n\n        // Show last 5 on amex, last 4 for all others\n        const count =\n          this.number.length >= 5 && this.number.match(new RegExp(\"^3[47]\")) != null ? 5 : 4;\n        this._subTitle += \"*\" + this.number.substr(this.number.length - count);\n      }\n    }\n    return this._subTitle;\n  }\n\n  get expiration(): string {\n    if (!this.expMonth && !this.expYear) {\n      return null;\n    }\n\n    let exp = this.expMonth != null ? (\"0\" + this.expMonth).slice(-2) : \"__\";\n    exp += \" / \" + (this.expYear != null ? this.formatYear(this.expYear) : \"____\");\n    return exp;\n  }\n\n  private formatYear(year: string): string {\n    return year.length === 2 ? \"20\" + year : year;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<CardView>>): CardView {\n    return Object.assign(new CardView(), obj);\n  }\n\n  // ref https://stackoverflow.com/a/5911300\n  static getCardBrandByPatterns(cardNum: string): string {\n    if (cardNum == null || typeof cardNum !== \"string\" || cardNum.trim() === \"\") {\n      return null;\n    }\n\n    // Visa\n    let re = new RegExp(\"^4\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    // Mastercard\n    // Updated for Mastercard 2017 BINs expansion\n    if (\n      /^(5[1-5][0-9]{14}|2(22[1-9][0-9]{12}|2[3-9][0-9]{13}|[3-6][0-9]{14}|7[0-1][0-9]{13}|720[0-9]{12}))$/.test(\n        cardNum\n      )\n    ) {\n      return \"Mastercard\";\n    }\n\n    // AMEX\n    re = new RegExp(\"^3[47]\");\n    if (cardNum.match(re) != null) {\n      return \"Amex\";\n    }\n\n    // Discover\n    re = new RegExp(\n      \"^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)\"\n    );\n    if (cardNum.match(re) != null) {\n      return \"Discover\";\n    }\n\n    // Diners\n    re = new RegExp(\"^36\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // Diners - Carte Blanche\n    re = new RegExp(\"^30[0-5]\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // JCB\n    re = new RegExp(\"^35(2[89]|[3-8][0-9])\");\n    if (cardNum.match(re) != null) {\n      return \"JCB\";\n    }\n\n    // Visa Electron\n    re = new RegExp(\"^(4026|417500|4508|4844|491(3|7))\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    return null;\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { FieldType, LinkedIdType } from \"../../../enums\";\nimport { View } from \"../../../models/view/view\";\nimport { Field } from \"../domain/field\";\n\nexport class FieldView implements View {\n  name: string = null;\n  value: string = null;\n  type: FieldType = null;\n  newField = false; // Marks if the field is new and hasn't been saved\n  showValue = false;\n  showCount = false;\n  linkedId: LinkedIdType = null;\n\n  constructor(f?: Field) {\n    if (!f) {\n      return;\n    }\n\n    this.type = f.type;\n    this.linkedId = f.linkedId;\n  }\n\n  get maskedValue(): string {\n    return this.value != null ? \"••••••••\" : null;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<FieldView>>): FieldView {\n    return Object.assign(new FieldView(), obj);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { IdentityLinkedId as LinkedId } from \"../../../enums\";\nimport { linkedFieldOption } from \"../../../misc/linkedFieldOption.decorator\";\nimport { Utils } from \"../../../platform/misc/utils\";\n\nimport { ItemView } from \"./item.view\";\n\nexport class IdentityView extends ItemView {\n  @linkedFieldOption(LinkedId.Title)\n  title: string = null;\n  @linkedFieldOption(LinkedId.MiddleName)\n  middleName: string = null;\n  @linkedFieldOption(LinkedId.Address1)\n  address1: string = null;\n  @linkedFieldOption(LinkedId.Address2)\n  address2: string = null;\n  @linkedFieldOption(LinkedId.Address3)\n  address3: string = null;\n  @linkedFieldOption(LinkedId.City, \"cityTown\")\n  city: string = null;\n  @linkedFieldOption(LinkedId.State, \"stateProvince\")\n  state: string = null;\n  @linkedFieldOption(LinkedId.PostalCode, \"zipPostalCode\")\n  postalCode: string = null;\n  @linkedFieldOption(LinkedId.Country)\n  country: string = null;\n  @linkedFieldOption(LinkedId.Company)\n  company: string = null;\n  @linkedFieldOption(LinkedId.Email)\n  email: string = null;\n  @linkedFieldOption(LinkedId.Phone)\n  phone: string = null;\n  @linkedFieldOption(LinkedId.Ssn)\n  ssn: string = null;\n  @linkedFieldOption(LinkedId.Username)\n  username: string = null;\n  @linkedFieldOption(LinkedId.PassportNumber)\n  passportNumber: string = null;\n  @linkedFieldOption(LinkedId.LicenseNumber)\n  licenseNumber: string = null;\n\n  private _firstName: string = null;\n  private _lastName: string = null;\n  private _subTitle: string = null;\n\n  constructor() {\n    super();\n  }\n\n  @linkedFieldOption(LinkedId.FirstName)\n  get firstName(): string {\n    return this._firstName;\n  }\n  set firstName(value: string) {\n    this._firstName = value;\n    this._subTitle = null;\n  }\n\n  @linkedFieldOption(LinkedId.LastName)\n  get lastName(): string {\n    return this._lastName;\n  }\n  set lastName(value: string) {\n    this._lastName = value;\n    this._subTitle = null;\n  }\n\n  get subTitle(): string {\n    if (this._subTitle == null && (this.firstName != null || this.lastName != null)) {\n      this._subTitle = \"\";\n      if (this.firstName != null) {\n        this._subTitle = this.firstName;\n      }\n      if (this.lastName != null) {\n        if (this._subTitle !== \"\") {\n          this._subTitle += \" \";\n        }\n        this._subTitle += this.lastName;\n      }\n    }\n\n    return this._subTitle;\n  }\n\n  @linkedFieldOption(LinkedId.FullName)\n  get fullName(): string {\n    if (\n      this.title != null ||\n      this.firstName != null ||\n      this.middleName != null ||\n      this.lastName != null\n    ) {\n      let name = \"\";\n      if (this.title != null) {\n        name += this.title + \" \";\n      }\n      if (this.firstName != null) {\n        name += this.firstName + \" \";\n      }\n      if (this.middleName != null) {\n        name += this.middleName + \" \";\n      }\n      if (this.lastName != null) {\n        name += this.lastName;\n      }\n      return name.trim();\n    }\n\n    return null;\n  }\n\n  get fullAddress(): string {\n    let address = this.address1;\n    if (!Utils.isNullOrWhitespace(this.address2)) {\n      if (!Utils.isNullOrWhitespace(address)) {\n        address += \", \";\n      }\n      address += this.address2;\n    }\n    if (!Utils.isNullOrWhitespace(this.address3)) {\n      if (!Utils.isNullOrWhitespace(address)) {\n        address += \", \";\n      }\n      address += this.address3;\n    }\n    return address;\n  }\n\n  get fullAddressPart2(): string {\n    if (this.city == null && this.state == null && this.postalCode == null) {\n      return null;\n    }\n    const city = this.city || \"-\";\n    const state = this.state;\n    const postalCode = this.postalCode || \"-\";\n    let addressPart2 = city;\n    if (!Utils.isNullOrWhitespace(state)) {\n      addressPart2 += \", \" + state;\n    }\n    addressPart2 += \", \" + postalCode;\n    return addressPart2;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<IdentityView>>): IdentityView {\n    return Object.assign(new IdentityView(), obj);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { ItemView } from \"./item.view\";\n\nexport class Fido2CredentialView extends ItemView {\n  credentialId: string;\n  keyType: \"public-key\";\n  keyAlgorithm: \"ECDSA\";\n  keyCurve: \"P-256\";\n  keyValue: string;\n  rpId: string;\n  userHandle: string;\n  counter: number;\n  rpName: string;\n  userDisplayName: string;\n  discoverable: boolean;\n  creationDate: Date = null;\n\n  get subTitle(): string {\n    return this.userDisplayName;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<Fido2CredentialView>>): Fido2CredentialView {\n    const creationDate = obj.creationDate != null ? new Date(obj.creationDate) : null;\n    return Object.assign(new Fido2CredentialView(), obj, {\n      creationDate,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { UriMatchType } from \"../../../enums\";\nimport { View } from \"../../../models/view/view\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { LoginUri } from \"../domain/login-uri\";\n\nconst CanLaunchWhitelist = [\n  \"https://\",\n  \"http://\",\n  \"ssh://\",\n  \"ftp://\",\n  \"sftp://\",\n  \"irc://\",\n  \"vnc://\",\n  // https://docs.microsoft.com/en-us/windows-server/remote/remote-desktop-services/clients/remote-desktop-uri\n  \"rdp://\", // Legacy RDP URI scheme\n  \"ms-rd:\", // Preferred RDP URI scheme\n  \"chrome://\",\n  \"iosapp://\",\n  \"androidapp://\",\n];\n\nexport class LoginUriView implements View {\n  match: UriMatchType = null;\n\n  private _uri: string = null;\n  private _domain: string = null;\n  private _hostname: string = null;\n  private _host: string = null;\n  private _canLaunch: boolean = null;\n\n  constructor(u?: LoginUri) {\n    if (!u) {\n      return;\n    }\n\n    this.match = u.match;\n  }\n\n  get uri(): string {\n    return this._uri;\n  }\n  set uri(value: string) {\n    this._uri = value;\n    this._domain = null;\n    this._canLaunch = null;\n  }\n\n  get domain(): string {\n    if (this._domain == null && this.uri != null) {\n      this._domain = Utils.getDomain(this.uri);\n      if (this._domain === \"\") {\n        this._domain = null;\n      }\n    }\n\n    return this._domain;\n  }\n\n  get hostname(): string {\n    if (this.match === UriMatchType.RegularExpression) {\n      return null;\n    }\n    if (this._hostname == null && this.uri != null) {\n      this._hostname = Utils.getHostname(this.uri);\n      if (this._hostname === \"\") {\n        this._hostname = null;\n      }\n    }\n\n    return this._hostname;\n  }\n\n  get host(): string {\n    if (this.match === UriMatchType.RegularExpression) {\n      return null;\n    }\n    if (this._host == null && this.uri != null) {\n      this._host = Utils.getHost(this.uri);\n      if (this._host === \"\") {\n        this._host = null;\n      }\n    }\n\n    return this._host;\n  }\n\n  get hostnameOrUri(): string {\n    return this.hostname != null ? this.hostname : this.uri;\n  }\n\n  get hostOrUri(): string {\n    return this.host != null ? this.host : this.uri;\n  }\n\n  get isWebsite(): boolean {\n    return (\n      this.uri != null &&\n      (this.uri.indexOf(\"http://\") === 0 ||\n        this.uri.indexOf(\"https://\") === 0 ||\n        (this.uri.indexOf(\"://\") < 0 && !Utils.isNullOrWhitespace(Utils.getDomain(this.uri))))\n    );\n  }\n\n  get canLaunch(): boolean {\n    if (this._canLaunch != null) {\n      return this._canLaunch;\n    }\n    if (this.uri != null && this.match !== UriMatchType.RegularExpression) {\n      const uri = this.launchUri;\n      for (let i = 0; i < CanLaunchWhitelist.length; i++) {\n        if (uri.indexOf(CanLaunchWhitelist[i]) === 0) {\n          this._canLaunch = true;\n          return this._canLaunch;\n        }\n      }\n    }\n    this._canLaunch = false;\n    return this._canLaunch;\n  }\n\n  get launchUri(): string {\n    return this.uri.indexOf(\"://\") < 0 && !Utils.isNullOrWhitespace(Utils.getDomain(this.uri))\n      ? \"http://\" + this.uri\n      : this.uri;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<LoginUriView>>): LoginUriView {\n    return Object.assign(new LoginUriView(), obj);\n  }\n\n  matchesUri(\n    targetUri: string,\n    equivalentDomains: Set<string>,\n    defaultUriMatch: UriMatchType = null\n  ): boolean {\n    if (!this.uri || !targetUri) {\n      return false;\n    }\n\n    let matchType = this.match ?? defaultUriMatch;\n    matchType ??= UriMatchType.Domain;\n\n    const targetDomain = Utils.getDomain(targetUri);\n    const matchDomains = equivalentDomains.add(targetDomain);\n\n    switch (matchType) {\n      case UriMatchType.Domain:\n        return this.matchesDomain(targetUri, matchDomains);\n      case UriMatchType.Host: {\n        const urlHost = Utils.getHost(targetUri);\n        return urlHost != null && urlHost === Utils.getHost(this.uri);\n      }\n      case UriMatchType.Exact:\n        return targetUri === this.uri;\n      case UriMatchType.StartsWith:\n        return targetUri.startsWith(this.uri);\n      case UriMatchType.RegularExpression:\n        try {\n          const regex = new RegExp(this.uri, \"i\");\n          return regex.test(targetUri);\n        } catch (e) {\n          // Invalid regex\n          return false;\n        }\n      case UriMatchType.Never:\n        return false;\n      default:\n        break;\n    }\n\n    return false;\n  }\n\n  private matchesDomain(targetUri: string, matchDomains: Set<string>) {\n    if (targetUri == null || this.domain == null || !matchDomains.has(this.domain)) {\n      return false;\n    }\n\n    if (Utils.DomainMatchBlacklist.has(this.domain)) {\n      const domainUrlHost = Utils.getHost(targetUri);\n      return !Utils.DomainMatchBlacklist.get(this.domain).has(domainUrlHost);\n    }\n\n    return true;\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { LoginLinkedId as LinkedId, UriMatchType } from \"../../../enums\";\nimport { linkedFieldOption } from \"../../../misc/linkedFieldOption.decorator\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { Login } from \"../domain/login\";\n\nimport { Fido2CredentialView } from \"./fido2-credential.view\";\nimport { ItemView } from \"./item.view\";\nimport { LoginUriView } from \"./login-uri.view\";\n\nexport class LoginView extends ItemView {\n  @linkedFieldOption(LinkedId.Username)\n  username: string = null;\n  @linkedFieldOption(LinkedId.Password)\n  password: string = null;\n\n  passwordRevisionDate?: Date = null;\n  totp: string = null;\n  uris: LoginUriView[] = null;\n  autofillOnPageLoad: boolean = null;\n  fido2Credentials: Fido2CredentialView[] = null;\n\n  constructor(l?: Login) {\n    super();\n    if (!l) {\n      return;\n    }\n\n    this.passwordRevisionDate = l.passwordRevisionDate;\n    this.autofillOnPageLoad = l.autofillOnPageLoad;\n  }\n\n  get uri(): string {\n    return this.hasUris ? this.uris[0].uri : null;\n  }\n\n  get maskedPassword(): string {\n    return this.password != null ? \"••••••••\" : null;\n  }\n\n  get subTitle(): string {\n    return this.username;\n  }\n\n  get canLaunch(): boolean {\n    return this.hasUris && this.uris.some((u) => u.canLaunch);\n  }\n\n  get hasTotp(): boolean {\n    return !Utils.isNullOrWhitespace(this.totp);\n  }\n\n  get launchUri(): string {\n    if (this.hasUris) {\n      const uri = this.uris.find((u) => u.canLaunch);\n      if (uri != null) {\n        return uri.launchUri;\n      }\n    }\n    return null;\n  }\n\n  get hasUris(): boolean {\n    return this.uris != null && this.uris.length > 0;\n  }\n\n  get hasFido2Credentials(): boolean {\n    return this.fido2Credentials != null && this.fido2Credentials.length > 0;\n  }\n\n  matchesUri(\n    targetUri: string,\n    equivalentDomains: Set<string>,\n    defaultUriMatch: UriMatchType = null\n  ): boolean {\n    if (this.uris == null) {\n      return false;\n    }\n\n    return this.uris.some((uri) => uri.matchesUri(targetUri, equivalentDomains, defaultUriMatch));\n  }\n\n  static fromJSON(obj: Partial<Jsonify<LoginView>>): LoginView {\n    const passwordRevisionDate =\n      obj.passwordRevisionDate == null ? null : new Date(obj.passwordRevisionDate);\n    const uris = obj.uris?.map((uri: any) => LoginUriView.fromJSON(uri));\n    const fido2Credentials = obj.fido2Credentials?.map((key) => Fido2CredentialView.fromJSON(key));\n\n    return Object.assign(new LoginView(), obj, {\n      passwordRevisionDate,\n      uris,\n      fido2Credentials,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { View } from \"../../../models/view/view\";\nimport { Password } from \"../domain/password\";\n\nexport class PasswordHistoryView implements View {\n  password: string = null;\n  lastUsedDate: Date = null;\n\n  constructor(ph?: Password) {\n    if (!ph) {\n      return;\n    }\n\n    this.lastUsedDate = ph.lastUsedDate;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<PasswordHistoryView>>): PasswordHistoryView {\n    const lastUsedDate = obj.lastUsedDate == null ? null : new Date(obj.lastUsedDate);\n\n    return Object.assign(new PasswordHistoryView(), obj, {\n      lastUsedDate: lastUsedDate,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { SecureNoteType } from \"../../../enums\";\nimport { SecureNote } from \"../domain/secure-note\";\n\nimport { ItemView } from \"./item.view\";\n\nexport class SecureNoteView extends ItemView {\n  type: SecureNoteType = null;\n\n  constructor(n?: SecureNote) {\n    super();\n    if (!n) {\n      return;\n    }\n\n    this.type = n.type;\n  }\n\n  get subTitle(): string {\n    return null;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<SecureNoteView>>): SecureNoteView {\n    return Object.assign(new SecureNoteView(), obj);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { LinkedIdType } from \"../../../enums\";\nimport { View } from \"../../../models/view/view\";\nimport { InitializerMetadata } from \"../../../platform/interfaces/initializer-metadata.interface\";\nimport { InitializerKey } from \"../../../platform/services/cryptography/initializer-key\";\nimport { CipherRepromptType } from \"../../enums/cipher-reprompt-type\";\nimport { CipherType } from \"../../enums/cipher-type\";\nimport { LocalData } from \"../data/local.data\";\nimport { Cipher } from \"../domain/cipher\";\n\nimport { AttachmentView } from \"./attachment.view\";\nimport { CardView } from \"./card.view\";\nimport { FieldView } from \"./field.view\";\nimport { IdentityView } from \"./identity.view\";\nimport { LoginView } from \"./login.view\";\nimport { PasswordHistoryView } from \"./password-history.view\";\nimport { SecureNoteView } from \"./secure-note.view\";\n\nexport class CipherView implements View, InitializerMetadata {\n  readonly initializerKey = InitializerKey.CipherView;\n\n  id: string = null;\n  organizationId: string = null;\n  folderId: string = null;\n  name: string = null;\n  notes: string = null;\n  type: CipherType = null;\n  favorite = false;\n  organizationUseTotp = false;\n  edit = false;\n  viewPassword = true;\n  localData: LocalData;\n  login = new LoginView();\n  identity = new IdentityView();\n  card = new CardView();\n  secureNote = new SecureNoteView();\n  attachments: AttachmentView[] = null;\n  fields: FieldView[] = null;\n  passwordHistory: PasswordHistoryView[] = null;\n  collectionIds: string[] = null;\n  revisionDate: Date = null;\n  creationDate: Date = null;\n  deletedDate: Date = null;\n  reprompt: CipherRepromptType = CipherRepromptType.None;\n\n  constructor(c?: Cipher) {\n    if (!c) {\n      return;\n    }\n\n    this.id = c.id;\n    this.organizationId = c.organizationId;\n    this.folderId = c.folderId;\n    this.favorite = c.favorite;\n    this.organizationUseTotp = c.organizationUseTotp;\n    this.edit = c.edit;\n    this.viewPassword = c.viewPassword;\n    this.type = c.type;\n    this.localData = c.localData;\n    this.collectionIds = c.collectionIds;\n    this.revisionDate = c.revisionDate;\n    this.creationDate = c.creationDate;\n    this.deletedDate = c.deletedDate;\n    // Old locally stored ciphers might have reprompt == null. If so set it to None.\n    this.reprompt = c.reprompt ?? CipherRepromptType.None;\n  }\n\n  private get item() {\n    switch (this.type) {\n      case CipherType.Login:\n        return this.login;\n      case CipherType.SecureNote:\n        return this.secureNote;\n      case CipherType.Card:\n        return this.card;\n      case CipherType.Identity:\n        return this.identity;\n      default:\n        break;\n    }\n\n    return null;\n  }\n\n  get subTitle(): string {\n    return this.item.subTitle;\n  }\n\n  get hasPasswordHistory(): boolean {\n    return this.passwordHistory && this.passwordHistory.length > 0;\n  }\n\n  get hasAttachments(): boolean {\n    return this.attachments && this.attachments.length > 0;\n  }\n\n  get hasOldAttachments(): boolean {\n    if (this.hasAttachments) {\n      for (let i = 0; i < this.attachments.length; i++) {\n        if (this.attachments[i].key == null) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  get hasFields(): boolean {\n    return this.fields && this.fields.length > 0;\n  }\n\n  get passwordRevisionDisplayDate(): Date {\n    if (this.type !== CipherType.Login || this.login == null) {\n      return null;\n    } else if (this.login.password == null || this.login.password === \"\") {\n      return null;\n    }\n    return this.login.passwordRevisionDate;\n  }\n\n  get isDeleted(): boolean {\n    return this.deletedDate != null;\n  }\n\n  get linkedFieldOptions() {\n    return this.item.linkedFieldOptions;\n  }\n\n  linkedFieldValue(id: LinkedIdType) {\n    const linkedFieldOption = this.linkedFieldOptions?.get(id);\n    if (linkedFieldOption == null) {\n      return null;\n    }\n\n    const item = this.item;\n    return this.item[linkedFieldOption.propertyKey as keyof typeof item];\n  }\n\n  linkedFieldI18nKey(id: LinkedIdType): string {\n    return this.linkedFieldOptions.get(id)?.i18nKey;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<CipherView>>): CipherView {\n    const view = new CipherView();\n    const revisionDate = obj.revisionDate == null ? null : new Date(obj.revisionDate);\n    const deletedDate = obj.deletedDate == null ? null : new Date(obj.deletedDate);\n    const attachments = obj.attachments?.map((a: any) => AttachmentView.fromJSON(a));\n    const fields = obj.fields?.map((f: any) => FieldView.fromJSON(f));\n    const passwordHistory = obj.passwordHistory?.map((ph: any) => PasswordHistoryView.fromJSON(ph));\n\n    Object.assign(view, obj, {\n      revisionDate: revisionDate,\n      deletedDate: deletedDate,\n      attachments: attachments,\n      fields: fields,\n      passwordHistory: passwordHistory,\n    });\n\n    switch (obj.type) {\n      case CipherType.Card:\n        view.card = CardView.fromJSON(obj.card);\n        break;\n      case CipherType.Identity:\n        view.identity = IdentityView.fromJSON(obj.identity);\n        break;\n      case CipherType.Login:\n        view.login = LoginView.fromJSON(obj.login);\n        break;\n      case CipherType.SecureNote:\n        view.secureNote = SecureNoteView.fromJSON(obj.secureNote);\n        break;\n      default:\n        break;\n    }\n\n    return view;\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Utils } from \"../../../platform/misc/utils\";\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { AttachmentData } from \"../data/attachment.data\";\nimport { AttachmentView } from \"../view/attachment.view\";\n\nexport class Attachment extends Domain {\n  id: string;\n  url: string;\n  size: string;\n  sizeName: string; // Readable size, ex: \"4.2 KB\" or \"1.43 GB\"\n  key: EncString;\n  fileName: EncString;\n\n  constructor(obj?: AttachmentData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.size = obj.size;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        url: null,\n        sizeName: null,\n        fileName: null,\n        key: null,\n      },\n      [\"id\", \"url\", \"sizeName\"]\n    );\n  }\n\n  async decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<AttachmentView> {\n    const view = await this.decryptObj(\n      new AttachmentView(this),\n      {\n        fileName: null,\n      },\n      orgId,\n      encKey\n    );\n\n    if (this.key != null) {\n      view.key = await this.decryptAttachmentKey(orgId, encKey);\n    }\n\n    return view;\n  }\n\n  private async decryptAttachmentKey(orgId: string, encKey?: SymmetricCryptoKey) {\n    try {\n      if (encKey == null) {\n        encKey = await this.getKeyForDecryption(orgId);\n      }\n\n      const encryptService = Utils.getContainerService().getEncryptService();\n      const decValue = await encryptService.decryptToBytes(this.key, encKey);\n      return new SymmetricCryptoKey(decValue);\n    } catch (e) {\n      // TODO: error?\n    }\n  }\n\n  private async getKeyForDecryption(orgId: string) {\n    const cryptoService = Utils.getContainerService().getCryptoService();\n    return orgId != null\n      ? await cryptoService.getOrgKey(orgId)\n      : await cryptoService.getUserKeyWithLegacySupport();\n  }\n\n  toAttachmentData(): AttachmentData {\n    const a = new AttachmentData();\n    a.size = this.size;\n    this.buildDataModel(\n      this,\n      a,\n      {\n        id: null,\n        url: null,\n        sizeName: null,\n        fileName: null,\n        key: null,\n      },\n      [\"id\", \"url\", \"sizeName\"]\n    );\n    return a;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<Attachment>>): Attachment {\n    if (obj == null) {\n      return null;\n    }\n\n    const key = EncString.fromJSON(obj.key);\n    const fileName = EncString.fromJSON(obj.fileName);\n\n    return Object.assign(new Attachment(), obj, {\n      key,\n      fileName,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { CardData } from \"../data/card.data\";\nimport { CardView } from \"../view/card.view\";\n\nexport class Card extends Domain {\n  cardholderName: EncString;\n  brand: EncString;\n  number: EncString;\n  expMonth: EncString;\n  expYear: EncString;\n  code: EncString;\n\n  constructor(obj?: CardData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        cardholderName: null,\n        brand: null,\n        number: null,\n        expMonth: null,\n        expYear: null,\n        code: null,\n      },\n      []\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<CardView> {\n    return this.decryptObj(\n      new CardView(),\n      {\n        cardholderName: null,\n        brand: null,\n        number: null,\n        expMonth: null,\n        expYear: null,\n        code: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toCardData(): CardData {\n    const c = new CardData();\n    this.buildDataModel(this, c, {\n      cardholderName: null,\n      brand: null,\n      number: null,\n      expMonth: null,\n      expYear: null,\n      code: null,\n    });\n    return c;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<Card>>): Card {\n    if (obj == null) {\n      return null;\n    }\n\n    const cardholderName = EncString.fromJSON(obj.cardholderName);\n    const brand = EncString.fromJSON(obj.brand);\n    const number = EncString.fromJSON(obj.number);\n    const expMonth = EncString.fromJSON(obj.expMonth);\n    const expYear = EncString.fromJSON(obj.expYear);\n    const code = EncString.fromJSON(obj.code);\n    return Object.assign(new Card(), obj, {\n      cardholderName,\n      brand,\n      number,\n      expMonth,\n      expYear,\n      code,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { FieldType, LinkedIdType } from \"../../../enums\";\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { FieldData } from \"../data/field.data\";\nimport { FieldView } from \"../view/field.view\";\n\nexport class Field extends Domain {\n  name: EncString;\n  value: EncString;\n  type: FieldType;\n  linkedId: LinkedIdType;\n\n  constructor(obj?: FieldData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.type = obj.type;\n    this.linkedId = obj.linkedId;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        name: null,\n        value: null,\n      },\n      []\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<FieldView> {\n    return this.decryptObj(\n      new FieldView(this),\n      {\n        name: null,\n        value: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toFieldData(): FieldData {\n    const f = new FieldData();\n    this.buildDataModel(\n      this,\n      f,\n      {\n        name: null,\n        value: null,\n        type: null,\n        linkedId: null,\n      },\n      [\"type\", \"linkedId\"]\n    );\n    return f;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<Field>>): Field {\n    if (obj == null) {\n      return null;\n    }\n\n    const name = EncString.fromJSON(obj.name);\n    const value = EncString.fromJSON(obj.value);\n\n    return Object.assign(new Field(), obj, {\n      name,\n      value,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { IdentityData } from \"../data/identity.data\";\nimport { IdentityView } from \"../view/identity.view\";\n\nexport class Identity extends Domain {\n  title: EncString;\n  firstName: EncString;\n  middleName: EncString;\n  lastName: EncString;\n  address1: EncString;\n  address2: EncString;\n  address3: EncString;\n  city: EncString;\n  state: EncString;\n  postalCode: EncString;\n  country: EncString;\n  company: EncString;\n  email: EncString;\n  phone: EncString;\n  ssn: EncString;\n  username: EncString;\n  passportNumber: EncString;\n  licenseNumber: EncString;\n\n  constructor(obj?: IdentityData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        title: null,\n        firstName: null,\n        middleName: null,\n        lastName: null,\n        address1: null,\n        address2: null,\n        address3: null,\n        city: null,\n        state: null,\n        postalCode: null,\n        country: null,\n        company: null,\n        email: null,\n        phone: null,\n        ssn: null,\n        username: null,\n        passportNumber: null,\n        licenseNumber: null,\n      },\n      []\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<IdentityView> {\n    return this.decryptObj(\n      new IdentityView(),\n      {\n        title: null,\n        firstName: null,\n        middleName: null,\n        lastName: null,\n        address1: null,\n        address2: null,\n        address3: null,\n        city: null,\n        state: null,\n        postalCode: null,\n        country: null,\n        company: null,\n        email: null,\n        phone: null,\n        ssn: null,\n        username: null,\n        passportNumber: null,\n        licenseNumber: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toIdentityData(): IdentityData {\n    const i = new IdentityData();\n    this.buildDataModel(this, i, {\n      title: null,\n      firstName: null,\n      middleName: null,\n      lastName: null,\n      address1: null,\n      address2: null,\n      address3: null,\n      city: null,\n      state: null,\n      postalCode: null,\n      country: null,\n      company: null,\n      email: null,\n      phone: null,\n      ssn: null,\n      username: null,\n      passportNumber: null,\n      licenseNumber: null,\n    });\n    return i;\n  }\n\n  static fromJSON(obj: Jsonify<Identity>): Identity {\n    if (obj == null) {\n      return null;\n    }\n\n    const title = EncString.fromJSON(obj.title);\n    const firstName = EncString.fromJSON(obj.firstName);\n    const middleName = EncString.fromJSON(obj.middleName);\n    const lastName = EncString.fromJSON(obj.lastName);\n    const address1 = EncString.fromJSON(obj.address1);\n    const address2 = EncString.fromJSON(obj.address2);\n    const address3 = EncString.fromJSON(obj.address3);\n    const city = EncString.fromJSON(obj.city);\n    const state = EncString.fromJSON(obj.state);\n    const postalCode = EncString.fromJSON(obj.postalCode);\n    const country = EncString.fromJSON(obj.country);\n    const company = EncString.fromJSON(obj.company);\n    const email = EncString.fromJSON(obj.email);\n    const phone = EncString.fromJSON(obj.phone);\n    const ssn = EncString.fromJSON(obj.ssn);\n    const username = EncString.fromJSON(obj.username);\n    const passportNumber = EncString.fromJSON(obj.passportNumber);\n    const licenseNumber = EncString.fromJSON(obj.licenseNumber);\n\n    return Object.assign(new Identity(), obj, {\n      title,\n      firstName,\n      middleName,\n      lastName,\n      address1,\n      address2,\n      address3,\n      city,\n      state,\n      postalCode,\n      country,\n      company,\n      email,\n      phone,\n      ssn,\n      username,\n      passportNumber,\n      licenseNumber,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { Fido2CredentialData } from \"../data/fido2-credential.data\";\nimport { Fido2CredentialView } from \"../view/fido2-credential.view\";\n\nexport class Fido2Credential extends Domain {\n  credentialId: EncString | null = null;\n  keyType: EncString;\n  keyAlgorithm: EncString;\n  keyCurve: EncString;\n  keyValue: EncString;\n  rpId: EncString;\n  userHandle: EncString;\n  counter: EncString;\n  rpName: EncString;\n  userDisplayName: EncString;\n  discoverable: EncString;\n  creationDate: Date;\n\n  constructor(obj?: Fido2CredentialData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        credentialId: null,\n        keyType: null,\n        keyAlgorithm: null,\n        keyCurve: null,\n        keyValue: null,\n        rpId: null,\n        userHandle: null,\n        counter: null,\n        rpName: null,\n        userDisplayName: null,\n        discoverable: null,\n      },\n      []\n    );\n    this.creationDate = obj.creationDate != null ? new Date(obj.creationDate) : null;\n  }\n\n  async decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<Fido2CredentialView> {\n    const view = await this.decryptObj(\n      new Fido2CredentialView(),\n      {\n        credentialId: null,\n        keyType: null,\n        keyAlgorithm: null,\n        keyCurve: null,\n        keyValue: null,\n        rpId: null,\n        userHandle: null,\n        rpName: null,\n        userDisplayName: null,\n        discoverable: null,\n      },\n      orgId,\n      encKey\n    );\n\n    const { counter } = await this.decryptObj(\n      { counter: \"\" },\n      {\n        counter: null,\n      },\n      orgId,\n      encKey\n    );\n    // Counter will end up as NaN if this fails\n    view.counter = parseInt(counter);\n\n    const { discoverable } = await this.decryptObj(\n      { discoverable: \"\" },\n      {\n        discoverable: null,\n      },\n      orgId,\n      encKey\n    );\n    view.discoverable = discoverable === \"true\";\n    view.creationDate = this.creationDate;\n\n    return view;\n  }\n\n  toFido2CredentialData(): Fido2CredentialData {\n    const i = new Fido2CredentialData();\n    i.creationDate = this.creationDate.toISOString();\n    this.buildDataModel(this, i, {\n      credentialId: null,\n      keyType: null,\n      keyAlgorithm: null,\n      keyCurve: null,\n      keyValue: null,\n      rpId: null,\n      userHandle: null,\n      counter: null,\n      rpName: null,\n      userDisplayName: null,\n      discoverable: null,\n    });\n    return i;\n  }\n\n  static fromJSON(obj: Jsonify<Fido2Credential>): Fido2Credential {\n    if (obj == null) {\n      return null;\n    }\n\n    const credentialId = EncString.fromJSON(obj.credentialId);\n    const keyType = EncString.fromJSON(obj.keyType);\n    const keyAlgorithm = EncString.fromJSON(obj.keyAlgorithm);\n    const keyCurve = EncString.fromJSON(obj.keyCurve);\n    const keyValue = EncString.fromJSON(obj.keyValue);\n    const rpId = EncString.fromJSON(obj.rpId);\n    const userHandle = EncString.fromJSON(obj.userHandle);\n    const counter = EncString.fromJSON(obj.counter);\n    const rpName = EncString.fromJSON(obj.rpName);\n    const userDisplayName = EncString.fromJSON(obj.userDisplayName);\n    const discoverable = EncString.fromJSON(obj.discoverable);\n    const creationDate = obj.creationDate != null ? new Date(obj.creationDate) : null;\n\n    return Object.assign(new Fido2Credential(), obj, {\n      credentialId,\n      keyType,\n      keyAlgorithm,\n      keyCurve,\n      keyValue,\n      rpId,\n      userHandle,\n      counter,\n      rpName,\n      userDisplayName,\n      discoverable,\n      creationDate,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { UriMatchType } from \"../../../enums\";\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { LoginUriData } from \"../data/login-uri.data\";\nimport { LoginUriView } from \"../view/login-uri.view\";\n\nexport class LoginUri extends Domain {\n  uri: EncString;\n  match: UriMatchType;\n\n  constructor(obj?: LoginUriData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.match = obj.match;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        uri: null,\n      },\n      []\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<LoginUriView> {\n    return this.decryptObj(\n      new LoginUriView(this),\n      {\n        uri: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toLoginUriData(): LoginUriData {\n    const u = new LoginUriData();\n    this.buildDataModel(\n      this,\n      u,\n      {\n        uri: null,\n        match: null,\n      },\n      [\"match\"]\n    );\n    return u;\n  }\n\n  static fromJSON(obj: Jsonify<LoginUri>): LoginUri {\n    if (obj == null) {\n      return null;\n    }\n\n    const uri = EncString.fromJSON(obj.uri);\n    return Object.assign(new LoginUri(), obj, {\n      uri,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { LoginData } from \"../data/login.data\";\nimport { LoginView } from \"../view/login.view\";\n\nimport { Fido2Credential } from \"./fido2-credential\";\nimport { LoginUri } from \"./login-uri\";\n\nexport class Login extends Domain {\n  uris: LoginUri[];\n  username: EncString;\n  password: EncString;\n  passwordRevisionDate?: Date;\n  totp: EncString;\n  autofillOnPageLoad: boolean;\n  fido2Credentials: Fido2Credential[];\n\n  constructor(obj?: LoginData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.passwordRevisionDate =\n      obj.passwordRevisionDate != null ? new Date(obj.passwordRevisionDate) : null;\n    this.autofillOnPageLoad = obj.autofillOnPageLoad;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        username: null,\n        password: null,\n        totp: null,\n      },\n      []\n    );\n\n    if (obj.uris) {\n      this.uris = [];\n      obj.uris.forEach((u) => {\n        this.uris.push(new LoginUri(u));\n      });\n    }\n\n    if (obj.fido2Credentials) {\n      this.fido2Credentials = obj.fido2Credentials.map((key) => new Fido2Credential(key));\n    }\n  }\n\n  async decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<LoginView> {\n    const view = await this.decryptObj(\n      new LoginView(this),\n      {\n        username: null,\n        password: null,\n        totp: null,\n      },\n      orgId,\n      encKey\n    );\n\n    if (this.uris != null) {\n      view.uris = [];\n      for (let i = 0; i < this.uris.length; i++) {\n        const uri = await this.uris[i].decrypt(orgId, encKey);\n        view.uris.push(uri);\n      }\n    }\n\n    if (this.fido2Credentials != null) {\n      view.fido2Credentials = await Promise.all(\n        this.fido2Credentials.map((key) => key.decrypt(orgId, encKey))\n      );\n    }\n\n    return view;\n  }\n\n  toLoginData(): LoginData {\n    const l = new LoginData();\n    l.passwordRevisionDate =\n      this.passwordRevisionDate != null ? this.passwordRevisionDate.toISOString() : null;\n    l.autofillOnPageLoad = this.autofillOnPageLoad;\n    this.buildDataModel(this, l, {\n      username: null,\n      password: null,\n      totp: null,\n    });\n\n    if (this.uris != null && this.uris.length > 0) {\n      l.uris = [];\n      this.uris.forEach((u) => {\n        l.uris.push(u.toLoginUriData());\n      });\n    }\n\n    if (this.fido2Credentials != null && this.fido2Credentials.length > 0) {\n      l.fido2Credentials = this.fido2Credentials.map((key) => key.toFido2CredentialData());\n    }\n\n    return l;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<Login>>): Login {\n    if (obj == null) {\n      return null;\n    }\n\n    const username = EncString.fromJSON(obj.username);\n    const password = EncString.fromJSON(obj.password);\n    const totp = EncString.fromJSON(obj.totp);\n    const passwordRevisionDate =\n      obj.passwordRevisionDate == null ? null : new Date(obj.passwordRevisionDate);\n    const uris = obj.uris?.map((uri: any) => LoginUri.fromJSON(uri));\n    const fido2Credentials =\n      obj.fido2Credentials?.map((key) => Fido2Credential.fromJSON(key)) ?? [];\n\n    return Object.assign(new Login(), obj, {\n      username,\n      password,\n      totp,\n      passwordRevisionDate,\n      uris,\n      fido2Credentials,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { PasswordHistoryData } from \"../data/password-history.data\";\nimport { PasswordHistoryView } from \"../view/password-history.view\";\n\nexport class Password extends Domain {\n  password: EncString;\n  lastUsedDate: Date;\n\n  constructor(obj?: PasswordHistoryData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(this, obj, {\n      password: null,\n    });\n    this.lastUsedDate = new Date(obj.lastUsedDate);\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<PasswordHistoryView> {\n    return this.decryptObj(\n      new PasswordHistoryView(this),\n      {\n        password: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toPasswordHistoryData(): PasswordHistoryData {\n    const ph = new PasswordHistoryData();\n    ph.lastUsedDate = this.lastUsedDate.toISOString();\n    this.buildDataModel(this, ph, {\n      password: null,\n    });\n    return ph;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<Password>>): Password {\n    if (obj == null) {\n      return null;\n    }\n\n    const password = EncString.fromJSON(obj.password);\n    const lastUsedDate = obj.lastUsedDate == null ? null : new Date(obj.lastUsedDate);\n\n    return Object.assign(new Password(), obj, {\n      password,\n      lastUsedDate,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { SecureNoteType } from \"../../../enums\";\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { SecureNoteData } from \"../data/secure-note.data\";\nimport { SecureNoteView } from \"../view/secure-note.view\";\n\nexport class SecureNote extends Domain {\n  type: SecureNoteType;\n\n  constructor(obj?: SecureNoteData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.type = obj.type;\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<SecureNoteView> {\n    return Promise.resolve(new SecureNoteView(this));\n  }\n\n  toSecureNoteData(): SecureNoteData {\n    const n = new SecureNoteData();\n    n.type = this.type;\n    return n;\n  }\n\n  static fromJSON(obj: Jsonify<SecureNote>): SecureNote {\n    if (obj == null) {\n      return null;\n    }\n\n    return Object.assign(new SecureNote(), obj);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Decryptable } from \"../../../platform/interfaces/decryptable.interface\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { InitializerKey } from \"../../../platform/services/cryptography/initializer-key\";\nimport { CipherRepromptType } from \"../../enums/cipher-reprompt-type\";\nimport { CipherType } from \"../../enums/cipher-type\";\nimport { CipherData } from \"../data/cipher.data\";\nimport { LocalData } from \"../data/local.data\";\nimport { CipherView } from \"../view/cipher.view\";\n\nimport { Attachment } from \"./attachment\";\nimport { Card } from \"./card\";\nimport { Field } from \"./field\";\nimport { Identity } from \"./identity\";\nimport { Login } from \"./login\";\nimport { Password } from \"./password\";\nimport { SecureNote } from \"./secure-note\";\n\nexport class Cipher extends Domain implements Decryptable<CipherView> {\n  readonly initializerKey = InitializerKey.Cipher;\n\n  id: string;\n  organizationId: string;\n  folderId: string;\n  name: EncString;\n  notes: EncString;\n  type: CipherType;\n  favorite: boolean;\n  organizationUseTotp: boolean;\n  edit: boolean;\n  viewPassword: boolean;\n  revisionDate: Date;\n  localData: LocalData;\n  login: Login;\n  identity: Identity;\n  card: Card;\n  secureNote: SecureNote;\n  attachments: Attachment[];\n  fields: Field[];\n  passwordHistory: Password[];\n  collectionIds: string[];\n  creationDate: Date;\n  deletedDate: Date;\n  reprompt: CipherRepromptType;\n  key: EncString;\n\n  constructor(obj?: CipherData, localData: LocalData = null) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        organizationId: null,\n        folderId: null,\n        name: null,\n        notes: null,\n        key: null,\n      },\n      [\"id\", \"organizationId\", \"folderId\"]\n    );\n\n    this.type = obj.type;\n    this.favorite = obj.favorite;\n    this.organizationUseTotp = obj.organizationUseTotp;\n    this.edit = obj.edit;\n    if (obj.viewPassword != null) {\n      this.viewPassword = obj.viewPassword;\n    } else {\n      this.viewPassword = true; // Default for already synced Ciphers without viewPassword\n    }\n    this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;\n    this.collectionIds = obj.collectionIds;\n    this.localData = localData;\n    this.creationDate = obj.creationDate != null ? new Date(obj.creationDate) : null;\n    this.deletedDate = obj.deletedDate != null ? new Date(obj.deletedDate) : null;\n    this.reprompt = obj.reprompt;\n\n    switch (this.type) {\n      case CipherType.Login:\n        this.login = new Login(obj.login);\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNote(obj.secureNote);\n        break;\n      case CipherType.Card:\n        this.card = new Card(obj.card);\n        break;\n      case CipherType.Identity:\n        this.identity = new Identity(obj.identity);\n        break;\n      default:\n        break;\n    }\n\n    if (obj.attachments != null) {\n      this.attachments = obj.attachments.map((a) => new Attachment(a));\n    } else {\n      this.attachments = null;\n    }\n\n    if (obj.fields != null) {\n      this.fields = obj.fields.map((f) => new Field(f));\n    } else {\n      this.fields = null;\n    }\n\n    if (obj.passwordHistory != null) {\n      this.passwordHistory = obj.passwordHistory.map((ph) => new Password(ph));\n    } else {\n      this.passwordHistory = null;\n    }\n  }\n\n  // We are passing the organizationId into the EncString.decrypt() method here, but because the encKey will always be\n  // present and so the organizationId will not be used.\n  // We will refactor the EncString.decrypt() in https://bitwarden.atlassian.net/browse/PM-3762 to remove the dependency on the organizationId.\n  async decrypt(encKey: SymmetricCryptoKey): Promise<CipherView> {\n    const model = new CipherView(this);\n\n    if (this.key != null) {\n      const encryptService = Utils.getContainerService().getEncryptService();\n      encKey = new SymmetricCryptoKey(await encryptService.decryptToBytes(this.key, encKey));\n    }\n\n    await this.decryptObj(\n      model,\n      {\n        name: null,\n        notes: null,\n      },\n      this.organizationId,\n      encKey\n    );\n\n    switch (this.type) {\n      case CipherType.Login:\n        model.login = await this.login.decrypt(this.organizationId, encKey);\n        break;\n      case CipherType.SecureNote:\n        model.secureNote = await this.secureNote.decrypt(this.organizationId, encKey);\n        break;\n      case CipherType.Card:\n        model.card = await this.card.decrypt(this.organizationId, encKey);\n        break;\n      case CipherType.Identity:\n        model.identity = await this.identity.decrypt(this.organizationId, encKey);\n        break;\n      default:\n        break;\n    }\n\n    if (this.attachments != null && this.attachments.length > 0) {\n      const attachments: any[] = [];\n      await this.attachments.reduce((promise, attachment) => {\n        return promise\n          .then(() => {\n            return attachment.decrypt(this.organizationId, encKey);\n          })\n          .then((decAttachment) => {\n            attachments.push(decAttachment);\n          });\n      }, Promise.resolve());\n      model.attachments = attachments;\n    }\n\n    if (this.fields != null && this.fields.length > 0) {\n      const fields: any[] = [];\n      await this.fields.reduce((promise, field) => {\n        return promise\n          .then(() => {\n            return field.decrypt(this.organizationId, encKey);\n          })\n          .then((decField) => {\n            fields.push(decField);\n          });\n      }, Promise.resolve());\n      model.fields = fields;\n    }\n\n    if (this.passwordHistory != null && this.passwordHistory.length > 0) {\n      const passwordHistory: any[] = [];\n      await this.passwordHistory.reduce((promise, ph) => {\n        return promise\n          .then(() => {\n            return ph.decrypt(this.organizationId, encKey);\n          })\n          .then((decPh) => {\n            passwordHistory.push(decPh);\n          });\n      }, Promise.resolve());\n      model.passwordHistory = passwordHistory;\n    }\n\n    return model;\n  }\n\n  toCipherData(): CipherData {\n    const c = new CipherData();\n    c.id = this.id;\n    c.organizationId = this.organizationId;\n    c.folderId = this.folderId;\n    c.edit = this.edit;\n    c.viewPassword = this.viewPassword;\n    c.organizationUseTotp = this.organizationUseTotp;\n    c.favorite = this.favorite;\n    c.revisionDate = this.revisionDate != null ? this.revisionDate.toISOString() : null;\n    c.type = this.type;\n    c.collectionIds = this.collectionIds;\n    c.creationDate = this.creationDate != null ? this.creationDate.toISOString() : null;\n    c.deletedDate = this.deletedDate != null ? this.deletedDate.toISOString() : null;\n    c.reprompt = this.reprompt;\n    c.key = this.key?.encryptedString;\n\n    this.buildDataModel(this, c, {\n      name: null,\n      notes: null,\n    });\n\n    switch (c.type) {\n      case CipherType.Login:\n        c.login = this.login.toLoginData();\n        break;\n      case CipherType.SecureNote:\n        c.secureNote = this.secureNote.toSecureNoteData();\n        break;\n      case CipherType.Card:\n        c.card = this.card.toCardData();\n        break;\n      case CipherType.Identity:\n        c.identity = this.identity.toIdentityData();\n        break;\n      default:\n        break;\n    }\n\n    if (this.fields != null) {\n      c.fields = this.fields.map((f) => f.toFieldData());\n    }\n    if (this.attachments != null) {\n      c.attachments = this.attachments.map((a) => a.toAttachmentData());\n    }\n    if (this.passwordHistory != null) {\n      c.passwordHistory = this.passwordHistory.map((ph) => ph.toPasswordHistoryData());\n    }\n    return c;\n  }\n\n  static fromJSON(obj: Jsonify<Cipher>) {\n    if (obj == null) {\n      return null;\n    }\n\n    const domain = new Cipher();\n    const name = EncString.fromJSON(obj.name);\n    const notes = EncString.fromJSON(obj.notes);\n    const revisionDate = obj.revisionDate == null ? null : new Date(obj.revisionDate);\n    const deletedDate = obj.deletedDate == null ? null : new Date(obj.deletedDate);\n    const attachments = obj.attachments?.map((a: any) => Attachment.fromJSON(a));\n    const fields = obj.fields?.map((f: any) => Field.fromJSON(f));\n    const passwordHistory = obj.passwordHistory?.map((ph: any) => Password.fromJSON(ph));\n    const key = EncString.fromJSON(obj.key);\n\n    Object.assign(domain, obj, {\n      name,\n      notes,\n      revisionDate,\n      deletedDate,\n      attachments,\n      fields,\n      passwordHistory,\n      key,\n    });\n\n    switch (obj.type) {\n      case CipherType.Card:\n        domain.card = Card.fromJSON(obj.card);\n        break;\n      case CipherType.Identity:\n        domain.identity = Identity.fromJSON(obj.identity);\n        break;\n      case CipherType.Login:\n        domain.login = Login.fromJSON(obj.login);\n        break;\n      case CipherType.SecureNote:\n        domain.secureNote = SecureNote.fromJSON(obj.secureNote);\n        break;\n      default:\n        break;\n    }\n\n    return domain;\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Cipher } from \"../../../vault/models/domain/cipher\";\nimport { CipherView } from \"../../../vault/models/view/cipher.view\";\nimport { InitializerMetadata } from \"../../interfaces/initializer-metadata.interface\";\n\nimport { InitializerKey } from \"./initializer-key\";\n\n/**\n * Internal reference of classes so we can reconstruct objects properly.\n * Each entry should be keyed using the Decryptable.initializerKey property\n */\nconst classInitializers: Record<InitializerKey, (obj: any) => any> = {\n  [InitializerKey.Cipher]: Cipher.fromJSON,\n  [InitializerKey.CipherView]: CipherView.fromJSON,\n};\n\nexport function getClassInitializer<T extends InitializerMetadata>(\n  className: InitializerKey\n): (obj: Jsonify<T>) => T {\n  return classInitializers[className];\n}\n","import { defaultIfEmpty, filter, firstValueFrom, fromEvent, map, Subject, takeUntil } from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { Decryptable } from \"../../interfaces/decryptable.interface\";\nimport { InitializerMetadata } from \"../../interfaces/initializer-metadata.interface\";\nimport { SymmetricCryptoKey } from \"../../models/domain/symmetric-crypto-key\";\n\nimport { EncryptServiceImplementation } from \"./encrypt.service.implementation\";\nimport { getClassInitializer } from \"./get-class-initializer\";\n\n// TTL (time to live) is not strictly required but avoids tying up memory resources if inactive\nconst workerTTL = 3 * 60000; // 3 minutes\n\nexport class MultithreadEncryptServiceImplementation extends EncryptServiceImplementation {\n  private worker: Worker;\n  private timeout: any;\n\n  private clear$ = new Subject<void>();\n\n  /**\n   * Sends items to a web worker to decrypt them.\n   * This utilises multithreading to decrypt items faster without interrupting other operations (e.g. updating UI).\n   */\n  async decryptItems<T extends InitializerMetadata>(\n    items: Decryptable<T>[],\n    key: SymmetricCryptoKey\n  ): Promise<T[]> {\n    if (items == null || items.length < 1) {\n      return [];\n    }\n\n    this.logService.info(\"Starting decryption using multithreading\");\n\n    this.worker ??= new Worker(\n      new URL(\n        /* webpackChunkName: 'encrypt-worker' */\n        \"@bitwarden/common/platform/services/cryptography/encrypt.worker.ts\",\n        import.meta.url\n      )\n    );\n\n    this.restartTimeout();\n\n    const request = {\n      id: Utils.newGuid(),\n      items: items,\n      key: key,\n    };\n\n    this.worker.postMessage(JSON.stringify(request));\n\n    return await firstValueFrom(\n      fromEvent(this.worker, \"message\").pipe(\n        filter((response: MessageEvent) => response.data?.id === request.id),\n        map((response) => JSON.parse(response.data.items)),\n        map((items) =>\n          items.map((jsonItem: Jsonify<T>) => {\n            const initializer = getClassInitializer<T>(jsonItem.initializerKey);\n            return initializer(jsonItem);\n          })\n        ),\n        takeUntil(this.clear$),\n        defaultIfEmpty([])\n      )\n    );\n  }\n\n  private clear() {\n    this.clear$.next();\n    this.worker?.terminate();\n    this.worker = null;\n    this.clearTimeout();\n  }\n\n  private restartTimeout() {\n    this.clearTimeout();\n    this.timeout = setTimeout(() => this.clear(), workerTTL);\n  }\n\n  private clearTimeout() {\n    if (this.timeout != null) {\n      clearTimeout(this.timeout);\n    }\n  }\n}\n","import { LogService } from \"../../abstractions/log.service\";\nimport { Utils } from \"../../misc/utils\";\nimport { EncArrayBuffer } from \"../../models/domain/enc-array-buffer\";\n\nconst MAX_SINGLE_BLOB_UPLOAD_SIZE = 256 * 1024 * 1024; // 256 MiB\nconst MAX_BLOCKS_PER_BLOB = 50000;\n\nexport class AzureFileUploadService {\n  constructor(private logService: LogService) {}\n\n  async upload(url: string, data: EncArrayBuffer, renewalCallback: () => Promise<string>) {\n    if (data.buffer.byteLength <= MAX_SINGLE_BLOB_UPLOAD_SIZE) {\n      return await this.azureUploadBlob(url, data);\n    } else {\n      return await this.azureUploadBlocks(url, data, renewalCallback);\n    }\n  }\n  private async azureUploadBlob(url: string, data: EncArrayBuffer) {\n    const urlObject = Utils.getUrl(url);\n    const headers = new Headers({\n      \"x-ms-date\": new Date().toUTCString(),\n      \"x-ms-version\": urlObject.searchParams.get(\"sv\"),\n      \"Content-Length\": data.buffer.byteLength.toString(),\n      \"x-ms-blob-type\": \"BlockBlob\",\n    });\n\n    const request = new Request(url, {\n      body: data.buffer,\n      cache: \"no-store\",\n      method: \"PUT\",\n      headers: headers,\n    });\n\n    const blobResponse = await fetch(request);\n\n    if (blobResponse.status !== 201) {\n      throw new Error(`Failed to create Azure blob: ${blobResponse.status}`);\n    }\n  }\n  private async azureUploadBlocks(\n    url: string,\n    data: EncArrayBuffer,\n    renewalCallback: () => Promise<string>\n  ) {\n    const baseUrl = Utils.getUrl(url);\n    const blockSize = this.getMaxBlockSize(baseUrl.searchParams.get(\"sv\"));\n    let blockIndex = 0;\n    const numBlocks = Math.ceil(data.buffer.byteLength / blockSize);\n    const blocksStaged: string[] = [];\n\n    if (numBlocks > MAX_BLOCKS_PER_BLOB) {\n      throw new Error(\n        `Cannot upload file, exceeds maximum size of ${blockSize * MAX_BLOCKS_PER_BLOB}`\n      );\n    }\n\n    // eslint-disable-next-line\n    try {\n      while (blockIndex < numBlocks) {\n        url = await this.renewUrlIfNecessary(url, renewalCallback);\n        const blockUrl = Utils.getUrl(url);\n        const blockId = this.encodedBlockId(blockIndex);\n        blockUrl.searchParams.append(\"comp\", \"block\");\n        blockUrl.searchParams.append(\"blockid\", blockId);\n        const start = blockIndex * blockSize;\n        const blockData = data.buffer.slice(start, start + blockSize);\n        const blockHeaders = new Headers({\n          \"x-ms-date\": new Date().toUTCString(),\n          \"x-ms-version\": blockUrl.searchParams.get(\"sv\"),\n          \"Content-Length\": blockData.byteLength.toString(),\n        });\n\n        const blockRequest = new Request(blockUrl.toString(), {\n          body: blockData,\n          cache: \"no-store\",\n          method: \"PUT\",\n          headers: blockHeaders,\n        });\n\n        const blockResponse = await fetch(blockRequest);\n\n        if (blockResponse.status !== 201) {\n          const message = `Unsuccessful block PUT. Received status ${blockResponse.status}`;\n          this.logService.error(message + \"\\n\" + (await blockResponse.json()));\n          throw new Error(message);\n        }\n\n        blocksStaged.push(blockId);\n        blockIndex++;\n      }\n\n      url = await this.renewUrlIfNecessary(url, renewalCallback);\n      const blockListUrl = Utils.getUrl(url);\n      const blockListXml = this.blockListXml(blocksStaged);\n      blockListUrl.searchParams.append(\"comp\", \"blocklist\");\n      const headers = new Headers({\n        \"x-ms-date\": new Date().toUTCString(),\n        \"x-ms-version\": blockListUrl.searchParams.get(\"sv\"),\n        \"Content-Length\": blockListXml.length.toString(),\n      });\n\n      const request = new Request(blockListUrl.toString(), {\n        body: blockListXml,\n        cache: \"no-store\",\n        method: \"PUT\",\n        headers: headers,\n      });\n\n      const response = await fetch(request);\n\n      if (response.status !== 201) {\n        const message = `Unsuccessful block list PUT. Received status ${response.status}`;\n        this.logService.error(message + \"\\n\" + (await response.json()));\n        throw new Error(message);\n      }\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  private async renewUrlIfNecessary(\n    url: string,\n    renewalCallback: () => Promise<string>\n  ): Promise<string> {\n    const urlObject = Utils.getUrl(url);\n    const expiry = new Date(urlObject.searchParams.get(\"se\") ?? \"\");\n\n    if (isNaN(expiry.getTime())) {\n      expiry.setTime(Date.now() + 3600000);\n    }\n\n    if (expiry.getTime() < Date.now() + 1000) {\n      return await renewalCallback();\n    }\n    return url;\n  }\n\n  private encodedBlockId(blockIndex: number) {\n    // Encoded blockId max size is 64, so pre-encoding max size is 48\n    const utfBlockId = (\n      \"000000000000000000000000000000000000000000000000\" + blockIndex.toString()\n    ).slice(-48);\n    return Utils.fromUtf8ToB64(utfBlockId);\n  }\n\n  private blockListXml(blockIdList: string[]) {\n    let xml = '<?xml version=\"1.0\" encoding=\"utf-8\"?><BlockList>';\n    blockIdList.forEach((blockId) => {\n      xml += `<Latest>${blockId}</Latest>`;\n    });\n    xml += \"</BlockList>\";\n    return xml;\n  }\n\n  private getMaxBlockSize(version: string) {\n    if (Version.compare(version, \"2019-12-12\") >= 0) {\n      return 4000 * 1024 * 1024; // 4000 MiB\n    } else if (Version.compare(version, \"2016-05-31\") >= 0) {\n      return 100 * 1024 * 1024; // 100 MiB\n    } else {\n      return 4 * 1024 * 1024; // 4 MiB\n    }\n  }\n}\n\nclass Version {\n  /**\n   * Compares two Azure Versions against each other\n   * @param a Version to compare\n   * @param b Version to compare\n   * @returns a number less than zero if b is newer than a, 0 if equal,\n   * and greater than zero if a is newer than b\n   */\n  static compare(a: Required<Version> | string, b: Required<Version> | string) {\n    if (typeof a === \"string\") {\n      a = new Version(a);\n    }\n\n    if (typeof b === \"string\") {\n      b = new Version(b);\n    }\n\n    return a.year !== b.year\n      ? a.year - b.year\n      : a.month !== b.month\n      ? a.month - b.month\n      : a.day !== b.day\n      ? a.day - b.day\n      : 0;\n  }\n  year = 0;\n  month = 0;\n  day = 0;\n\n  constructor(version: string) {\n    try {\n      const parts = version.split(\"-\").map((v) => Number.parseInt(v, 10));\n      this.year = parts[0];\n      this.month = parts[1];\n      this.day = parts[2];\n    } catch {\n      // Ignore error\n    }\n  }\n  /**\n   * Compares two Azure Versions against each other\n   * @param compareTo Version to compare against\n   * @returns a number less than zero if compareTo is newer, 0 if equal,\n   * and greater than zero if this is greater than compareTo\n   */\n  compare(compareTo: Required<Version> | string) {\n    return Version.compare(this, compareTo);\n  }\n}\n","import { Utils } from \"../../misc/utils\";\nimport { EncArrayBuffer } from \"../../models/domain/enc-array-buffer\";\n\nexport class BitwardenFileUploadService {\n  async upload(\n    encryptedFileName: string,\n    encryptedFileData: EncArrayBuffer,\n    apiCall: (fd: FormData) => Promise<any>\n  ) {\n    const fd = new FormData();\n    try {\n      const blob = new Blob([encryptedFileData.buffer], { type: \"application/octet-stream\" });\n      fd.append(\"data\", blob, encryptedFileName);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\n          \"data\",\n          Buffer.from(encryptedFileData.buffer) as any,\n          {\n            filepath: encryptedFileName,\n            contentType: \"application/octet-stream\",\n          } as any\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    await apiCall(fd);\n  }\n}\n","import { FileUploadType } from \"../../../enums\";\nimport {\n  FileUploadApiMethods,\n  FileUploadService as FileUploadServiceAbstraction,\n} from \"../../abstractions/file-upload/file-upload.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { EncArrayBuffer } from \"../../models/domain/enc-array-buffer\";\nimport { EncString } from \"../../models/domain/enc-string\";\n\nimport { AzureFileUploadService } from \"./azure-file-upload.service\";\nimport { BitwardenFileUploadService } from \"./bitwarden-file-upload.service\";\n\nexport class FileUploadService implements FileUploadServiceAbstraction {\n  private azureFileUploadService: AzureFileUploadService;\n  private bitwardenFileUploadService: BitwardenFileUploadService;\n\n  constructor(protected logService: LogService) {\n    this.azureFileUploadService = new AzureFileUploadService(logService);\n    this.bitwardenFileUploadService = new BitwardenFileUploadService();\n  }\n\n  async upload(\n    uploadData: { url: string; fileUploadType: FileUploadType },\n    fileName: EncString,\n    encryptedFileData: EncArrayBuffer,\n    fileUploadMethods: FileUploadApiMethods\n  ) {\n    try {\n      switch (uploadData.fileUploadType) {\n        case FileUploadType.Direct:\n          await this.bitwardenFileUploadService.upload(\n            fileName.encryptedString,\n            encryptedFileData,\n            (fd) => fileUploadMethods.postDirect(fd)\n          );\n          break;\n        case FileUploadType.Azure: {\n          await this.azureFileUploadService.upload(\n            uploadData.url,\n            encryptedFileData,\n            fileUploadMethods.renewFileUploadUrl\n          );\n          break;\n        }\n        default:\n          throw new Error(\"Unknown file upload type\");\n      }\n    } catch (e) {\n      await fileUploadMethods.rollback();\n      throw e;\n    }\n  }\n}\n","import { MemoryStorageOptions, StorageOptions } from \"../models/domain/storage-options\";\n\nexport abstract class AbstractStorageService {\n  abstract get<T>(key: string, options?: StorageOptions): Promise<T>;\n  abstract has(key: string, options?: StorageOptions): Promise<boolean>;\n  abstract save<T>(key: string, obj: T, options?: StorageOptions): Promise<void>;\n  abstract remove(key: string, options?: StorageOptions): Promise<void>;\n}\n\nexport abstract class AbstractMemoryStorageService extends AbstractStorageService {\n  // Used to identify the service in the session sync decorator framework\n  static readonly TYPE = \"MemoryStorageService\";\n  readonly type = AbstractMemoryStorageService.TYPE;\n\n  abstract get<T>(key: string, options?: MemoryStorageOptions<T>): Promise<T>;\n  abstract getBypassCache<T>(key: string, options?: MemoryStorageOptions<T>): Promise<T>;\n}\n","import { AbstractMemoryStorageService } from \"../abstractions/storage.service\";\n\nexport class MemoryStorageService extends AbstractMemoryStorageService {\n  private store = new Map<string, any>();\n\n  get<T>(key: string): Promise<T> {\n    if (this.store.has(key)) {\n      const obj = this.store.get(key);\n      return Promise.resolve(obj as T);\n    }\n    return Promise.resolve(null);\n  }\n\n  async has(key: string): Promise<boolean> {\n    return (await this.get(key)) != null;\n  }\n\n  save(key: string, obj: any): Promise<any> {\n    if (obj == null) {\n      return this.remove(key);\n    }\n    this.store.set(key, obj);\n    return Promise.resolve();\n  }\n\n  remove(key: string): Promise<any> {\n    this.store.delete(key);\n    return Promise.resolve();\n  }\n\n  getBypassCache<T>(key: string): Promise<T> {\n    return this.get<T>(key);\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { AuthService } from \"../../auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"../../auth/enums/authentication-status\";\nimport { MessagingService } from \"../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../abstractions/platform-utils.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { SystemService as SystemServiceAbstraction } from \"../abstractions/system.service\";\nimport { Utils } from \"../misc/utils\";\n\nexport class SystemService implements SystemServiceAbstraction {\n  private reloadInterval: any = null;\n  private clearClipboardTimeout: any = null;\n  private clearClipboardTimeoutFunction: () => Promise<any> = null;\n\n  constructor(\n    private messagingService: MessagingService,\n    private platformUtilsService: PlatformUtilsService,\n    private reloadCallback: () => Promise<void> = null,\n    private stateService: StateService\n  ) {}\n\n  async startProcessReload(authService: AuthService): Promise<void> {\n    const accounts = await firstValueFrom(this.stateService.accounts$);\n    if (accounts != null) {\n      const keys = Object.keys(accounts);\n      if (keys.length > 0) {\n        for (const userId of keys) {\n          if ((await authService.getAuthStatus(userId)) === AuthenticationStatus.Unlocked) {\n            return;\n          }\n        }\n      }\n    }\n\n    // A reloadInterval has already been set and is executing\n    if (this.reloadInterval != null) {\n      return;\n    }\n\n    // User has set a PIN, with ask for master password on restart, to protect their vault\n    const ephemeralPin = await this.stateService.getPinKeyEncryptedUserKeyEphemeral();\n    if (ephemeralPin != null) {\n      return;\n    }\n\n    this.cancelProcessReload();\n    await this.executeProcessReload();\n  }\n\n  private async executeProcessReload() {\n    const biometricLockedFingerprintValidated =\n      await this.stateService.getBiometricFingerprintValidated();\n    if (!biometricLockedFingerprintValidated) {\n      clearInterval(this.reloadInterval);\n      this.reloadInterval = null;\n      this.messagingService.send(\"reloadProcess\");\n      if (this.reloadCallback != null) {\n        await this.reloadCallback();\n      }\n      return;\n    }\n    if (this.reloadInterval == null) {\n      this.reloadInterval = setInterval(async () => await this.executeProcessReload(), 1000);\n    }\n  }\n\n  cancelProcessReload(): void {\n    if (this.reloadInterval != null) {\n      clearInterval(this.reloadInterval);\n      this.reloadInterval = null;\n    }\n  }\n\n  async clearClipboard(clipboardValue: string, timeoutMs: number = null): Promise<void> {\n    if (this.clearClipboardTimeout != null) {\n      clearTimeout(this.clearClipboardTimeout);\n      this.clearClipboardTimeout = null;\n    }\n    if (Utils.isNullOrWhitespace(clipboardValue)) {\n      return;\n    }\n    await this.stateService.getClearClipboard().then((clearSeconds) => {\n      if (clearSeconds == null) {\n        return;\n      }\n      if (timeoutMs == null) {\n        timeoutMs = clearSeconds * 1000;\n      }\n      this.clearClipboardTimeoutFunction = async () => {\n        const clipboardValueNow = await this.platformUtilsService.readFromClipboard();\n        if (clipboardValue === clipboardValueNow) {\n          this.platformUtilsService.copyToClipboard(\"\", { clearing: true });\n        }\n      };\n      this.clearClipboardTimeout = setTimeout(async () => {\n        await this.clearPendingClipboard();\n      }, timeoutMs);\n    });\n  }\n\n  async clearPendingClipboard() {\n    if (this.clearClipboardTimeoutFunction != null) {\n      await this.clearClipboardTimeoutFunction();\n      this.clearClipboardTimeoutFunction = null;\n    }\n  }\n}\n","export class DecryptParameters<T> {\n  encKey: T;\n  data: T;\n  iv: T;\n  macKey: T;\n  mac: T;\n  macData: T;\n}\n","import * as argon2 from \"argon2-browser\";\nimport * as forge from \"node-forge\";\n\nimport { Utils } from \"../../platform/misc/utils\";\nimport { CsprngArray } from \"../../types/csprng\";\nimport { CryptoFunctionService } from \"../abstractions/crypto-function.service\";\nimport { DecryptParameters } from \"../models/domain/decrypt-parameters\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetric-crypto-key\";\n\nexport class WebCryptoFunctionService implements CryptoFunctionService {\n  private crypto: Crypto;\n  private subtle: SubtleCrypto;\n  private wasmSupported: boolean;\n\n  constructor(win: Window | typeof global) {\n    this.crypto = typeof win.crypto !== \"undefined\" ? win.crypto : null;\n    this.subtle =\n      !!this.crypto && typeof win.crypto.subtle !== \"undefined\" ? win.crypto.subtle : null;\n    this.wasmSupported = this.checkIfWasmSupported();\n  }\n\n  async pbkdf2(\n    password: string | Uint8Array,\n    salt: string | Uint8Array,\n    algorithm: \"sha256\" | \"sha512\",\n    iterations: number\n  ): Promise<Uint8Array> {\n    const wcLen = algorithm === \"sha256\" ? 256 : 512;\n    const passwordBuf = this.toBuf(password);\n    const saltBuf = this.toBuf(salt);\n\n    const pbkdf2Params: Pbkdf2Params = {\n      name: \"PBKDF2\",\n      salt: saltBuf,\n      iterations: iterations,\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n\n    const impKey = await this.subtle.importKey(\n      \"raw\",\n      passwordBuf,\n      { name: \"PBKDF2\" } as any,\n      false,\n      [\"deriveBits\"]\n    );\n    const buffer = await this.subtle.deriveBits(pbkdf2Params as any, impKey, wcLen);\n    return new Uint8Array(buffer);\n  }\n\n  async argon2(\n    password: string | Uint8Array,\n    salt: string | Uint8Array,\n    iterations: number,\n    memory: number,\n    parallelism: number\n  ): Promise<Uint8Array> {\n    if (!this.wasmSupported) {\n      throw \"Webassembly support is required for the Argon2 KDF feature.\";\n    }\n\n    const passwordArr = new Uint8Array(this.toBuf(password));\n    const saltArr = new Uint8Array(this.toBuf(salt));\n\n    const result = await argon2.hash({\n      pass: passwordArr,\n      salt: saltArr,\n      time: iterations,\n      mem: memory,\n      parallelism: parallelism,\n      hashLen: 32,\n      type: argon2.ArgonType.Argon2id,\n    });\n    argon2.unloadRuntime();\n    return result.hash;\n  }\n\n  async hkdf(\n    ikm: Uint8Array,\n    salt: string | Uint8Array,\n    info: string | Uint8Array,\n    outputByteSize: number,\n    algorithm: \"sha256\" | \"sha512\"\n  ): Promise<Uint8Array> {\n    const saltBuf = this.toBuf(salt);\n    const infoBuf = this.toBuf(info);\n\n    const hkdfParams: HkdfParams = {\n      name: \"HKDF\",\n      salt: saltBuf,\n      info: infoBuf,\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n\n    const impKey = await this.subtle.importKey(\"raw\", ikm, { name: \"HKDF\" } as any, false, [\n      \"deriveBits\",\n    ]);\n    const buffer = await this.subtle.deriveBits(hkdfParams as any, impKey, outputByteSize * 8);\n    return new Uint8Array(buffer);\n  }\n\n  // ref: https://tools.ietf.org/html/rfc5869\n  async hkdfExpand(\n    prk: Uint8Array,\n    info: string | Uint8Array,\n    outputByteSize: number,\n    algorithm: \"sha256\" | \"sha512\"\n  ): Promise<Uint8Array> {\n    const hashLen = algorithm === \"sha256\" ? 32 : 64;\n    if (outputByteSize > 255 * hashLen) {\n      throw new Error(\"outputByteSize is too large.\");\n    }\n    const prkArr = new Uint8Array(prk);\n    if (prkArr.length < hashLen) {\n      throw new Error(\"prk is too small.\");\n    }\n    const infoBuf = this.toBuf(info);\n    const infoArr = new Uint8Array(infoBuf);\n    let runningOkmLength = 0;\n    let previousT = new Uint8Array(0);\n    const n = Math.ceil(outputByteSize / hashLen);\n    const okm = new Uint8Array(n * hashLen);\n    for (let i = 0; i < n; i++) {\n      const t = new Uint8Array(previousT.length + infoArr.length + 1);\n      t.set(previousT);\n      t.set(infoArr, previousT.length);\n      t.set([i + 1], t.length - 1);\n      previousT = new Uint8Array(await this.hmac(t, prk, algorithm));\n      okm.set(previousT, runningOkmLength);\n      runningOkmLength += previousT.length;\n      if (runningOkmLength >= outputByteSize) {\n        break;\n      }\n    }\n    return okm.slice(0, outputByteSize);\n  }\n\n  async hash(\n    value: string | Uint8Array,\n    algorithm: \"sha1\" | \"sha256\" | \"sha512\" | \"md5\"\n  ): Promise<Uint8Array> {\n    if (algorithm === \"md5\") {\n      const md = algorithm === \"md5\" ? forge.md.md5.create() : forge.md.sha1.create();\n      const valueBytes = this.toByteString(value);\n      md.update(valueBytes, \"raw\");\n      return Utils.fromByteStringToArray(md.digest().data);\n    }\n\n    const valueBuf = this.toBuf(value);\n    const buffer = await this.subtle.digest(\n      { name: this.toWebCryptoAlgorithm(algorithm) },\n      valueBuf\n    );\n    return new Uint8Array(buffer);\n  }\n\n  async hmac(\n    value: Uint8Array,\n    key: Uint8Array,\n    algorithm: \"sha1\" | \"sha256\" | \"sha512\"\n  ): Promise<Uint8Array> {\n    const signingAlgorithm = {\n      name: \"HMAC\",\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n\n    const impKey = await this.subtle.importKey(\"raw\", key, signingAlgorithm, false, [\"sign\"]);\n    const buffer = await this.subtle.sign(signingAlgorithm, impKey, value);\n    return new Uint8Array(buffer);\n  }\n\n  // Safely compare two values in a way that protects against timing attacks (Double HMAC Verification).\n  // ref: https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/february/double-hmac-verification/\n  // ref: https://paragonie.com/blog/2015/11/preventing-timing-attacks-on-string-comparison-with-double-hmac-strategy\n  async compare(a: Uint8Array, b: Uint8Array): Promise<boolean> {\n    const macKey = await this.randomBytes(32);\n    const signingAlgorithm = {\n      name: \"HMAC\",\n      hash: { name: \"SHA-256\" },\n    };\n    const impKey = await this.subtle.importKey(\"raw\", macKey, signingAlgorithm, false, [\"sign\"]);\n    const mac1 = await this.subtle.sign(signingAlgorithm, impKey, a);\n    const mac2 = await this.subtle.sign(signingAlgorithm, impKey, b);\n\n    if (mac1.byteLength !== mac2.byteLength) {\n      return false;\n    }\n\n    const arr1 = new Uint8Array(mac1);\n    const arr2 = new Uint8Array(mac2);\n    for (let i = 0; i < arr2.length; i++) {\n      if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  hmacFast(value: string, key: string, algorithm: \"sha1\" | \"sha256\" | \"sha512\"): Promise<string> {\n    const hmac = forge.hmac.create();\n    hmac.start(algorithm, key);\n    hmac.update(value);\n    const bytes = hmac.digest().getBytes();\n    return Promise.resolve(bytes);\n  }\n\n  async compareFast(a: string, b: string): Promise<boolean> {\n    const rand = await this.randomBytes(32);\n    const bytes = new Uint32Array(rand);\n    const buffer = forge.util.createBuffer();\n    for (let i = 0; i < bytes.length; i++) {\n      buffer.putInt32(bytes[i]);\n    }\n    const macKey = buffer.getBytes();\n\n    const hmac = forge.hmac.create();\n    hmac.start(\"sha256\", macKey);\n    hmac.update(a);\n    const mac1 = hmac.digest().getBytes();\n\n    hmac.start(null, null);\n    hmac.update(b);\n    const mac2 = hmac.digest().getBytes();\n\n    const equals = mac1 === mac2;\n    return equals;\n  }\n\n  async aesEncrypt(data: Uint8Array, iv: Uint8Array, key: Uint8Array): Promise<Uint8Array> {\n    const impKey = await this.subtle.importKey(\"raw\", key, { name: \"AES-CBC\" } as any, false, [\n      \"encrypt\",\n    ]);\n    const buffer = await this.subtle.encrypt({ name: \"AES-CBC\", iv: iv }, impKey, data);\n    return new Uint8Array(buffer);\n  }\n\n  aesDecryptFastParameters(\n    data: string,\n    iv: string,\n    mac: string,\n    key: SymmetricCryptoKey\n  ): DecryptParameters<string> {\n    const p = new DecryptParameters<string>();\n    if (key.meta != null) {\n      p.encKey = key.meta.encKeyByteString;\n      p.macKey = key.meta.macKeyByteString;\n    }\n\n    if (p.encKey == null) {\n      p.encKey = forge.util.decode64(key.encKeyB64);\n    }\n    p.data = forge.util.decode64(data);\n    p.iv = forge.util.decode64(iv);\n    p.macData = p.iv + p.data;\n    if (p.macKey == null && key.macKeyB64 != null) {\n      p.macKey = forge.util.decode64(key.macKeyB64);\n    }\n    if (mac != null) {\n      p.mac = forge.util.decode64(mac);\n    }\n\n    // cache byte string keys for later\n    if (key.meta == null) {\n      key.meta = {};\n    }\n    if (key.meta.encKeyByteString == null) {\n      key.meta.encKeyByteString = p.encKey;\n    }\n    if (p.macKey != null && key.meta.macKeyByteString == null) {\n      key.meta.macKeyByteString = p.macKey;\n    }\n\n    return p;\n  }\n\n  aesDecryptFast(parameters: DecryptParameters<string>, mode: \"cbc\" | \"ecb\"): Promise<string> {\n    const decipher = (forge as any).cipher.createDecipher(\n      this.toWebCryptoAesMode(mode),\n      parameters.encKey\n    );\n    const options = {} as any;\n    if (mode === \"cbc\") {\n      options.iv = parameters.iv;\n    }\n    const dataBuffer = (forge as any).util.createBuffer(parameters.data);\n    decipher.start(options);\n    decipher.update(dataBuffer);\n    decipher.finish();\n    const val = decipher.output.toString();\n    return Promise.resolve(val);\n  }\n\n  async aesDecrypt(\n    data: Uint8Array,\n    iv: Uint8Array,\n    key: Uint8Array,\n    mode: \"cbc\" | \"ecb\"\n  ): Promise<Uint8Array> {\n    if (mode === \"ecb\") {\n      // Web crypto does not support AES-ECB mode, so we need to do this in forge.\n      const params = new DecryptParameters<string>();\n      params.data = this.toByteString(data);\n      params.encKey = this.toByteString(key);\n      const result = await this.aesDecryptFast(params, \"ecb\");\n      return Utils.fromByteStringToArray(result);\n    }\n    const impKey = await this.subtle.importKey(\"raw\", key, { name: \"AES-CBC\" } as any, false, [\n      \"decrypt\",\n    ]);\n    const buffer = await this.subtle.decrypt({ name: \"AES-CBC\", iv: iv }, impKey, data);\n    return new Uint8Array(buffer);\n  }\n\n  async rsaEncrypt(\n    data: Uint8Array,\n    publicKey: Uint8Array,\n    algorithm: \"sha1\" | \"sha256\"\n  ): Promise<Uint8Array> {\n    // Note: Edge browser requires that we specify name and hash for both key import and decrypt.\n    // We cannot use the proper types here.\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n    const impKey = await this.subtle.importKey(\"spki\", publicKey, rsaParams, false, [\"encrypt\"]);\n    const buffer = await this.subtle.encrypt(rsaParams, impKey, data);\n    return new Uint8Array(buffer);\n  }\n\n  async rsaDecrypt(\n    data: Uint8Array,\n    privateKey: Uint8Array,\n    algorithm: \"sha1\" | \"sha256\"\n  ): Promise<Uint8Array> {\n    // Note: Edge browser requires that we specify name and hash for both key import and decrypt.\n    // We cannot use the proper types here.\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n    const impKey = await this.subtle.importKey(\"pkcs8\", privateKey, rsaParams, false, [\"decrypt\"]);\n    const buffer = await this.subtle.decrypt(rsaParams, impKey, data);\n    return new Uint8Array(buffer);\n  }\n\n  async rsaExtractPublicKey(privateKey: Uint8Array): Promise<Uint8Array> {\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      // Have to specify some algorithm\n      hash: { name: this.toWebCryptoAlgorithm(\"sha1\") },\n    };\n    const impPrivateKey = await this.subtle.importKey(\"pkcs8\", privateKey, rsaParams, true, [\n      \"decrypt\",\n    ]);\n    const jwkPrivateKey = await this.subtle.exportKey(\"jwk\", impPrivateKey);\n    const jwkPublicKeyParams = {\n      kty: \"RSA\",\n      e: jwkPrivateKey.e,\n      n: jwkPrivateKey.n,\n      alg: \"RSA-OAEP\",\n      ext: true,\n    };\n    const impPublicKey = await this.subtle.importKey(\"jwk\", jwkPublicKeyParams, rsaParams, true, [\n      \"encrypt\",\n    ]);\n    const buffer = await this.subtle.exportKey(\"spki\", impPublicKey);\n    return new Uint8Array(buffer);\n  }\n\n  async aesGenerateKey(bitLength = 128 | 192 | 256 | 512): Promise<CsprngArray> {\n    if (bitLength === 512) {\n      // 512 bit keys are not supported in WebCrypto, so we concat two 256 bit keys\n      const key1 = await this.aesGenerateKey(256);\n      const key2 = await this.aesGenerateKey(256);\n      return new Uint8Array([...key1, ...key2]) as CsprngArray;\n    }\n    const aesParams = {\n      name: \"AES-CBC\",\n      length: bitLength,\n    };\n\n    const key = await this.subtle.generateKey(aesParams, true, [\"encrypt\", \"decrypt\"]);\n    const rawKey = await this.subtle.exportKey(\"raw\", key);\n    return new Uint8Array(rawKey) as CsprngArray;\n  }\n\n  async rsaGenerateKeyPair(length: 1024 | 2048 | 4096): Promise<[Uint8Array, Uint8Array]> {\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      modulusLength: length,\n      publicExponent: new Uint8Array([0x01, 0x00, 0x01]), // 65537\n      // Have to specify some algorithm\n      hash: { name: this.toWebCryptoAlgorithm(\"sha1\") },\n    };\n    const keyPair = await this.subtle.generateKey(rsaParams, true, [\"encrypt\", \"decrypt\"]);\n    const publicKey = await this.subtle.exportKey(\"spki\", keyPair.publicKey);\n    const privateKey = await this.subtle.exportKey(\"pkcs8\", keyPair.privateKey);\n    return [new Uint8Array(publicKey), new Uint8Array(privateKey)];\n  }\n\n  randomBytes(length: number): Promise<CsprngArray> {\n    const arr = new Uint8Array(length);\n    this.crypto.getRandomValues(arr);\n    return Promise.resolve(arr as CsprngArray);\n  }\n\n  private toBuf(value: string | Uint8Array): Uint8Array {\n    let buf: Uint8Array;\n    if (typeof value === \"string\") {\n      buf = Utils.fromUtf8ToArray(value);\n    } else {\n      buf = value;\n    }\n    return buf;\n  }\n\n  private toByteString(value: string | Uint8Array): string {\n    let bytes: string;\n    if (typeof value === \"string\") {\n      bytes = forge.util.encodeUtf8(value);\n    } else {\n      bytes = Utils.fromBufferToByteString(value);\n    }\n    return bytes;\n  }\n\n  private toWebCryptoAlgorithm(algorithm: \"sha1\" | \"sha256\" | \"sha512\" | \"md5\"): string {\n    if (algorithm === \"md5\") {\n      throw new Error(\"MD5 is not supported in WebCrypto.\");\n    }\n    return algorithm === \"sha1\" ? \"SHA-1\" : algorithm === \"sha256\" ? \"SHA-256\" : \"SHA-512\";\n  }\n\n  private toWebCryptoAesMode(mode: \"cbc\" | \"ecb\"): string {\n    return mode === \"cbc\" ? \"AES-CBC\" : \"AES-ECB\";\n  }\n\n  // ref: https://stackoverflow.com/a/47880734/1090359\n  private checkIfWasmSupported(): boolean {\n    try {\n      if (typeof WebAssembly === \"object\" && typeof WebAssembly.instantiate === \"function\") {\n        const module = new WebAssembly.Module(\n          Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00)\n        );\n        if (module instanceof WebAssembly.Module) {\n          return new WebAssembly.Instance(module) instanceof WebAssembly.Instance;\n        }\n      }\n    } catch {\n      return false;\n    }\n    return false;\n  }\n}\n","export class UpdateAvatarRequest {\n  avatarColor: string;\n\n  constructor(avatarColor: string) {\n    this.avatarColor = avatarColor;\n  }\n}\n","import { BehaviorSubject, Observable } from \"rxjs\";\n\nimport { AvatarUpdateService as AvatarUpdateServiceAbstraction } from \"../../abstractions/account/avatar-update.service\";\nimport { ApiService } from \"../../abstractions/api.service\";\nimport { UpdateAvatarRequest } from \"../../models/request/update-avatar.request\";\nimport { ProfileResponse } from \"../../models/response/profile.response\";\nimport { StateService } from \"../../platform/abstractions/state.service\";\n\nexport class AvatarUpdateService implements AvatarUpdateServiceAbstraction {\n  private _avatarUpdate$ = new BehaviorSubject<string | null>(null);\n  avatarUpdate$: Observable<string | null> = this._avatarUpdate$.asObservable();\n\n  constructor(private apiService: ApiService, private stateService: StateService) {\n    this.loadColorFromState();\n  }\n\n  loadColorFromState(): Promise<string | null> {\n    return this.stateService.getAvatarColor().then((color) => {\n      this._avatarUpdate$.next(color);\n      return color;\n    });\n  }\n\n  pushUpdate(color: string | null): Promise<ProfileResponse | void> {\n    return this.apiService.putAvatar(new UpdateAvatarRequest(color)).then((response) => {\n      this.stateService.setAvatarColor(response.avatarColor);\n      this._avatarUpdate$.next(response.avatarColor);\n    });\n  }\n}\n","import { BillingSyncConfigApi } from \"../../../billing/models/api/billing-sync-config.api\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\nimport { OrganizationConnectionType } from \"../../enums\";\nimport { ScimConfigApi } from \"../api/scim-config.api\";\n\n/**API response config types for OrganizationConnectionResponse */\nexport type OrganizationConnectionConfigApis = BillingSyncConfigApi | ScimConfigApi;\n\nexport class OrganizationConnectionResponse<\n  TConfig extends OrganizationConnectionConfigApis\n> extends BaseResponse {\n  id: string;\n  type: OrganizationConnectionType;\n  organizationId: string;\n  enabled: boolean;\n  config: TConfig;\n\n  constructor(response: any, configType: { new (response: any): TConfig }) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    const rawConfig = this.getResponseProperty(\"Config\");\n    this.config = rawConfig == null ? null : new configType(rawConfig);\n  }\n}\n","import { BaseResponse } from \"../response/base.response\";\n\nexport class CardApi extends BaseResponse {\n  cardholderName: string;\n  brand: string;\n  number: string;\n  expMonth: string;\n  expYear: string;\n  code: string;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.cardholderName = this.getResponseProperty(\"CardholderName\");\n    this.brand = this.getResponseProperty(\"Brand\");\n    this.number = this.getResponseProperty(\"Number\");\n    this.expMonth = this.getResponseProperty(\"ExpMonth\");\n    this.expYear = this.getResponseProperty(\"ExpYear\");\n    this.code = this.getResponseProperty(\"Code\");\n  }\n}\n","import { FieldType, LinkedIdType } from \"../../enums\";\nimport { BaseResponse } from \"../response/base.response\";\n\nexport class FieldApi extends BaseResponse {\n  name: string;\n  value: string;\n  type: FieldType;\n  linkedId: LinkedIdType;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.value = this.getResponseProperty(\"Value\");\n    this.linkedId = this.getResponseProperty(\"linkedId\");\n  }\n}\n","import { BaseResponse } from \"../response/base.response\";\n\nexport class IdentityApi extends BaseResponse {\n  title: string;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  address1: string;\n  address2: string;\n  address3: string;\n  city: string;\n  state: string;\n  postalCode: string;\n  country: string;\n  company: string;\n  email: string;\n  phone: string;\n  ssn: string;\n  username: string;\n  passportNumber: string;\n  licenseNumber: string;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.title = this.getResponseProperty(\"Title\");\n    this.firstName = this.getResponseProperty(\"FirstName\");\n    this.middleName = this.getResponseProperty(\"MiddleName\");\n    this.lastName = this.getResponseProperty(\"LastName\");\n    this.address1 = this.getResponseProperty(\"Address1\");\n    this.address2 = this.getResponseProperty(\"Address2\");\n    this.address3 = this.getResponseProperty(\"Address3\");\n    this.city = this.getResponseProperty(\"City\");\n    this.state = this.getResponseProperty(\"State\");\n    this.postalCode = this.getResponseProperty(\"PostalCode\");\n    this.country = this.getResponseProperty(\"Country\");\n    this.company = this.getResponseProperty(\"Company\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.phone = this.getResponseProperty(\"Phone\");\n    this.ssn = this.getResponseProperty(\"SSN\");\n    this.username = this.getResponseProperty(\"Username\");\n    this.passportNumber = this.getResponseProperty(\"PassportNumber\");\n    this.licenseNumber = this.getResponseProperty(\"LicenseNumber\");\n  }\n}\n","import { BaseResponse } from \"../../models/response/base.response\";\n\nexport class Fido2CredentialApi extends BaseResponse {\n  credentialId: string;\n  keyType: \"public-key\";\n  keyAlgorithm: \"ECDSA\";\n  keyCurve: \"P-256\";\n  keyValue: string;\n  rpId: string;\n  userHandle: string;\n  counter: string;\n  rpName: string;\n  userDisplayName: string;\n  discoverable: string;\n  creationDate: string;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n\n    this.credentialId = this.getResponseProperty(\"CredentialId\");\n    this.keyType = this.getResponseProperty(\"KeyType\");\n    this.keyAlgorithm = this.getResponseProperty(\"KeyAlgorithm\");\n    this.keyCurve = this.getResponseProperty(\"KeyCurve\");\n    this.keyValue = this.getResponseProperty(\"keyValue\");\n    this.rpId = this.getResponseProperty(\"RpId\");\n    this.userHandle = this.getResponseProperty(\"UserHandle\");\n    this.counter = this.getResponseProperty(\"Counter\");\n    this.rpName = this.getResponseProperty(\"RpName\");\n    this.userDisplayName = this.getResponseProperty(\"UserDisplayName\");\n    this.discoverable = this.getResponseProperty(\"Discoverable\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n  }\n}\n","import { UriMatchType } from \"../../enums\";\nimport { BaseResponse } from \"../response/base.response\";\n\nexport class LoginUriApi extends BaseResponse {\n  uri: string;\n  match: UriMatchType = null;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.uri = this.getResponseProperty(\"Uri\");\n    const match = this.getResponseProperty(\"Match\");\n    this.match = match != null ? match : null;\n  }\n}\n","import { JsonObject } from \"type-fest\";\n\nimport { Fido2CredentialApi } from \"../../vault/api/fido2-credential.api\";\nimport { BaseResponse } from \"../response/base.response\";\n\nimport { LoginUriApi } from \"./login-uri.api\";\n\nexport class LoginApi extends BaseResponse {\n  uris: LoginUriApi[];\n  username: string;\n  password: string;\n  passwordRevisionDate: string;\n  totp: string;\n  autofillOnPageLoad: boolean;\n  fido2Credentials?: Fido2CredentialApi[];\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.username = this.getResponseProperty(\"Username\");\n    this.password = this.getResponseProperty(\"Password\");\n    this.passwordRevisionDate = this.getResponseProperty(\"PasswordRevisionDate\");\n    this.totp = this.getResponseProperty(\"Totp\");\n    this.autofillOnPageLoad = this.getResponseProperty(\"AutofillOnPageLoad\");\n\n    const uris = this.getResponseProperty(\"Uris\");\n    if (uris != null) {\n      this.uris = uris.map((u: any) => new LoginUriApi(u));\n    }\n\n    const fido2Credentials = this.getResponseProperty(\"Fido2Credentials\");\n    if (fido2Credentials != null) {\n      this.fido2Credentials = fido2Credentials.map(\n        (key: JsonObject) => new Fido2CredentialApi(key)\n      );\n    }\n  }\n}\n","import { SecureNoteType } from \"../../enums\";\nimport { BaseResponse } from \"../response/base.response\";\n\nexport class SecureNoteApi extends BaseResponse {\n  type: SecureNoteType;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.type = this.getResponseProperty(\"Type\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class AttachmentResponse extends BaseResponse {\n  id: string;\n  url: string;\n  fileName: string;\n  key: string;\n  size: string;\n  sizeName: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.url = this.getResponseProperty(\"Url\");\n    this.fileName = this.getResponseProperty(\"FileName\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.size = this.getResponseProperty(\"Size\");\n    this.sizeName = this.getResponseProperty(\"SizeName\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class PasswordHistoryResponse extends BaseResponse {\n  password: string;\n  lastUsedDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.password = this.getResponseProperty(\"Password\");\n    this.lastUsedDate = this.getResponseProperty(\"LastUsedDate\");\n  }\n}\n","import { CardApi } from \"../../../models/api/card.api\";\nimport { FieldApi } from \"../../../models/api/field.api\";\nimport { IdentityApi } from \"../../../models/api/identity.api\";\nimport { LoginApi } from \"../../../models/api/login.api\";\nimport { SecureNoteApi } from \"../../../models/api/secure-note.api\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\nimport { CipherRepromptType } from \"../../enums/cipher-reprompt-type\";\n\nimport { AttachmentResponse } from \"./attachment.response\";\nimport { PasswordHistoryResponse } from \"./password-history.response\";\n\nexport class CipherResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  folderId: string;\n  type: number;\n  name: string;\n  notes: string;\n  fields: FieldApi[];\n  login: LoginApi;\n  card: CardApi;\n  identity: IdentityApi;\n  secureNote: SecureNoteApi;\n  favorite: boolean;\n  edit: boolean;\n  viewPassword: boolean;\n  organizationUseTotp: boolean;\n  revisionDate: string;\n  attachments: AttachmentResponse[];\n  passwordHistory: PasswordHistoryResponse[];\n  collectionIds: string[];\n  creationDate: string;\n  deletedDate: string;\n  reprompt: CipherRepromptType;\n  key: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.folderId = this.getResponseProperty(\"FolderId\") || null;\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.notes = this.getResponseProperty(\"Notes\");\n    this.favorite = this.getResponseProperty(\"Favorite\") || false;\n    this.edit = !!this.getResponseProperty(\"Edit\");\n    if (this.getResponseProperty(\"ViewPassword\") == null) {\n      this.viewPassword = true;\n    } else {\n      this.viewPassword = this.getResponseProperty(\"ViewPassword\");\n    }\n    this.organizationUseTotp = this.getResponseProperty(\"OrganizationUseTotp\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.collectionIds = this.getResponseProperty(\"CollectionIds\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.deletedDate = this.getResponseProperty(\"DeletedDate\");\n\n    const login = this.getResponseProperty(\"Login\");\n    if (login != null) {\n      this.login = new LoginApi(login);\n    }\n\n    const card = this.getResponseProperty(\"Card\");\n    if (card != null) {\n      this.card = new CardApi(card);\n    }\n\n    const identity = this.getResponseProperty(\"Identity\");\n    if (identity != null) {\n      this.identity = new IdentityApi(identity);\n    }\n\n    const secureNote = this.getResponseProperty(\"SecureNote\");\n    if (secureNote != null) {\n      this.secureNote = new SecureNoteApi(secureNote);\n    }\n\n    const fields = this.getResponseProperty(\"Fields\");\n    if (fields != null) {\n      this.fields = fields.map((f: any) => new FieldApi(f));\n    }\n\n    const attachments = this.getResponseProperty(\"Attachments\");\n    if (attachments != null) {\n      this.attachments = attachments.map((a: any) => new AttachmentResponse(a));\n    }\n\n    const passwordHistory = this.getResponseProperty(\"PasswordHistory\");\n    if (passwordHistory != null) {\n      this.passwordHistory = passwordHistory.map((h: any) => new PasswordHistoryResponse(h));\n    }\n\n    this.reprompt = this.getResponseProperty(\"Reprompt\") || CipherRepromptType.None;\n    this.key = this.getResponseProperty(\"Key\") || null;\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class SelectionReadOnlyResponse extends BaseResponse {\n  id: string;\n  readOnly: boolean;\n  hidePasswords: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.readOnly = this.getResponseProperty(\"ReadOnly\");\n    this.hidePasswords = this.getResponseProperty(\"HidePasswords\");\n  }\n}\n","import { SelectionReadOnlyResponse } from \"../../../admin-console/models/response/selection-read-only.response\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class CollectionResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  externalId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.externalId = this.getResponseProperty(\"ExternalId\");\n  }\n}\n\nexport class CollectionDetailsResponse extends CollectionResponse {\n  readOnly: boolean;\n  hidePasswords: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.readOnly = this.getResponseProperty(\"ReadOnly\") || false;\n    this.hidePasswords = this.getResponseProperty(\"HidePasswords\") || false;\n  }\n}\n\nexport class CollectionAccessDetailsResponse extends CollectionResponse {\n  groups: SelectionReadOnlyResponse[] = [];\n  users: SelectionReadOnlyResponse[] = [];\n\n  /**\n   * Flag indicating the user has been explicitly assigned to this Collection\n   */\n  assigned: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.assigned = this.getResponseProperty(\"Assigned\") || false;\n\n    const groups = this.getResponseProperty(\"Groups\");\n    if (groups != null) {\n      this.groups = groups.map((g: any) => new SelectionReadOnlyResponse(g));\n    }\n\n    const users = this.getResponseProperty(\"Users\");\n    if (users != null) {\n      this.users = users.map((g: any) => new SelectionReadOnlyResponse(g));\n    }\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { CipherResponse } from \"../../../vault/models/response/cipher.response\";\nimport { CollectionResponse } from \"../../../vault/models/response/collection.response\";\n\nexport class OrganizationExportResponse extends BaseResponse {\n  collections: CollectionResponse[];\n  ciphers: CipherResponse[];\n\n  constructor(response: any) {\n    super(response);\n    const collections = this.getResponseProperty(\"Collections\");\n    if (collections != null) {\n      this.collections = collections.map((c: any) => new CollectionResponse(c));\n    }\n    const ciphers = this.getResponseProperty(\"Ciphers\");\n    if (ciphers != null) {\n      this.ciphers = ciphers.map((c: any) => new CipherResponse(c));\n    }\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class OrganizationSponsorshipSyncStatusResponse extends BaseResponse {\n  lastSyncDate?: Date;\n\n  constructor(response: any) {\n    super(response);\n    const lastSyncDate = this.getResponseProperty(\"LastSyncDate\");\n    if (lastSyncDate) {\n      this.lastSyncDate = new Date(lastSyncDate);\n    }\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\n\nexport class ProviderOrganizationResponse extends BaseResponse {\n  id: string;\n  providerId: string;\n  organizationId: string;\n  key: string;\n  settings: string;\n  creationDate: string;\n  revisionDate: string;\n  userCount: number;\n  seats?: number;\n  plan?: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.providerId = this.getResponseProperty(\"ProviderId\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.settings = this.getResponseProperty(\"Settings\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.userCount = this.getResponseProperty(\"UserCount\");\n    this.seats = this.getResponseProperty(\"Seats\");\n    this.plan = this.getResponseProperty(\"Plan\");\n  }\n}\n\nexport class ProviderOrganizationOrganizationDetailsResponse extends ProviderOrganizationResponse {\n  organizationName: string;\n\n  constructor(response: any) {\n    super(response);\n    this.organizationName = this.getResponseProperty(\"OrganizationName\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class OrganizationUserBulkPublicKeyResponse extends BaseResponse {\n  id: string;\n  userId: string;\n  key: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.key = this.getResponseProperty(\"Key\");\n  }\n}\n","import { OrganizationUserBulkPublicKeyResponse } from \"../../../../abstractions/organization-user/responses\";\n\nexport class ProviderUserBulkPublicKeyResponse extends OrganizationUserBulkPublicKeyResponse {}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\n\nexport class ProviderUserBulkResponse extends BaseResponse {\n  id: string;\n  error: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.error = this.getResponseProperty(\"Error\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class PermissionsApi extends BaseResponse {\n  accessEventLogs: boolean;\n  accessImportExport: boolean;\n  accessReports: boolean;\n  createNewCollections: boolean;\n  editAnyCollection: boolean;\n  deleteAnyCollection: boolean;\n  editAssignedCollections: boolean;\n  deleteAssignedCollections: boolean;\n  manageCiphers: boolean;\n  manageGroups: boolean;\n  manageSso: boolean;\n  managePolicies: boolean;\n  manageUsers: boolean;\n  manageResetPassword: boolean;\n  manageScim: boolean;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return this;\n    }\n    this.accessEventLogs = this.getResponseProperty(\"AccessEventLogs\");\n    this.accessImportExport = this.getResponseProperty(\"AccessImportExport\");\n    this.accessReports = this.getResponseProperty(\"AccessReports\");\n\n    this.createNewCollections = this.getResponseProperty(\"CreateNewCollections\");\n    this.editAnyCollection = this.getResponseProperty(\"EditAnyCollection\");\n    this.deleteAnyCollection = this.getResponseProperty(\"DeleteAnyCollection\");\n    this.editAssignedCollections = this.getResponseProperty(\"EditAssignedCollections\");\n    this.deleteAssignedCollections = this.getResponseProperty(\"DeleteAssignedCollections\");\n\n    this.manageCiphers = this.getResponseProperty(\"ManageCiphers\");\n    this.manageGroups = this.getResponseProperty(\"ManageGroups\");\n    this.manageSso = this.getResponseProperty(\"ManageSso\");\n    this.managePolicies = this.getResponseProperty(\"ManagePolicies\");\n    this.manageUsers = this.getResponseProperty(\"ManageUsers\");\n    this.manageResetPassword = this.getResponseProperty(\"ManageResetPassword\");\n    this.manageScim = this.getResponseProperty(\"ManageScim\");\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\nimport { ProviderUserStatusType, ProviderUserType } from \"../../../enums\";\nimport { PermissionsApi } from \"../../api/permissions.api\";\n\nexport class ProviderUserResponse extends BaseResponse {\n  id: string;\n  userId: string;\n  type: ProviderUserType;\n  status: ProviderUserStatusType;\n  permissions: PermissionsApi;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"Permissions\"));\n  }\n}\n\nexport class ProviderUserUserDetailsResponse extends ProviderUserResponse {\n  name: string;\n  email: string;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\n\nexport class ProviderResponse extends BaseResponse {\n  id: string;\n  name: string;\n  businessName: string;\n  billingEmail: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.businessName = this.getResponseProperty(\"BusinessName\");\n    this.billingEmail = this.getResponseProperty(\"BillingEmail\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class ApiKeyResponse extends BaseResponse {\n  apiKey: string;\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.apiKey = this.getResponseProperty(\"ApiKey\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n","import { DeviceType } from \"../../../enums\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\n\nconst RequestTimeOut = 60000 * 15; //15 Minutes\n\nexport class AuthRequestResponse extends BaseResponse {\n  id: string;\n  publicKey: string;\n  requestDeviceType: DeviceType;\n  requestIpAddress: string;\n  key: string;\n  masterPasswordHash: string;\n  creationDate: string;\n  requestApproved?: boolean;\n  responseDate?: string;\n  isAnswered: boolean;\n  isExpired: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.publicKey = this.getResponseProperty(\"PublicKey\");\n    this.requestDeviceType = this.getResponseProperty(\"RequestDeviceType\");\n    this.requestIpAddress = this.getResponseProperty(\"RequestIpAddress\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.masterPasswordHash = this.getResponseProperty(\"MasterPasswordHash\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.requestApproved = this.getResponseProperty(\"RequestApproved\");\n    this.responseDate = this.getResponseProperty(\"ResponseDate\");\n\n    const requestDate = new Date(this.creationDate);\n    const requestDateUTC = Date.UTC(\n      requestDate.getUTCFullYear(),\n      requestDate.getUTCMonth(),\n      requestDate.getDate(),\n      requestDate.getUTCHours(),\n      requestDate.getUTCMinutes(),\n      requestDate.getUTCSeconds(),\n      requestDate.getUTCMilliseconds()\n    );\n\n    const dateNow = new Date(Date.now());\n    const dateNowUTC = Date.UTC(\n      dateNow.getUTCFullYear(),\n      dateNow.getUTCMonth(),\n      dateNow.getDate(),\n      dateNow.getUTCHours(),\n      dateNow.getUTCMinutes(),\n      dateNow.getUTCSeconds(),\n      dateNow.getUTCMilliseconds()\n    );\n\n    this.isExpired = dateNowUTC - requestDateUTC >= RequestTimeOut;\n    this.isAnswered = this.requestApproved != null && this.responseDate != null;\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class DeviceVerificationResponse extends BaseResponse {\n  isDeviceVerificationSectionEnabled: boolean;\n  unknownDeviceVerificationEnabled: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.isDeviceVerificationSectionEnabled = this.getResponseProperty(\n      \"IsDeviceVerificationSectionEnabled\"\n    );\n    this.unknownDeviceVerificationEnabled = this.getResponseProperty(\n      \"UnknownDeviceVerificationEnabled\"\n    );\n  }\n}\n","import { KdfType } from \"../../../enums\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\nimport { CipherResponse } from \"../../../vault/models/response/cipher.response\";\nimport { EmergencyAccessStatusType } from \"../../enums/emergency-access-status-type\";\nimport { EmergencyAccessType } from \"../../enums/emergency-access-type\";\n\nexport class EmergencyAccessGranteeDetailsResponse extends BaseResponse {\n  id: string;\n  granteeId: string;\n  name: string;\n  email: string;\n  type: EmergencyAccessType;\n  status: EmergencyAccessStatusType;\n  waitTimeDays: number;\n  creationDate: string;\n  avatarColor: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.granteeId = this.getResponseProperty(\"GranteeId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.waitTimeDays = this.getResponseProperty(\"WaitTimeDays\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.avatarColor = this.getResponseProperty(\"AvatarColor\");\n  }\n}\n\nexport class EmergencyAccessGrantorDetailsResponse extends BaseResponse {\n  id: string;\n  grantorId: string;\n  name: string;\n  email: string;\n  type: EmergencyAccessType;\n  status: EmergencyAccessStatusType;\n  waitTimeDays: number;\n  creationDate: string;\n  avatarColor: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.grantorId = this.getResponseProperty(\"GrantorId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.waitTimeDays = this.getResponseProperty(\"WaitTimeDays\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.avatarColor = this.getResponseProperty(\"AvatarColor\");\n  }\n}\n\nexport class EmergencyAccessTakeoverResponse extends BaseResponse {\n  keyEncrypted: string;\n  kdf: KdfType;\n  kdfIterations: number;\n  kdfMemory?: number;\n  kdfParallelism?: number;\n\n  constructor(response: any) {\n    super(response);\n\n    this.keyEncrypted = this.getResponseProperty(\"KeyEncrypted\");\n    this.kdf = this.getResponseProperty(\"Kdf\");\n    this.kdfIterations = this.getResponseProperty(\"KdfIterations\");\n    this.kdfMemory = this.getResponseProperty(\"KdfMemory\");\n    this.kdfParallelism = this.getResponseProperty(\"KdfParallelism\");\n  }\n}\n\nexport class EmergencyAccessViewResponse extends BaseResponse {\n  keyEncrypted: string;\n  ciphers: CipherResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n\n    this.keyEncrypted = this.getResponseProperty(\"KeyEncrypted\");\n\n    const ciphers = this.getResponseProperty(\"Ciphers\");\n    if (ciphers != null) {\n      this.ciphers = ciphers.map((c: any) => new CipherResponse(c));\n    }\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class KeyConnectorUserKeyResponse extends BaseResponse {\n  key: string;\n\n  constructor(response: any) {\n    super(response);\n    this.key = this.getResponseProperty(\"Key\");\n  }\n}\n","import { KdfType } from \"../../../enums\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class PreloginResponse extends BaseResponse {\n  kdf: KdfType;\n  kdfIterations: number;\n  kdfMemory?: number;\n  kdfParallelism?: number;\n\n  constructor(response: any) {\n    super(response);\n    this.kdf = this.getResponseProperty(\"Kdf\");\n    this.kdfIterations = this.getResponseProperty(\"KdfIterations\");\n    this.kdfMemory = this.getResponseProperty(\"KdfMemory\");\n    this.kdfParallelism = this.getResponseProperty(\"KdfParallelism\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nimport { ICaptchaProtectedResponse } from \"./captcha-protected.response\";\n\nexport class RegisterResponse extends BaseResponse implements ICaptchaProtectedResponse {\n  captchaBypassToken: string;\n\n  constructor(response: any) {\n    super(response);\n    this.captchaBypassToken = this.getResponseProperty(\"CaptchaBypassToken\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class SsoPreValidateResponse extends BaseResponse {\n  token: string;\n\n  constructor(response: any) {\n    super(response);\n    this.token = this.getResponseProperty(\"Token\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class TwoFactorAuthenticatorResponse extends BaseResponse {\n  enabled: boolean;\n  key: string;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.key = this.getResponseProperty(\"Key\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class TwoFactorDuoResponse extends BaseResponse {\n  enabled: boolean;\n  host: string;\n  secretKey: string;\n  integrationKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.host = this.getResponseProperty(\"Host\");\n    this.secretKey = this.getResponseProperty(\"SecretKey\");\n    this.integrationKey = this.getResponseProperty(\"IntegrationKey\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class TwoFactorEmailResponse extends BaseResponse {\n  enabled: boolean;\n  email: string;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.email = this.getResponseProperty(\"Email\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { TwoFactorProviderType } from \"../../enums/two-factor-provider-type\";\n\nexport class TwoFactorProviderResponse extends BaseResponse {\n  enabled: boolean;\n  type: TwoFactorProviderType;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.type = this.getResponseProperty(\"Type\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class TwoFactorRecoverResponse extends BaseResponse {\n  code: string;\n\n  constructor(response: any) {\n    super(response);\n    this.code = this.getResponseProperty(\"Code\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { Utils } from \"../../../platform/misc/utils\";\n\nexport class TwoFactorWebAuthnResponse extends BaseResponse {\n  enabled: boolean;\n  keys: KeyResponse[];\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    const keys = this.getResponseProperty(\"Keys\");\n    this.keys = keys == null ? null : keys.map((k: any) => new KeyResponse(k));\n  }\n}\n\nexport class KeyResponse extends BaseResponse {\n  name: string;\n  id: number;\n  migrated: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.id = this.getResponseProperty(\"Id\");\n    this.migrated = this.getResponseProperty(\"Migrated\");\n  }\n}\n\nexport class ChallengeResponse extends BaseResponse implements PublicKeyCredentialCreationOptions {\n  attestation?: AttestationConveyancePreference;\n  authenticatorSelection?: AuthenticatorSelectionCriteria;\n  challenge: BufferSource;\n  excludeCredentials?: PublicKeyCredentialDescriptor[];\n  extensions?: AuthenticationExtensionsClientInputs;\n  pubKeyCredParams: PublicKeyCredentialParameters[];\n  rp: PublicKeyCredentialRpEntity;\n  timeout?: number;\n  user: PublicKeyCredentialUserEntity;\n\n  constructor(response: any) {\n    super(response);\n    this.attestation = this.getResponseProperty(\"attestation\");\n    this.authenticatorSelection = this.getResponseProperty(\"authenticatorSelection\");\n    this.challenge = Utils.fromUrlB64ToArray(this.getResponseProperty(\"challenge\"));\n    this.excludeCredentials = this.getResponseProperty(\"excludeCredentials\").map((c: any) => {\n      c.id = Utils.fromUrlB64ToArray(c.id).buffer;\n      return c;\n    });\n    this.extensions = this.getResponseProperty(\"extensions\");\n    this.pubKeyCredParams = this.getResponseProperty(\"pubKeyCredParams\");\n    this.rp = this.getResponseProperty(\"rp\");\n    this.timeout = this.getResponseProperty(\"timeout\");\n\n    const user = this.getResponseProperty(\"user\");\n    user.id = Utils.fromUrlB64ToArray(user.id);\n\n    this.user = user;\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class TwoFactorYubiKeyResponse extends BaseResponse {\n  enabled: boolean;\n  key1: string;\n  key2: string;\n  key3: string;\n  key4: string;\n  key5: string;\n  nfc: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.key1 = this.getResponseProperty(\"Key1\");\n    this.key2 = this.getResponseProperty(\"Key2\");\n    this.key3 = this.getResponseProperty(\"Key3\");\n    this.key4 = this.getResponseProperty(\"Key4\");\n    this.key5 = this.getResponseProperty(\"Key5\");\n    this.nfc = this.getResponseProperty(\"Nfc\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { PaymentMethodType, TransactionType } from \"../../enums\";\n\nexport class BillingResponse extends BaseResponse {\n  balance: number;\n  paymentSource: BillingSourceResponse;\n  invoices: BillingInvoiceResponse[] = [];\n  transactions: BillingTransactionResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.balance = this.getResponseProperty(\"Balance\");\n    const paymentSource = this.getResponseProperty(\"PaymentSource\");\n    const transactions = this.getResponseProperty(\"Transactions\");\n    const invoices = this.getResponseProperty(\"Invoices\");\n    this.paymentSource = paymentSource == null ? null : new BillingSourceResponse(paymentSource);\n    if (transactions != null) {\n      this.transactions = transactions.map((t: any) => new BillingTransactionResponse(t));\n    }\n    if (invoices != null) {\n      this.invoices = invoices.map((i: any) => new BillingInvoiceResponse(i));\n    }\n  }\n\n  get hasNoHistory() {\n    return this.invoices.length == 0 && this.transactions.length == 0;\n  }\n}\n\nexport class BillingSourceResponse extends BaseResponse {\n  type: PaymentMethodType;\n  cardBrand: string;\n  description: string;\n  needsVerification: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.cardBrand = this.getResponseProperty(\"CardBrand\");\n    this.description = this.getResponseProperty(\"Description\");\n    this.needsVerification = this.getResponseProperty(\"NeedsVerification\");\n  }\n}\n\nexport class BillingInvoiceResponse extends BaseResponse {\n  url: string;\n  pdfUrl: string;\n  number: string;\n  paid: boolean;\n  date: string;\n  amount: number;\n\n  constructor(response: any) {\n    super(response);\n    this.url = this.getResponseProperty(\"Url\");\n    this.pdfUrl = this.getResponseProperty(\"PdfUrl\");\n    this.number = this.getResponseProperty(\"Number\");\n    this.paid = this.getResponseProperty(\"Paid\");\n    this.date = this.getResponseProperty(\"Date\");\n    this.amount = this.getResponseProperty(\"Amount\");\n  }\n}\n\nexport class BillingTransactionResponse extends BaseResponse {\n  createdDate: string;\n  amount: number;\n  refunded: boolean;\n  partiallyRefunded: boolean;\n  refundedAmount: number;\n  type: TransactionType;\n  paymentMethodType: PaymentMethodType;\n  details: string;\n\n  constructor(response: any) {\n    super(response);\n    this.createdDate = this.getResponseProperty(\"CreatedDate\");\n    this.amount = this.getResponseProperty(\"Amount\");\n    this.refunded = this.getResponseProperty(\"Refunded\");\n    this.partiallyRefunded = this.getResponseProperty(\"PartiallyRefunded\");\n    this.refundedAmount = this.getResponseProperty(\"RefundedAmount\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.paymentMethodType = this.getResponseProperty(\"PaymentMethodType\");\n    this.details = this.getResponseProperty(\"Details\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nimport { BillingInvoiceResponse, BillingTransactionResponse } from \"./billing.response\";\n\nexport class BillingHistoryResponse extends BaseResponse {\n  invoices: BillingInvoiceResponse[] = [];\n  transactions: BillingTransactionResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    const transactions = this.getResponseProperty(\"Transactions\");\n    const invoices = this.getResponseProperty(\"Invoices\");\n    if (transactions != null) {\n      this.transactions = transactions.map((t: any) => new BillingTransactionResponse(t));\n    }\n    if (invoices != null) {\n      this.invoices = invoices.map((i: any) => new BillingInvoiceResponse(i));\n    }\n  }\n\n  get hasNoHistory() {\n    return this.invoices.length == 0 && this.transactions.length == 0;\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nimport { BillingSourceResponse } from \"./billing.response\";\n\nexport class BillingPaymentResponse extends BaseResponse {\n  balance: number;\n  paymentSource: BillingSourceResponse;\n\n  constructor(response: any) {\n    super(response);\n    this.balance = this.getResponseProperty(\"Balance\");\n    const paymentSource = this.getResponseProperty(\"PaymentSource\");\n    this.paymentSource = paymentSource == null ? null : new BillingSourceResponse(paymentSource);\n  }\n}\n","import { ProductType, ProviderType } from \"../../../enums\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\nimport { OrganizationUserStatusType, OrganizationUserType } from \"../../enums\";\nimport { PermissionsApi } from \"../api/permissions.api\";\n\nexport class ProfileOrganizationResponse extends BaseResponse {\n  id: string;\n  name: string;\n  usePolicies: boolean;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useSso: boolean;\n  useKeyConnector: boolean;\n  useScim: boolean;\n  useCustomPermissions: boolean;\n  useResetPassword: boolean;\n  useSecretsManager: boolean;\n  usePasswordManager: boolean;\n  useActivateAutofillPolicy: boolean;\n  selfHost: boolean;\n  usersGetPremium: boolean;\n  seats: number;\n  maxCollections: number;\n  maxStorageGb?: number;\n  key: string;\n  hasPublicAndPrivateKeys: boolean;\n  status: OrganizationUserStatusType;\n  type: OrganizationUserType;\n  enabled: boolean;\n  ssoBound: boolean;\n  identifier: string;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  userId: string;\n  providerId: string;\n  providerName: string;\n  providerType?: ProviderType;\n  familySponsorshipFriendlyName: string;\n  familySponsorshipAvailable: boolean;\n  planProductType: ProductType;\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n  familySponsorshipLastSyncDate?: Date;\n  familySponsorshipValidUntil?: Date;\n  familySponsorshipToDelete?: boolean;\n  accessSecretsManager: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.usePolicies = this.getResponseProperty(\"UsePolicies\");\n    this.useGroups = this.getResponseProperty(\"UseGroups\");\n    this.useDirectory = this.getResponseProperty(\"UseDirectory\");\n    this.useEvents = this.getResponseProperty(\"UseEvents\");\n    this.useTotp = this.getResponseProperty(\"UseTotp\");\n    this.use2fa = this.getResponseProperty(\"Use2fa\");\n    this.useApi = this.getResponseProperty(\"UseApi\");\n    this.useSso = this.getResponseProperty(\"UseSso\");\n    this.useKeyConnector = this.getResponseProperty(\"UseKeyConnector\") ?? false;\n    this.useScim = this.getResponseProperty(\"UseScim\") ?? false;\n    this.useCustomPermissions = this.getResponseProperty(\"UseCustomPermissions\") ?? false;\n    this.useResetPassword = this.getResponseProperty(\"UseResetPassword\");\n    this.useSecretsManager = this.getResponseProperty(\"UseSecretsManager\");\n    this.usePasswordManager = this.getResponseProperty(\"UsePasswordManager\");\n    this.useActivateAutofillPolicy = this.getResponseProperty(\"UseActivateAutofillPolicy\");\n    this.selfHost = this.getResponseProperty(\"SelfHost\");\n    this.usersGetPremium = this.getResponseProperty(\"UsersGetPremium\");\n    this.seats = this.getResponseProperty(\"Seats\");\n    this.maxCollections = this.getResponseProperty(\"MaxCollections\");\n    this.maxStorageGb = this.getResponseProperty(\"MaxStorageGb\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.hasPublicAndPrivateKeys = this.getResponseProperty(\"HasPublicAndPrivateKeys\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.ssoBound = this.getResponseProperty(\"SsoBound\");\n    this.identifier = this.getResponseProperty(\"Identifier\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"permissions\"));\n    this.resetPasswordEnrolled = this.getResponseProperty(\"ResetPasswordEnrolled\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.providerId = this.getResponseProperty(\"ProviderId\");\n    this.providerName = this.getResponseProperty(\"ProviderName\");\n    this.providerType = this.getResponseProperty(\"ProviderType\");\n    this.familySponsorshipFriendlyName = this.getResponseProperty(\"FamilySponsorshipFriendlyName\");\n    this.familySponsorshipAvailable = this.getResponseProperty(\"FamilySponsorshipAvailable\");\n    this.planProductType = this.getResponseProperty(\"PlanProductType\");\n    this.keyConnectorEnabled = this.getResponseProperty(\"KeyConnectorEnabled\") ?? false;\n    this.keyConnectorUrl = this.getResponseProperty(\"KeyConnectorUrl\");\n    const familySponsorshipLastSyncDateString = this.getResponseProperty(\n      \"FamilySponsorshipLastSyncDate\"\n    );\n    if (familySponsorshipLastSyncDateString) {\n      this.familySponsorshipLastSyncDate = new Date(familySponsorshipLastSyncDateString);\n    }\n    const familySponsorshipValidUntilString = this.getResponseProperty(\n      \"FamilySponsorshipValidUntil\"\n    );\n    if (familySponsorshipValidUntilString) {\n      this.familySponsorshipValidUntil = new Date(familySponsorshipValidUntilString);\n    }\n    this.familySponsorshipToDelete = this.getResponseProperty(\"FamilySponsorshipToDelete\");\n    this.accessSecretsManager = this.getResponseProperty(\"AccessSecretsManager\");\n  }\n}\n","import { ProfileOrganizationResponse } from \"./profile-organization.response\";\n\nexport class ProfileProviderOrganizationResponse extends ProfileOrganizationResponse {\n  constructor(response: any) {\n    super(response);\n    this.keyConnectorEnabled = false;\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { ProviderUserStatusType, ProviderUserType } from \"../../enums\";\nimport { PermissionsApi } from \"../api/permissions.api\";\n\nexport class ProfileProviderResponse extends BaseResponse {\n  id: string;\n  name: string;\n  key: string;\n  status: ProviderUserStatusType;\n  type: ProviderUserType;\n  enabled: boolean;\n  permissions: PermissionsApi;\n  userId: string;\n  useEvents: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"permissions\"));\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.useEvents = this.getResponseProperty(\"UseEvents\");\n  }\n}\n","import { ProfileOrganizationResponse } from \"../../admin-console/models/response/profile-organization.response\";\nimport { ProfileProviderOrganizationResponse } from \"../../admin-console/models/response/profile-provider-organization.response\";\nimport { ProfileProviderResponse } from \"../../admin-console/models/response/profile-provider.response\";\n\nimport { BaseResponse } from \"./base.response\";\n\nexport class ProfileResponse extends BaseResponse {\n  id: string;\n  name: string;\n  email: string;\n  emailVerified: boolean;\n  masterPasswordHint: string;\n  premiumPersonally: boolean;\n  premiumFromOrganization: boolean;\n  culture: string;\n  twoFactorEnabled: boolean;\n  key: string;\n  avatarColor: string;\n  privateKey: string;\n  securityStamp: string;\n  forcePasswordReset: boolean;\n  usesKeyConnector: boolean;\n  organizations: ProfileOrganizationResponse[] = [];\n  providers: ProfileProviderResponse[] = [];\n  providerOrganizations: ProfileProviderOrganizationResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.emailVerified = this.getResponseProperty(\"EmailVerified\");\n    this.masterPasswordHint = this.getResponseProperty(\"MasterPasswordHint\");\n    this.premiumPersonally = this.getResponseProperty(\"Premium\");\n    this.premiumFromOrganization = this.getResponseProperty(\"PremiumFromOrganization\");\n    this.culture = this.getResponseProperty(\"Culture\");\n    this.twoFactorEnabled = this.getResponseProperty(\"TwoFactorEnabled\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.avatarColor = this.getResponseProperty(\"AvatarColor\");\n    this.privateKey = this.getResponseProperty(\"PrivateKey\");\n    this.securityStamp = this.getResponseProperty(\"SecurityStamp\");\n    this.forcePasswordReset = this.getResponseProperty(\"ForcePasswordReset\") ?? false;\n    this.usesKeyConnector = this.getResponseProperty(\"UsesKeyConnector\") ?? false;\n\n    const organizations = this.getResponseProperty(\"Organizations\");\n    if (organizations != null) {\n      this.organizations = organizations.map((o: any) => new ProfileOrganizationResponse(o));\n    }\n    const providers = this.getResponseProperty(\"Providers\");\n    if (providers != null) {\n      this.providers = providers.map((o: any) => new ProfileProviderResponse(o));\n    }\n    const providerOrganizations = this.getResponseProperty(\"ProviderOrganizations\");\n    if (providerOrganizations != null) {\n      this.providerOrganizations = providerOrganizations.map(\n        (o: any) => new ProfileProviderOrganizationResponse(o)\n      );\n    }\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { ProfileResponse } from \"../../../models/response/profile.response\";\n\nexport class PaymentResponse extends BaseResponse {\n  userProfile: ProfileResponse;\n  paymentIntentClientSecret: string;\n  success: boolean;\n\n  constructor(response: any) {\n    super(response);\n    const userProfile = this.getResponseProperty(\"UserProfile\");\n    if (userProfile != null) {\n      this.userProfile = new ProfileResponse(userProfile);\n    }\n    this.paymentIntentClientSecret = this.getResponseProperty(\"PaymentIntentClientSecret\");\n    this.success = this.getResponseProperty(\"Success\");\n  }\n}\n","import { ProductType } from \"../../../enums\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\nimport { PlanType } from \"../../enums\";\n\nexport class PlanResponse extends BaseResponse {\n  type: PlanType;\n  product: ProductType;\n  name: string;\n  isAnnual: boolean;\n  nameLocalizationKey: string;\n  descriptionLocalizationKey: string;\n  canBeUsedByBusiness: boolean;\n  trialPeriodDays: number;\n  hasSelfHost: boolean;\n  hasPolicies: boolean;\n  hasGroups: boolean;\n  hasDirectory: boolean;\n  hasEvents: boolean;\n  hasTotp: boolean;\n  has2fa: boolean;\n  hasApi: boolean;\n  hasSso: boolean;\n  hasResetPassword: boolean;\n  usersGetPremium: boolean;\n  upgradeSortOrder: number;\n  displaySortOrder: number;\n  legacyYear: number;\n  disabled: boolean;\n  PasswordManager: PasswordManagerPlanFeaturesResponse;\n  SecretsManager: SecretsManagerPlanFeaturesResponse;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.product = this.getResponseProperty(\"Product\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.isAnnual = this.getResponseProperty(\"IsAnnual\");\n    this.nameLocalizationKey = this.getResponseProperty(\"NameLocalizationKey\");\n    this.descriptionLocalizationKey = this.getResponseProperty(\"DescriptionLocalizationKey\");\n    this.canBeUsedByBusiness = this.getResponseProperty(\"CanBeUsedByBusiness\");\n    this.trialPeriodDays = this.getResponseProperty(\"TrialPeriodDays\");\n    this.hasSelfHost = this.getResponseProperty(\"HasSelfHost\");\n    this.hasPolicies = this.getResponseProperty(\"HasPolicies\");\n    this.hasGroups = this.getResponseProperty(\"HasGroups\");\n    this.hasDirectory = this.getResponseProperty(\"HasDirectory\");\n    this.hasEvents = this.getResponseProperty(\"HasEvents\");\n    this.hasTotp = this.getResponseProperty(\"HasTotp\");\n    this.has2fa = this.getResponseProperty(\"Has2fa\");\n    this.hasApi = this.getResponseProperty(\"HasApi\");\n    this.hasSso = this.getResponseProperty(\"HasSso\");\n    this.hasResetPassword = this.getResponseProperty(\"HasResetPassword\");\n    this.usersGetPremium = this.getResponseProperty(\"UsersGetPremium\");\n    this.upgradeSortOrder = this.getResponseProperty(\"UpgradeSortOrder\");\n    this.displaySortOrder = this.getResponseProperty(\"SortOrder\");\n    this.legacyYear = this.getResponseProperty(\"LegacyYear\");\n    this.disabled = this.getResponseProperty(\"Disabled\");\n    const passwordManager = this.getResponseProperty(\"PasswordManager\");\n    const secretsManager = this.getResponseProperty(\"SecretsManager\");\n    this.PasswordManager =\n      passwordManager == null ? null : new PasswordManagerPlanFeaturesResponse(passwordManager);\n    this.SecretsManager =\n      secretsManager == null ? null : new SecretsManagerPlanFeaturesResponse(secretsManager);\n  }\n}\n\nexport class SecretsManagerPlanFeaturesResponse extends BaseResponse {\n  // Seats\n  stripeSeatPlanId: string;\n  baseSeats: number;\n  basePrice: number;\n  seatPrice: number;\n  hasAdditionalSeatsOption: boolean;\n  maxAdditionalSeats: number;\n  maxSeats: number;\n\n  // Service accounts\n  stripeServiceAccountPlanId: string;\n  additionalPricePerServiceAccount: number;\n  baseServiceAccount: number;\n  maxServiceAccount: number;\n  hasAdditionalServiceAccountOption: boolean;\n  maxAdditionalServiceAccounts: number;\n\n  // Features\n  maxProjects: number;\n\n  constructor(response: any) {\n    super(response);\n    this.stripeSeatPlanId = this.getResponseProperty(\"StripeSeatPlanId\");\n    this.baseSeats = this.getResponseProperty(\"BaseSeats\");\n    this.basePrice = this.getResponseProperty(\"BasePrice\");\n    this.seatPrice = this.getResponseProperty(\"SeatPrice\");\n    this.hasAdditionalSeatsOption = this.getResponseProperty(\"HasAdditionalSeatsOption\");\n    this.maxAdditionalSeats = this.getResponseProperty(\"MaxAdditionalSeats\");\n    this.maxSeats = this.getResponseProperty(\"MaxSeats\");\n    this.stripeServiceAccountPlanId = this.getResponseProperty(\"StripeServiceAccountPlanId\");\n    this.additionalPricePerServiceAccount = this.getResponseProperty(\n      \"AdditionalPricePerServiceAccount\"\n    );\n    this.baseServiceAccount = this.getResponseProperty(\"BaseServiceAccount\");\n    this.maxServiceAccount = this.getResponseProperty(\"MaxServiceAccount\");\n    this.hasAdditionalServiceAccountOption = this.getResponseProperty(\n      \"HasAdditionalServiceAccountOption\"\n    );\n    this.maxAdditionalServiceAccounts = this.getResponseProperty(\"MaxAdditionalServiceAccounts\");\n    this.maxProjects = this.getResponseProperty(\"MaxProjects\");\n  }\n}\n\nexport class PasswordManagerPlanFeaturesResponse extends BaseResponse {\n  // Seats\n  stripePlanId: string;\n  stripeSeatPlanId: string;\n  stripePremiumAccessPlanId: string;\n  basePrice: number;\n  seatPrice: number;\n  premiumAccessOptionPrice: number;\n  baseSeats: number;\n  maxAdditionalSeats: number;\n  maxSeats: number;\n  hasPremiumAccessOption: boolean;\n\n  // Storage\n  additionalStoragePricePerGb: number;\n  stripeStoragePlanId: string;\n  baseStorageGb: number;\n  hasAdditionalStorageOption: boolean;\n  maxAdditionalStorage: number;\n  hasAdditionalSeatsOption: boolean;\n\n  // Feature\n  maxCollections: number;\n\n  constructor(response: any) {\n    super(response);\n    this.stripePlanId = this.getResponseProperty(\"StripePlanId\");\n    this.stripeSeatPlanId = this.getResponseProperty(\"StripeSeatPlanId\");\n    this.stripeStoragePlanId = this.getResponseProperty(\"StripeStoragePlanId\");\n    this.stripePremiumAccessPlanId = this.getResponseProperty(\"StripePremiumAccessPlanId\");\n    this.basePrice = this.getResponseProperty(\"BasePrice\");\n    this.seatPrice = this.getResponseProperty(\"SeatPrice\");\n    this.baseSeats = this.getResponseProperty(\"BaseSeats\");\n    this.maxAdditionalSeats = this.getResponseProperty(\"MaxAdditionalSeats\");\n    this.premiumAccessOptionPrice = this.getResponseProperty(\"PremiumAccessOptionPrice\");\n    this.maxSeats = this.getResponseProperty(\"MaxSeats\");\n    this.additionalStoragePricePerGb = this.getResponseProperty(\"AdditionalStoragePricePerGb\");\n    this.hasAdditionalSeatsOption = this.getResponseProperty(\"HasAdditionalSeatsOption\");\n    this.baseStorageGb = this.getResponseProperty(\"BaseStorageGb\");\n    this.maxCollections = this.getResponseProperty(\"MaxCollections\");\n    this.hasAdditionalStorageOption = this.getResponseProperty(\"HasAdditionalStorageOption\");\n    this.maxAdditionalStorage = this.getResponseProperty(\"MaxAdditionalStorage\");\n    this.hasPremiumAccessOption = this.getResponseProperty(\"HasPremiumAccessOption\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class SubscriptionResponse extends BaseResponse {\n  storageName: string;\n  storageGb: number;\n  maxStorageGb: number;\n  subscription: BillingSubscriptionResponse;\n  upcomingInvoice: BillingSubscriptionUpcomingInvoiceResponse;\n  discount: BillingCustomerDiscount;\n  license: any;\n  expiration: string;\n  usingInAppPurchase: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.storageName = this.getResponseProperty(\"StorageName\");\n    this.storageGb = this.getResponseProperty(\"StorageGb\");\n    this.maxStorageGb = this.getResponseProperty(\"MaxStorageGb\");\n    this.license = this.getResponseProperty(\"License\");\n    this.expiration = this.getResponseProperty(\"Expiration\");\n    this.usingInAppPurchase = this.getResponseProperty(\"UsingInAppPurchase\");\n    const subscription = this.getResponseProperty(\"Subscription\");\n    const upcomingInvoice = this.getResponseProperty(\"UpcomingInvoice\");\n    const discount = this.getResponseProperty(\"Discount\");\n    this.subscription = subscription == null ? null : new BillingSubscriptionResponse(subscription);\n    this.upcomingInvoice =\n      upcomingInvoice == null\n        ? null\n        : new BillingSubscriptionUpcomingInvoiceResponse(upcomingInvoice);\n    this.discount = discount == null ? null : new BillingCustomerDiscount(discount);\n  }\n}\n\nexport class BillingSubscriptionResponse extends BaseResponse {\n  trialStartDate: string;\n  trialEndDate: string;\n  periodStartDate: string;\n  periodEndDate: string;\n  cancelledDate: string;\n  cancelAtEndDate: boolean;\n  status: string;\n  cancelled: boolean;\n  items: BillingSubscriptionItemResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.trialEndDate = this.getResponseProperty(\"TrialStartDate\");\n    this.trialEndDate = this.getResponseProperty(\"TrialEndDate\");\n    this.periodStartDate = this.getResponseProperty(\"PeriodStartDate\");\n    this.periodEndDate = this.getResponseProperty(\"PeriodEndDate\");\n    this.cancelledDate = this.getResponseProperty(\"CancelledDate\");\n    this.cancelAtEndDate = this.getResponseProperty(\"CancelAtEndDate\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.cancelled = this.getResponseProperty(\"Cancelled\");\n    const items = this.getResponseProperty(\"Items\");\n    if (items != null) {\n      this.items = items.map((i: any) => new BillingSubscriptionItemResponse(i));\n    }\n  }\n}\n\nexport class BillingSubscriptionItemResponse extends BaseResponse {\n  name: string;\n  amount: number;\n  quantity: number;\n  interval: string;\n  sponsoredSubscriptionItem: boolean;\n  addonSubscriptionItem: boolean;\n  productName: string;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.amount = this.getResponseProperty(\"Amount\");\n    this.quantity = this.getResponseProperty(\"Quantity\");\n    this.interval = this.getResponseProperty(\"Interval\");\n    this.sponsoredSubscriptionItem = this.getResponseProperty(\"SponsoredSubscriptionItem\");\n    this.addonSubscriptionItem = this.getResponseProperty(\"AddonSubscriptionItem\");\n  }\n}\n\nexport class BillingSubscriptionUpcomingInvoiceResponse extends BaseResponse {\n  date: string;\n  amount?: number;\n\n  constructor(response: any) {\n    super(response);\n    this.date = this.getResponseProperty(\"Date\");\n    this.amount = this.getResponseProperty(\"Amount\");\n  }\n}\n\nexport class BillingCustomerDiscount extends BaseResponse {\n  id: string;\n  active: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.active = this.getResponseProperty(\"Active\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class TaxInfoResponse extends BaseResponse {\n  taxId: string;\n  taxIdType: string;\n  line1: string;\n  line2: string;\n  city: string;\n  state: string;\n  country: string;\n  postalCode: string;\n\n  constructor(response: any) {\n    super(response);\n    this.taxId = this.getResponseProperty(\"TaxIdNumber\");\n    this.taxIdType = this.getResponseProperty(\"TaxIdType\");\n    this.line1 = this.getResponseProperty(\"Line1\");\n    this.line2 = this.getResponseProperty(\"Line2\");\n    this.city = this.getResponseProperty(\"City\");\n    this.state = this.getResponseProperty(\"State\");\n    this.postalCode = this.getResponseProperty(\"PostalCode\");\n    this.country = this.getResponseProperty(\"Country\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class TaxRateResponse extends BaseResponse {\n  id: string;\n  country: string;\n  state: string;\n  postalCode: string;\n  rate: number;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.country = this.getResponseProperty(\"Country\");\n    this.state = this.getResponseProperty(\"State\");\n    this.postalCode = this.getResponseProperty(\"PostalCode\");\n    this.rate = this.getResponseProperty(\"Rate\");\n  }\n}\n","import { BaseResponse } from \"./base.response\";\n\nexport class BreachAccountResponse extends BaseResponse {\n  addedDate: string;\n  breachDate: string;\n  dataClasses: string[];\n  description: string;\n  domain: string;\n  isActive: boolean;\n  isVerified: boolean;\n  logoPath: string;\n  modifiedDate: string;\n  name: string;\n  pwnCount: number;\n  title: string;\n\n  constructor(response: any) {\n    super(response);\n    this.addedDate = this.getResponseProperty(\"AddedDate\");\n    this.breachDate = this.getResponseProperty(\"BreachDate\");\n    this.dataClasses = this.getResponseProperty(\"DataClasses\");\n    this.description = this.getResponseProperty(\"Description\");\n    this.domain = this.getResponseProperty(\"Domain\");\n    this.isActive = this.getResponseProperty(\"IsActive\");\n    this.isVerified = this.getResponseProperty(\"IsVerified\");\n    this.logoPath = this.getResponseProperty(\"LogoPath\");\n    this.modifiedDate = this.getResponseProperty(\"ModifiedDate\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.pwnCount = this.getResponseProperty(\"PwnCount\");\n    this.title = this.getResponseProperty(\"Title\");\n  }\n}\n","import { BaseResponse } from \"./base.response\";\n\nexport class GlobalDomainResponse extends BaseResponse {\n  type: number;\n  domains: string[];\n  excluded: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.domains = this.getResponseProperty(\"Domains\");\n    this.excluded = this.getResponseProperty(\"Excluded\");\n  }\n}\n","import { BaseResponse } from \"./base.response\";\nimport { GlobalDomainResponse } from \"./global-domain.response\";\n\nexport class DomainsResponse extends BaseResponse {\n  equivalentDomains: string[][];\n  globalEquivalentDomains: GlobalDomainResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.equivalentDomains = this.getResponseProperty(\"EquivalentDomains\");\n    const globalEquivalentDomains = this.getResponseProperty(\"GlobalEquivalentDomains\");\n    if (globalEquivalentDomains != null) {\n      this.globalEquivalentDomains = globalEquivalentDomains.map(\n        (d: any) => new GlobalDomainResponse(d)\n      );\n    } else {\n      this.globalEquivalentDomains = [];\n    }\n  }\n}\n","import { DeviceType, EventSystemUser, EventType } from \"../../enums\";\n\nimport { BaseResponse } from \"./base.response\";\n\nexport class EventResponse extends BaseResponse {\n  type: EventType;\n  userId: string;\n  organizationId: string;\n  providerId: string;\n  cipherId: string;\n  collectionId: string;\n  groupId: string;\n  policyId: string;\n  organizationUserId: string;\n  providerUserId: string;\n  providerOrganizationId: string;\n  actingUserId: string;\n  date: string;\n  deviceType: DeviceType;\n  ipAddress: string;\n  installationId: string;\n  systemUser: EventSystemUser;\n  domainName: string;\n  secretId: string;\n  serviceAccountId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.providerId = this.getResponseProperty(\"ProviderId\");\n    this.cipherId = this.getResponseProperty(\"CipherId\");\n    this.collectionId = this.getResponseProperty(\"CollectionId\");\n    this.groupId = this.getResponseProperty(\"GroupId\");\n    this.policyId = this.getResponseProperty(\"PolicyId\");\n    this.organizationUserId = this.getResponseProperty(\"OrganizationUserId\");\n    this.providerUserId = this.getResponseProperty(\"ProviderUserId\");\n    this.providerOrganizationId = this.getResponseProperty(\"ProviderOrganizationId\");\n    this.actingUserId = this.getResponseProperty(\"ActingUserId\");\n    this.date = this.getResponseProperty(\"Date\");\n    this.deviceType = this.getResponseProperty(\"DeviceType\");\n    this.ipAddress = this.getResponseProperty(\"IpAddress\");\n    this.installationId = this.getResponseProperty(\"InstallationId\");\n    this.systemUser = this.getResponseProperty(\"SystemUser\");\n    this.domainName = this.getResponseProperty(\"DomainName\");\n    this.secretId = this.getResponseProperty(\"SecretId\");\n    this.serviceAccountId = this.getResponseProperty(\"ServiceAccountId\");\n  }\n}\n","import { BaseResponse } from \"./base.response\";\n\nexport class UserKeyResponse extends BaseResponse {\n  userId: string;\n  publicKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.publicKey = this.getResponseProperty(\"PublicKey\");\n  }\n}\n","import { FileUploadType } from \"../../../enums\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\n\nimport { CipherResponse } from \"./cipher.response\";\n\nexport class AttachmentUploadDataResponse extends BaseResponse {\n  attachmentId: string;\n  fileUploadType: FileUploadType;\n  cipherResponse: CipherResponse;\n  cipherMiniResponse: CipherResponse;\n  url: string = null;\n  constructor(response: any) {\n    super(response);\n    this.attachmentId = this.getResponseProperty(\"AttachmentId\");\n    this.fileUploadType = this.getResponseProperty(\"FileUploadType\");\n    const cipherResponse = this.getResponseProperty(\"CipherResponse\");\n    const cipherMiniResponse = this.getResponseProperty(\"CipherMiniResponse\");\n    this.cipherResponse = cipherResponse == null ? null : new CipherResponse(cipherResponse);\n    this.cipherMiniResponse =\n      cipherMiniResponse == null ? null : new CipherResponse(cipherMiniResponse);\n    this.url = this.getResponseProperty(\"Url\");\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\n\nexport class SendFileApi extends BaseResponse {\n  id: string;\n  fileName: string;\n  size: string;\n  sizeName: string;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.id = this.getResponseProperty(\"Id\");\n    this.fileName = this.getResponseProperty(\"FileName\");\n    this.size = this.getResponseProperty(\"Size\");\n    this.sizeName = this.getResponseProperty(\"SizeName\");\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\n\nexport class SendTextApi extends BaseResponse {\n  text: string;\n  hidden: boolean;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.text = this.getResponseProperty(\"Text\");\n    this.hidden = this.getResponseProperty(\"Hidden\") || false;\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\nimport { SendType } from \"../../enums/send-type\";\nimport { SendFileApi } from \"../api/send-file.api\";\nimport { SendTextApi } from \"../api/send-text.api\";\n\nexport class SendResponse extends BaseResponse {\n  id: string;\n  accessId: string;\n  type: SendType;\n  name: string;\n  notes: string;\n  file: SendFileApi;\n  text: SendTextApi;\n  key: string;\n  maxAccessCount?: number;\n  accessCount: number;\n  revisionDate: string;\n  expirationDate: string;\n  deletionDate: string;\n  password: string;\n  disable: boolean;\n  hideEmail: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.accessId = this.getResponseProperty(\"AccessId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.notes = this.getResponseProperty(\"Notes\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.maxAccessCount = this.getResponseProperty(\"MaxAccessCount\");\n    this.accessCount = this.getResponseProperty(\"AccessCount\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.expirationDate = this.getResponseProperty(\"ExpirationDate\");\n    this.deletionDate = this.getResponseProperty(\"DeletionDate\");\n    this.password = this.getResponseProperty(\"Password\");\n    this.disable = this.getResponseProperty(\"Disabled\") || false;\n    this.hideEmail = this.getResponseProperty(\"HideEmail\") || false;\n\n    const text = this.getResponseProperty(\"Text\");\n    if (text != null) {\n      this.text = new SendTextApi(text);\n    }\n\n    const file = this.getResponseProperty(\"File\");\n    if (file != null) {\n      this.file = new SendFileApi(file);\n    }\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class FolderResponse extends BaseResponse {\n  id: string;\n  name: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { PolicyResponse } from \"../../../admin-console/models/response/policy.response\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\nimport { DomainsResponse } from \"../../../models/response/domains.response\";\nimport { ProfileResponse } from \"../../../models/response/profile.response\";\nimport { SendResponse } from \"../../../tools/send/models/response/send.response\";\n\nimport { CipherResponse } from \"./cipher.response\";\nimport { CollectionDetailsResponse } from \"./collection.response\";\nimport { FolderResponse } from \"./folder.response\";\n\nexport class SyncResponse extends BaseResponse {\n  profile?: ProfileResponse;\n  folders: FolderResponse[] = [];\n  collections: CollectionDetailsResponse[] = [];\n  ciphers: CipherResponse[] = [];\n  domains?: DomainsResponse;\n  policies?: PolicyResponse[] = [];\n  sends: SendResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n\n    const profile = this.getResponseProperty(\"Profile\");\n    if (profile != null) {\n      this.profile = new ProfileResponse(profile);\n    }\n\n    const folders = this.getResponseProperty(\"Folders\");\n    if (folders != null) {\n      this.folders = folders.map((f: any) => new FolderResponse(f));\n    }\n\n    const collections = this.getResponseProperty(\"Collections\");\n    if (collections != null) {\n      this.collections = collections.map((c: any) => new CollectionDetailsResponse(c));\n    }\n\n    const ciphers = this.getResponseProperty(\"Ciphers\");\n    if (ciphers != null) {\n      this.ciphers = ciphers.map((c: any) => new CipherResponse(c));\n    }\n\n    const domains = this.getResponseProperty(\"Domains\");\n    if (domains != null) {\n      this.domains = new DomainsResponse(domains);\n    }\n\n    const policies = this.getResponseProperty(\"Policies\");\n    if (policies != null) {\n      this.policies = policies.map((p: any) => new PolicyResponse(p));\n    }\n\n    const sends = this.getResponseProperty(\"Sends\");\n    if (sends != null) {\n      this.sends = sends.map((s: any) => new SendResponse(s));\n    }\n  }\n}\n","import { ApiService as ApiServiceAbstraction } from \"../abstractions/api.service\";\nimport { OrganizationConnectionType } from \"../admin-console/enums\";\nimport { OrganizationSponsorshipCreateRequest } from \"../admin-console/models/request/organization/organization-sponsorship-create.request\";\nimport { OrganizationSponsorshipRedeemRequest } from \"../admin-console/models/request/organization/organization-sponsorship-redeem.request\";\nimport { OrganizationConnectionRequest } from \"../admin-console/models/request/organization-connection.request\";\nimport { ProviderAddOrganizationRequest } from \"../admin-console/models/request/provider/provider-add-organization.request\";\nimport { ProviderOrganizationCreateRequest } from \"../admin-console/models/request/provider/provider-organization-create.request\";\nimport { ProviderSetupRequest } from \"../admin-console/models/request/provider/provider-setup.request\";\nimport { ProviderUpdateRequest } from \"../admin-console/models/request/provider/provider-update.request\";\nimport { ProviderUserAcceptRequest } from \"../admin-console/models/request/provider/provider-user-accept.request\";\nimport { ProviderUserBulkConfirmRequest } from \"../admin-console/models/request/provider/provider-user-bulk-confirm.request\";\nimport { ProviderUserBulkRequest } from \"../admin-console/models/request/provider/provider-user-bulk.request\";\nimport { ProviderUserConfirmRequest } from \"../admin-console/models/request/provider/provider-user-confirm.request\";\nimport { ProviderUserInviteRequest } from \"../admin-console/models/request/provider/provider-user-invite.request\";\nimport { ProviderUserUpdateRequest } from \"../admin-console/models/request/provider/provider-user-update.request\";\nimport { SelectionReadOnlyRequest } from \"../admin-console/models/request/selection-read-only.request\";\nimport {\n  OrganizationConnectionConfigApis,\n  OrganizationConnectionResponse,\n} from \"../admin-console/models/response/organization-connection.response\";\nimport { OrganizationExportResponse } from \"../admin-console/models/response/organization-export.response\";\nimport { OrganizationSponsorshipSyncStatusResponse } from \"../admin-console/models/response/organization-sponsorship-sync-status.response\";\nimport { PolicyResponse } from \"../admin-console/models/response/policy.response\";\nimport {\n  ProviderOrganizationOrganizationDetailsResponse,\n  ProviderOrganizationResponse,\n} from \"../admin-console/models/response/provider/provider-organization.response\";\nimport { ProviderUserBulkPublicKeyResponse } from \"../admin-console/models/response/provider/provider-user-bulk-public-key.response\";\nimport { ProviderUserBulkResponse } from \"../admin-console/models/response/provider/provider-user-bulk.response\";\nimport {\n  ProviderUserResponse,\n  ProviderUserUserDetailsResponse,\n} from \"../admin-console/models/response/provider/provider-user.response\";\nimport { ProviderResponse } from \"../admin-console/models/response/provider/provider.response\";\nimport { SelectionReadOnlyResponse } from \"../admin-console/models/response/selection-read-only.response\";\nimport { TokenService } from \"../auth/abstractions/token.service\";\nimport { DeviceVerificationRequest } from \"../auth/models/request/device-verification.request\";\nimport { EmailTokenRequest } from \"../auth/models/request/email-token.request\";\nimport { EmailRequest } from \"../auth/models/request/email.request\";\nimport { EmergencyAccessAcceptRequest } from \"../auth/models/request/emergency-access-accept.request\";\nimport { EmergencyAccessConfirmRequest } from \"../auth/models/request/emergency-access-confirm.request\";\nimport { EmergencyAccessInviteRequest } from \"../auth/models/request/emergency-access-invite.request\";\nimport { EmergencyAccessPasswordRequest } from \"../auth/models/request/emergency-access-password.request\";\nimport { EmergencyAccessUpdateRequest } from \"../auth/models/request/emergency-access-update.request\";\nimport { DeviceRequest } from \"../auth/models/request/identity-token/device.request\";\nimport { PasswordTokenRequest } from \"../auth/models/request/identity-token/password-token.request\";\nimport { SsoTokenRequest } from \"../auth/models/request/identity-token/sso-token.request\";\nimport { TokenTwoFactorRequest } from \"../auth/models/request/identity-token/token-two-factor.request\";\nimport { UserApiTokenRequest } from \"../auth/models/request/identity-token/user-api-token.request\";\nimport { KeyConnectorUserKeyRequest } from \"../auth/models/request/key-connector-user-key.request\";\nimport { PasswordHintRequest } from \"../auth/models/request/password-hint.request\";\nimport { PasswordRequest } from \"../auth/models/request/password.request\";\nimport { PasswordlessAuthRequest } from \"../auth/models/request/passwordless-auth.request\";\nimport { PasswordlessCreateAuthRequest } from \"../auth/models/request/passwordless-create-auth.request\";\nimport { SecretVerificationRequest } from \"../auth/models/request/secret-verification.request\";\nimport { SetKeyConnectorKeyRequest } from \"../auth/models/request/set-key-connector-key.request\";\nimport { SetPasswordRequest } from \"../auth/models/request/set-password.request\";\nimport { TwoFactorEmailRequest } from \"../auth/models/request/two-factor-email.request\";\nimport { TwoFactorProviderRequest } from \"../auth/models/request/two-factor-provider.request\";\nimport { TwoFactorRecoveryRequest } from \"../auth/models/request/two-factor-recovery.request\";\nimport { UpdateProfileRequest } from \"../auth/models/request/update-profile.request\";\nimport { UpdateTempPasswordRequest } from \"../auth/models/request/update-temp-password.request\";\nimport { UpdateTwoFactorAuthenticatorRequest } from \"../auth/models/request/update-two-factor-authenticator.request\";\nimport { UpdateTwoFactorDuoRequest } from \"../auth/models/request/update-two-factor-duo.request\";\nimport { UpdateTwoFactorEmailRequest } from \"../auth/models/request/update-two-factor-email.request\";\nimport { UpdateTwoFactorWebAuthnDeleteRequest } from \"../auth/models/request/update-two-factor-web-authn-delete.request\";\nimport { UpdateTwoFactorWebAuthnRequest } from \"../auth/models/request/update-two-factor-web-authn.request\";\nimport { UpdateTwoFactorYubioOtpRequest } from \"../auth/models/request/update-two-factor-yubio-otp.request\";\nimport { ApiKeyResponse } from \"../auth/models/response/api-key.response\";\nimport { AuthRequestResponse } from \"../auth/models/response/auth-request.response\";\nimport { DeviceVerificationResponse } from \"../auth/models/response/device-verification.response\";\nimport {\n  EmergencyAccessGranteeDetailsResponse,\n  EmergencyAccessGrantorDetailsResponse,\n  EmergencyAccessTakeoverResponse,\n  EmergencyAccessViewResponse,\n} from \"../auth/models/response/emergency-access.response\";\nimport { IdentityCaptchaResponse } from \"../auth/models/response/identity-captcha.response\";\nimport { IdentityTokenResponse } from \"../auth/models/response/identity-token.response\";\nimport { IdentityTwoFactorResponse } from \"../auth/models/response/identity-two-factor.response\";\nimport { KeyConnectorUserKeyResponse } from \"../auth/models/response/key-connector-user-key.response\";\nimport { MasterPasswordPolicyResponse } from \"../auth/models/response/master-password-policy.response\";\nimport { PreloginResponse } from \"../auth/models/response/prelogin.response\";\nimport { RegisterResponse } from \"../auth/models/response/register.response\";\nimport { SsoPreValidateResponse } from \"../auth/models/response/sso-pre-validate.response\";\nimport { TwoFactorAuthenticatorResponse } from \"../auth/models/response/two-factor-authenticator.response\";\nimport { TwoFactorDuoResponse } from \"../auth/models/response/two-factor-duo.response\";\nimport { TwoFactorEmailResponse } from \"../auth/models/response/two-factor-email.response\";\nimport { TwoFactorProviderResponse } from \"../auth/models/response/two-factor-provider.response\";\nimport { TwoFactorRecoverResponse } from \"../auth/models/response/two-factor-recover.response\";\nimport {\n  ChallengeResponse,\n  TwoFactorWebAuthnResponse,\n} from \"../auth/models/response/two-factor-web-authn.response\";\nimport { TwoFactorYubiKeyResponse } from \"../auth/models/response/two-factor-yubi-key.response\";\nimport { BitPayInvoiceRequest } from \"../billing/models/request/bit-pay-invoice.request\";\nimport { PaymentRequest } from \"../billing/models/request/payment.request\";\nimport { TaxInfoUpdateRequest } from \"../billing/models/request/tax-info-update.request\";\nimport { BillingHistoryResponse } from \"../billing/models/response/billing-history.response\";\nimport { BillingPaymentResponse } from \"../billing/models/response/billing-payment.response\";\nimport { PaymentResponse } from \"../billing/models/response/payment.response\";\nimport { PlanResponse } from \"../billing/models/response/plan.response\";\nimport { SubscriptionResponse } from \"../billing/models/response/subscription.response\";\nimport { TaxInfoResponse } from \"../billing/models/response/tax-info.response\";\nimport { TaxRateResponse } from \"../billing/models/response/tax-rate.response\";\nimport { DeviceType } from \"../enums\";\nimport { CollectionBulkDeleteRequest } from \"../models/request/collection-bulk-delete.request\";\nimport { DeleteRecoverRequest } from \"../models/request/delete-recover.request\";\nimport { EventRequest } from \"../models/request/event.request\";\nimport { IapCheckRequest } from \"../models/request/iap-check.request\";\nimport { KdfRequest } from \"../models/request/kdf.request\";\nimport { KeysRequest } from \"../models/request/keys.request\";\nimport { OrganizationImportRequest } from \"../models/request/organization-import.request\";\nimport { PreloginRequest } from \"../models/request/prelogin.request\";\nimport { RegisterRequest } from \"../models/request/register.request\";\nimport { StorageRequest } from \"../models/request/storage.request\";\nimport { UpdateAvatarRequest } from \"../models/request/update-avatar.request\";\nimport { UpdateDomainsRequest } from \"../models/request/update-domains.request\";\nimport { UpdateKeyRequest } from \"../models/request/update-key.request\";\nimport { VerifyDeleteRecoverRequest } from \"../models/request/verify-delete-recover.request\";\nimport { VerifyEmailRequest } from \"../models/request/verify-email.request\";\nimport { BreachAccountResponse } from \"../models/response/breach-account.response\";\nimport { DomainsResponse } from \"../models/response/domains.response\";\nimport { ErrorResponse } from \"../models/response/error.response\";\nimport { EventResponse } from \"../models/response/event.response\";\nimport { ListResponse } from \"../models/response/list.response\";\nimport { ProfileResponse } from \"../models/response/profile.response\";\nimport { UserKeyResponse } from \"../models/response/user-key.response\";\nimport { AppIdService } from \"../platform/abstractions/app-id.service\";\nimport { EnvironmentService } from \"../platform/abstractions/environment.service\";\nimport { PlatformUtilsService } from \"../platform/abstractions/platform-utils.service\";\nimport { Utils } from \"../platform/misc/utils\";\nimport { AttachmentRequest } from \"../vault/models/request/attachment.request\";\nimport { CipherBulkDeleteRequest } from \"../vault/models/request/cipher-bulk-delete.request\";\nimport { CipherBulkMoveRequest } from \"../vault/models/request/cipher-bulk-move.request\";\nimport { CipherBulkRestoreRequest } from \"../vault/models/request/cipher-bulk-restore.request\";\nimport { CipherBulkShareRequest } from \"../vault/models/request/cipher-bulk-share.request\";\nimport { CipherCollectionsRequest } from \"../vault/models/request/cipher-collections.request\";\nimport { CipherCreateRequest } from \"../vault/models/request/cipher-create.request\";\nimport { CipherPartialRequest } from \"../vault/models/request/cipher-partial.request\";\nimport { CipherShareRequest } from \"../vault/models/request/cipher-share.request\";\nimport { CipherRequest } from \"../vault/models/request/cipher.request\";\nimport { CollectionRequest } from \"../vault/models/request/collection.request\";\nimport { AttachmentUploadDataResponse } from \"../vault/models/response/attachment-upload-data.response\";\nimport { AttachmentResponse } from \"../vault/models/response/attachment.response\";\nimport { CipherResponse } from \"../vault/models/response/cipher.response\";\nimport {\n  CollectionAccessDetailsResponse,\n  CollectionResponse,\n} from \"../vault/models/response/collection.response\";\nimport { SyncResponse } from \"../vault/models/response/sync.response\";\n\n/**\n * @deprecated The `ApiService` class is deprecated and calls should be extracted into individual\n * api services. The `send` method is still allowed to be used within api services. For background\n * of this decision please read https://contributing.bitwarden.com/architecture/adr/refactor-api-service.\n */\nexport class ApiService implements ApiServiceAbstraction {\n  private device: DeviceType;\n  private deviceType: string;\n  private isWebClient = false;\n  private isDesktopClient = false;\n\n  constructor(\n    private tokenService: TokenService,\n    private platformUtilsService: PlatformUtilsService,\n    private environmentService: EnvironmentService,\n    private appIdService: AppIdService,\n    private logoutCallback: (expired: boolean) => Promise<void>,\n    private customUserAgent: string = null\n  ) {\n    this.device = platformUtilsService.getDevice();\n    this.deviceType = this.device.toString();\n    this.isWebClient =\n      this.device === DeviceType.IEBrowser ||\n      this.device === DeviceType.ChromeBrowser ||\n      this.device === DeviceType.EdgeBrowser ||\n      this.device === DeviceType.FirefoxBrowser ||\n      this.device === DeviceType.OperaBrowser ||\n      this.device === DeviceType.SafariBrowser ||\n      this.device === DeviceType.UnknownBrowser ||\n      this.device === DeviceType.VivaldiBrowser;\n    this.isDesktopClient =\n      this.device === DeviceType.WindowsDesktop ||\n      this.device === DeviceType.MacOsDesktop ||\n      this.device === DeviceType.LinuxDesktop;\n  }\n\n  // Auth APIs\n\n  async postIdentityToken(\n    request: UserApiTokenRequest | PasswordTokenRequest | SsoTokenRequest\n  ): Promise<IdentityTokenResponse | IdentityTwoFactorResponse | IdentityCaptchaResponse> {\n    const headers = new Headers({\n      \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\",\n      Accept: \"application/json\",\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n    request.alterIdentityTokenHeaders(headers);\n\n    const identityToken =\n      request instanceof UserApiTokenRequest\n        ? request.toIdentityToken()\n        : request.toIdentityToken(this.platformUtilsService.getClientType());\n\n    const response = await this.fetch(\n      new Request(this.environmentService.getIdentityUrl() + \"/connect/token\", {\n        body: this.qsStringify(identityToken),\n        credentials: this.getCredentials(),\n        cache: \"no-store\",\n        headers: headers,\n        method: \"POST\",\n      })\n    );\n\n    let responseJson: any = null;\n    if (this.isJsonResponse(response)) {\n      responseJson = await response.json();\n    }\n\n    if (responseJson != null) {\n      if (response.status === 200) {\n        return new IdentityTokenResponse(responseJson);\n      } else if (\n        response.status === 400 &&\n        responseJson.TwoFactorProviders2 &&\n        Object.keys(responseJson.TwoFactorProviders2).length\n      ) {\n        await this.tokenService.clearTwoFactorToken();\n        return new IdentityTwoFactorResponse(responseJson);\n      } else if (\n        response.status === 400 &&\n        responseJson.HCaptcha_SiteKey &&\n        Object.keys(responseJson.HCaptcha_SiteKey).length\n      ) {\n        return new IdentityCaptchaResponse(responseJson);\n      }\n    }\n\n    return Promise.reject(new ErrorResponse(responseJson, response.status, true));\n  }\n\n  async refreshIdentityToken(): Promise<any> {\n    try {\n      await this.doAuthRefresh();\n    } catch (e) {\n      return Promise.reject(null);\n    }\n  }\n\n  // TODO: PM-3519: Create and move to AuthRequest Api service\n  async postAuthRequest(request: PasswordlessCreateAuthRequest): Promise<AuthRequestResponse> {\n    const r = await this.send(\"POST\", \"/auth-requests/\", request, false, true);\n    return new AuthRequestResponse(r);\n  }\n  async postAdminAuthRequest(request: PasswordlessCreateAuthRequest): Promise<AuthRequestResponse> {\n    const r = await this.send(\"POST\", \"/auth-requests/admin-request\", request, true, true);\n    return new AuthRequestResponse(r);\n  }\n\n  async getAuthResponse(id: string, accessCode: string): Promise<AuthRequestResponse> {\n    const path = `/auth-requests/${id}/response?code=${accessCode}`;\n    const r = await this.send(\"GET\", path, null, false, true);\n    return new AuthRequestResponse(r);\n  }\n\n  async getAuthRequest(id: string): Promise<AuthRequestResponse> {\n    const path = `/auth-requests/${id}`;\n    const r = await this.send(\"GET\", path, null, true, true);\n    return new AuthRequestResponse(r);\n  }\n\n  async putAuthRequest(id: string, request: PasswordlessAuthRequest): Promise<AuthRequestResponse> {\n    const path = `/auth-requests/${id}`;\n    const r = await this.send(\"PUT\", path, request, true, true);\n    return new AuthRequestResponse(r);\n  }\n\n  async getAuthRequests(): Promise<ListResponse<AuthRequestResponse>> {\n    const path = `/auth-requests/`;\n    const r = await this.send(\"GET\", path, null, true, true);\n    return new ListResponse(r, AuthRequestResponse);\n  }\n\n  async getLastAuthRequest(): Promise<AuthRequestResponse> {\n    const requests = await this.getAuthRequests();\n    const activeRequests = requests.data.filter((m) => !m.isAnswered && !m.isExpired);\n    const lastRequest = activeRequests.sort((a: AuthRequestResponse, b: AuthRequestResponse) =>\n      a.creationDate.localeCompare(b.creationDate)\n    )[activeRequests.length - 1];\n    return lastRequest;\n  }\n\n  // Account APIs\n\n  async getProfile(): Promise<ProfileResponse> {\n    const r = await this.send(\"GET\", \"/accounts/profile\", null, true, true);\n    return new ProfileResponse(r);\n  }\n\n  async getUserSubscription(): Promise<SubscriptionResponse> {\n    const r = await this.send(\"GET\", \"/accounts/subscription\", null, true, true);\n    return new SubscriptionResponse(r);\n  }\n\n  async getTaxInfo(): Promise<TaxInfoResponse> {\n    const r = await this.send(\"GET\", \"/accounts/tax\", null, true, true);\n    return new TaxInfoResponse(r);\n  }\n\n  async putProfile(request: UpdateProfileRequest): Promise<ProfileResponse> {\n    const r = await this.send(\"PUT\", \"/accounts/profile\", request, true, true);\n    return new ProfileResponse(r);\n  }\n\n  async putAvatar(request: UpdateAvatarRequest): Promise<ProfileResponse> {\n    const r = await this.send(\"PUT\", \"/accounts/avatar\", request, true, true);\n    return new ProfileResponse(r);\n  }\n\n  putTaxInfo(request: TaxInfoUpdateRequest): Promise<any> {\n    return this.send(\"PUT\", \"/accounts/tax\", request, true, false);\n  }\n\n  async postPrelogin(request: PreloginRequest): Promise<PreloginResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/accounts/prelogin\",\n      request,\n      false,\n      true,\n      this.environmentService.getIdentityUrl()\n    );\n    return new PreloginResponse(r);\n  }\n\n  postEmailToken(request: EmailTokenRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/email-token\", request, true, false);\n  }\n\n  postEmail(request: EmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/email\", request, true, false);\n  }\n\n  postPassword(request: PasswordRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/password\", request, true, false);\n  }\n\n  setPassword(request: SetPasswordRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/set-password\", request, true, false);\n  }\n\n  postSetKeyConnectorKey(request: SetKeyConnectorKeyRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/set-key-connector-key\", request, true, false);\n  }\n\n  postSecurityStamp(request: SecretVerificationRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/security-stamp\", request, true, false);\n  }\n\n  async getAccountRevisionDate(): Promise<number> {\n    const r = await this.send(\"GET\", \"/accounts/revision-date\", null, true, true);\n    return r as number;\n  }\n\n  postPasswordHint(request: PasswordHintRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/password-hint\", request, false, false);\n  }\n\n  async postRegister(request: RegisterRequest): Promise<RegisterResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/accounts/register\",\n      request,\n      false,\n      true,\n      this.environmentService.getIdentityUrl()\n    );\n    return new RegisterResponse(r);\n  }\n\n  async postPremium(data: FormData): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/accounts/premium\", data, true, true);\n    return new PaymentResponse(r);\n  }\n\n  async postIapCheck(request: IapCheckRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/iap-check\", request, true, false);\n  }\n\n  postReinstatePremium(): Promise<any> {\n    return this.send(\"POST\", \"/accounts/reinstate-premium\", null, true, false);\n  }\n\n  postCancelPremium(): Promise<any> {\n    return this.send(\"POST\", \"/accounts/cancel-premium\", null, true, false);\n  }\n\n  async postAccountStorage(request: StorageRequest): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/accounts/storage\", request, true, true);\n    return new PaymentResponse(r);\n  }\n\n  postAccountPayment(request: PaymentRequest): Promise<void> {\n    return this.send(\"POST\", \"/accounts/payment\", request, true, false);\n  }\n\n  postAccountLicense(data: FormData): Promise<any> {\n    return this.send(\"POST\", \"/accounts/license\", data, true, false);\n  }\n\n  postAccountKeys(request: KeysRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/keys\", request, true, false);\n  }\n\n  postAccountKey(request: UpdateKeyRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/key\", request, true, false);\n  }\n\n  postAccountVerifyEmail(): Promise<any> {\n    return this.send(\"POST\", \"/accounts/verify-email\", null, true, false);\n  }\n\n  postAccountVerifyEmailToken(request: VerifyEmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/verify-email-token\", request, false, false);\n  }\n\n  postAccountVerifyPassword(\n    request: SecretVerificationRequest\n  ): Promise<MasterPasswordPolicyResponse> {\n    return this.send(\"POST\", \"/accounts/verify-password\", request, true, true);\n  }\n\n  postAccountRecoverDelete(request: DeleteRecoverRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/delete-recover\", request, false, false);\n  }\n\n  postAccountRecoverDeleteToken(request: VerifyDeleteRecoverRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/delete-recover-token\", request, false, false);\n  }\n\n  postAccountKdf(request: KdfRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/kdf\", request, true, false);\n  }\n\n  async deleteSsoUser(organizationId: string): Promise<void> {\n    return this.send(\"DELETE\", \"/accounts/sso/\" + organizationId, null, true, false);\n  }\n\n  async getSsoUserIdentifier(): Promise<string> {\n    return this.send(\"GET\", \"/accounts/sso/user-identifier\", null, true, true);\n  }\n\n  async postUserApiKey(id: string, request: SecretVerificationRequest): Promise<ApiKeyResponse> {\n    const r = await this.send(\"POST\", \"/accounts/api-key\", request, true, true);\n    return new ApiKeyResponse(r);\n  }\n\n  async postUserRotateApiKey(\n    id: string,\n    request: SecretVerificationRequest\n  ): Promise<ApiKeyResponse> {\n    const r = await this.send(\"POST\", \"/accounts/rotate-api-key\", request, true, true);\n    return new ApiKeyResponse(r);\n  }\n\n  putUpdateTempPassword(request: UpdateTempPasswordRequest): Promise<any> {\n    return this.send(\"PUT\", \"/accounts/update-temp-password\", request, true, false);\n  }\n\n  postConvertToKeyConnector(): Promise<void> {\n    return this.send(\"POST\", \"/accounts/convert-to-key-connector\", null, true, false);\n  }\n\n  // Account Billing APIs\n\n  async getUserBillingHistory(): Promise<BillingHistoryResponse> {\n    const r = await this.send(\"GET\", \"/accounts/billing/history\", null, true, true);\n    return new BillingHistoryResponse(r);\n  }\n\n  async getUserBillingPayment(): Promise<BillingPaymentResponse> {\n    const r = await this.send(\"GET\", \"/accounts/billing/payment-method\", null, true, true);\n    return new BillingPaymentResponse(r);\n  }\n\n  // Cipher APIs\n\n  async getCipher(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"GET\", \"/ciphers/\" + id, null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async getFullCipherDetails(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"GET\", \"/ciphers/\" + id + \"/details\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async getCipherAdmin(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"GET\", \"/ciphers/\" + id + \"/admin\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async getCiphersOrganization(organizationId: string): Promise<ListResponse<CipherResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/ciphers/organization-details?organizationId=\" + organizationId,\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, CipherResponse);\n  }\n\n  async postCipher(request: CipherRequest): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async postCipherCreate(request: CipherCreateRequest): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/create\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async postCipherAdmin(request: CipherCreateRequest): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/admin\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putCipher(id: string, request: CipherRequest): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id, request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putPartialCipher(id: string, request: CipherPartialRequest): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/partial\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putCipherAdmin(id: string, request: CipherRequest): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/admin\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  deleteCipher(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/\" + id, null, true, false);\n  }\n\n  deleteCipherAdmin(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/\" + id + \"/admin\", null, true, false);\n  }\n\n  deleteManyCiphers(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers\", request, true, false);\n  }\n\n  deleteManyCiphersAdmin(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/admin\", request, true, false);\n  }\n\n  putMoveCiphers(request: CipherBulkMoveRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/move\", request, true, false);\n  }\n\n  async putShareCipher(id: string, request: CipherShareRequest): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/share\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  putShareCiphers(request: CipherBulkShareRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/share\", request, true, false);\n  }\n\n  putCipherCollections(id: string, request: CipherCollectionsRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/collections\", request, true, false);\n  }\n\n  putCipherCollectionsAdmin(id: string, request: CipherCollectionsRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/collections-admin\", request, true, false);\n  }\n\n  postPurgeCiphers(\n    request: SecretVerificationRequest,\n    organizationId: string = null\n  ): Promise<any> {\n    let path = \"/ciphers/purge\";\n    if (organizationId != null) {\n      path += \"?organizationId=\" + organizationId;\n    }\n    return this.send(\"POST\", path, request, true, false);\n  }\n\n  putDeleteCipher(id: string): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/delete\", null, true, false);\n  }\n\n  putDeleteCipherAdmin(id: string): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/delete-admin\", null, true, false);\n  }\n\n  putDeleteManyCiphers(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/delete\", request, true, false);\n  }\n\n  putDeleteManyCiphersAdmin(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/delete-admin\", request, true, false);\n  }\n\n  async putRestoreCipher(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/restore\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putRestoreCipherAdmin(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/restore-admin\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putRestoreManyCiphers(\n    request: CipherBulkRestoreRequest\n  ): Promise<ListResponse<CipherResponse>> {\n    const r = await this.send(\"PUT\", \"/ciphers/restore\", request, true, true);\n    return new ListResponse<CipherResponse>(r, CipherResponse);\n  }\n\n  async putRestoreManyCiphersAdmin(\n    request: CipherBulkRestoreRequest\n  ): Promise<ListResponse<CipherResponse>> {\n    const r = await this.send(\"PUT\", \"/ciphers/restore-admin\", request, true, true);\n    return new ListResponse<CipherResponse>(r, CipherResponse);\n  }\n\n  // Attachments APIs\n\n  async getAttachmentData(\n    cipherId: string,\n    attachmentId: string,\n    emergencyAccessId?: string\n  ): Promise<AttachmentResponse> {\n    const path =\n      (emergencyAccessId != null ? \"/emergency-access/\" + emergencyAccessId + \"/\" : \"/ciphers/\") +\n      cipherId +\n      \"/attachment/\" +\n      attachmentId;\n    const r = await this.send(\"GET\", path, null, true, true);\n    return new AttachmentResponse(r);\n  }\n\n  async postCipherAttachment(\n    id: string,\n    request: AttachmentRequest\n  ): Promise<AttachmentUploadDataResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/\" + id + \"/attachment/v2\", request, true, true);\n    return new AttachmentUploadDataResponse(r);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async postCipherAttachmentLegacy(id: string, data: FormData): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/\" + id + \"/attachment\", data, true, true);\n    return new CipherResponse(r);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async postCipherAttachmentAdminLegacy(id: string, data: FormData): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/\" + id + \"/attachment-admin\", data, true, true);\n    return new CipherResponse(r);\n  }\n\n  deleteCipherAttachment(id: string, attachmentId: string): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/\" + id + \"/attachment/\" + attachmentId, null, true, false);\n  }\n\n  deleteCipherAttachmentAdmin(id: string, attachmentId: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/ciphers/\" + id + \"/attachment/\" + attachmentId + \"/admin\",\n      null,\n      true,\n      false\n    );\n  }\n\n  postShareCipherAttachment(\n    id: string,\n    attachmentId: string,\n    data: FormData,\n    organizationId: string\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/ciphers/\" + id + \"/attachment/\" + attachmentId + \"/share?organizationId=\" + organizationId,\n      data,\n      true,\n      false\n    );\n  }\n\n  async renewAttachmentUploadUrl(\n    id: string,\n    attachmentId: string\n  ): Promise<AttachmentUploadDataResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/ciphers/\" + id + \"/attachment/\" + attachmentId + \"/renew\",\n      null,\n      true,\n      true\n    );\n    return new AttachmentUploadDataResponse(r);\n  }\n\n  postAttachmentFile(id: string, attachmentId: string, data: FormData): Promise<any> {\n    return this.send(\"POST\", \"/ciphers/\" + id + \"/attachment/\" + attachmentId, data, true, false);\n  }\n\n  // Collections APIs\n\n  async getCollectionAccessDetails(\n    organizationId: string,\n    id: string\n  ): Promise<CollectionAccessDetailsResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/details\",\n      null,\n      true,\n      true\n    );\n    return new CollectionAccessDetailsResponse(r);\n  }\n\n  async getUserCollections(): Promise<ListResponse<CollectionResponse>> {\n    const r = await this.send(\"GET\", \"/collections\", null, true, true);\n    return new ListResponse(r, CollectionResponse);\n  }\n\n  async getCollections(organizationId: string): Promise<ListResponse<CollectionResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/collections\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, CollectionResponse);\n  }\n\n  async getManyCollectionsWithAccessDetails(\n    organizationId: string\n  ): Promise<ListResponse<CollectionAccessDetailsResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/collections/details\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, CollectionAccessDetailsResponse);\n  }\n\n  async getCollectionUsers(\n    organizationId: string,\n    id: string\n  ): Promise<SelectionReadOnlyResponse[]> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/users\",\n      null,\n      true,\n      true\n    );\n    return r.map((dr: any) => new SelectionReadOnlyResponse(dr));\n  }\n\n  async postCollection(\n    organizationId: string,\n    request: CollectionRequest\n  ): Promise<CollectionResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/collections\",\n      request,\n      true,\n      true\n    );\n    return new CollectionResponse(r);\n  }\n\n  async putCollection(\n    organizationId: string,\n    id: string,\n    request: CollectionRequest\n  ): Promise<CollectionResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id,\n      request,\n      true,\n      true\n    );\n    return new CollectionResponse(r);\n  }\n\n  async putCollectionUsers(\n    organizationId: string,\n    id: string,\n    request: SelectionReadOnlyRequest[]\n  ): Promise<any> {\n    await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/users\",\n      request,\n      true,\n      false\n    );\n  }\n\n  deleteCollection(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id,\n      null,\n      true,\n      false\n    );\n  }\n\n  deleteManyCollections(request: CollectionBulkDeleteRequest): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + request.organizationId + \"/collections\",\n      request,\n      true,\n      false\n    );\n  }\n\n  deleteCollectionUser(\n    organizationId: string,\n    id: string,\n    organizationUserId: string\n  ): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/user/\" + organizationUserId,\n      null,\n      true,\n      false\n    );\n  }\n\n  // Groups APIs\n\n  async getGroupUsers(organizationId: string, id: string): Promise<string[]> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/users\",\n      null,\n      true,\n      true\n    );\n    return r;\n  }\n\n  async putGroupUsers(organizationId: string, id: string, request: string[]): Promise<any> {\n    await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/users\",\n      request,\n      true,\n      false\n    );\n  }\n\n  deleteGroupUser(organizationId: string, id: string, organizationUserId: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/user/\" + organizationUserId,\n      null,\n      true,\n      false\n    );\n  }\n\n  // Plan APIs\n\n  async getPlans(): Promise<ListResponse<PlanResponse>> {\n    const r = await this.send(\"GET\", \"/plans\", null, false, true);\n    return new ListResponse(r, PlanResponse);\n  }\n\n  async postPublicImportDirectory(request: OrganizationImportRequest): Promise<any> {\n    return this.send(\"POST\", \"/public/organization/import\", request, true, false);\n  }\n\n  async getTaxRates(): Promise<ListResponse<TaxRateResponse>> {\n    const r = await this.send(\"GET\", \"/plans/sales-tax-rates/\", null, true, true);\n    return new ListResponse(r, TaxRateResponse);\n  }\n\n  // Settings APIs\n\n  async getSettingsDomains(): Promise<DomainsResponse> {\n    const r = await this.send(\"GET\", \"/settings/domains\", null, true, true);\n    return new DomainsResponse(r);\n  }\n\n  async putSettingsDomains(request: UpdateDomainsRequest): Promise<DomainsResponse> {\n    const r = await this.send(\"PUT\", \"/settings/domains\", request, true, true);\n    return new DomainsResponse(r);\n  }\n\n  // Sync APIs\n\n  async getSync(): Promise<SyncResponse> {\n    const path = this.isDesktopClient || this.isWebClient ? \"/sync?excludeDomains=true\" : \"/sync\";\n    const r = await this.send(\"GET\", path, null, true, true);\n    return new SyncResponse(r);\n  }\n\n  // Two-factor APIs\n\n  async getTwoFactorProviders(): Promise<ListResponse<TwoFactorProviderResponse>> {\n    const r = await this.send(\"GET\", \"/two-factor\", null, true, true);\n    return new ListResponse(r, TwoFactorProviderResponse);\n  }\n\n  async getTwoFactorOrganizationProviders(\n    organizationId: string\n  ): Promise<ListResponse<TwoFactorProviderResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/two-factor\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, TwoFactorProviderResponse);\n  }\n\n  async getTwoFactorAuthenticator(\n    request: SecretVerificationRequest\n  ): Promise<TwoFactorAuthenticatorResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-authenticator\", request, true, true);\n    return new TwoFactorAuthenticatorResponse(r);\n  }\n\n  async getTwoFactorEmail(request: SecretVerificationRequest): Promise<TwoFactorEmailResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-email\", request, true, true);\n    return new TwoFactorEmailResponse(r);\n  }\n\n  async getTwoFactorDuo(request: SecretVerificationRequest): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-duo\", request, true, true);\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async getTwoFactorOrganizationDuo(\n    organizationId: string,\n    request: SecretVerificationRequest\n  ): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/two-factor/get-duo\",\n      request,\n      true,\n      true\n    );\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async getTwoFactorYubiKey(request: SecretVerificationRequest): Promise<TwoFactorYubiKeyResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-yubikey\", request, true, true);\n    return new TwoFactorYubiKeyResponse(r);\n  }\n\n  async getTwoFactorWebAuthn(\n    request: SecretVerificationRequest\n  ): Promise<TwoFactorWebAuthnResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-webauthn\", request, true, true);\n    return new TwoFactorWebAuthnResponse(r);\n  }\n\n  async getTwoFactorWebAuthnChallenge(\n    request: SecretVerificationRequest\n  ): Promise<ChallengeResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-webauthn-challenge\", request, true, true);\n    return new ChallengeResponse(r);\n  }\n\n  async getTwoFactorRecover(request: SecretVerificationRequest): Promise<TwoFactorRecoverResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-recover\", request, true, true);\n    return new TwoFactorRecoverResponse(r);\n  }\n\n  async putTwoFactorAuthenticator(\n    request: UpdateTwoFactorAuthenticatorRequest\n  ): Promise<TwoFactorAuthenticatorResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/authenticator\", request, true, true);\n    return new TwoFactorAuthenticatorResponse(r);\n  }\n\n  async putTwoFactorEmail(request: UpdateTwoFactorEmailRequest): Promise<TwoFactorEmailResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/email\", request, true, true);\n    return new TwoFactorEmailResponse(r);\n  }\n\n  async putTwoFactorDuo(request: UpdateTwoFactorDuoRequest): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/duo\", request, true, true);\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async putTwoFactorOrganizationDuo(\n    organizationId: string,\n    request: UpdateTwoFactorDuoRequest\n  ): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/two-factor/duo\",\n      request,\n      true,\n      true\n    );\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async putTwoFactorYubiKey(\n    request: UpdateTwoFactorYubioOtpRequest\n  ): Promise<TwoFactorYubiKeyResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/yubikey\", request, true, true);\n    return new TwoFactorYubiKeyResponse(r);\n  }\n\n  async putTwoFactorWebAuthn(\n    request: UpdateTwoFactorWebAuthnRequest\n  ): Promise<TwoFactorWebAuthnResponse> {\n    const response = request.deviceResponse.response as AuthenticatorAttestationResponse;\n    const data: any = Object.assign({}, request);\n\n    data.deviceResponse = {\n      id: request.deviceResponse.id,\n      rawId: btoa(request.deviceResponse.id),\n      type: request.deviceResponse.type,\n      extensions: request.deviceResponse.getClientExtensionResults(),\n      response: {\n        AttestationObject: Utils.fromBufferToB64(response.attestationObject),\n        clientDataJson: Utils.fromBufferToB64(response.clientDataJSON),\n      },\n    };\n\n    const r = await this.send(\"PUT\", \"/two-factor/webauthn\", data, true, true);\n    return new TwoFactorWebAuthnResponse(r);\n  }\n\n  async deleteTwoFactorWebAuthn(\n    request: UpdateTwoFactorWebAuthnDeleteRequest\n  ): Promise<TwoFactorWebAuthnResponse> {\n    const r = await this.send(\"DELETE\", \"/two-factor/webauthn\", request, true, true);\n    return new TwoFactorWebAuthnResponse(r);\n  }\n\n  async putTwoFactorDisable(request: TwoFactorProviderRequest): Promise<TwoFactorProviderResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/disable\", request, true, true);\n    return new TwoFactorProviderResponse(r);\n  }\n\n  async putTwoFactorOrganizationDisable(\n    organizationId: string,\n    request: TwoFactorProviderRequest\n  ): Promise<TwoFactorProviderResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/two-factor/disable\",\n      request,\n      true,\n      true\n    );\n    return new TwoFactorProviderResponse(r);\n  }\n\n  postTwoFactorRecover(request: TwoFactorRecoveryRequest): Promise<any> {\n    return this.send(\"POST\", \"/two-factor/recover\", request, false, false);\n  }\n\n  postTwoFactorEmailSetup(request: TwoFactorEmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/two-factor/send-email\", request, true, false);\n  }\n\n  postTwoFactorEmail(request: TwoFactorEmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/two-factor/send-email-login\", request, false, false);\n  }\n\n  async getDeviceVerificationSettings(): Promise<DeviceVerificationResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/two-factor/get-device-verification-settings\",\n      null,\n      true,\n      true\n    );\n    return new DeviceVerificationResponse(r);\n  }\n\n  async putDeviceVerificationSettings(\n    request: DeviceVerificationRequest\n  ): Promise<DeviceVerificationResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/two-factor/device-verification-settings\",\n      request,\n      true,\n      true\n    );\n    return new DeviceVerificationResponse(r);\n  }\n\n  // Emergency Access APIs\n\n  async getEmergencyAccessTrusted(): Promise<ListResponse<EmergencyAccessGranteeDetailsResponse>> {\n    const r = await this.send(\"GET\", \"/emergency-access/trusted\", null, true, true);\n    return new ListResponse(r, EmergencyAccessGranteeDetailsResponse);\n  }\n\n  async getEmergencyAccessGranted(): Promise<ListResponse<EmergencyAccessGrantorDetailsResponse>> {\n    const r = await this.send(\"GET\", \"/emergency-access/granted\", null, true, true);\n    return new ListResponse(r, EmergencyAccessGrantorDetailsResponse);\n  }\n\n  async getEmergencyAccess(id: string): Promise<EmergencyAccessGranteeDetailsResponse> {\n    const r = await this.send(\"GET\", \"/emergency-access/\" + id, null, true, true);\n    return new EmergencyAccessGranteeDetailsResponse(r);\n  }\n\n  async getEmergencyGrantorPolicies(id: string): Promise<ListResponse<PolicyResponse>> {\n    const r = await this.send(\"GET\", \"/emergency-access/\" + id + \"/policies\", null, true, true);\n    return new ListResponse(r, PolicyResponse);\n  }\n\n  putEmergencyAccess(id: string, request: EmergencyAccessUpdateRequest): Promise<any> {\n    return this.send(\"PUT\", \"/emergency-access/\" + id, request, true, false);\n  }\n\n  deleteEmergencyAccess(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/emergency-access/\" + id, null, true, false);\n  }\n\n  postEmergencyAccessInvite(request: EmergencyAccessInviteRequest): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/invite\", request, true, false);\n  }\n\n  postEmergencyAccessReinvite(id: string): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/reinvite\", null, true, false);\n  }\n\n  postEmergencyAccessAccept(id: string, request: EmergencyAccessAcceptRequest): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/accept\", request, true, false);\n  }\n\n  postEmergencyAccessConfirm(id: string, request: EmergencyAccessConfirmRequest): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/confirm\", request, true, false);\n  }\n\n  postEmergencyAccessInitiate(id: string): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/initiate\", null, true, false);\n  }\n\n  postEmergencyAccessApprove(id: string): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/approve\", null, true, false);\n  }\n\n  postEmergencyAccessReject(id: string): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/reject\", null, true, false);\n  }\n\n  async postEmergencyAccessTakeover(id: string): Promise<EmergencyAccessTakeoverResponse> {\n    const r = await this.send(\"POST\", \"/emergency-access/\" + id + \"/takeover\", null, true, true);\n    return new EmergencyAccessTakeoverResponse(r);\n  }\n\n  async postEmergencyAccessPassword(\n    id: string,\n    request: EmergencyAccessPasswordRequest\n  ): Promise<any> {\n    await this.send(\"POST\", \"/emergency-access/\" + id + \"/password\", request, true, true);\n  }\n\n  async postEmergencyAccessView(id: string): Promise<EmergencyAccessViewResponse> {\n    const r = await this.send(\"POST\", \"/emergency-access/\" + id + \"/view\", null, true, true);\n    return new EmergencyAccessViewResponse(r);\n  }\n\n  // Organization APIs\n\n  async getCloudCommunicationsEnabled(): Promise<boolean> {\n    const r = await this.send(\"GET\", \"/organizations/connections/enabled\", null, true, true);\n    return r as boolean;\n  }\n\n  async getOrganizationConnection<TConfig extends OrganizationConnectionConfigApis>(\n    id: string,\n    type: OrganizationConnectionType,\n    configType: { new (response: any): TConfig }\n  ): Promise<OrganizationConnectionResponse<TConfig>> {\n    const r = await this.send(\"GET\", `/organizations/connections/${id}/${type}`, null, true, true);\n    return new OrganizationConnectionResponse(r, configType);\n  }\n\n  async createOrganizationConnection<TConfig extends OrganizationConnectionConfigApis>(\n    request: OrganizationConnectionRequest,\n    configType: { new (response: any): TConfig }\n  ): Promise<OrganizationConnectionResponse<TConfig>> {\n    const r = await this.send(\"POST\", \"/organizations/connections/\", request, true, true);\n    return new OrganizationConnectionResponse(r, configType);\n  }\n\n  async updateOrganizationConnection<TConfig extends OrganizationConnectionConfigApis>(\n    request: OrganizationConnectionRequest,\n    configType: { new (response: any): TConfig },\n    organizationConnectionId?: string\n  ): Promise<OrganizationConnectionResponse<TConfig>> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/connections/\" + organizationConnectionId,\n      request,\n      true,\n      true\n    );\n    return new OrganizationConnectionResponse(r, configType);\n  }\n\n  async deleteOrganizationConnection(id: string): Promise<void> {\n    return this.send(\"DELETE\", \"/organizations/connections/\" + id, null, true, false);\n  }\n\n  // Provider APIs\n\n  async postProviderSetup(id: string, request: ProviderSetupRequest) {\n    const r = await this.send(\"POST\", \"/providers/\" + id + \"/setup\", request, true, true);\n    return new ProviderResponse(r);\n  }\n\n  async getProvider(id: string) {\n    const r = await this.send(\"GET\", \"/providers/\" + id, null, true, true);\n    return new ProviderResponse(r);\n  }\n\n  async putProvider(id: string, request: ProviderUpdateRequest) {\n    const r = await this.send(\"PUT\", \"/providers/\" + id, request, true, true);\n    return new ProviderResponse(r);\n  }\n\n  // Provider User APIs\n\n  async getProviderUsers(\n    providerId: string\n  ): Promise<ListResponse<ProviderUserUserDetailsResponse>> {\n    const r = await this.send(\"GET\", \"/providers/\" + providerId + \"/users\", null, true, true);\n    return new ListResponse(r, ProviderUserUserDetailsResponse);\n  }\n\n  async getProviderUser(providerId: string, id: string): Promise<ProviderUserResponse> {\n    const r = await this.send(\"GET\", \"/providers/\" + providerId + \"/users/\" + id, null, true, true);\n    return new ProviderUserResponse(r);\n  }\n\n  postProviderUserInvite(providerId: string, request: ProviderUserInviteRequest): Promise<any> {\n    return this.send(\"POST\", \"/providers/\" + providerId + \"/users/invite\", request, true, false);\n  }\n\n  postProviderUserReinvite(providerId: string, id: string): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/\" + id + \"/reinvite\",\n      null,\n      true,\n      false\n    );\n  }\n\n  async postManyProviderUserReinvite(\n    providerId: string,\n    request: ProviderUserBulkRequest\n  ): Promise<ListResponse<ProviderUserBulkResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/reinvite\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, ProviderUserBulkResponse);\n  }\n\n  async postProviderUserBulkConfirm(\n    providerId: string,\n    request: ProviderUserBulkConfirmRequest\n  ): Promise<ListResponse<ProviderUserBulkResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/confirm\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, ProviderUserBulkResponse);\n  }\n\n  async deleteManyProviderUsers(\n    providerId: string,\n    request: ProviderUserBulkRequest\n  ): Promise<ListResponse<ProviderUserBulkResponse>> {\n    const r = await this.send(\"DELETE\", \"/providers/\" + providerId + \"/users\", request, true, true);\n    return new ListResponse(r, ProviderUserBulkResponse);\n  }\n\n  postProviderUserAccept(\n    providerId: string,\n    id: string,\n    request: ProviderUserAcceptRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/\" + id + \"/accept\",\n      request,\n      true,\n      false\n    );\n  }\n\n  postProviderUserConfirm(\n    providerId: string,\n    id: string,\n    request: ProviderUserConfirmRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/\" + id + \"/confirm\",\n      request,\n      true,\n      false\n    );\n  }\n\n  async postProviderUsersPublicKey(\n    providerId: string,\n    request: ProviderUserBulkRequest\n  ): Promise<ListResponse<ProviderUserBulkPublicKeyResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/public-keys\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, ProviderUserBulkPublicKeyResponse);\n  }\n\n  putProviderUser(\n    providerId: string,\n    id: string,\n    request: ProviderUserUpdateRequest\n  ): Promise<any> {\n    return this.send(\"PUT\", \"/providers/\" + providerId + \"/users/\" + id, request, true, false);\n  }\n\n  deleteProviderUser(providerId: string, id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/providers/\" + providerId + \"/users/\" + id, null, true, false);\n  }\n\n  // Provider Organization APIs\n\n  async getProviderClients(\n    providerId: string\n  ): Promise<ListResponse<ProviderOrganizationOrganizationDetailsResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/providers/\" + providerId + \"/organizations\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, ProviderOrganizationOrganizationDetailsResponse);\n  }\n\n  postProviderAddOrganization(\n    providerId: string,\n    request: ProviderAddOrganizationRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/organizations/add\",\n      request,\n      true,\n      false\n    );\n  }\n\n  async postProviderCreateOrganization(\n    providerId: string,\n    request: ProviderOrganizationCreateRequest\n  ): Promise<ProviderOrganizationResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/organizations\",\n      request,\n      true,\n      true\n    );\n    return new ProviderOrganizationResponse(r);\n  }\n\n  deleteProviderOrganization(providerId: string, id: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/providers/\" + providerId + \"/organizations/\" + id,\n      null,\n      true,\n      false\n    );\n  }\n\n  // Event APIs\n\n  async getEvents(start: string, end: string, token: string): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/events\", start, end, token),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsCipher(\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/ciphers/\" + id + \"/events\", start, end, token),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsOrganization(\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/organizations/\" + id + \"/events\", start, end, token),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsOrganizationUser(\n    organizationId: string,\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\n        \"/organizations/\" + organizationId + \"/users/\" + id + \"/events\",\n        start,\n        end,\n        token\n      ),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsProvider(\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/providers/\" + id + \"/events\", start, end, token),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsProviderUser(\n    providerId: string,\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\n        \"/providers/\" + providerId + \"/users/\" + id + \"/events\",\n        start,\n        end,\n        token\n      ),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async postEventsCollect(request: EventRequest[]): Promise<any> {\n    const authHeader = await this.getActiveBearerToken();\n    const headers = new Headers({\n      \"Device-Type\": this.deviceType,\n      Authorization: \"Bearer \" + authHeader,\n      \"Content-Type\": \"application/json; charset=utf-8\",\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n    const response = await this.fetch(\n      new Request(this.environmentService.getEventsUrl() + \"/collect\", {\n        cache: \"no-store\",\n        credentials: this.getCredentials(),\n        method: \"POST\",\n        body: JSON.stringify(request),\n        headers: headers,\n      })\n    );\n    if (response.status !== 200) {\n      return Promise.reject(\"Event post failed.\");\n    }\n  }\n\n  // User APIs\n\n  async getUserPublicKey(id: string): Promise<UserKeyResponse> {\n    const r = await this.send(\"GET\", \"/users/\" + id + \"/public-key\", null, true, true);\n    return new UserKeyResponse(r);\n  }\n\n  // HIBP APIs\n\n  async getHibpBreach(username: string): Promise<BreachAccountResponse[]> {\n    const r = await this.send(\"GET\", \"/hibp/breach?username=\" + username, null, true, true);\n    return r.map((a: any) => new BreachAccountResponse(a));\n  }\n\n  // Misc\n\n  async postBitPayInvoice(request: BitPayInvoiceRequest): Promise<string> {\n    const r = await this.send(\"POST\", \"/bitpay-invoice\", request, true, true);\n    return r as string;\n  }\n\n  async postSetupPayment(): Promise<string> {\n    const r = await this.send(\"POST\", \"/setup-payment\", null, true, true);\n    return r as string;\n  }\n\n  // Key Connector\n\n  async getMasterKeyFromKeyConnector(\n    keyConnectorUrl: string\n  ): Promise<KeyConnectorUserKeyResponse> {\n    const authHeader = await this.getActiveBearerToken();\n\n    const response = await this.fetch(\n      new Request(keyConnectorUrl + \"/user-keys\", {\n        cache: \"no-store\",\n        method: \"GET\",\n        headers: new Headers({\n          Accept: \"application/json\",\n          Authorization: \"Bearer \" + authHeader,\n        }),\n      })\n    );\n\n    if (response.status !== 200) {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n\n    return new KeyConnectorUserKeyResponse(await response.json());\n  }\n\n  async postUserKeyToKeyConnector(\n    keyConnectorUrl: string,\n    request: KeyConnectorUserKeyRequest\n  ): Promise<void> {\n    const authHeader = await this.getActiveBearerToken();\n\n    const response = await this.fetch(\n      new Request(keyConnectorUrl + \"/user-keys\", {\n        cache: \"no-store\",\n        method: \"POST\",\n        headers: new Headers({\n          Accept: \"application/json\",\n          Authorization: \"Bearer \" + authHeader,\n          \"Content-Type\": \"application/json; charset=utf-8\",\n        }),\n        body: JSON.stringify(request),\n      })\n    );\n\n    if (response.status !== 200) {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n  }\n\n  async getKeyConnectorAlive(keyConnectorUrl: string) {\n    const response = await this.fetch(\n      new Request(keyConnectorUrl + \"/alive\", {\n        cache: \"no-store\",\n        method: \"GET\",\n        headers: new Headers({\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json; charset=utf-8\",\n        }),\n      })\n    );\n\n    if (response.status !== 200) {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n  }\n\n  async getOrganizationExport(organizationId: string): Promise<OrganizationExportResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/export\",\n      null,\n      true,\n      true\n    );\n    return new OrganizationExportResponse(r);\n  }\n\n  // Helpers\n\n  async getActiveBearerToken(): Promise<string> {\n    let accessToken = await this.tokenService.getToken();\n    if (await this.tokenService.tokenNeedsRefresh()) {\n      await this.doAuthRefresh();\n      accessToken = await this.tokenService.getToken();\n    }\n    return accessToken;\n  }\n\n  async fetch(request: Request): Promise<Response> {\n    if (request.method === \"GET\") {\n      request.headers.set(\"Cache-Control\", \"no-store\");\n      request.headers.set(\"Pragma\", \"no-cache\");\n    }\n    request.headers.set(\"Bitwarden-Client-Name\", this.platformUtilsService.getClientType());\n    request.headers.set(\n      \"Bitwarden-Client-Version\",\n      await this.platformUtilsService.getApplicationVersionNumber()\n    );\n    return this.nativeFetch(request);\n  }\n\n  nativeFetch(request: Request): Promise<Response> {\n    return fetch(request);\n  }\n\n  async preValidateSso(identifier: string): Promise<SsoPreValidateResponse> {\n    if (identifier == null || identifier === \"\") {\n      throw new Error(\"Organization Identifier was not provided.\");\n    }\n    const headers = new Headers({\n      Accept: \"application/json\",\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n\n    const path = `/account/prevalidate?domainHint=${encodeURIComponent(identifier)}`;\n    const response = await this.fetch(\n      new Request(this.environmentService.getIdentityUrl() + path, {\n        cache: \"no-store\",\n        credentials: this.getCredentials(),\n        headers: headers,\n        method: \"GET\",\n      })\n    );\n\n    if (response.status === 200) {\n      const body = await response.json();\n      return new SsoPreValidateResponse(body);\n    } else {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n  }\n\n  async postCreateSponsorship(\n    sponsoredOrgId: string,\n    request: OrganizationSponsorshipCreateRequest\n  ): Promise<void> {\n    return await this.send(\n      \"POST\",\n      \"/organization/sponsorship/\" +\n        (this.platformUtilsService.isSelfHost() ? \"self-hosted/\" : \"\") +\n        sponsoredOrgId +\n        \"/families-for-enterprise\",\n      request,\n      true,\n      false\n    );\n  }\n\n  async getSponsorshipSyncStatus(\n    sponsoredOrgId: string\n  ): Promise<OrganizationSponsorshipSyncStatusResponse> {\n    const response = await this.send(\n      \"GET\",\n      \"/organization/sponsorship/\" + sponsoredOrgId + \"/sync-status\",\n      null,\n      true,\n      true\n    );\n    return new OrganizationSponsorshipSyncStatusResponse(response);\n  }\n\n  async deleteRevokeSponsorship(sponsoringOrganizationId: string): Promise<void> {\n    return await this.send(\n      \"DELETE\",\n      \"/organization/sponsorship/\" +\n        (this.platformUtilsService.isSelfHost() ? \"self-hosted/\" : \"\") +\n        sponsoringOrganizationId,\n      null,\n      true,\n      false\n    );\n  }\n\n  async deleteRemoveSponsorship(sponsoringOrgId: string): Promise<void> {\n    return await this.send(\n      \"DELETE\",\n      \"/organization/sponsorship/sponsored/\" + sponsoringOrgId,\n      null,\n      true,\n      false\n    );\n  }\n\n  async postPreValidateSponsorshipToken(sponsorshipToken: string): Promise<boolean> {\n    const r = await this.send(\n      \"POST\",\n      \"/organization/sponsorship/validate-token?sponsorshipToken=\" +\n        encodeURIComponent(sponsorshipToken),\n      null,\n      true,\n      true\n    );\n    return r as boolean;\n  }\n\n  async postRedeemSponsorship(\n    sponsorshipToken: string,\n    request: OrganizationSponsorshipRedeemRequest\n  ): Promise<void> {\n    return await this.send(\n      \"POST\",\n      \"/organization/sponsorship/redeem?sponsorshipToken=\" + encodeURIComponent(sponsorshipToken),\n      request,\n      true,\n      false\n    );\n  }\n\n  async postResendSponsorshipOffer(sponsoringOrgId: string): Promise<void> {\n    return await this.send(\n      \"POST\",\n      \"/organization/sponsorship/\" + sponsoringOrgId + \"/families-for-enterprise/resend\",\n      null,\n      true,\n      false\n    );\n  }\n\n  protected async doAuthRefresh(): Promise<void> {\n    const refreshToken = await this.tokenService.getRefreshToken();\n    if (refreshToken != null && refreshToken !== \"\") {\n      return this.doRefreshToken();\n    }\n\n    const clientId = await this.tokenService.getClientId();\n    const clientSecret = await this.tokenService.getClientSecret();\n    if (!Utils.isNullOrWhitespace(clientId) && !Utils.isNullOrWhitespace(clientSecret)) {\n      return this.doApiTokenRefresh();\n    }\n\n    throw new Error(\"Cannot refresh token, no refresh token or api keys are stored\");\n  }\n\n  protected async doRefreshToken(): Promise<void> {\n    const refreshToken = await this.tokenService.getRefreshToken();\n    if (refreshToken == null || refreshToken === \"\") {\n      throw new Error();\n    }\n    const headers = new Headers({\n      \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\",\n      Accept: \"application/json\",\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n\n    const decodedToken = await this.tokenService.decodeToken();\n    const response = await this.fetch(\n      new Request(this.environmentService.getIdentityUrl() + \"/connect/token\", {\n        body: this.qsStringify({\n          grant_type: \"refresh_token\",\n          client_id: decodedToken.client_id,\n          refresh_token: refreshToken,\n        }),\n        cache: \"no-store\",\n        credentials: this.getCredentials(),\n        headers: headers,\n        method: \"POST\",\n      })\n    );\n\n    if (response.status === 200) {\n      const responseJson = await response.json();\n      const tokenResponse = new IdentityTokenResponse(responseJson);\n      await this.tokenService.setTokens(\n        tokenResponse.accessToken,\n        tokenResponse.refreshToken,\n        null\n      );\n    } else {\n      const error = await this.handleError(response, true, true);\n      return Promise.reject(error);\n    }\n  }\n\n  protected async doApiTokenRefresh(): Promise<void> {\n    const clientId = await this.tokenService.getClientId();\n    const clientSecret = await this.tokenService.getClientSecret();\n\n    const appId = await this.appIdService.getAppId();\n    const deviceRequest = new DeviceRequest(appId, this.platformUtilsService);\n    const tokenRequest = new UserApiTokenRequest(\n      clientId,\n      clientSecret,\n      new TokenTwoFactorRequest(),\n      deviceRequest\n    );\n\n    const response = await this.postIdentityToken(tokenRequest);\n    if (!(response instanceof IdentityTokenResponse)) {\n      throw new Error(\"Invalid response received when refreshing api token\");\n    }\n\n    await this.tokenService.setToken(response.accessToken);\n  }\n\n  async send(\n    method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\",\n    path: string,\n    body: any,\n    authed: boolean,\n    hasResponse: boolean,\n    apiUrl?: string,\n    alterHeaders?: (headers: Headers) => void\n  ): Promise<any> {\n    apiUrl = Utils.isNullOrWhitespace(apiUrl) ? this.environmentService.getApiUrl() : apiUrl;\n\n    // Prevent directory traversal from malicious paths\n    const pathParts = path.split(\"?\");\n    const requestUrl =\n      apiUrl + Utils.normalizePath(pathParts[0]) + (pathParts.length > 1 ? `?${pathParts[1]}` : \"\");\n\n    const headers = new Headers({\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n\n    const requestInit: RequestInit = {\n      cache: \"no-store\",\n      credentials: this.getCredentials(),\n      method: method,\n    };\n\n    if (authed) {\n      const authHeader = await this.getActiveBearerToken();\n      headers.set(\"Authorization\", \"Bearer \" + authHeader);\n    }\n    if (body != null) {\n      if (typeof body === \"string\") {\n        requestInit.body = body;\n        headers.set(\"Content-Type\", \"application/x-www-form-urlencoded; charset=utf-8\");\n      } else if (typeof body === \"object\") {\n        if (body instanceof FormData) {\n          requestInit.body = body;\n        } else {\n          headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n          requestInit.body = JSON.stringify(body);\n        }\n      }\n    }\n    if (hasResponse) {\n      headers.set(\"Accept\", \"application/json\");\n    }\n    if (alterHeaders != null) {\n      alterHeaders(headers);\n    }\n\n    requestInit.headers = headers;\n    const response = await this.fetch(new Request(requestUrl, requestInit));\n\n    const responseType = response.headers.get(\"content-type\");\n    const responseIsJson = responseType != null && responseType.indexOf(\"application/json\") !== -1;\n    if (hasResponse && response.status === 200 && responseIsJson) {\n      const responseJson = await response.json();\n      return responseJson;\n    } else if (response.status !== 200) {\n      const error = await this.handleError(response, false, authed);\n      return Promise.reject(error);\n    }\n  }\n\n  private async handleError(\n    response: Response,\n    tokenError: boolean,\n    authed: boolean\n  ): Promise<ErrorResponse> {\n    let responseJson: any = null;\n    if (this.isJsonResponse(response)) {\n      responseJson = await response.json();\n    } else if (this.isTextResponse(response)) {\n      responseJson = { Message: await response.text() };\n    }\n\n    if (authed) {\n      if (\n        response.status === 401 ||\n        response.status === 403 ||\n        (tokenError &&\n          response.status === 400 &&\n          responseJson != null &&\n          responseJson.error === \"invalid_grant\")\n      ) {\n        await this.logoutCallback(true);\n        return null;\n      }\n    }\n\n    return new ErrorResponse(responseJson, response.status, tokenError);\n  }\n\n  private qsStringify(params: any): string {\n    return Object.keys(params)\n      .map((key) => {\n        return encodeURIComponent(key) + \"=\" + encodeURIComponent(params[key]);\n      })\n      .join(\"&\");\n  }\n\n  private getCredentials(): RequestCredentials {\n    if (!this.isWebClient || this.environmentService.hasBaseUrl()) {\n      return \"include\";\n    }\n    return undefined;\n  }\n\n  private addEventParameters(base: string, start: string, end: string, token: string) {\n    if (start != null) {\n      base += \"?start=\" + start;\n    }\n    if (end != null) {\n      base += base.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n      base += \"end=\" + end;\n    }\n    if (token != null) {\n      base += base.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n      base += \"continuationToken=\" + token;\n    }\n    return base;\n  }\n\n  private isJsonResponse(response: Response): boolean {\n    const typeHeader = response.headers.get(\"content-type\");\n    return typeHeader != null && typeHeader.indexOf(\"application/json\") > -1;\n  }\n\n  private isTextResponse(response: Response): boolean {\n    const typeHeader = response.headers.get(\"content-type\");\n    return typeHeader != null && typeHeader.indexOf(\"text\") > -1;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { AuditService as AuditServiceAbstraction } from \"../abstractions/audit.service\";\nimport { BreachAccountResponse } from \"../models/response/breach-account.response\";\nimport { ErrorResponse } from \"../models/response/error.response\";\nimport { CryptoFunctionService } from \"../platform/abstractions/crypto-function.service\";\nimport { throttle } from \"../platform/misc/throttle\";\nimport { Utils } from \"../platform/misc/utils\";\n\nconst PwnedPasswordsApi = \"https://api.pwnedpasswords.com/range/\";\n\nexport class AuditService implements AuditServiceAbstraction {\n  constructor(\n    private cryptoFunctionService: CryptoFunctionService,\n    private apiService: ApiService\n  ) {}\n\n  @throttle(100, () => \"passwordLeaked\")\n  async passwordLeaked(password: string): Promise<number> {\n    const hashBytes = await this.cryptoFunctionService.hash(password, \"sha1\");\n    const hash = Utils.fromBufferToHex(hashBytes).toUpperCase();\n    const hashStart = hash.substr(0, 5);\n    const hashEnding = hash.substr(5);\n\n    const response = await this.apiService.nativeFetch(new Request(PwnedPasswordsApi + hashStart));\n    const leakedHashes = await response.text();\n    const match = leakedHashes.split(/\\r?\\n/).find((v) => {\n      return v.split(\":\")[0] === hashEnding;\n    });\n\n    return match != null ? parseInt(match.split(\":\")[1], 10) : 0;\n  }\n\n  async breachedAccounts(username: string): Promise<BreachAccountResponse[]> {\n    try {\n      return await this.apiService.getHibpBreach(username);\n    } catch (e) {\n      const error = e as ErrorResponse;\n      if (error.statusCode === 404) {\n        return [];\n      }\n      throw new Error();\n    }\n  }\n}\n","/**\n * Use as a Decorator on async functions, it will limit how many times the function can be\n * in-flight at a time.\n *\n * Calls beyond the limit will be queued, and run when one of the active calls finishes\n */\nexport function throttle(limit: number, throttleKey: (args: any[]) => string) {\n  return <T>(\n    target: any,\n    propertyKey: string | symbol,\n    descriptor: TypedPropertyDescriptor<(...args: any[]) => Promise<T>>\n  ) => {\n    const originalMethod: () => Promise<T> = descriptor.value;\n    const allThrottles = new Map<any, Map<string, (() => void)[]>>();\n\n    const getThrottles = (obj: any) => {\n      let throttles = allThrottles.get(obj);\n      if (throttles != null) {\n        return throttles;\n      }\n      throttles = new Map<string, (() => void)[]>();\n      allThrottles.set(obj, throttles);\n      return throttles;\n    };\n\n    return {\n      value: function (...args: any[]) {\n        const throttles = getThrottles(this);\n        const argsThrottleKey = throttleKey(args);\n        let queue = throttles.get(argsThrottleKey);\n        if (queue == null) {\n          queue = [];\n          throttles.set(argsThrottleKey, queue);\n        }\n\n        return new Promise<T>((resolve, reject) => {\n          const exec = () => {\n            const onFinally = () => {\n              queue.splice(queue.indexOf(exec), 1);\n              if (queue.length >= limit) {\n                queue[limit - 1]();\n              } else if (queue.length === 0) {\n                throttles.delete(argsThrottleKey);\n                if (throttles.size === 0) {\n                  allThrottles.delete(this);\n                }\n              }\n            };\n            originalMethod\n              .apply(this, args)\n              .then((val: any) => {\n                onFinally();\n                return val;\n              })\n              .catch((err: any) => {\n                onFinally();\n                throw err;\n              })\n              .then(resolve, reject);\n          };\n          queue.push(exec);\n          if (queue.length <= limit) {\n            exec();\n          }\n        });\n      },\n    };\n  };\n}\n","import { EventType } from \"../../enums\";\n\nexport class EventData {\n  type: EventType;\n  cipherId: string;\n  date: string;\n  organizationId: string;\n}\n","import { EventCollectionService as EventCollectionServiceAbstraction } from \"../../abstractions/event/event-collection.service\";\nimport { EventUploadService } from \"../../abstractions/event/event-upload.service\";\nimport { OrganizationService } from \"../../admin-console/abstractions/organization/organization.service.abstraction\";\nimport { EventType } from \"../../enums\";\nimport { EventData } from \"../../models/data/event.data\";\nimport { StateService } from \"../../platform/abstractions/state.service\";\nimport { CipherService } from \"../../vault/abstractions/cipher.service\";\n\nexport class EventCollectionService implements EventCollectionServiceAbstraction {\n  constructor(\n    private cipherService: CipherService,\n    private stateService: StateService,\n    private organizationService: OrganizationService,\n    private eventUploadService: EventUploadService\n  ) {}\n\n  async collect(\n    eventType: EventType,\n    cipherId: string = null,\n    uploadImmediately = false,\n    organizationId: string = null\n  ): Promise<any> {\n    const authed = await this.stateService.getIsAuthenticated();\n    if (!authed) {\n      return;\n    }\n    const organizations = await this.organizationService.getAll();\n    if (organizations == null) {\n      return;\n    }\n    const orgIds = new Set<string>(organizations.filter((o) => o.useEvents).map((o) => o.id));\n    if (orgIds.size === 0) {\n      return;\n    }\n    if (cipherId != null) {\n      const cipher = await this.cipherService.get(cipherId);\n      if (cipher == null || cipher.organizationId == null || !orgIds.has(cipher.organizationId)) {\n        return;\n      }\n    }\n    if (organizationId != null) {\n      if (!orgIds.has(organizationId)) {\n        return;\n      }\n    }\n    let eventCollection = await this.stateService.getEventCollection();\n    if (eventCollection == null) {\n      eventCollection = [];\n    }\n    const event = new EventData();\n    event.type = eventType;\n    event.cipherId = cipherId;\n    event.date = new Date().toISOString();\n    event.organizationId = organizationId;\n    eventCollection.push(event);\n    await this.stateService.setEventCollection(eventCollection);\n    if (uploadImmediately) {\n      await this.eventUploadService.uploadEvents();\n    }\n  }\n}\n","import { EventType } from \"../../enums\";\n\nexport class EventRequest {\n  type: EventType;\n  cipherId: string;\n  date: string;\n  organizationId: string;\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { EventUploadService as EventUploadServiceAbstraction } from \"../../abstractions/event/event-upload.service\";\nimport { EventRequest } from \"../../models/request/event.request\";\nimport { LogService } from \"../../platform/abstractions/log.service\";\nimport { StateService } from \"../../platform/abstractions/state.service\";\n\nexport class EventUploadService implements EventUploadServiceAbstraction {\n  private inited = false;\n  constructor(\n    private apiService: ApiService,\n    private stateService: StateService,\n    private logService: LogService\n  ) {}\n\n  init(checkOnInterval: boolean) {\n    if (this.inited) {\n      return;\n    }\n\n    this.inited = true;\n    if (checkOnInterval) {\n      this.uploadEvents();\n      setInterval(() => this.uploadEvents(), 60 * 1000); // check every 60 seconds\n    }\n  }\n\n  async uploadEvents(userId?: string): Promise<void> {\n    const authed = await this.stateService.getIsAuthenticated({ userId: userId });\n    if (!authed) {\n      return;\n    }\n    const eventCollection = await this.stateService.getEventCollection({ userId: userId });\n    if (eventCollection == null || eventCollection.length === 0) {\n      return;\n    }\n    const request = eventCollection.map((e) => {\n      const req = new EventRequest();\n      req.type = e.type;\n      req.cipherId = e.cipherId;\n      req.date = e.date;\n      req.organizationId = e.organizationId;\n      return req;\n    });\n    try {\n      await this.apiService.postEventsCollect(request);\n      this.clearEvents(userId);\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  private async clearEvents(userId?: string): Promise<any> {\n    await this.stateService.setEventCollection(null, { userId: userId });\n  }\n}\n","import { NotificationType } from \"../../enums\";\n\nimport { BaseResponse } from \"./base.response\";\n\nexport class NotificationResponse extends BaseResponse {\n  contextId: string;\n  type: NotificationType;\n  payload: any;\n\n  constructor(response: any) {\n    super(response);\n    this.contextId = this.getResponseProperty(\"ContextId\");\n    this.type = this.getResponseProperty(\"Type\");\n\n    const payload = this.getResponseProperty(\"Payload\");\n    switch (this.type) {\n      case NotificationType.SyncCipherCreate:\n      case NotificationType.SyncCipherDelete:\n      case NotificationType.SyncCipherUpdate:\n      case NotificationType.SyncLoginDelete:\n        this.payload = new SyncCipherNotification(payload);\n        break;\n      case NotificationType.SyncFolderCreate:\n      case NotificationType.SyncFolderDelete:\n      case NotificationType.SyncFolderUpdate:\n        this.payload = new SyncFolderNotification(payload);\n        break;\n      case NotificationType.SyncVault:\n      case NotificationType.SyncCiphers:\n      case NotificationType.SyncOrgKeys:\n      case NotificationType.SyncSettings:\n      case NotificationType.LogOut:\n        this.payload = new UserNotification(payload);\n        break;\n      case NotificationType.SyncSendCreate:\n      case NotificationType.SyncSendUpdate:\n      case NotificationType.SyncSendDelete:\n        this.payload = new SyncSendNotification(payload);\n        break;\n      case NotificationType.AuthRequest:\n      case NotificationType.AuthRequestResponse:\n        this.payload = new AuthRequestPushNotification(payload);\n        break;\n      default:\n        break;\n    }\n  }\n}\n\nexport class SyncCipherNotification extends BaseResponse {\n  id: string;\n  userId: string;\n  organizationId: string;\n  collectionIds: string[];\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.collectionIds = this.getResponseProperty(\"CollectionIds\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n\nexport class SyncFolderNotification extends BaseResponse {\n  id: string;\n  userId: string;\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n\nexport class UserNotification extends BaseResponse {\n  userId: string;\n  date: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.date = new Date(this.getResponseProperty(\"Date\"));\n  }\n}\n\nexport class SyncSendNotification extends BaseResponse {\n  id: string;\n  userId: string;\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n\nexport class AuthRequestPushNotification extends BaseResponse {\n  id: string;\n  userId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n  }\n}\n","import * as signalR from \"@microsoft/signalr\";\nimport * as signalRMsgPack from \"@microsoft/signalr-protocol-msgpack\";\n\nimport { ApiService } from \"../abstractions/api.service\";\nimport { NotificationsService as NotificationsServiceAbstraction } from \"../abstractions/notifications.service\";\nimport { AuthService } from \"../auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"../auth/enums/authentication-status\";\nimport { NotificationType } from \"../enums\";\nimport {\n  NotificationResponse,\n  SyncCipherNotification,\n  SyncFolderNotification,\n  SyncSendNotification,\n} from \"../models/response/notification.response\";\nimport { AppIdService } from \"../platform/abstractions/app-id.service\";\nimport { EnvironmentService } from \"../platform/abstractions/environment.service\";\nimport { LogService } from \"../platform/abstractions/log.service\";\nimport { MessagingService } from \"../platform/abstractions/messaging.service\";\nimport { StateService } from \"../platform/abstractions/state.service\";\nimport { SyncService } from \"../vault/abstractions/sync/sync.service.abstraction\";\n\nexport class NotificationsService implements NotificationsServiceAbstraction {\n  private signalrConnection: signalR.HubConnection;\n  private url: string;\n  private connected = false;\n  private inited = false;\n  private inactive = false;\n  private reconnectTimer: any = null;\n\n  constructor(\n    private syncService: SyncService,\n    private appIdService: AppIdService,\n    private apiService: ApiService,\n    private environmentService: EnvironmentService,\n    private logoutCallback: (expired: boolean) => Promise<void>,\n    private logService: LogService,\n    private stateService: StateService,\n    private authService: AuthService,\n    private messagingService: MessagingService\n  ) {\n    this.environmentService.urls.subscribe(() => {\n      if (!this.inited) {\n        return;\n      }\n\n      this.init();\n    });\n  }\n\n  async init(): Promise<void> {\n    this.inited = false;\n    this.url = this.environmentService.getNotificationsUrl();\n\n    // Set notifications server URL to `https://-` to effectively disable communication\n    // with the notifications server from the client app\n    if (this.url === \"https://-\") {\n      return;\n    }\n\n    if (this.signalrConnection != null) {\n      this.signalrConnection.off(\"ReceiveMessage\");\n      this.signalrConnection.off(\"Heartbeat\");\n      await this.signalrConnection.stop();\n      this.connected = false;\n      this.signalrConnection = null;\n    }\n\n    this.signalrConnection = new signalR.HubConnectionBuilder()\n      .withUrl(this.url + \"/hub\", {\n        accessTokenFactory: () => this.apiService.getActiveBearerToken(),\n        skipNegotiation: true,\n        transport: signalR.HttpTransportType.WebSockets,\n      })\n      .withHubProtocol(new signalRMsgPack.MessagePackHubProtocol() as signalR.IHubProtocol)\n      // .configureLogging(signalR.LogLevel.Trace)\n      .build();\n\n    this.signalrConnection.on(\"ReceiveMessage\", (data: any) =>\n      this.processNotification(new NotificationResponse(data))\n    );\n    // eslint-disable-next-line\n    this.signalrConnection.on(\"Heartbeat\", (data: any) => {\n      /*console.log('Heartbeat!');*/\n    });\n    this.signalrConnection.onclose(() => {\n      this.connected = false;\n      this.reconnect(true);\n    });\n    this.inited = true;\n    if (await this.isAuthedAndUnlocked()) {\n      await this.reconnect(false);\n    }\n  }\n\n  async updateConnection(sync = false): Promise<void> {\n    if (!this.inited) {\n      return;\n    }\n    try {\n      if (await this.isAuthedAndUnlocked()) {\n        await this.reconnect(sync);\n      } else {\n        await this.signalrConnection.stop();\n      }\n    } catch (e) {\n      this.logService.error(e.toString());\n    }\n  }\n\n  async reconnectFromActivity(): Promise<void> {\n    this.inactive = false;\n    if (this.inited && !this.connected) {\n      await this.reconnect(true);\n    }\n  }\n\n  async disconnectFromInactivity(): Promise<void> {\n    this.inactive = true;\n    if (this.inited && this.connected) {\n      await this.signalrConnection.stop();\n    }\n  }\n\n  private async processNotification(notification: NotificationResponse) {\n    const appId = await this.appIdService.getAppId();\n    if (notification == null || notification.contextId === appId) {\n      return;\n    }\n\n    const isAuthenticated = await this.stateService.getIsAuthenticated();\n    const payloadUserId = notification.payload.userId || notification.payload.UserId;\n    const myUserId = await this.stateService.getUserId();\n    if (isAuthenticated && payloadUserId != null && payloadUserId !== myUserId) {\n      return;\n    }\n\n    switch (notification.type) {\n      case NotificationType.SyncCipherCreate:\n      case NotificationType.SyncCipherUpdate:\n        await this.syncService.syncUpsertCipher(\n          notification.payload as SyncCipherNotification,\n          notification.type === NotificationType.SyncCipherUpdate\n        );\n        break;\n      case NotificationType.SyncCipherDelete:\n      case NotificationType.SyncLoginDelete:\n        await this.syncService.syncDeleteCipher(notification.payload as SyncCipherNotification);\n        break;\n      case NotificationType.SyncFolderCreate:\n      case NotificationType.SyncFolderUpdate:\n        await this.syncService.syncUpsertFolder(\n          notification.payload as SyncFolderNotification,\n          notification.type === NotificationType.SyncFolderUpdate\n        );\n        break;\n      case NotificationType.SyncFolderDelete:\n        await this.syncService.syncDeleteFolder(notification.payload as SyncFolderNotification);\n        break;\n      case NotificationType.SyncVault:\n      case NotificationType.SyncCiphers:\n      case NotificationType.SyncSettings:\n        if (isAuthenticated) {\n          await this.syncService.fullSync(false);\n        }\n        break;\n      case NotificationType.SyncOrgKeys:\n        if (isAuthenticated) {\n          await this.syncService.fullSync(true);\n          // Stop so a reconnect can be made\n          await this.signalrConnection.stop();\n        }\n        break;\n      case NotificationType.LogOut:\n        if (isAuthenticated) {\n          this.logoutCallback(true);\n        }\n        break;\n      case NotificationType.SyncSendCreate:\n      case NotificationType.SyncSendUpdate:\n        await this.syncService.syncUpsertSend(\n          notification.payload as SyncSendNotification,\n          notification.type === NotificationType.SyncSendUpdate\n        );\n        break;\n      case NotificationType.SyncSendDelete:\n        await this.syncService.syncDeleteSend(notification.payload as SyncSendNotification);\n        break;\n      case NotificationType.AuthRequest:\n        if (await this.stateService.getApproveLoginRequests()) {\n          this.messagingService.send(\"openLoginApproval\", {\n            notificationId: notification.payload.id,\n          });\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  private async reconnect(sync: boolean) {\n    if (this.reconnectTimer != null) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n    if (this.connected || !this.inited || this.inactive) {\n      return;\n    }\n    const authedAndUnlocked = await this.isAuthedAndUnlocked();\n    if (!authedAndUnlocked) {\n      return;\n    }\n\n    try {\n      await this.signalrConnection.start();\n      this.connected = true;\n      if (sync) {\n        await this.syncService.fullSync(false);\n      }\n    } catch (e) {\n      this.logService.error(e);\n    }\n\n    if (!this.connected) {\n      this.reconnectTimer = setTimeout(() => this.reconnect(sync), this.random(120000, 300000));\n    }\n  }\n\n  private async isAuthedAndUnlocked() {\n    const authStatus = await this.authService.getAuthStatus();\n    return authStatus >= AuthenticationStatus.Unlocked;\n  }\n\n  private random(min: number, max: number) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n}\n","import * as lunr from \"lunr\";\n\nimport { SearchService as SearchServiceAbstraction } from \"../abstractions/search.service\";\nimport { FieldType, UriMatchType } from \"../enums\";\nimport { I18nService } from \"../platform/abstractions/i18n.service\";\nimport { LogService } from \"../platform/abstractions/log.service\";\nimport { SendView } from \"../tools/send/models/view/send.view\";\nimport { CipherType } from \"../vault/enums/cipher-type\";\nimport { CipherView } from \"../vault/models/view/cipher.view\";\n\nexport class SearchService implements SearchServiceAbstraction {\n  private static registeredPipeline = false;\n\n  indexedEntityId?: string = null;\n  private indexing = false;\n  private index: lunr.Index = null;\n  private readonly immediateSearchLocales: string[] = [\"zh-CN\", \"zh-TW\", \"ja\", \"ko\", \"vi\"];\n  private readonly defaultSearchableMinLength: number = 2;\n  private searchableMinLength: number = this.defaultSearchableMinLength;\n\n  constructor(private logService: LogService, private i18nService: I18nService) {\n    this.i18nService.locale$.subscribe((locale) => {\n      if (this.immediateSearchLocales.indexOf(locale) !== -1) {\n        this.searchableMinLength = 1;\n      } else {\n        this.searchableMinLength = this.defaultSearchableMinLength;\n      }\n    });\n\n    // Currently have to ensure this is only done a single time. Lunr allows you to register a function\n    // multiple times but they will add a warning message to the console. The way they do that breaks when ran on a service worker.\n    if (!SearchService.registeredPipeline) {\n      SearchService.registeredPipeline = true;\n      //register lunr pipeline function\n      lunr.Pipeline.registerFunction(this.normalizeAccentsPipelineFunction, \"normalizeAccents\");\n    }\n  }\n\n  clearIndex(): void {\n    this.indexedEntityId = null;\n    this.index = null;\n  }\n\n  isSearchable(query: string): boolean {\n    query = SearchService.normalizeSearchQuery(query);\n    const notSearchable =\n      query == null ||\n      (this.index == null && query.length < this.searchableMinLength) ||\n      (this.index != null && query.length < this.searchableMinLength && query.indexOf(\">\") !== 0);\n    return !notSearchable;\n  }\n\n  indexCiphers(ciphers: CipherView[], indexedEntityId?: string): void {\n    if (this.indexing) {\n      return;\n    }\n\n    this.indexing = true;\n    this.indexedEntityId = indexedEntityId;\n    this.index = null;\n    const builder = new lunr.Builder();\n    builder.pipeline.add(this.normalizeAccentsPipelineFunction);\n    builder.ref(\"id\");\n    builder.field(\"shortid\", { boost: 100, extractor: (c: CipherView) => c.id.substr(0, 8) });\n    builder.field(\"name\", {\n      boost: 10,\n    });\n    builder.field(\"subtitle\", {\n      boost: 5,\n      extractor: (c: CipherView) => {\n        if (c.subTitle != null && c.type === CipherType.Card) {\n          return c.subTitle.replace(/\\*/g, \"\");\n        }\n        return c.subTitle;\n      },\n    });\n    builder.field(\"notes\");\n    builder.field(\"login.username\", {\n      extractor: (c: CipherView) =>\n        c.type === CipherType.Login && c.login != null ? c.login.username : null,\n    });\n    builder.field(\"login.uris\", { boost: 2, extractor: (c: CipherView) => this.uriExtractor(c) });\n    builder.field(\"fields\", { extractor: (c: CipherView) => this.fieldExtractor(c, false) });\n    builder.field(\"fields_joined\", { extractor: (c: CipherView) => this.fieldExtractor(c, true) });\n    builder.field(\"attachments\", {\n      extractor: (c: CipherView) => this.attachmentExtractor(c, false),\n    });\n    builder.field(\"attachments_joined\", {\n      extractor: (c: CipherView) => this.attachmentExtractor(c, true),\n    });\n    builder.field(\"organizationid\", { extractor: (c: CipherView) => c.organizationId });\n    ciphers = ciphers || [];\n    ciphers.forEach((c) => builder.add(c));\n    this.index = builder.build();\n\n    this.indexing = false;\n\n    this.logService.info(\"Finished search indexing\");\n  }\n\n  async searchCiphers(\n    query: string,\n    filter: ((cipher: CipherView) => boolean) | ((cipher: CipherView) => boolean)[] = null,\n    ciphers: CipherView[]\n  ): Promise<CipherView[]> {\n    const results: CipherView[] = [];\n    if (query != null) {\n      query = SearchService.normalizeSearchQuery(query.trim().toLowerCase());\n    }\n    if (query === \"\") {\n      query = null;\n    }\n\n    if (ciphers == null) {\n      ciphers = [];\n    }\n\n    if (filter != null && Array.isArray(filter) && filter.length > 0) {\n      ciphers = ciphers.filter((c) => filter.every((f) => f == null || f(c)));\n    } else if (filter != null) {\n      ciphers = ciphers.filter(filter as (cipher: CipherView) => boolean);\n    }\n\n    if (!this.isSearchable(query)) {\n      return ciphers;\n    }\n\n    if (this.indexing) {\n      await new Promise((r) => setTimeout(r, 250));\n      if (this.indexing) {\n        await new Promise((r) => setTimeout(r, 500));\n      }\n    }\n\n    const index = this.getIndexForSearch();\n    if (index == null) {\n      // Fall back to basic search if index is not available\n      return this.searchCiphersBasic(ciphers, query);\n    }\n\n    const ciphersMap = new Map<string, CipherView>();\n    ciphers.forEach((c) => ciphersMap.set(c.id, c));\n\n    let searchResults: lunr.Index.Result[] = null;\n    const isQueryString = query != null && query.length > 1 && query.indexOf(\">\") === 0;\n    if (isQueryString) {\n      try {\n        searchResults = index.search(query.substr(1).trim());\n      } catch (e) {\n        this.logService.error(e);\n      }\n    } else {\n      const soWild = lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING;\n      searchResults = index.query((q) => {\n        lunr.tokenizer(query).forEach((token) => {\n          const t = token.toString();\n          q.term(t, { fields: [\"name\"], wildcard: soWild });\n          q.term(t, { fields: [\"subtitle\"], wildcard: soWild });\n          q.term(t, { fields: [\"login.uris\"], wildcard: soWild });\n          q.term(t, {});\n        });\n      });\n    }\n\n    if (searchResults != null) {\n      searchResults.forEach((r) => {\n        if (ciphersMap.has(r.ref)) {\n          results.push(ciphersMap.get(r.ref));\n        }\n      });\n    }\n    return results;\n  }\n\n  searchCiphersBasic(ciphers: CipherView[], query: string, deleted = false) {\n    query = SearchService.normalizeSearchQuery(query.trim().toLowerCase());\n    return ciphers.filter((c) => {\n      if (deleted !== c.isDeleted) {\n        return false;\n      }\n      if (c.name != null && c.name.toLowerCase().indexOf(query) > -1) {\n        return true;\n      }\n      if (query.length >= 8 && c.id.startsWith(query)) {\n        return true;\n      }\n      if (c.subTitle != null && c.subTitle.toLowerCase().indexOf(query) > -1) {\n        return true;\n      }\n      if (\n        c.login &&\n        c.login.hasUris &&\n        c.login.uris.some((loginUri) => loginUri?.uri?.toLowerCase().indexOf(query) > -1)\n      ) {\n        return true;\n      }\n      return false;\n    });\n  }\n\n  searchSends(sends: SendView[], query: string) {\n    query = SearchService.normalizeSearchQuery(query.trim().toLocaleLowerCase());\n    if (query === null) {\n      return sends;\n    }\n    const sendsMatched: SendView[] = [];\n    const lowPriorityMatched: SendView[] = [];\n    sends.forEach((s) => {\n      if (s.name != null && s.name.toLowerCase().indexOf(query) > -1) {\n        sendsMatched.push(s);\n      } else if (\n        query.length >= 8 &&\n        (s.id.startsWith(query) ||\n          s.accessId.toLocaleLowerCase().startsWith(query) ||\n          (s.file?.id != null && s.file.id.startsWith(query)))\n      ) {\n        lowPriorityMatched.push(s);\n      } else if (s.notes != null && s.notes.toLowerCase().indexOf(query) > -1) {\n        lowPriorityMatched.push(s);\n      } else if (s.text?.text != null && s.text.text.toLowerCase().indexOf(query) > -1) {\n        lowPriorityMatched.push(s);\n      } else if (s.file?.fileName != null && s.file.fileName.toLowerCase().indexOf(query) > -1) {\n        lowPriorityMatched.push(s);\n      }\n    });\n    return sendsMatched.concat(lowPriorityMatched);\n  }\n\n  getIndexForSearch(): lunr.Index {\n    return this.index;\n  }\n\n  private fieldExtractor(c: CipherView, joined: boolean) {\n    if (!c.hasFields) {\n      return null;\n    }\n    let fields: string[] = [];\n    c.fields.forEach((f) => {\n      if (f.name != null) {\n        fields.push(f.name);\n      }\n      if (f.type === FieldType.Text && f.value != null) {\n        fields.push(f.value);\n      }\n    });\n    fields = fields.filter((f) => f.trim() !== \"\");\n    if (fields.length === 0) {\n      return null;\n    }\n    return joined ? fields.join(\" \") : fields;\n  }\n\n  private attachmentExtractor(c: CipherView, joined: boolean) {\n    if (!c.hasAttachments) {\n      return null;\n    }\n    let attachments: string[] = [];\n    c.attachments.forEach((a) => {\n      if (a != null && a.fileName != null) {\n        if (joined && a.fileName.indexOf(\".\") > -1) {\n          attachments.push(a.fileName.substr(0, a.fileName.lastIndexOf(\".\")));\n        } else {\n          attachments.push(a.fileName);\n        }\n      }\n    });\n    attachments = attachments.filter((f) => f.trim() !== \"\");\n    if (attachments.length === 0) {\n      return null;\n    }\n    return joined ? attachments.join(\" \") : attachments;\n  }\n\n  private uriExtractor(c: CipherView) {\n    if (c.type !== CipherType.Login || c.login == null || !c.login.hasUris) {\n      return null;\n    }\n    const uris: string[] = [];\n    c.login.uris.forEach((u) => {\n      if (u.uri == null || u.uri === \"\") {\n        return;\n      }\n      if (u.hostname != null) {\n        uris.push(u.hostname);\n        return;\n      }\n      let uri = u.uri;\n      if (u.match !== UriMatchType.RegularExpression) {\n        const protocolIndex = uri.indexOf(\"://\");\n        if (protocolIndex > -1) {\n          uri = uri.substr(protocolIndex + 3);\n        }\n        const queryIndex = uri.search(/\\?|&|#/);\n        if (queryIndex > -1) {\n          uri = uri.substring(0, queryIndex);\n        }\n      }\n      uris.push(uri);\n    });\n    return uris.length > 0 ? uris : null;\n  }\n\n  private normalizeAccentsPipelineFunction(token: lunr.Token): any {\n    const searchableFields = [\"name\", \"login.username\", \"subtitle\", \"notes\"];\n    const fields = (token as any).metadata[\"fields\"];\n    const checkFields = fields.every((i: any) => searchableFields.includes(i));\n\n    if (checkFields) {\n      return SearchService.normalizeSearchQuery(token.toString());\n    }\n\n    return token;\n  }\n\n  // Remove accents/diacritics characters from text. This regex is equivalent to the Diacritic unicode property escape, i.e. it will match all diacritic characters.\n  static normalizeSearchQuery(query: string): string {\n    return query?.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n  }\n}\n","import { TotpService as TotpServiceAbstraction } from \"../abstractions/totp.service\";\nimport { CryptoFunctionService } from \"../platform/abstractions/crypto-function.service\";\nimport { LogService } from \"../platform/abstractions/log.service\";\nimport { Utils } from \"../platform/misc/utils\";\n\nconst B32Chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";\nconst SteamChars = \"23456789BCDFGHJKMNPQRTVWXY\";\n\nexport class TotpService implements TotpServiceAbstraction {\n  constructor(\n    private cryptoFunctionService: CryptoFunctionService,\n    private logService: LogService\n  ) {}\n\n  async getCode(key: string): Promise<string> {\n    if (key == null) {\n      return null;\n    }\n    let period = 30;\n    let alg: \"sha1\" | \"sha256\" | \"sha512\" = \"sha1\";\n    let digits = 6;\n    let keyB32 = key;\n    const isOtpAuth = key.toLowerCase().indexOf(\"otpauth://\") === 0;\n    const isSteamAuth = !isOtpAuth && key.toLowerCase().indexOf(\"steam://\") === 0;\n    if (isOtpAuth) {\n      const params = Utils.getQueryParams(key);\n      if (params.has(\"digits\") && params.get(\"digits\") != null) {\n        try {\n          const digitParams = parseInt(params.get(\"digits\").trim(), null);\n          if (digitParams > 10) {\n            digits = 10;\n          } else if (digitParams > 0) {\n            digits = digitParams;\n          }\n        } catch {\n          this.logService.error(\"Invalid digits param.\");\n        }\n      }\n      if (params.has(\"period\") && params.get(\"period\") != null) {\n        try {\n          const periodParam = parseInt(params.get(\"period\").trim(), null);\n          if (periodParam > 0) {\n            period = periodParam;\n          }\n        } catch {\n          this.logService.error(\"Invalid period param.\");\n        }\n      }\n      if (params.has(\"secret\") && params.get(\"secret\") != null) {\n        keyB32 = params.get(\"secret\");\n      }\n      if (params.has(\"algorithm\") && params.get(\"algorithm\") != null) {\n        const algParam = params.get(\"algorithm\").toLowerCase();\n        if (algParam === \"sha1\" || algParam === \"sha256\" || algParam === \"sha512\") {\n          alg = algParam;\n        }\n      }\n    } else if (isSteamAuth) {\n      keyB32 = key.substr(\"steam://\".length);\n      digits = 5;\n    }\n\n    const epoch = Math.round(new Date().getTime() / 1000.0);\n    const timeHex = this.leftPad(this.decToHex(Math.floor(epoch / period)), 16, \"0\");\n    const timeBytes = Utils.fromHexToArray(timeHex);\n    const keyBytes = this.b32ToBytes(keyB32);\n\n    if (!keyBytes.length || !timeBytes.length) {\n      return null;\n    }\n\n    const hash = await this.sign(keyBytes, timeBytes, alg);\n    if (hash.length === 0) {\n      return null;\n    }\n\n    const offset = hash[hash.length - 1] & 0xf;\n    const binary =\n      ((hash[offset] & 0x7f) << 24) |\n      ((hash[offset + 1] & 0xff) << 16) |\n      ((hash[offset + 2] & 0xff) << 8) |\n      (hash[offset + 3] & 0xff);\n\n    let otp = \"\";\n    if (isSteamAuth) {\n      let fullCode = binary & 0x7fffffff;\n      for (let i = 0; i < digits; i++) {\n        otp += SteamChars[fullCode % SteamChars.length];\n        fullCode = Math.trunc(fullCode / SteamChars.length);\n      }\n    } else {\n      otp = (binary % Math.pow(10, digits)).toString();\n      otp = this.leftPad(otp, digits, \"0\");\n    }\n\n    return otp;\n  }\n\n  getTimeInterval(key: string): number {\n    let period = 30;\n    if (key != null && key.toLowerCase().indexOf(\"otpauth://\") === 0) {\n      const params = Utils.getQueryParams(key);\n      if (params.has(\"period\") && params.get(\"period\") != null) {\n        try {\n          period = parseInt(params.get(\"period\").trim(), null);\n        } catch {\n          this.logService.error(\"Invalid period param.\");\n        }\n      }\n    }\n    return period;\n  }\n\n  // Helpers\n\n  private leftPad(s: string, l: number, p: string): string {\n    if (l + 1 >= s.length) {\n      s = Array(l + 1 - s.length).join(p) + s;\n    }\n    return s;\n  }\n\n  private decToHex(d: number): string {\n    return (d < 15.5 ? \"0\" : \"\") + Math.round(d).toString(16);\n  }\n\n  private b32ToHex(s: string): string {\n    s = s.toUpperCase();\n    let cleanedInput = \"\";\n\n    for (let i = 0; i < s.length; i++) {\n      if (B32Chars.indexOf(s[i]) < 0) {\n        continue;\n      }\n\n      cleanedInput += s[i];\n    }\n    s = cleanedInput;\n\n    let bits = \"\";\n    let hex = \"\";\n    for (let i = 0; i < s.length; i++) {\n      const byteIndex = B32Chars.indexOf(s.charAt(i));\n      if (byteIndex < 0) {\n        continue;\n      }\n      bits += this.leftPad(byteIndex.toString(2), 5, \"0\");\n    }\n    for (let i = 0; i + 4 <= bits.length; i += 4) {\n      const chunk = bits.substr(i, 4);\n      hex = hex + parseInt(chunk, 2).toString(16);\n    }\n    return hex;\n  }\n\n  private b32ToBytes(s: string): Uint8Array {\n    return Utils.fromHexToArray(this.b32ToHex(s));\n  }\n\n  private async sign(\n    keyBytes: Uint8Array,\n    timeBytes: Uint8Array,\n    alg: \"sha1\" | \"sha256\" | \"sha512\"\n  ) {\n    const signature = await this.cryptoFunctionService.hmac(timeBytes, keyBytes, alg);\n    return new Uint8Array(signature);\n  }\n}\n","export enum VaultTimeoutAction {\n  Lock = \"lock\",\n  LogOut = \"logOut\",\n}\n","import { defer } from \"rxjs\";\n\nimport { VaultTimeoutSettingsService as VaultTimeoutSettingsServiceAbstraction } from \"../../abstractions/vault-timeout/vault-timeout-settings.service\";\nimport { PolicyService } from \"../../admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"../../admin-console/enums\";\nimport { TokenService } from \"../../auth/abstractions/token.service\";\nimport { UserVerificationService } from \"../../auth/abstractions/user-verification/user-verification.service.abstraction\";\nimport { VaultTimeoutAction } from \"../../enums/vault-timeout-action.enum\";\nimport { CryptoService } from \"../../platform/abstractions/crypto.service\";\nimport { StateService } from \"../../platform/abstractions/state.service\";\n\n/**\n * - DISABLED: No Pin set\n * - PERSISTENT: Pin is set and survives client reset\n * - TRANSIENT: Pin is set and requires password unlock after client reset\n */\nexport type PinLockType = \"DISABLED\" | \"PERSISTANT\" | \"TRANSIENT\";\n\nexport class VaultTimeoutSettingsService implements VaultTimeoutSettingsServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private tokenService: TokenService,\n    private policyService: PolicyService,\n    private stateService: StateService,\n    private userVerificationService: UserVerificationService\n  ) {}\n\n  async setVaultTimeoutOptions(timeout: number, action: VaultTimeoutAction): Promise<void> {\n    await this.stateService.setVaultTimeout(timeout);\n\n    // We swap these tokens from being on disk for lock actions, and in memory for logout actions\n    // Get them here to set them to their new location after changing the timeout action and clearing if needed\n    const token = await this.tokenService.getToken();\n    const refreshToken = await this.tokenService.getRefreshToken();\n    const clientId = await this.tokenService.getClientId();\n    const clientSecret = await this.tokenService.getClientSecret();\n\n    const currentAction = await this.stateService.getVaultTimeoutAction();\n    if (\n      (timeout != null || timeout === 0) &&\n      action === VaultTimeoutAction.LogOut &&\n      action !== currentAction\n    ) {\n      // if we have a vault timeout and the action is log out, reset tokens\n      await this.tokenService.clearToken();\n    }\n\n    await this.stateService.setVaultTimeoutAction(action);\n\n    await this.tokenService.setToken(token);\n    await this.tokenService.setRefreshToken(refreshToken);\n    await this.tokenService.setClientId(clientId);\n    await this.tokenService.setClientSecret(clientSecret);\n\n    await this.cryptoService.refreshAdditionalKeys();\n  }\n\n  availableVaultTimeoutActions$(userId?: string) {\n    return defer(() => this.getAvailableVaultTimeoutActions(userId));\n  }\n\n  async isPinLockSet(userId?: string): Promise<PinLockType> {\n    // we can't check the protected pin for both because old accounts only\n    // used it for MP on Restart\n    const pinIsEnabled = !!(await this.stateService.getProtectedPin({ userId }));\n    const aUserKeyPinIsSet = !!(await this.stateService.getPinKeyEncryptedUserKey({ userId }));\n    const anOldUserKeyPinIsSet = !!(await this.stateService.getEncryptedPinProtected({ userId }));\n\n    if (aUserKeyPinIsSet || anOldUserKeyPinIsSet) {\n      return \"PERSISTANT\";\n    } else if (pinIsEnabled && !aUserKeyPinIsSet && !anOldUserKeyPinIsSet) {\n      return \"TRANSIENT\";\n    } else {\n      return \"DISABLED\";\n    }\n  }\n\n  async isBiometricLockSet(userId?: string): Promise<boolean> {\n    return await this.stateService.getBiometricUnlock({ userId });\n  }\n\n  async getVaultTimeout(userId?: string): Promise<number> {\n    const vaultTimeout = await this.stateService.getVaultTimeout({ userId });\n\n    if (\n      await this.policyService.policyAppliesToUser(PolicyType.MaximumVaultTimeout, null, userId)\n    ) {\n      const policy = await this.policyService.getAll(PolicyType.MaximumVaultTimeout, userId);\n      // Remove negative values, and ensure it's smaller than maximum allowed value according to policy\n      let timeout = Math.min(vaultTimeout, policy[0].data.minutes);\n\n      if (vaultTimeout == null || timeout < 0) {\n        timeout = policy[0].data.minutes;\n      }\n\n      // TODO @jlf0dev: Can we move this somwhere else? Maybe add it to the initialization process?\n      // ( Apparently I'm the one that reviewed the original PR that added this :) )\n      // We really shouldn't need to set the value here, but multiple services relies on this value being correct.\n      if (vaultTimeout !== timeout) {\n        await this.stateService.setVaultTimeout(timeout, { userId });\n      }\n\n      return timeout;\n    }\n\n    return vaultTimeout;\n  }\n\n  vaultTimeoutAction$(userId?: string) {\n    return defer(() => this.getVaultTimeoutAction(userId));\n  }\n\n  async getVaultTimeoutAction(userId?: string): Promise<VaultTimeoutAction> {\n    const availableActions = await this.getAvailableVaultTimeoutActions();\n    if (availableActions.length === 1) {\n      return availableActions[0];\n    }\n\n    const vaultTimeoutAction = await this.stateService.getVaultTimeoutAction({ userId: userId });\n\n    if (\n      await this.policyService.policyAppliesToUser(PolicyType.MaximumVaultTimeout, null, userId)\n    ) {\n      const policy = await this.policyService.getAll(PolicyType.MaximumVaultTimeout, userId);\n      const action = policy[0].data.action;\n      // We really shouldn't need to set the value here, but multiple services relies on this value being correct.\n      if (action && vaultTimeoutAction !== action) {\n        await this.stateService.setVaultTimeoutAction(action, { userId: userId });\n      }\n      if (action && availableActions.includes(action)) {\n        return action;\n      }\n    }\n\n    if (vaultTimeoutAction == null) {\n      // Depends on whether or not the user has a master password\n      const defaultValue = (await this.userVerificationService.hasMasterPassword())\n        ? VaultTimeoutAction.Lock\n        : VaultTimeoutAction.LogOut;\n      // We really shouldn't need to set the value here, but multiple services relies on this value being correct.\n      await this.stateService.setVaultTimeoutAction(defaultValue, { userId: userId });\n      return defaultValue;\n    }\n\n    return vaultTimeoutAction === VaultTimeoutAction.LogOut\n      ? VaultTimeoutAction.LogOut\n      : VaultTimeoutAction.Lock;\n  }\n\n  private async getAvailableVaultTimeoutActions(userId?: string): Promise<VaultTimeoutAction[]> {\n    const availableActions = [VaultTimeoutAction.LogOut];\n\n    const canLock =\n      (await this.userVerificationService.hasMasterPassword(userId)) ||\n      (await this.isPinLockSet(userId)) !== \"DISABLED\" ||\n      (await this.isBiometricLockSet(userId));\n\n    if (canLock) {\n      availableActions.push(VaultTimeoutAction.Lock);\n    }\n\n    return availableActions;\n  }\n\n  async clear(userId?: string): Promise<void> {\n    await this.stateService.setEverBeenUnlocked(false, { userId: userId });\n    await this.cryptoService.clearPinKeys(userId);\n  }\n}\n","import Domain from \"../../../platform/models/domain/domain-base\";\n\nexport class PasswordGeneratorPolicyOptions extends Domain {\n  defaultType = \"\";\n  minLength = 0;\n  useUppercase = false;\n  useLowercase = false;\n  useNumbers = false;\n  numberCount = 0;\n  useSpecial = false;\n  specialCount = 0;\n  minNumberWords = 0;\n  capitalize = false;\n  includeNumber = false;\n\n  inEffect() {\n    return (\n      this.defaultType !== \"\" ||\n      this.minLength > 0 ||\n      this.numberCount > 0 ||\n      this.specialCount > 0 ||\n      this.useUppercase ||\n      this.useLowercase ||\n      this.useNumbers ||\n      this.useSpecial ||\n      this.minNumberWords > 0 ||\n      this.capitalize ||\n      this.includeNumber\n    );\n  }\n}\n","// EFF's Long Wordlist from https://www.eff.org/dice\nexport const EFFLongWordList = [\n  \"abacus\",\n  \"abdomen\",\n  \"abdominal\",\n  \"abide\",\n  \"abiding\",\n  \"ability\",\n  \"ablaze\",\n  \"able\",\n  \"abnormal\",\n  \"abrasion\",\n  \"abrasive\",\n  \"abreast\",\n  \"abridge\",\n  \"abroad\",\n  \"abruptly\",\n  \"absence\",\n  \"absentee\",\n  \"absently\",\n  \"absinthe\",\n  \"absolute\",\n  \"absolve\",\n  \"abstain\",\n  \"abstract\",\n  \"absurd\",\n  \"accent\",\n  \"acclaim\",\n  \"acclimate\",\n  \"accompany\",\n  \"account\",\n  \"accuracy\",\n  \"accurate\",\n  \"accustom\",\n  \"acetone\",\n  \"achiness\",\n  \"aching\",\n  \"acid\",\n  \"acorn\",\n  \"acquaint\",\n  \"acquire\",\n  \"acre\",\n  \"acrobat\",\n  \"acronym\",\n  \"acting\",\n  \"action\",\n  \"activate\",\n  \"activator\",\n  \"active\",\n  \"activism\",\n  \"activist\",\n  \"activity\",\n  \"actress\",\n  \"acts\",\n  \"acutely\",\n  \"acuteness\",\n  \"aeration\",\n  \"aerobics\",\n  \"aerosol\",\n  \"aerospace\",\n  \"afar\",\n  \"affair\",\n  \"affected\",\n  \"affecting\",\n  \"affection\",\n  \"affidavit\",\n  \"affiliate\",\n  \"affirm\",\n  \"affix\",\n  \"afflicted\",\n  \"affluent\",\n  \"afford\",\n  \"affront\",\n  \"aflame\",\n  \"afloat\",\n  \"aflutter\",\n  \"afoot\",\n  \"afraid\",\n  \"afterglow\",\n  \"afterlife\",\n  \"aftermath\",\n  \"aftermost\",\n  \"afternoon\",\n  \"aged\",\n  \"ageless\",\n  \"agency\",\n  \"agenda\",\n  \"agent\",\n  \"aggregate\",\n  \"aghast\",\n  \"agile\",\n  \"agility\",\n  \"aging\",\n  \"agnostic\",\n  \"agonize\",\n  \"agonizing\",\n  \"agony\",\n  \"agreeable\",\n  \"agreeably\",\n  \"agreed\",\n  \"agreeing\",\n  \"agreement\",\n  \"aground\",\n  \"ahead\",\n  \"ahoy\",\n  \"aide\",\n  \"aids\",\n  \"aim\",\n  \"ajar\",\n  \"alabaster\",\n  \"alarm\",\n  \"albatross\",\n  \"album\",\n  \"alfalfa\",\n  \"algebra\",\n  \"algorithm\",\n  \"alias\",\n  \"alibi\",\n  \"alienable\",\n  \"alienate\",\n  \"aliens\",\n  \"alike\",\n  \"alive\",\n  \"alkaline\",\n  \"alkalize\",\n  \"almanac\",\n  \"almighty\",\n  \"almost\",\n  \"aloe\",\n  \"aloft\",\n  \"aloha\",\n  \"alone\",\n  \"alongside\",\n  \"aloof\",\n  \"alphabet\",\n  \"alright\",\n  \"although\",\n  \"altitude\",\n  \"alto\",\n  \"aluminum\",\n  \"alumni\",\n  \"always\",\n  \"amaretto\",\n  \"amaze\",\n  \"amazingly\",\n  \"amber\",\n  \"ambiance\",\n  \"ambiguity\",\n  \"ambiguous\",\n  \"ambition\",\n  \"ambitious\",\n  \"ambulance\",\n  \"ambush\",\n  \"amendable\",\n  \"amendment\",\n  \"amends\",\n  \"amenity\",\n  \"amiable\",\n  \"amicably\",\n  \"amid\",\n  \"amigo\",\n  \"amino\",\n  \"amiss\",\n  \"ammonia\",\n  \"ammonium\",\n  \"amnesty\",\n  \"amniotic\",\n  \"among\",\n  \"amount\",\n  \"amperage\",\n  \"ample\",\n  \"amplifier\",\n  \"amplify\",\n  \"amply\",\n  \"amuck\",\n  \"amulet\",\n  \"amusable\",\n  \"amused\",\n  \"amusement\",\n  \"amuser\",\n  \"amusing\",\n  \"anaconda\",\n  \"anaerobic\",\n  \"anagram\",\n  \"anatomist\",\n  \"anatomy\",\n  \"anchor\",\n  \"anchovy\",\n  \"ancient\",\n  \"android\",\n  \"anemia\",\n  \"anemic\",\n  \"aneurism\",\n  \"anew\",\n  \"angelfish\",\n  \"angelic\",\n  \"anger\",\n  \"angled\",\n  \"angler\",\n  \"angles\",\n  \"angling\",\n  \"angrily\",\n  \"angriness\",\n  \"anguished\",\n  \"angular\",\n  \"animal\",\n  \"animate\",\n  \"animating\",\n  \"animation\",\n  \"animator\",\n  \"anime\",\n  \"animosity\",\n  \"ankle\",\n  \"annex\",\n  \"annotate\",\n  \"announcer\",\n  \"annoying\",\n  \"annually\",\n  \"annuity\",\n  \"anointer\",\n  \"another\",\n  \"answering\",\n  \"antacid\",\n  \"antarctic\",\n  \"anteater\",\n  \"antelope\",\n  \"antennae\",\n  \"anthem\",\n  \"anthill\",\n  \"anthology\",\n  \"antibody\",\n  \"antics\",\n  \"antidote\",\n  \"antihero\",\n  \"antiquely\",\n  \"antiques\",\n  \"antiquity\",\n  \"antirust\",\n  \"antitoxic\",\n  \"antitrust\",\n  \"antiviral\",\n  \"antivirus\",\n  \"antler\",\n  \"antonym\",\n  \"antsy\",\n  \"anvil\",\n  \"anybody\",\n  \"anyhow\",\n  \"anymore\",\n  \"anyone\",\n  \"anyplace\",\n  \"anything\",\n  \"anytime\",\n  \"anyway\",\n  \"anywhere\",\n  \"aorta\",\n  \"apache\",\n  \"apostle\",\n  \"appealing\",\n  \"appear\",\n  \"appease\",\n  \"appeasing\",\n  \"appendage\",\n  \"appendix\",\n  \"appetite\",\n  \"appetizer\",\n  \"applaud\",\n  \"applause\",\n  \"apple\",\n  \"appliance\",\n  \"applicant\",\n  \"applied\",\n  \"apply\",\n  \"appointee\",\n  \"appraisal\",\n  \"appraiser\",\n  \"apprehend\",\n  \"approach\",\n  \"approval\",\n  \"approve\",\n  \"apricot\",\n  \"april\",\n  \"apron\",\n  \"aptitude\",\n  \"aptly\",\n  \"aqua\",\n  \"aqueduct\",\n  \"arbitrary\",\n  \"arbitrate\",\n  \"ardently\",\n  \"area\",\n  \"arena\",\n  \"arguable\",\n  \"arguably\",\n  \"argue\",\n  \"arise\",\n  \"armadillo\",\n  \"armband\",\n  \"armchair\",\n  \"armed\",\n  \"armful\",\n  \"armhole\",\n  \"arming\",\n  \"armless\",\n  \"armoire\",\n  \"armored\",\n  \"armory\",\n  \"armrest\",\n  \"army\",\n  \"aroma\",\n  \"arose\",\n  \"around\",\n  \"arousal\",\n  \"arrange\",\n  \"array\",\n  \"arrest\",\n  \"arrival\",\n  \"arrive\",\n  \"arrogance\",\n  \"arrogant\",\n  \"arson\",\n  \"art\",\n  \"ascend\",\n  \"ascension\",\n  \"ascent\",\n  \"ascertain\",\n  \"ashamed\",\n  \"ashen\",\n  \"ashes\",\n  \"ashy\",\n  \"aside\",\n  \"askew\",\n  \"asleep\",\n  \"asparagus\",\n  \"aspect\",\n  \"aspirate\",\n  \"aspire\",\n  \"aspirin\",\n  \"astonish\",\n  \"astound\",\n  \"astride\",\n  \"astrology\",\n  \"astronaut\",\n  \"astronomy\",\n  \"astute\",\n  \"atlantic\",\n  \"atlas\",\n  \"atom\",\n  \"atonable\",\n  \"atop\",\n  \"atrium\",\n  \"atrocious\",\n  \"atrophy\",\n  \"attach\",\n  \"attain\",\n  \"attempt\",\n  \"attendant\",\n  \"attendee\",\n  \"attention\",\n  \"attentive\",\n  \"attest\",\n  \"attic\",\n  \"attire\",\n  \"attitude\",\n  \"attractor\",\n  \"attribute\",\n  \"atypical\",\n  \"auction\",\n  \"audacious\",\n  \"audacity\",\n  \"audible\",\n  \"audibly\",\n  \"audience\",\n  \"audio\",\n  \"audition\",\n  \"augmented\",\n  \"august\",\n  \"authentic\",\n  \"author\",\n  \"autism\",\n  \"autistic\",\n  \"autograph\",\n  \"automaker\",\n  \"automated\",\n  \"automatic\",\n  \"autopilot\",\n  \"available\",\n  \"avalanche\",\n  \"avatar\",\n  \"avenge\",\n  \"avenging\",\n  \"avenue\",\n  \"average\",\n  \"aversion\",\n  \"avert\",\n  \"aviation\",\n  \"aviator\",\n  \"avid\",\n  \"avoid\",\n  \"await\",\n  \"awaken\",\n  \"award\",\n  \"aware\",\n  \"awhile\",\n  \"awkward\",\n  \"awning\",\n  \"awoke\",\n  \"awry\",\n  \"axis\",\n  \"babble\",\n  \"babbling\",\n  \"babied\",\n  \"baboon\",\n  \"backache\",\n  \"backboard\",\n  \"backboned\",\n  \"backdrop\",\n  \"backed\",\n  \"backer\",\n  \"backfield\",\n  \"backfire\",\n  \"backhand\",\n  \"backing\",\n  \"backlands\",\n  \"backlash\",\n  \"backless\",\n  \"backlight\",\n  \"backlit\",\n  \"backlog\",\n  \"backpack\",\n  \"backpedal\",\n  \"backrest\",\n  \"backroom\",\n  \"backshift\",\n  \"backside\",\n  \"backslid\",\n  \"backspace\",\n  \"backspin\",\n  \"backstab\",\n  \"backstage\",\n  \"backtalk\",\n  \"backtrack\",\n  \"backup\",\n  \"backward\",\n  \"backwash\",\n  \"backwater\",\n  \"backyard\",\n  \"bacon\",\n  \"bacteria\",\n  \"bacterium\",\n  \"badass\",\n  \"badge\",\n  \"badland\",\n  \"badly\",\n  \"badness\",\n  \"baffle\",\n  \"baffling\",\n  \"bagel\",\n  \"bagful\",\n  \"baggage\",\n  \"bagged\",\n  \"baggie\",\n  \"bagginess\",\n  \"bagging\",\n  \"baggy\",\n  \"bagpipe\",\n  \"baguette\",\n  \"baked\",\n  \"bakery\",\n  \"bakeshop\",\n  \"baking\",\n  \"balance\",\n  \"balancing\",\n  \"balcony\",\n  \"balmy\",\n  \"balsamic\",\n  \"bamboo\",\n  \"banana\",\n  \"banish\",\n  \"banister\",\n  \"banjo\",\n  \"bankable\",\n  \"bankbook\",\n  \"banked\",\n  \"banker\",\n  \"banking\",\n  \"banknote\",\n  \"bankroll\",\n  \"banner\",\n  \"bannister\",\n  \"banshee\",\n  \"banter\",\n  \"barbecue\",\n  \"barbed\",\n  \"barbell\",\n  \"barber\",\n  \"barcode\",\n  \"barge\",\n  \"bargraph\",\n  \"barista\",\n  \"baritone\",\n  \"barley\",\n  \"barmaid\",\n  \"barman\",\n  \"barn\",\n  \"barometer\",\n  \"barrack\",\n  \"barracuda\",\n  \"barrel\",\n  \"barrette\",\n  \"barricade\",\n  \"barrier\",\n  \"barstool\",\n  \"bartender\",\n  \"barterer\",\n  \"bash\",\n  \"basically\",\n  \"basics\",\n  \"basil\",\n  \"basin\",\n  \"basis\",\n  \"basket\",\n  \"batboy\",\n  \"batch\",\n  \"bath\",\n  \"baton\",\n  \"bats\",\n  \"battalion\",\n  \"battered\",\n  \"battering\",\n  \"battery\",\n  \"batting\",\n  \"battle\",\n  \"bauble\",\n  \"bazooka\",\n  \"blabber\",\n  \"bladder\",\n  \"blade\",\n  \"blah\",\n  \"blame\",\n  \"blaming\",\n  \"blanching\",\n  \"blandness\",\n  \"blank\",\n  \"blaspheme\",\n  \"blasphemy\",\n  \"blast\",\n  \"blatancy\",\n  \"blatantly\",\n  \"blazer\",\n  \"blazing\",\n  \"bleach\",\n  \"bleak\",\n  \"bleep\",\n  \"blemish\",\n  \"blend\",\n  \"bless\",\n  \"blighted\",\n  \"blimp\",\n  \"bling\",\n  \"blinked\",\n  \"blinker\",\n  \"blinking\",\n  \"blinks\",\n  \"blip\",\n  \"blissful\",\n  \"blitz\",\n  \"blizzard\",\n  \"bloated\",\n  \"bloating\",\n  \"blob\",\n  \"blog\",\n  \"bloomers\",\n  \"blooming\",\n  \"blooper\",\n  \"blot\",\n  \"blouse\",\n  \"blubber\",\n  \"bluff\",\n  \"bluish\",\n  \"blunderer\",\n  \"blunt\",\n  \"blurb\",\n  \"blurred\",\n  \"blurry\",\n  \"blurt\",\n  \"blush\",\n  \"blustery\",\n  \"boaster\",\n  \"boastful\",\n  \"boasting\",\n  \"boat\",\n  \"bobbed\",\n  \"bobbing\",\n  \"bobble\",\n  \"bobcat\",\n  \"bobsled\",\n  \"bobtail\",\n  \"bodacious\",\n  \"body\",\n  \"bogged\",\n  \"boggle\",\n  \"bogus\",\n  \"boil\",\n  \"bok\",\n  \"bolster\",\n  \"bolt\",\n  \"bonanza\",\n  \"bonded\",\n  \"bonding\",\n  \"bondless\",\n  \"boned\",\n  \"bonehead\",\n  \"boneless\",\n  \"bonelike\",\n  \"boney\",\n  \"bonfire\",\n  \"bonnet\",\n  \"bonsai\",\n  \"bonus\",\n  \"bony\",\n  \"boogeyman\",\n  \"boogieman\",\n  \"book\",\n  \"boondocks\",\n  \"booted\",\n  \"booth\",\n  \"bootie\",\n  \"booting\",\n  \"bootlace\",\n  \"bootleg\",\n  \"boots\",\n  \"boozy\",\n  \"borax\",\n  \"boring\",\n  \"borough\",\n  \"borrower\",\n  \"borrowing\",\n  \"boss\",\n  \"botanical\",\n  \"botanist\",\n  \"botany\",\n  \"botch\",\n  \"both\",\n  \"bottle\",\n  \"bottling\",\n  \"bottom\",\n  \"bounce\",\n  \"bouncing\",\n  \"bouncy\",\n  \"bounding\",\n  \"boundless\",\n  \"bountiful\",\n  \"bovine\",\n  \"boxcar\",\n  \"boxer\",\n  \"boxing\",\n  \"boxlike\",\n  \"boxy\",\n  \"breach\",\n  \"breath\",\n  \"breeches\",\n  \"breeching\",\n  \"breeder\",\n  \"breeding\",\n  \"breeze\",\n  \"breezy\",\n  \"brethren\",\n  \"brewery\",\n  \"brewing\",\n  \"briar\",\n  \"bribe\",\n  \"brick\",\n  \"bride\",\n  \"bridged\",\n  \"brigade\",\n  \"bright\",\n  \"brilliant\",\n  \"brim\",\n  \"bring\",\n  \"brink\",\n  \"brisket\",\n  \"briskly\",\n  \"briskness\",\n  \"bristle\",\n  \"brittle\",\n  \"broadband\",\n  \"broadcast\",\n  \"broaden\",\n  \"broadly\",\n  \"broadness\",\n  \"broadside\",\n  \"broadways\",\n  \"broiler\",\n  \"broiling\",\n  \"broken\",\n  \"broker\",\n  \"bronchial\",\n  \"bronco\",\n  \"bronze\",\n  \"bronzing\",\n  \"brook\",\n  \"broom\",\n  \"brought\",\n  \"browbeat\",\n  \"brownnose\",\n  \"browse\",\n  \"browsing\",\n  \"bruising\",\n  \"brunch\",\n  \"brunette\",\n  \"brunt\",\n  \"brush\",\n  \"brussels\",\n  \"brute\",\n  \"brutishly\",\n  \"bubble\",\n  \"bubbling\",\n  \"bubbly\",\n  \"buccaneer\",\n  \"bucked\",\n  \"bucket\",\n  \"buckle\",\n  \"buckshot\",\n  \"buckskin\",\n  \"bucktooth\",\n  \"buckwheat\",\n  \"buddhism\",\n  \"buddhist\",\n  \"budding\",\n  \"buddy\",\n  \"budget\",\n  \"buffalo\",\n  \"buffed\",\n  \"buffer\",\n  \"buffing\",\n  \"buffoon\",\n  \"buggy\",\n  \"bulb\",\n  \"bulge\",\n  \"bulginess\",\n  \"bulgur\",\n  \"bulk\",\n  \"bulldog\",\n  \"bulldozer\",\n  \"bullfight\",\n  \"bullfrog\",\n  \"bullhorn\",\n  \"bullion\",\n  \"bullish\",\n  \"bullpen\",\n  \"bullring\",\n  \"bullseye\",\n  \"bullwhip\",\n  \"bully\",\n  \"bunch\",\n  \"bundle\",\n  \"bungee\",\n  \"bunion\",\n  \"bunkbed\",\n  \"bunkhouse\",\n  \"bunkmate\",\n  \"bunny\",\n  \"bunt\",\n  \"busboy\",\n  \"bush\",\n  \"busily\",\n  \"busload\",\n  \"bust\",\n  \"busybody\",\n  \"buzz\",\n  \"cabana\",\n  \"cabbage\",\n  \"cabbie\",\n  \"cabdriver\",\n  \"cable\",\n  \"caboose\",\n  \"cache\",\n  \"cackle\",\n  \"cacti\",\n  \"cactus\",\n  \"caddie\",\n  \"caddy\",\n  \"cadet\",\n  \"cadillac\",\n  \"cadmium\",\n  \"cage\",\n  \"cahoots\",\n  \"cake\",\n  \"calamari\",\n  \"calamity\",\n  \"calcium\",\n  \"calculate\",\n  \"calculus\",\n  \"caliber\",\n  \"calibrate\",\n  \"calm\",\n  \"caloric\",\n  \"calorie\",\n  \"calzone\",\n  \"camcorder\",\n  \"cameo\",\n  \"camera\",\n  \"camisole\",\n  \"camper\",\n  \"campfire\",\n  \"camping\",\n  \"campsite\",\n  \"campus\",\n  \"canal\",\n  \"canary\",\n  \"cancel\",\n  \"candied\",\n  \"candle\",\n  \"candy\",\n  \"cane\",\n  \"canine\",\n  \"canister\",\n  \"cannabis\",\n  \"canned\",\n  \"canning\",\n  \"cannon\",\n  \"cannot\",\n  \"canola\",\n  \"canon\",\n  \"canopener\",\n  \"canopy\",\n  \"canteen\",\n  \"canyon\",\n  \"capable\",\n  \"capably\",\n  \"capacity\",\n  \"cape\",\n  \"capillary\",\n  \"capital\",\n  \"capitol\",\n  \"capped\",\n  \"capricorn\",\n  \"capsize\",\n  \"capsule\",\n  \"caption\",\n  \"captivate\",\n  \"captive\",\n  \"captivity\",\n  \"capture\",\n  \"caramel\",\n  \"carat\",\n  \"caravan\",\n  \"carbon\",\n  \"cardboard\",\n  \"carded\",\n  \"cardiac\",\n  \"cardigan\",\n  \"cardinal\",\n  \"cardstock\",\n  \"carefully\",\n  \"caregiver\",\n  \"careless\",\n  \"caress\",\n  \"caretaker\",\n  \"cargo\",\n  \"caring\",\n  \"carless\",\n  \"carload\",\n  \"carmaker\",\n  \"carnage\",\n  \"carnation\",\n  \"carnival\",\n  \"carnivore\",\n  \"carol\",\n  \"carpenter\",\n  \"carpentry\",\n  \"carpool\",\n  \"carport\",\n  \"carried\",\n  \"carrot\",\n  \"carrousel\",\n  \"carry\",\n  \"cartel\",\n  \"cartload\",\n  \"carton\",\n  \"cartoon\",\n  \"cartridge\",\n  \"cartwheel\",\n  \"carve\",\n  \"carving\",\n  \"carwash\",\n  \"cascade\",\n  \"case\",\n  \"cash\",\n  \"casing\",\n  \"casino\",\n  \"casket\",\n  \"cassette\",\n  \"casually\",\n  \"casualty\",\n  \"catacomb\",\n  \"catalog\",\n  \"catalyst\",\n  \"catalyze\",\n  \"catapult\",\n  \"cataract\",\n  \"catatonic\",\n  \"catcall\",\n  \"catchable\",\n  \"catcher\",\n  \"catching\",\n  \"catchy\",\n  \"caterer\",\n  \"catering\",\n  \"catfight\",\n  \"catfish\",\n  \"cathedral\",\n  \"cathouse\",\n  \"catlike\",\n  \"catnap\",\n  \"catnip\",\n  \"catsup\",\n  \"cattail\",\n  \"cattishly\",\n  \"cattle\",\n  \"catty\",\n  \"catwalk\",\n  \"caucasian\",\n  \"caucus\",\n  \"causal\",\n  \"causation\",\n  \"cause\",\n  \"causing\",\n  \"cauterize\",\n  \"caution\",\n  \"cautious\",\n  \"cavalier\",\n  \"cavalry\",\n  \"caviar\",\n  \"cavity\",\n  \"cedar\",\n  \"celery\",\n  \"celestial\",\n  \"celibacy\",\n  \"celibate\",\n  \"celtic\",\n  \"cement\",\n  \"census\",\n  \"ceramics\",\n  \"ceremony\",\n  \"certainly\",\n  \"certainty\",\n  \"certified\",\n  \"certify\",\n  \"cesarean\",\n  \"cesspool\",\n  \"chafe\",\n  \"chaffing\",\n  \"chain\",\n  \"chair\",\n  \"chalice\",\n  \"challenge\",\n  \"chamber\",\n  \"chamomile\",\n  \"champion\",\n  \"chance\",\n  \"change\",\n  \"channel\",\n  \"chant\",\n  \"chaos\",\n  \"chaperone\",\n  \"chaplain\",\n  \"chapped\",\n  \"chaps\",\n  \"chapter\",\n  \"character\",\n  \"charbroil\",\n  \"charcoal\",\n  \"charger\",\n  \"charging\",\n  \"chariot\",\n  \"charity\",\n  \"charm\",\n  \"charred\",\n  \"charter\",\n  \"charting\",\n  \"chase\",\n  \"chasing\",\n  \"chaste\",\n  \"chastise\",\n  \"chastity\",\n  \"chatroom\",\n  \"chatter\",\n  \"chatting\",\n  \"chatty\",\n  \"cheating\",\n  \"cheddar\",\n  \"cheek\",\n  \"cheer\",\n  \"cheese\",\n  \"cheesy\",\n  \"chef\",\n  \"chemicals\",\n  \"chemist\",\n  \"chemo\",\n  \"cherisher\",\n  \"cherub\",\n  \"chess\",\n  \"chest\",\n  \"chevron\",\n  \"chevy\",\n  \"chewable\",\n  \"chewer\",\n  \"chewing\",\n  \"chewy\",\n  \"chief\",\n  \"chihuahua\",\n  \"childcare\",\n  \"childhood\",\n  \"childish\",\n  \"childless\",\n  \"childlike\",\n  \"chili\",\n  \"chill\",\n  \"chimp\",\n  \"chip\",\n  \"chirping\",\n  \"chirpy\",\n  \"chitchat\",\n  \"chivalry\",\n  \"chive\",\n  \"chloride\",\n  \"chlorine\",\n  \"choice\",\n  \"chokehold\",\n  \"choking\",\n  \"chomp\",\n  \"chooser\",\n  \"choosing\",\n  \"choosy\",\n  \"chop\",\n  \"chosen\",\n  \"chowder\",\n  \"chowtime\",\n  \"chrome\",\n  \"chubby\",\n  \"chuck\",\n  \"chug\",\n  \"chummy\",\n  \"chump\",\n  \"chunk\",\n  \"churn\",\n  \"chute\",\n  \"cider\",\n  \"cilantro\",\n  \"cinch\",\n  \"cinema\",\n  \"cinnamon\",\n  \"circle\",\n  \"circling\",\n  \"circular\",\n  \"circulate\",\n  \"circus\",\n  \"citable\",\n  \"citadel\",\n  \"citation\",\n  \"citizen\",\n  \"citric\",\n  \"citrus\",\n  \"city\",\n  \"civic\",\n  \"civil\",\n  \"clad\",\n  \"claim\",\n  \"clambake\",\n  \"clammy\",\n  \"clamor\",\n  \"clamp\",\n  \"clamshell\",\n  \"clang\",\n  \"clanking\",\n  \"clapped\",\n  \"clapper\",\n  \"clapping\",\n  \"clarify\",\n  \"clarinet\",\n  \"clarity\",\n  \"clash\",\n  \"clasp\",\n  \"class\",\n  \"clatter\",\n  \"clause\",\n  \"clavicle\",\n  \"claw\",\n  \"clay\",\n  \"clean\",\n  \"clear\",\n  \"cleat\",\n  \"cleaver\",\n  \"cleft\",\n  \"clench\",\n  \"clergyman\",\n  \"clerical\",\n  \"clerk\",\n  \"clever\",\n  \"clicker\",\n  \"client\",\n  \"climate\",\n  \"climatic\",\n  \"cling\",\n  \"clinic\",\n  \"clinking\",\n  \"clip\",\n  \"clique\",\n  \"cloak\",\n  \"clobber\",\n  \"clock\",\n  \"clone\",\n  \"cloning\",\n  \"closable\",\n  \"closure\",\n  \"clothes\",\n  \"clothing\",\n  \"cloud\",\n  \"clover\",\n  \"clubbed\",\n  \"clubbing\",\n  \"clubhouse\",\n  \"clump\",\n  \"clumsily\",\n  \"clumsy\",\n  \"clunky\",\n  \"clustered\",\n  \"clutch\",\n  \"clutter\",\n  \"coach\",\n  \"coagulant\",\n  \"coastal\",\n  \"coaster\",\n  \"coasting\",\n  \"coastland\",\n  \"coastline\",\n  \"coat\",\n  \"coauthor\",\n  \"cobalt\",\n  \"cobbler\",\n  \"cobweb\",\n  \"cocoa\",\n  \"coconut\",\n  \"cod\",\n  \"coeditor\",\n  \"coerce\",\n  \"coexist\",\n  \"coffee\",\n  \"cofounder\",\n  \"cognition\",\n  \"cognitive\",\n  \"cogwheel\",\n  \"coherence\",\n  \"coherent\",\n  \"cohesive\",\n  \"coil\",\n  \"coke\",\n  \"cola\",\n  \"cold\",\n  \"coleslaw\",\n  \"coliseum\",\n  \"collage\",\n  \"collapse\",\n  \"collar\",\n  \"collected\",\n  \"collector\",\n  \"collide\",\n  \"collie\",\n  \"collision\",\n  \"colonial\",\n  \"colonist\",\n  \"colonize\",\n  \"colony\",\n  \"colossal\",\n  \"colt\",\n  \"coma\",\n  \"come\",\n  \"comfort\",\n  \"comfy\",\n  \"comic\",\n  \"coming\",\n  \"comma\",\n  \"commence\",\n  \"commend\",\n  \"comment\",\n  \"commerce\",\n  \"commode\",\n  \"commodity\",\n  \"commodore\",\n  \"common\",\n  \"commotion\",\n  \"commute\",\n  \"commuting\",\n  \"compacted\",\n  \"compacter\",\n  \"compactly\",\n  \"compactor\",\n  \"companion\",\n  \"company\",\n  \"compare\",\n  \"compel\",\n  \"compile\",\n  \"comply\",\n  \"component\",\n  \"composed\",\n  \"composer\",\n  \"composite\",\n  \"compost\",\n  \"composure\",\n  \"compound\",\n  \"compress\",\n  \"comprised\",\n  \"computer\",\n  \"computing\",\n  \"comrade\",\n  \"concave\",\n  \"conceal\",\n  \"conceded\",\n  \"concept\",\n  \"concerned\",\n  \"concert\",\n  \"conch\",\n  \"concierge\",\n  \"concise\",\n  \"conclude\",\n  \"concrete\",\n  \"concur\",\n  \"condense\",\n  \"condiment\",\n  \"condition\",\n  \"condone\",\n  \"conducive\",\n  \"conductor\",\n  \"conduit\",\n  \"cone\",\n  \"confess\",\n  \"confetti\",\n  \"confidant\",\n  \"confident\",\n  \"confider\",\n  \"confiding\",\n  \"configure\",\n  \"confined\",\n  \"confining\",\n  \"confirm\",\n  \"conflict\",\n  \"conform\",\n  \"confound\",\n  \"confront\",\n  \"confused\",\n  \"confusing\",\n  \"confusion\",\n  \"congenial\",\n  \"congested\",\n  \"congrats\",\n  \"congress\",\n  \"conical\",\n  \"conjoined\",\n  \"conjure\",\n  \"conjuror\",\n  \"connected\",\n  \"connector\",\n  \"consensus\",\n  \"consent\",\n  \"console\",\n  \"consoling\",\n  \"consonant\",\n  \"constable\",\n  \"constant\",\n  \"constrain\",\n  \"constrict\",\n  \"construct\",\n  \"consult\",\n  \"consumer\",\n  \"consuming\",\n  \"contact\",\n  \"container\",\n  \"contempt\",\n  \"contend\",\n  \"contented\",\n  \"contently\",\n  \"contents\",\n  \"contest\",\n  \"context\",\n  \"contort\",\n  \"contour\",\n  \"contrite\",\n  \"control\",\n  \"contusion\",\n  \"convene\",\n  \"convent\",\n  \"copartner\",\n  \"cope\",\n  \"copied\",\n  \"copier\",\n  \"copilot\",\n  \"coping\",\n  \"copious\",\n  \"copper\",\n  \"copy\",\n  \"coral\",\n  \"cork\",\n  \"cornball\",\n  \"cornbread\",\n  \"corncob\",\n  \"cornea\",\n  \"corned\",\n  \"corner\",\n  \"cornfield\",\n  \"cornflake\",\n  \"cornhusk\",\n  \"cornmeal\",\n  \"cornstalk\",\n  \"corny\",\n  \"coronary\",\n  \"coroner\",\n  \"corporal\",\n  \"corporate\",\n  \"corral\",\n  \"correct\",\n  \"corridor\",\n  \"corrode\",\n  \"corroding\",\n  \"corrosive\",\n  \"corsage\",\n  \"corset\",\n  \"cortex\",\n  \"cosigner\",\n  \"cosmetics\",\n  \"cosmic\",\n  \"cosmos\",\n  \"cosponsor\",\n  \"cost\",\n  \"cottage\",\n  \"cotton\",\n  \"couch\",\n  \"cough\",\n  \"could\",\n  \"countable\",\n  \"countdown\",\n  \"counting\",\n  \"countless\",\n  \"country\",\n  \"county\",\n  \"courier\",\n  \"covenant\",\n  \"cover\",\n  \"coveted\",\n  \"coveting\",\n  \"coyness\",\n  \"cozily\",\n  \"coziness\",\n  \"cozy\",\n  \"crabbing\",\n  \"crabgrass\",\n  \"crablike\",\n  \"crabmeat\",\n  \"cradle\",\n  \"cradling\",\n  \"crafter\",\n  \"craftily\",\n  \"craftsman\",\n  \"craftwork\",\n  \"crafty\",\n  \"cramp\",\n  \"cranberry\",\n  \"crane\",\n  \"cranial\",\n  \"cranium\",\n  \"crank\",\n  \"crate\",\n  \"crave\",\n  \"craving\",\n  \"crawfish\",\n  \"crawlers\",\n  \"crawling\",\n  \"crayfish\",\n  \"crayon\",\n  \"crazed\",\n  \"crazily\",\n  \"craziness\",\n  \"crazy\",\n  \"creamed\",\n  \"creamer\",\n  \"creamlike\",\n  \"crease\",\n  \"creasing\",\n  \"creatable\",\n  \"create\",\n  \"creation\",\n  \"creative\",\n  \"creature\",\n  \"credible\",\n  \"credibly\",\n  \"credit\",\n  \"creed\",\n  \"creme\",\n  \"creole\",\n  \"crepe\",\n  \"crept\",\n  \"crescent\",\n  \"crested\",\n  \"cresting\",\n  \"crestless\",\n  \"crevice\",\n  \"crewless\",\n  \"crewman\",\n  \"crewmate\",\n  \"crib\",\n  \"cricket\",\n  \"cried\",\n  \"crier\",\n  \"crimp\",\n  \"crimson\",\n  \"cringe\",\n  \"cringing\",\n  \"crinkle\",\n  \"crinkly\",\n  \"crisped\",\n  \"crisping\",\n  \"crisply\",\n  \"crispness\",\n  \"crispy\",\n  \"criteria\",\n  \"critter\",\n  \"croak\",\n  \"crock\",\n  \"crook\",\n  \"croon\",\n  \"crop\",\n  \"cross\",\n  \"crouch\",\n  \"crouton\",\n  \"crowbar\",\n  \"crowd\",\n  \"crown\",\n  \"crucial\",\n  \"crudely\",\n  \"crudeness\",\n  \"cruelly\",\n  \"cruelness\",\n  \"cruelty\",\n  \"crumb\",\n  \"crummiest\",\n  \"crummy\",\n  \"crumpet\",\n  \"crumpled\",\n  \"cruncher\",\n  \"crunching\",\n  \"crunchy\",\n  \"crusader\",\n  \"crushable\",\n  \"crushed\",\n  \"crusher\",\n  \"crushing\",\n  \"crust\",\n  \"crux\",\n  \"crying\",\n  \"cryptic\",\n  \"crystal\",\n  \"cubbyhole\",\n  \"cube\",\n  \"cubical\",\n  \"cubicle\",\n  \"cucumber\",\n  \"cuddle\",\n  \"cuddly\",\n  \"cufflink\",\n  \"culinary\",\n  \"culminate\",\n  \"culpable\",\n  \"culprit\",\n  \"cultivate\",\n  \"cultural\",\n  \"culture\",\n  \"cupbearer\",\n  \"cupcake\",\n  \"cupid\",\n  \"cupped\",\n  \"cupping\",\n  \"curable\",\n  \"curator\",\n  \"curdle\",\n  \"cure\",\n  \"curfew\",\n  \"curing\",\n  \"curled\",\n  \"curler\",\n  \"curliness\",\n  \"curling\",\n  \"curly\",\n  \"curry\",\n  \"curse\",\n  \"cursive\",\n  \"cursor\",\n  \"curtain\",\n  \"curtly\",\n  \"curtsy\",\n  \"curvature\",\n  \"curve\",\n  \"curvy\",\n  \"cushy\",\n  \"cusp\",\n  \"cussed\",\n  \"custard\",\n  \"custodian\",\n  \"custody\",\n  \"customary\",\n  \"customer\",\n  \"customize\",\n  \"customs\",\n  \"cut\",\n  \"cycle\",\n  \"cyclic\",\n  \"cycling\",\n  \"cyclist\",\n  \"cylinder\",\n  \"cymbal\",\n  \"cytoplasm\",\n  \"cytoplast\",\n  \"dab\",\n  \"dad\",\n  \"daffodil\",\n  \"dagger\",\n  \"daily\",\n  \"daintily\",\n  \"dainty\",\n  \"dairy\",\n  \"daisy\",\n  \"dallying\",\n  \"dance\",\n  \"dancing\",\n  \"dandelion\",\n  \"dander\",\n  \"dandruff\",\n  \"dandy\",\n  \"danger\",\n  \"dangle\",\n  \"dangling\",\n  \"daredevil\",\n  \"dares\",\n  \"daringly\",\n  \"darkened\",\n  \"darkening\",\n  \"darkish\",\n  \"darkness\",\n  \"darkroom\",\n  \"darling\",\n  \"darn\",\n  \"dart\",\n  \"darwinism\",\n  \"dash\",\n  \"dastardly\",\n  \"data\",\n  \"datebook\",\n  \"dating\",\n  \"daughter\",\n  \"daunting\",\n  \"dawdler\",\n  \"dawn\",\n  \"daybed\",\n  \"daybreak\",\n  \"daycare\",\n  \"daydream\",\n  \"daylight\",\n  \"daylong\",\n  \"dayroom\",\n  \"daytime\",\n  \"dazzler\",\n  \"dazzling\",\n  \"deacon\",\n  \"deafening\",\n  \"deafness\",\n  \"dealer\",\n  \"dealing\",\n  \"dealmaker\",\n  \"dealt\",\n  \"dean\",\n  \"debatable\",\n  \"debate\",\n  \"debating\",\n  \"debit\",\n  \"debrief\",\n  \"debtless\",\n  \"debtor\",\n  \"debug\",\n  \"debunk\",\n  \"decade\",\n  \"decaf\",\n  \"decal\",\n  \"decathlon\",\n  \"decay\",\n  \"deceased\",\n  \"deceit\",\n  \"deceiver\",\n  \"deceiving\",\n  \"december\",\n  \"decency\",\n  \"decent\",\n  \"deception\",\n  \"deceptive\",\n  \"decibel\",\n  \"decidable\",\n  \"decimal\",\n  \"decimeter\",\n  \"decipher\",\n  \"deck\",\n  \"declared\",\n  \"decline\",\n  \"decode\",\n  \"decompose\",\n  \"decorated\",\n  \"decorator\",\n  \"decoy\",\n  \"decrease\",\n  \"decree\",\n  \"dedicate\",\n  \"dedicator\",\n  \"deduce\",\n  \"deduct\",\n  \"deed\",\n  \"deem\",\n  \"deepen\",\n  \"deeply\",\n  \"deepness\",\n  \"deface\",\n  \"defacing\",\n  \"defame\",\n  \"default\",\n  \"defeat\",\n  \"defection\",\n  \"defective\",\n  \"defendant\",\n  \"defender\",\n  \"defense\",\n  \"defensive\",\n  \"deferral\",\n  \"deferred\",\n  \"defiance\",\n  \"defiant\",\n  \"defile\",\n  \"defiling\",\n  \"define\",\n  \"definite\",\n  \"deflate\",\n  \"deflation\",\n  \"deflator\",\n  \"deflected\",\n  \"deflector\",\n  \"defog\",\n  \"deforest\",\n  \"defraud\",\n  \"defrost\",\n  \"deftly\",\n  \"defuse\",\n  \"defy\",\n  \"degraded\",\n  \"degrading\",\n  \"degrease\",\n  \"degree\",\n  \"dehydrate\",\n  \"deity\",\n  \"dejected\",\n  \"delay\",\n  \"delegate\",\n  \"delegator\",\n  \"delete\",\n  \"deletion\",\n  \"delicacy\",\n  \"delicate\",\n  \"delicious\",\n  \"delighted\",\n  \"delirious\",\n  \"delirium\",\n  \"deliverer\",\n  \"delivery\",\n  \"delouse\",\n  \"delta\",\n  \"deluge\",\n  \"delusion\",\n  \"deluxe\",\n  \"demanding\",\n  \"demeaning\",\n  \"demeanor\",\n  \"demise\",\n  \"democracy\",\n  \"democrat\",\n  \"demote\",\n  \"demotion\",\n  \"demystify\",\n  \"denatured\",\n  \"deniable\",\n  \"denial\",\n  \"denim\",\n  \"denote\",\n  \"dense\",\n  \"density\",\n  \"dental\",\n  \"dentist\",\n  \"denture\",\n  \"deny\",\n  \"deodorant\",\n  \"deodorize\",\n  \"departed\",\n  \"departure\",\n  \"depict\",\n  \"deplete\",\n  \"depletion\",\n  \"deplored\",\n  \"deploy\",\n  \"deport\",\n  \"depose\",\n  \"depraved\",\n  \"depravity\",\n  \"deprecate\",\n  \"depress\",\n  \"deprive\",\n  \"depth\",\n  \"deputize\",\n  \"deputy\",\n  \"derail\",\n  \"deranged\",\n  \"derby\",\n  \"derived\",\n  \"desecrate\",\n  \"deserve\",\n  \"deserving\",\n  \"designate\",\n  \"designed\",\n  \"designer\",\n  \"designing\",\n  \"deskbound\",\n  \"desktop\",\n  \"deskwork\",\n  \"desolate\",\n  \"despair\",\n  \"despise\",\n  \"despite\",\n  \"destiny\",\n  \"destitute\",\n  \"destruct\",\n  \"detached\",\n  \"detail\",\n  \"detection\",\n  \"detective\",\n  \"detector\",\n  \"detention\",\n  \"detergent\",\n  \"detest\",\n  \"detonate\",\n  \"detonator\",\n  \"detoxify\",\n  \"detract\",\n  \"deuce\",\n  \"devalue\",\n  \"deviancy\",\n  \"deviant\",\n  \"deviate\",\n  \"deviation\",\n  \"deviator\",\n  \"device\",\n  \"devious\",\n  \"devotedly\",\n  \"devotee\",\n  \"devotion\",\n  \"devourer\",\n  \"devouring\",\n  \"devoutly\",\n  \"dexterity\",\n  \"dexterous\",\n  \"diabetes\",\n  \"diabetic\",\n  \"diabolic\",\n  \"diagnoses\",\n  \"diagnosis\",\n  \"diagram\",\n  \"dial\",\n  \"diameter\",\n  \"diaper\",\n  \"diaphragm\",\n  \"diary\",\n  \"dice\",\n  \"dicing\",\n  \"dictate\",\n  \"dictation\",\n  \"dictator\",\n  \"difficult\",\n  \"diffused\",\n  \"diffuser\",\n  \"diffusion\",\n  \"diffusive\",\n  \"dig\",\n  \"dilation\",\n  \"diligence\",\n  \"diligent\",\n  \"dill\",\n  \"dilute\",\n  \"dime\",\n  \"diminish\",\n  \"dimly\",\n  \"dimmed\",\n  \"dimmer\",\n  \"dimness\",\n  \"dimple\",\n  \"diner\",\n  \"dingbat\",\n  \"dinghy\",\n  \"dinginess\",\n  \"dingo\",\n  \"dingy\",\n  \"dining\",\n  \"dinner\",\n  \"diocese\",\n  \"dioxide\",\n  \"diploma\",\n  \"dipped\",\n  \"dipper\",\n  \"dipping\",\n  \"directed\",\n  \"direction\",\n  \"directive\",\n  \"directly\",\n  \"directory\",\n  \"direness\",\n  \"dirtiness\",\n  \"disabled\",\n  \"disagree\",\n  \"disallow\",\n  \"disarm\",\n  \"disarray\",\n  \"disaster\",\n  \"disband\",\n  \"disbelief\",\n  \"disburse\",\n  \"discard\",\n  \"discern\",\n  \"discharge\",\n  \"disclose\",\n  \"discolor\",\n  \"discount\",\n  \"discourse\",\n  \"discover\",\n  \"discuss\",\n  \"disdain\",\n  \"disengage\",\n  \"disfigure\",\n  \"disgrace\",\n  \"dish\",\n  \"disinfect\",\n  \"disjoin\",\n  \"disk\",\n  \"dislike\",\n  \"disliking\",\n  \"dislocate\",\n  \"dislodge\",\n  \"disloyal\",\n  \"dismantle\",\n  \"dismay\",\n  \"dismiss\",\n  \"dismount\",\n  \"disobey\",\n  \"disorder\",\n  \"disown\",\n  \"disparate\",\n  \"disparity\",\n  \"dispatch\",\n  \"dispense\",\n  \"dispersal\",\n  \"dispersed\",\n  \"disperser\",\n  \"displace\",\n  \"display\",\n  \"displease\",\n  \"disposal\",\n  \"dispose\",\n  \"disprove\",\n  \"dispute\",\n  \"disregard\",\n  \"disrupt\",\n  \"dissuade\",\n  \"distance\",\n  \"distant\",\n  \"distaste\",\n  \"distill\",\n  \"distinct\",\n  \"distort\",\n  \"distract\",\n  \"distress\",\n  \"district\",\n  \"distrust\",\n  \"ditch\",\n  \"ditto\",\n  \"ditzy\",\n  \"dividable\",\n  \"divided\",\n  \"dividend\",\n  \"dividers\",\n  \"dividing\",\n  \"divinely\",\n  \"diving\",\n  \"divinity\",\n  \"divisible\",\n  \"divisibly\",\n  \"division\",\n  \"divisive\",\n  \"divorcee\",\n  \"dizziness\",\n  \"dizzy\",\n  \"doable\",\n  \"docile\",\n  \"dock\",\n  \"doctrine\",\n  \"document\",\n  \"dodge\",\n  \"dodgy\",\n  \"doily\",\n  \"doing\",\n  \"dole\",\n  \"dollar\",\n  \"dollhouse\",\n  \"dollop\",\n  \"dolly\",\n  \"dolphin\",\n  \"domain\",\n  \"domelike\",\n  \"domestic\",\n  \"dominion\",\n  \"dominoes\",\n  \"donated\",\n  \"donation\",\n  \"donator\",\n  \"donor\",\n  \"donut\",\n  \"doodle\",\n  \"doorbell\",\n  \"doorframe\",\n  \"doorknob\",\n  \"doorman\",\n  \"doormat\",\n  \"doornail\",\n  \"doorpost\",\n  \"doorstep\",\n  \"doorstop\",\n  \"doorway\",\n  \"doozy\",\n  \"dork\",\n  \"dormitory\",\n  \"dorsal\",\n  \"dosage\",\n  \"dose\",\n  \"dotted\",\n  \"doubling\",\n  \"douche\",\n  \"dove\",\n  \"down\",\n  \"dowry\",\n  \"doze\",\n  \"drab\",\n  \"dragging\",\n  \"dragonfly\",\n  \"dragonish\",\n  \"dragster\",\n  \"drainable\",\n  \"drainage\",\n  \"drained\",\n  \"drainer\",\n  \"drainpipe\",\n  \"dramatic\",\n  \"dramatize\",\n  \"drank\",\n  \"drapery\",\n  \"drastic\",\n  \"draw\",\n  \"dreaded\",\n  \"dreadful\",\n  \"dreadlock\",\n  \"dreamboat\",\n  \"dreamily\",\n  \"dreamland\",\n  \"dreamless\",\n  \"dreamlike\",\n  \"dreamt\",\n  \"dreamy\",\n  \"drearily\",\n  \"dreary\",\n  \"drench\",\n  \"dress\",\n  \"drew\",\n  \"dribble\",\n  \"dried\",\n  \"drier\",\n  \"drift\",\n  \"driller\",\n  \"drilling\",\n  \"drinkable\",\n  \"drinking\",\n  \"dripping\",\n  \"drippy\",\n  \"drivable\",\n  \"driven\",\n  \"driver\",\n  \"driveway\",\n  \"driving\",\n  \"drizzle\",\n  \"drizzly\",\n  \"drone\",\n  \"drool\",\n  \"droop\",\n  \"drop-down\",\n  \"dropbox\",\n  \"dropkick\",\n  \"droplet\",\n  \"dropout\",\n  \"dropper\",\n  \"drove\",\n  \"drown\",\n  \"drowsily\",\n  \"drudge\",\n  \"drum\",\n  \"dry\",\n  \"dubbed\",\n  \"dubiously\",\n  \"duchess\",\n  \"duckbill\",\n  \"ducking\",\n  \"duckling\",\n  \"ducktail\",\n  \"ducky\",\n  \"duct\",\n  \"dude\",\n  \"duffel\",\n  \"dugout\",\n  \"duh\",\n  \"duke\",\n  \"duller\",\n  \"dullness\",\n  \"duly\",\n  \"dumping\",\n  \"dumpling\",\n  \"dumpster\",\n  \"duo\",\n  \"dupe\",\n  \"duplex\",\n  \"duplicate\",\n  \"duplicity\",\n  \"durable\",\n  \"durably\",\n  \"duration\",\n  \"duress\",\n  \"during\",\n  \"dusk\",\n  \"dust\",\n  \"dutiful\",\n  \"duty\",\n  \"duvet\",\n  \"dwarf\",\n  \"dweeb\",\n  \"dwelled\",\n  \"dweller\",\n  \"dwelling\",\n  \"dwindle\",\n  \"dwindling\",\n  \"dynamic\",\n  \"dynamite\",\n  \"dynasty\",\n  \"dyslexia\",\n  \"dyslexic\",\n  \"each\",\n  \"eagle\",\n  \"earache\",\n  \"eardrum\",\n  \"earflap\",\n  \"earful\",\n  \"earlobe\",\n  \"early\",\n  \"earmark\",\n  \"earmuff\",\n  \"earphone\",\n  \"earpiece\",\n  \"earplugs\",\n  \"earring\",\n  \"earshot\",\n  \"earthen\",\n  \"earthlike\",\n  \"earthling\",\n  \"earthly\",\n  \"earthworm\",\n  \"earthy\",\n  \"earwig\",\n  \"easeful\",\n  \"easel\",\n  \"easiest\",\n  \"easily\",\n  \"easiness\",\n  \"easing\",\n  \"eastbound\",\n  \"eastcoast\",\n  \"easter\",\n  \"eastward\",\n  \"eatable\",\n  \"eaten\",\n  \"eatery\",\n  \"eating\",\n  \"eats\",\n  \"ebay\",\n  \"ebony\",\n  \"ebook\",\n  \"ecard\",\n  \"eccentric\",\n  \"echo\",\n  \"eclair\",\n  \"eclipse\",\n  \"ecologist\",\n  \"ecology\",\n  \"economic\",\n  \"economist\",\n  \"economy\",\n  \"ecosphere\",\n  \"ecosystem\",\n  \"edge\",\n  \"edginess\",\n  \"edging\",\n  \"edgy\",\n  \"edition\",\n  \"editor\",\n  \"educated\",\n  \"education\",\n  \"educator\",\n  \"eel\",\n  \"effective\",\n  \"effects\",\n  \"efficient\",\n  \"effort\",\n  \"eggbeater\",\n  \"egging\",\n  \"eggnog\",\n  \"eggplant\",\n  \"eggshell\",\n  \"egomaniac\",\n  \"egotism\",\n  \"egotistic\",\n  \"either\",\n  \"eject\",\n  \"elaborate\",\n  \"elastic\",\n  \"elated\",\n  \"elbow\",\n  \"eldercare\",\n  \"elderly\",\n  \"eldest\",\n  \"electable\",\n  \"election\",\n  \"elective\",\n  \"elephant\",\n  \"elevate\",\n  \"elevating\",\n  \"elevation\",\n  \"elevator\",\n  \"eleven\",\n  \"elf\",\n  \"eligible\",\n  \"eligibly\",\n  \"eliminate\",\n  \"elite\",\n  \"elitism\",\n  \"elixir\",\n  \"elk\",\n  \"ellipse\",\n  \"elliptic\",\n  \"elm\",\n  \"elongated\",\n  \"elope\",\n  \"eloquence\",\n  \"eloquent\",\n  \"elsewhere\",\n  \"elude\",\n  \"elusive\",\n  \"elves\",\n  \"email\",\n  \"embargo\",\n  \"embark\",\n  \"embassy\",\n  \"embattled\",\n  \"embellish\",\n  \"ember\",\n  \"embezzle\",\n  \"emblaze\",\n  \"emblem\",\n  \"embody\",\n  \"embolism\",\n  \"emboss\",\n  \"embroider\",\n  \"emcee\",\n  \"emerald\",\n  \"emergency\",\n  \"emission\",\n  \"emit\",\n  \"emote\",\n  \"emoticon\",\n  \"emotion\",\n  \"empathic\",\n  \"empathy\",\n  \"emperor\",\n  \"emphases\",\n  \"emphasis\",\n  \"emphasize\",\n  \"emphatic\",\n  \"empirical\",\n  \"employed\",\n  \"employee\",\n  \"employer\",\n  \"emporium\",\n  \"empower\",\n  \"emptier\",\n  \"emptiness\",\n  \"empty\",\n  \"emu\",\n  \"enable\",\n  \"enactment\",\n  \"enamel\",\n  \"enchanted\",\n  \"enchilada\",\n  \"encircle\",\n  \"enclose\",\n  \"enclosure\",\n  \"encode\",\n  \"encore\",\n  \"encounter\",\n  \"encourage\",\n  \"encroach\",\n  \"encrust\",\n  \"encrypt\",\n  \"endanger\",\n  \"endeared\",\n  \"endearing\",\n  \"ended\",\n  \"ending\",\n  \"endless\",\n  \"endnote\",\n  \"endocrine\",\n  \"endorphin\",\n  \"endorse\",\n  \"endowment\",\n  \"endpoint\",\n  \"endurable\",\n  \"endurance\",\n  \"enduring\",\n  \"energetic\",\n  \"energize\",\n  \"energy\",\n  \"enforced\",\n  \"enforcer\",\n  \"engaged\",\n  \"engaging\",\n  \"engine\",\n  \"engorge\",\n  \"engraved\",\n  \"engraver\",\n  \"engraving\",\n  \"engross\",\n  \"engulf\",\n  \"enhance\",\n  \"enigmatic\",\n  \"enjoyable\",\n  \"enjoyably\",\n  \"enjoyer\",\n  \"enjoying\",\n  \"enjoyment\",\n  \"enlarged\",\n  \"enlarging\",\n  \"enlighten\",\n  \"enlisted\",\n  \"enquirer\",\n  \"enrage\",\n  \"enrich\",\n  \"enroll\",\n  \"enslave\",\n  \"ensnare\",\n  \"ensure\",\n  \"entail\",\n  \"entangled\",\n  \"entering\",\n  \"entertain\",\n  \"enticing\",\n  \"entire\",\n  \"entitle\",\n  \"entity\",\n  \"entomb\",\n  \"entourage\",\n  \"entrap\",\n  \"entree\",\n  \"entrench\",\n  \"entrust\",\n  \"entryway\",\n  \"entwine\",\n  \"enunciate\",\n  \"envelope\",\n  \"enviable\",\n  \"enviably\",\n  \"envious\",\n  \"envision\",\n  \"envoy\",\n  \"envy\",\n  \"enzyme\",\n  \"epic\",\n  \"epidemic\",\n  \"epidermal\",\n  \"epidermis\",\n  \"epidural\",\n  \"epilepsy\",\n  \"epileptic\",\n  \"epilogue\",\n  \"epiphany\",\n  \"episode\",\n  \"equal\",\n  \"equate\",\n  \"equation\",\n  \"equator\",\n  \"equinox\",\n  \"equipment\",\n  \"equity\",\n  \"equivocal\",\n  \"eradicate\",\n  \"erasable\",\n  \"erased\",\n  \"eraser\",\n  \"erasure\",\n  \"ergonomic\",\n  \"errand\",\n  \"errant\",\n  \"erratic\",\n  \"error\",\n  \"erupt\",\n  \"escalate\",\n  \"escalator\",\n  \"escapable\",\n  \"escapade\",\n  \"escapist\",\n  \"escargot\",\n  \"eskimo\",\n  \"esophagus\",\n  \"espionage\",\n  \"espresso\",\n  \"esquire\",\n  \"essay\",\n  \"essence\",\n  \"essential\",\n  \"establish\",\n  \"estate\",\n  \"esteemed\",\n  \"estimate\",\n  \"estimator\",\n  \"estranged\",\n  \"estrogen\",\n  \"etching\",\n  \"eternal\",\n  \"eternity\",\n  \"ethanol\",\n  \"ether\",\n  \"ethically\",\n  \"ethics\",\n  \"euphemism\",\n  \"evacuate\",\n  \"evacuee\",\n  \"evade\",\n  \"evaluate\",\n  \"evaluator\",\n  \"evaporate\",\n  \"evasion\",\n  \"evasive\",\n  \"even\",\n  \"everglade\",\n  \"evergreen\",\n  \"everybody\",\n  \"everyday\",\n  \"everyone\",\n  \"evict\",\n  \"evidence\",\n  \"evident\",\n  \"evil\",\n  \"evoke\",\n  \"evolution\",\n  \"evolve\",\n  \"exact\",\n  \"exalted\",\n  \"example\",\n  \"excavate\",\n  \"excavator\",\n  \"exceeding\",\n  \"exception\",\n  \"excess\",\n  \"exchange\",\n  \"excitable\",\n  \"exciting\",\n  \"exclaim\",\n  \"exclude\",\n  \"excluding\",\n  \"exclusion\",\n  \"exclusive\",\n  \"excretion\",\n  \"excretory\",\n  \"excursion\",\n  \"excusable\",\n  \"excusably\",\n  \"excuse\",\n  \"exemplary\",\n  \"exemplify\",\n  \"exemption\",\n  \"exerciser\",\n  \"exert\",\n  \"exes\",\n  \"exfoliate\",\n  \"exhale\",\n  \"exhaust\",\n  \"exhume\",\n  \"exile\",\n  \"existing\",\n  \"exit\",\n  \"exodus\",\n  \"exonerate\",\n  \"exorcism\",\n  \"exorcist\",\n  \"expand\",\n  \"expanse\",\n  \"expansion\",\n  \"expansive\",\n  \"expectant\",\n  \"expedited\",\n  \"expediter\",\n  \"expel\",\n  \"expend\",\n  \"expenses\",\n  \"expensive\",\n  \"expert\",\n  \"expire\",\n  \"expiring\",\n  \"explain\",\n  \"expletive\",\n  \"explicit\",\n  \"explode\",\n  \"exploit\",\n  \"explore\",\n  \"exploring\",\n  \"exponent\",\n  \"exporter\",\n  \"exposable\",\n  \"expose\",\n  \"exposure\",\n  \"express\",\n  \"expulsion\",\n  \"exquisite\",\n  \"extended\",\n  \"extending\",\n  \"extent\",\n  \"extenuate\",\n  \"exterior\",\n  \"external\",\n  \"extinct\",\n  \"extortion\",\n  \"extradite\",\n  \"extras\",\n  \"extrovert\",\n  \"extrude\",\n  \"extruding\",\n  \"exuberant\",\n  \"fable\",\n  \"fabric\",\n  \"fabulous\",\n  \"facebook\",\n  \"facecloth\",\n  \"facedown\",\n  \"faceless\",\n  \"facelift\",\n  \"faceplate\",\n  \"faceted\",\n  \"facial\",\n  \"facility\",\n  \"facing\",\n  \"facsimile\",\n  \"faction\",\n  \"factoid\",\n  \"factor\",\n  \"factsheet\",\n  \"factual\",\n  \"faculty\",\n  \"fade\",\n  \"fading\",\n  \"failing\",\n  \"falcon\",\n  \"fall\",\n  \"false\",\n  \"falsify\",\n  \"fame\",\n  \"familiar\",\n  \"family\",\n  \"famine\",\n  \"famished\",\n  \"fanatic\",\n  \"fancied\",\n  \"fanciness\",\n  \"fancy\",\n  \"fanfare\",\n  \"fang\",\n  \"fanning\",\n  \"fantasize\",\n  \"fantastic\",\n  \"fantasy\",\n  \"fascism\",\n  \"fastball\",\n  \"faster\",\n  \"fasting\",\n  \"fastness\",\n  \"faucet\",\n  \"favorable\",\n  \"favorably\",\n  \"favored\",\n  \"favoring\",\n  \"favorite\",\n  \"fax\",\n  \"feast\",\n  \"federal\",\n  \"fedora\",\n  \"feeble\",\n  \"feed\",\n  \"feel\",\n  \"feisty\",\n  \"feline\",\n  \"felt-tip\",\n  \"feminine\",\n  \"feminism\",\n  \"feminist\",\n  \"feminize\",\n  \"femur\",\n  \"fence\",\n  \"fencing\",\n  \"fender\",\n  \"ferment\",\n  \"fernlike\",\n  \"ferocious\",\n  \"ferocity\",\n  \"ferret\",\n  \"ferris\",\n  \"ferry\",\n  \"fervor\",\n  \"fester\",\n  \"festival\",\n  \"festive\",\n  \"festivity\",\n  \"fetal\",\n  \"fetch\",\n  \"fever\",\n  \"fiber\",\n  \"fiction\",\n  \"fiddle\",\n  \"fiddling\",\n  \"fidelity\",\n  \"fidgeting\",\n  \"fidgety\",\n  \"fifteen\",\n  \"fifth\",\n  \"fiftieth\",\n  \"fifty\",\n  \"figment\",\n  \"figure\",\n  \"figurine\",\n  \"filing\",\n  \"filled\",\n  \"filler\",\n  \"filling\",\n  \"film\",\n  \"filter\",\n  \"filth\",\n  \"filtrate\",\n  \"finale\",\n  \"finalist\",\n  \"finalize\",\n  \"finally\",\n  \"finance\",\n  \"financial\",\n  \"finch\",\n  \"fineness\",\n  \"finer\",\n  \"finicky\",\n  \"finished\",\n  \"finisher\",\n  \"finishing\",\n  \"finite\",\n  \"finless\",\n  \"finlike\",\n  \"fiscally\",\n  \"fit\",\n  \"five\",\n  \"flaccid\",\n  \"flagman\",\n  \"flagpole\",\n  \"flagship\",\n  \"flagstick\",\n  \"flagstone\",\n  \"flail\",\n  \"flakily\",\n  \"flaky\",\n  \"flame\",\n  \"flammable\",\n  \"flanked\",\n  \"flanking\",\n  \"flannels\",\n  \"flap\",\n  \"flaring\",\n  \"flashback\",\n  \"flashbulb\",\n  \"flashcard\",\n  \"flashily\",\n  \"flashing\",\n  \"flashy\",\n  \"flask\",\n  \"flatbed\",\n  \"flatfoot\",\n  \"flatly\",\n  \"flatness\",\n  \"flatten\",\n  \"flattered\",\n  \"flatterer\",\n  \"flattery\",\n  \"flattop\",\n  \"flatware\",\n  \"flatworm\",\n  \"flavored\",\n  \"flavorful\",\n  \"flavoring\",\n  \"flaxseed\",\n  \"fled\",\n  \"fleshed\",\n  \"fleshy\",\n  \"flick\",\n  \"flier\",\n  \"flight\",\n  \"flinch\",\n  \"fling\",\n  \"flint\",\n  \"flip\",\n  \"flirt\",\n  \"float\",\n  \"flock\",\n  \"flogging\",\n  \"flop\",\n  \"floral\",\n  \"florist\",\n  \"floss\",\n  \"flounder\",\n  \"flyable\",\n  \"flyaway\",\n  \"flyer\",\n  \"flying\",\n  \"flyover\",\n  \"flypaper\",\n  \"foam\",\n  \"foe\",\n  \"fog\",\n  \"foil\",\n  \"folic\",\n  \"folk\",\n  \"follicle\",\n  \"follow\",\n  \"fondling\",\n  \"fondly\",\n  \"fondness\",\n  \"fondue\",\n  \"font\",\n  \"food\",\n  \"fool\",\n  \"footage\",\n  \"football\",\n  \"footbath\",\n  \"footboard\",\n  \"footer\",\n  \"footgear\",\n  \"foothill\",\n  \"foothold\",\n  \"footing\",\n  \"footless\",\n  \"footman\",\n  \"footnote\",\n  \"footpad\",\n  \"footpath\",\n  \"footprint\",\n  \"footrest\",\n  \"footsie\",\n  \"footsore\",\n  \"footwear\",\n  \"footwork\",\n  \"fossil\",\n  \"foster\",\n  \"founder\",\n  \"founding\",\n  \"fountain\",\n  \"fox\",\n  \"foyer\",\n  \"fraction\",\n  \"fracture\",\n  \"fragile\",\n  \"fragility\",\n  \"fragment\",\n  \"fragrance\",\n  \"fragrant\",\n  \"frail\",\n  \"frame\",\n  \"framing\",\n  \"frantic\",\n  \"fraternal\",\n  \"frayed\",\n  \"fraying\",\n  \"frays\",\n  \"freckled\",\n  \"freckles\",\n  \"freebase\",\n  \"freebee\",\n  \"freebie\",\n  \"freedom\",\n  \"freefall\",\n  \"freehand\",\n  \"freeing\",\n  \"freeload\",\n  \"freely\",\n  \"freemason\",\n  \"freeness\",\n  \"freestyle\",\n  \"freeware\",\n  \"freeway\",\n  \"freewill\",\n  \"freezable\",\n  \"freezing\",\n  \"freight\",\n  \"french\",\n  \"frenzied\",\n  \"frenzy\",\n  \"frequency\",\n  \"frequent\",\n  \"fresh\",\n  \"fretful\",\n  \"fretted\",\n  \"friction\",\n  \"friday\",\n  \"fridge\",\n  \"fried\",\n  \"friend\",\n  \"frighten\",\n  \"frightful\",\n  \"frigidity\",\n  \"frigidly\",\n  \"frill\",\n  \"fringe\",\n  \"frisbee\",\n  \"frisk\",\n  \"fritter\",\n  \"frivolous\",\n  \"frolic\",\n  \"from\",\n  \"front\",\n  \"frostbite\",\n  \"frosted\",\n  \"frostily\",\n  \"frosting\",\n  \"frostlike\",\n  \"frosty\",\n  \"froth\",\n  \"frown\",\n  \"frozen\",\n  \"fructose\",\n  \"frugality\",\n  \"frugally\",\n  \"fruit\",\n  \"frustrate\",\n  \"frying\",\n  \"gab\",\n  \"gaffe\",\n  \"gag\",\n  \"gainfully\",\n  \"gaining\",\n  \"gains\",\n  \"gala\",\n  \"gallantly\",\n  \"galleria\",\n  \"gallery\",\n  \"galley\",\n  \"gallon\",\n  \"gallows\",\n  \"gallstone\",\n  \"galore\",\n  \"galvanize\",\n  \"gambling\",\n  \"game\",\n  \"gaming\",\n  \"gamma\",\n  \"gander\",\n  \"gangly\",\n  \"gangrene\",\n  \"gangway\",\n  \"gap\",\n  \"garage\",\n  \"garbage\",\n  \"garden\",\n  \"gargle\",\n  \"garland\",\n  \"garlic\",\n  \"garment\",\n  \"garnet\",\n  \"garnish\",\n  \"garter\",\n  \"gas\",\n  \"gatherer\",\n  \"gathering\",\n  \"gating\",\n  \"gauging\",\n  \"gauntlet\",\n  \"gauze\",\n  \"gave\",\n  \"gawk\",\n  \"gazing\",\n  \"gear\",\n  \"gecko\",\n  \"geek\",\n  \"geiger\",\n  \"gem\",\n  \"gender\",\n  \"generic\",\n  \"generous\",\n  \"genetics\",\n  \"genre\",\n  \"gentile\",\n  \"gentleman\",\n  \"gently\",\n  \"gents\",\n  \"geography\",\n  \"geologic\",\n  \"geologist\",\n  \"geology\",\n  \"geometric\",\n  \"geometry\",\n  \"geranium\",\n  \"gerbil\",\n  \"geriatric\",\n  \"germicide\",\n  \"germinate\",\n  \"germless\",\n  \"germproof\",\n  \"gestate\",\n  \"gestation\",\n  \"gesture\",\n  \"getaway\",\n  \"getting\",\n  \"getup\",\n  \"giant\",\n  \"gibberish\",\n  \"giblet\",\n  \"giddily\",\n  \"giddiness\",\n  \"giddy\",\n  \"gift\",\n  \"gigabyte\",\n  \"gigahertz\",\n  \"gigantic\",\n  \"giggle\",\n  \"giggling\",\n  \"giggly\",\n  \"gigolo\",\n  \"gilled\",\n  \"gills\",\n  \"gimmick\",\n  \"girdle\",\n  \"giveaway\",\n  \"given\",\n  \"giver\",\n  \"giving\",\n  \"gizmo\",\n  \"gizzard\",\n  \"glacial\",\n  \"glacier\",\n  \"glade\",\n  \"gladiator\",\n  \"gladly\",\n  \"glamorous\",\n  \"glamour\",\n  \"glance\",\n  \"glancing\",\n  \"glandular\",\n  \"glare\",\n  \"glaring\",\n  \"glass\",\n  \"glaucoma\",\n  \"glazing\",\n  \"gleaming\",\n  \"gleeful\",\n  \"glider\",\n  \"gliding\",\n  \"glimmer\",\n  \"glimpse\",\n  \"glisten\",\n  \"glitch\",\n  \"glitter\",\n  \"glitzy\",\n  \"gloater\",\n  \"gloating\",\n  \"gloomily\",\n  \"gloomy\",\n  \"glorified\",\n  \"glorifier\",\n  \"glorify\",\n  \"glorious\",\n  \"glory\",\n  \"gloss\",\n  \"glove\",\n  \"glowing\",\n  \"glowworm\",\n  \"glucose\",\n  \"glue\",\n  \"gluten\",\n  \"glutinous\",\n  \"glutton\",\n  \"gnarly\",\n  \"gnat\",\n  \"goal\",\n  \"goatskin\",\n  \"goes\",\n  \"goggles\",\n  \"going\",\n  \"goldfish\",\n  \"goldmine\",\n  \"goldsmith\",\n  \"golf\",\n  \"goliath\",\n  \"gonad\",\n  \"gondola\",\n  \"gone\",\n  \"gong\",\n  \"good\",\n  \"gooey\",\n  \"goofball\",\n  \"goofiness\",\n  \"goofy\",\n  \"google\",\n  \"goon\",\n  \"gopher\",\n  \"gore\",\n  \"gorged\",\n  \"gorgeous\",\n  \"gory\",\n  \"gosling\",\n  \"gossip\",\n  \"gothic\",\n  \"gotten\",\n  \"gout\",\n  \"gown\",\n  \"grab\",\n  \"graceful\",\n  \"graceless\",\n  \"gracious\",\n  \"gradation\",\n  \"graded\",\n  \"grader\",\n  \"gradient\",\n  \"grading\",\n  \"gradually\",\n  \"graduate\",\n  \"graffiti\",\n  \"grafted\",\n  \"grafting\",\n  \"grain\",\n  \"granddad\",\n  \"grandkid\",\n  \"grandly\",\n  \"grandma\",\n  \"grandpa\",\n  \"grandson\",\n  \"granite\",\n  \"granny\",\n  \"granola\",\n  \"grant\",\n  \"granular\",\n  \"grape\",\n  \"graph\",\n  \"grapple\",\n  \"grappling\",\n  \"grasp\",\n  \"grass\",\n  \"gratified\",\n  \"gratify\",\n  \"grating\",\n  \"gratitude\",\n  \"gratuity\",\n  \"gravel\",\n  \"graveness\",\n  \"graves\",\n  \"graveyard\",\n  \"gravitate\",\n  \"gravity\",\n  \"gravy\",\n  \"gray\",\n  \"grazing\",\n  \"greasily\",\n  \"greedily\",\n  \"greedless\",\n  \"greedy\",\n  \"green\",\n  \"greeter\",\n  \"greeting\",\n  \"grew\",\n  \"greyhound\",\n  \"grid\",\n  \"grief\",\n  \"grievance\",\n  \"grieving\",\n  \"grievous\",\n  \"grill\",\n  \"grimace\",\n  \"grimacing\",\n  \"grime\",\n  \"griminess\",\n  \"grimy\",\n  \"grinch\",\n  \"grinning\",\n  \"grip\",\n  \"gristle\",\n  \"grit\",\n  \"groggily\",\n  \"groggy\",\n  \"groin\",\n  \"groom\",\n  \"groove\",\n  \"grooving\",\n  \"groovy\",\n  \"grope\",\n  \"ground\",\n  \"grouped\",\n  \"grout\",\n  \"grove\",\n  \"grower\",\n  \"growing\",\n  \"growl\",\n  \"grub\",\n  \"grudge\",\n  \"grudging\",\n  \"grueling\",\n  \"gruffly\",\n  \"grumble\",\n  \"grumbling\",\n  \"grumbly\",\n  \"grumpily\",\n  \"grunge\",\n  \"grunt\",\n  \"guacamole\",\n  \"guidable\",\n  \"guidance\",\n  \"guide\",\n  \"guiding\",\n  \"guileless\",\n  \"guise\",\n  \"gulf\",\n  \"gullible\",\n  \"gully\",\n  \"gulp\",\n  \"gumball\",\n  \"gumdrop\",\n  \"gumminess\",\n  \"gumming\",\n  \"gummy\",\n  \"gurgle\",\n  \"gurgling\",\n  \"guru\",\n  \"gush\",\n  \"gusto\",\n  \"gusty\",\n  \"gutless\",\n  \"guts\",\n  \"gutter\",\n  \"guy\",\n  \"guzzler\",\n  \"gyration\",\n  \"habitable\",\n  \"habitant\",\n  \"habitat\",\n  \"habitual\",\n  \"hacked\",\n  \"hacker\",\n  \"hacking\",\n  \"hacksaw\",\n  \"had\",\n  \"haggler\",\n  \"haiku\",\n  \"half\",\n  \"halogen\",\n  \"halt\",\n  \"halved\",\n  \"halves\",\n  \"hamburger\",\n  \"hamlet\",\n  \"hammock\",\n  \"hamper\",\n  \"hamster\",\n  \"hamstring\",\n  \"handbag\",\n  \"handball\",\n  \"handbook\",\n  \"handbrake\",\n  \"handcart\",\n  \"handclap\",\n  \"handclasp\",\n  \"handcraft\",\n  \"handcuff\",\n  \"handed\",\n  \"handful\",\n  \"handgrip\",\n  \"handgun\",\n  \"handheld\",\n  \"handiness\",\n  \"handiwork\",\n  \"handlebar\",\n  \"handled\",\n  \"handler\",\n  \"handling\",\n  \"handmade\",\n  \"handoff\",\n  \"handpick\",\n  \"handprint\",\n  \"handrail\",\n  \"handsaw\",\n  \"handset\",\n  \"handsfree\",\n  \"handshake\",\n  \"handstand\",\n  \"handwash\",\n  \"handwork\",\n  \"handwoven\",\n  \"handwrite\",\n  \"handyman\",\n  \"hangnail\",\n  \"hangout\",\n  \"hangover\",\n  \"hangup\",\n  \"hankering\",\n  \"hankie\",\n  \"hanky\",\n  \"haphazard\",\n  \"happening\",\n  \"happier\",\n  \"happiest\",\n  \"happily\",\n  \"happiness\",\n  \"happy\",\n  \"harbor\",\n  \"hardcopy\",\n  \"hardcore\",\n  \"hardcover\",\n  \"harddisk\",\n  \"hardened\",\n  \"hardener\",\n  \"hardening\",\n  \"hardhat\",\n  \"hardhead\",\n  \"hardiness\",\n  \"hardly\",\n  \"hardness\",\n  \"hardship\",\n  \"hardware\",\n  \"hardwired\",\n  \"hardwood\",\n  \"hardy\",\n  \"harmful\",\n  \"harmless\",\n  \"harmonica\",\n  \"harmonics\",\n  \"harmonize\",\n  \"harmony\",\n  \"harness\",\n  \"harpist\",\n  \"harsh\",\n  \"harvest\",\n  \"hash\",\n  \"hassle\",\n  \"haste\",\n  \"hastily\",\n  \"hastiness\",\n  \"hasty\",\n  \"hatbox\",\n  \"hatchback\",\n  \"hatchery\",\n  \"hatchet\",\n  \"hatching\",\n  \"hatchling\",\n  \"hate\",\n  \"hatless\",\n  \"hatred\",\n  \"haunt\",\n  \"haven\",\n  \"hazard\",\n  \"hazelnut\",\n  \"hazily\",\n  \"haziness\",\n  \"hazing\",\n  \"hazy\",\n  \"headache\",\n  \"headband\",\n  \"headboard\",\n  \"headcount\",\n  \"headdress\",\n  \"headed\",\n  \"header\",\n  \"headfirst\",\n  \"headgear\",\n  \"heading\",\n  \"headlamp\",\n  \"headless\",\n  \"headlock\",\n  \"headphone\",\n  \"headpiece\",\n  \"headrest\",\n  \"headroom\",\n  \"headscarf\",\n  \"headset\",\n  \"headsman\",\n  \"headstand\",\n  \"headstone\",\n  \"headway\",\n  \"headwear\",\n  \"heap\",\n  \"heat\",\n  \"heave\",\n  \"heavily\",\n  \"heaviness\",\n  \"heaving\",\n  \"hedge\",\n  \"hedging\",\n  \"heftiness\",\n  \"hefty\",\n  \"helium\",\n  \"helmet\",\n  \"helper\",\n  \"helpful\",\n  \"helping\",\n  \"helpless\",\n  \"helpline\",\n  \"hemlock\",\n  \"hemstitch\",\n  \"hence\",\n  \"henchman\",\n  \"henna\",\n  \"herald\",\n  \"herbal\",\n  \"herbicide\",\n  \"herbs\",\n  \"heritage\",\n  \"hermit\",\n  \"heroics\",\n  \"heroism\",\n  \"herring\",\n  \"herself\",\n  \"hertz\",\n  \"hesitancy\",\n  \"hesitant\",\n  \"hesitate\",\n  \"hexagon\",\n  \"hexagram\",\n  \"hubcap\",\n  \"huddle\",\n  \"huddling\",\n  \"huff\",\n  \"hug\",\n  \"hula\",\n  \"hulk\",\n  \"hull\",\n  \"human\",\n  \"humble\",\n  \"humbling\",\n  \"humbly\",\n  \"humid\",\n  \"humiliate\",\n  \"humility\",\n  \"humming\",\n  \"hummus\",\n  \"humongous\",\n  \"humorist\",\n  \"humorless\",\n  \"humorous\",\n  \"humpback\",\n  \"humped\",\n  \"humvee\",\n  \"hunchback\",\n  \"hundredth\",\n  \"hunger\",\n  \"hungrily\",\n  \"hungry\",\n  \"hunk\",\n  \"hunter\",\n  \"hunting\",\n  \"huntress\",\n  \"huntsman\",\n  \"hurdle\",\n  \"hurled\",\n  \"hurler\",\n  \"hurling\",\n  \"hurray\",\n  \"hurricane\",\n  \"hurried\",\n  \"hurry\",\n  \"hurt\",\n  \"husband\",\n  \"hush\",\n  \"husked\",\n  \"huskiness\",\n  \"hut\",\n  \"hybrid\",\n  \"hydrant\",\n  \"hydrated\",\n  \"hydration\",\n  \"hydrogen\",\n  \"hydroxide\",\n  \"hyperlink\",\n  \"hypertext\",\n  \"hyphen\",\n  \"hypnoses\",\n  \"hypnosis\",\n  \"hypnotic\",\n  \"hypnotism\",\n  \"hypnotist\",\n  \"hypnotize\",\n  \"hypocrisy\",\n  \"hypocrite\",\n  \"ibuprofen\",\n  \"ice\",\n  \"iciness\",\n  \"icing\",\n  \"icky\",\n  \"icon\",\n  \"icy\",\n  \"idealism\",\n  \"idealist\",\n  \"idealize\",\n  \"ideally\",\n  \"idealness\",\n  \"identical\",\n  \"identify\",\n  \"identity\",\n  \"ideology\",\n  \"idiocy\",\n  \"idiom\",\n  \"idly\",\n  \"igloo\",\n  \"ignition\",\n  \"ignore\",\n  \"iguana\",\n  \"illicitly\",\n  \"illusion\",\n  \"illusive\",\n  \"image\",\n  \"imaginary\",\n  \"imagines\",\n  \"imaging\",\n  \"imbecile\",\n  \"imitate\",\n  \"imitation\",\n  \"immature\",\n  \"immerse\",\n  \"immersion\",\n  \"imminent\",\n  \"immobile\",\n  \"immodest\",\n  \"immorally\",\n  \"immortal\",\n  \"immovable\",\n  \"immovably\",\n  \"immunity\",\n  \"immunize\",\n  \"impaired\",\n  \"impale\",\n  \"impart\",\n  \"impatient\",\n  \"impeach\",\n  \"impeding\",\n  \"impending\",\n  \"imperfect\",\n  \"imperial\",\n  \"impish\",\n  \"implant\",\n  \"implement\",\n  \"implicate\",\n  \"implicit\",\n  \"implode\",\n  \"implosion\",\n  \"implosive\",\n  \"imply\",\n  \"impolite\",\n  \"important\",\n  \"importer\",\n  \"impose\",\n  \"imposing\",\n  \"impotence\",\n  \"impotency\",\n  \"impotent\",\n  \"impound\",\n  \"imprecise\",\n  \"imprint\",\n  \"imprison\",\n  \"impromptu\",\n  \"improper\",\n  \"improve\",\n  \"improving\",\n  \"improvise\",\n  \"imprudent\",\n  \"impulse\",\n  \"impulsive\",\n  \"impure\",\n  \"impurity\",\n  \"iodine\",\n  \"iodize\",\n  \"ion\",\n  \"ipad\",\n  \"iphone\",\n  \"ipod\",\n  \"irate\",\n  \"irk\",\n  \"iron\",\n  \"irregular\",\n  \"irrigate\",\n  \"irritable\",\n  \"irritably\",\n  \"irritant\",\n  \"irritate\",\n  \"islamic\",\n  \"islamist\",\n  \"isolated\",\n  \"isolating\",\n  \"isolation\",\n  \"isotope\",\n  \"issue\",\n  \"issuing\",\n  \"italicize\",\n  \"italics\",\n  \"item\",\n  \"itinerary\",\n  \"itunes\",\n  \"ivory\",\n  \"ivy\",\n  \"jab\",\n  \"jackal\",\n  \"jacket\",\n  \"jackknife\",\n  \"jackpot\",\n  \"jailbird\",\n  \"jailbreak\",\n  \"jailer\",\n  \"jailhouse\",\n  \"jalapeno\",\n  \"jam\",\n  \"janitor\",\n  \"january\",\n  \"jargon\",\n  \"jarring\",\n  \"jasmine\",\n  \"jaundice\",\n  \"jaunt\",\n  \"java\",\n  \"jawed\",\n  \"jawless\",\n  \"jawline\",\n  \"jaws\",\n  \"jaybird\",\n  \"jaywalker\",\n  \"jazz\",\n  \"jeep\",\n  \"jeeringly\",\n  \"jellied\",\n  \"jelly\",\n  \"jersey\",\n  \"jester\",\n  \"jet\",\n  \"jiffy\",\n  \"jigsaw\",\n  \"jimmy\",\n  \"jingle\",\n  \"jingling\",\n  \"jinx\",\n  \"jitters\",\n  \"jittery\",\n  \"job\",\n  \"jockey\",\n  \"jockstrap\",\n  \"jogger\",\n  \"jogging\",\n  \"john\",\n  \"joining\",\n  \"jokester\",\n  \"jokingly\",\n  \"jolliness\",\n  \"jolly\",\n  \"jolt\",\n  \"jot\",\n  \"jovial\",\n  \"joyfully\",\n  \"joylessly\",\n  \"joyous\",\n  \"joyride\",\n  \"joystick\",\n  \"jubilance\",\n  \"jubilant\",\n  \"judge\",\n  \"judgingly\",\n  \"judicial\",\n  \"judiciary\",\n  \"judo\",\n  \"juggle\",\n  \"juggling\",\n  \"jugular\",\n  \"juice\",\n  \"juiciness\",\n  \"juicy\",\n  \"jujitsu\",\n  \"jukebox\",\n  \"july\",\n  \"jumble\",\n  \"jumbo\",\n  \"jump\",\n  \"junction\",\n  \"juncture\",\n  \"june\",\n  \"junior\",\n  \"juniper\",\n  \"junkie\",\n  \"junkman\",\n  \"junkyard\",\n  \"jurist\",\n  \"juror\",\n  \"jury\",\n  \"justice\",\n  \"justifier\",\n  \"justify\",\n  \"justly\",\n  \"justness\",\n  \"juvenile\",\n  \"kabob\",\n  \"kangaroo\",\n  \"karaoke\",\n  \"karate\",\n  \"karma\",\n  \"kebab\",\n  \"keenly\",\n  \"keenness\",\n  \"keep\",\n  \"keg\",\n  \"kelp\",\n  \"kennel\",\n  \"kept\",\n  \"kerchief\",\n  \"kerosene\",\n  \"kettle\",\n  \"kick\",\n  \"kiln\",\n  \"kilobyte\",\n  \"kilogram\",\n  \"kilometer\",\n  \"kilowatt\",\n  \"kilt\",\n  \"kimono\",\n  \"kindle\",\n  \"kindling\",\n  \"kindly\",\n  \"kindness\",\n  \"kindred\",\n  \"kinetic\",\n  \"kinfolk\",\n  \"king\",\n  \"kinship\",\n  \"kinsman\",\n  \"kinswoman\",\n  \"kissable\",\n  \"kisser\",\n  \"kissing\",\n  \"kitchen\",\n  \"kite\",\n  \"kitten\",\n  \"kitty\",\n  \"kiwi\",\n  \"kleenex\",\n  \"knapsack\",\n  \"knee\",\n  \"knelt\",\n  \"knickers\",\n  \"knoll\",\n  \"koala\",\n  \"kooky\",\n  \"kosher\",\n  \"krypton\",\n  \"kudos\",\n  \"kung\",\n  \"labored\",\n  \"laborer\",\n  \"laboring\",\n  \"laborious\",\n  \"labrador\",\n  \"ladder\",\n  \"ladies\",\n  \"ladle\",\n  \"ladybug\",\n  \"ladylike\",\n  \"lagged\",\n  \"lagging\",\n  \"lagoon\",\n  \"lair\",\n  \"lake\",\n  \"lance\",\n  \"landed\",\n  \"landfall\",\n  \"landfill\",\n  \"landing\",\n  \"landlady\",\n  \"landless\",\n  \"landline\",\n  \"landlord\",\n  \"landmark\",\n  \"landmass\",\n  \"landmine\",\n  \"landowner\",\n  \"landscape\",\n  \"landside\",\n  \"landslide\",\n  \"language\",\n  \"lankiness\",\n  \"lanky\",\n  \"lantern\",\n  \"lapdog\",\n  \"lapel\",\n  \"lapped\",\n  \"lapping\",\n  \"laptop\",\n  \"lard\",\n  \"large\",\n  \"lark\",\n  \"lash\",\n  \"lasso\",\n  \"last\",\n  \"latch\",\n  \"late\",\n  \"lather\",\n  \"latitude\",\n  \"latrine\",\n  \"latter\",\n  \"latticed\",\n  \"launch\",\n  \"launder\",\n  \"laundry\",\n  \"laurel\",\n  \"lavender\",\n  \"lavish\",\n  \"laxative\",\n  \"lazily\",\n  \"laziness\",\n  \"lazy\",\n  \"lecturer\",\n  \"left\",\n  \"legacy\",\n  \"legal\",\n  \"legend\",\n  \"legged\",\n  \"leggings\",\n  \"legible\",\n  \"legibly\",\n  \"legislate\",\n  \"lego\",\n  \"legroom\",\n  \"legume\",\n  \"legwarmer\",\n  \"legwork\",\n  \"lemon\",\n  \"lend\",\n  \"length\",\n  \"lens\",\n  \"lent\",\n  \"leotard\",\n  \"lesser\",\n  \"letdown\",\n  \"lethargic\",\n  \"lethargy\",\n  \"letter\",\n  \"lettuce\",\n  \"level\",\n  \"leverage\",\n  \"levers\",\n  \"levitate\",\n  \"levitator\",\n  \"liability\",\n  \"liable\",\n  \"liberty\",\n  \"librarian\",\n  \"library\",\n  \"licking\",\n  \"licorice\",\n  \"lid\",\n  \"life\",\n  \"lifter\",\n  \"lifting\",\n  \"liftoff\",\n  \"ligament\",\n  \"likely\",\n  \"likeness\",\n  \"likewise\",\n  \"liking\",\n  \"lilac\",\n  \"lilly\",\n  \"lily\",\n  \"limb\",\n  \"limeade\",\n  \"limelight\",\n  \"limes\",\n  \"limit\",\n  \"limping\",\n  \"limpness\",\n  \"line\",\n  \"lingo\",\n  \"linguini\",\n  \"linguist\",\n  \"lining\",\n  \"linked\",\n  \"linoleum\",\n  \"linseed\",\n  \"lint\",\n  \"lion\",\n  \"lip\",\n  \"liquefy\",\n  \"liqueur\",\n  \"liquid\",\n  \"lisp\",\n  \"list\",\n  \"litigate\",\n  \"litigator\",\n  \"litmus\",\n  \"litter\",\n  \"little\",\n  \"livable\",\n  \"lived\",\n  \"lively\",\n  \"liver\",\n  \"livestock\",\n  \"lividly\",\n  \"living\",\n  \"lizard\",\n  \"lubricant\",\n  \"lubricate\",\n  \"lucid\",\n  \"luckily\",\n  \"luckiness\",\n  \"luckless\",\n  \"lucrative\",\n  \"ludicrous\",\n  \"lugged\",\n  \"lukewarm\",\n  \"lullaby\",\n  \"lumber\",\n  \"luminance\",\n  \"luminous\",\n  \"lumpiness\",\n  \"lumping\",\n  \"lumpish\",\n  \"lunacy\",\n  \"lunar\",\n  \"lunchbox\",\n  \"luncheon\",\n  \"lunchroom\",\n  \"lunchtime\",\n  \"lung\",\n  \"lurch\",\n  \"lure\",\n  \"luridness\",\n  \"lurk\",\n  \"lushly\",\n  \"lushness\",\n  \"luster\",\n  \"lustfully\",\n  \"lustily\",\n  \"lustiness\",\n  \"lustrous\",\n  \"lusty\",\n  \"luxurious\",\n  \"luxury\",\n  \"lying\",\n  \"lyrically\",\n  \"lyricism\",\n  \"lyricist\",\n  \"lyrics\",\n  \"macarena\",\n  \"macaroni\",\n  \"macaw\",\n  \"mace\",\n  \"machine\",\n  \"machinist\",\n  \"magazine\",\n  \"magenta\",\n  \"maggot\",\n  \"magical\",\n  \"magician\",\n  \"magma\",\n  \"magnesium\",\n  \"magnetic\",\n  \"magnetism\",\n  \"magnetize\",\n  \"magnifier\",\n  \"magnify\",\n  \"magnitude\",\n  \"magnolia\",\n  \"mahogany\",\n  \"maimed\",\n  \"majestic\",\n  \"majesty\",\n  \"majorette\",\n  \"majority\",\n  \"makeover\",\n  \"maker\",\n  \"makeshift\",\n  \"making\",\n  \"malformed\",\n  \"malt\",\n  \"mama\",\n  \"mammal\",\n  \"mammary\",\n  \"mammogram\",\n  \"manager\",\n  \"managing\",\n  \"manatee\",\n  \"mandarin\",\n  \"mandate\",\n  \"mandatory\",\n  \"mandolin\",\n  \"manger\",\n  \"mangle\",\n  \"mango\",\n  \"mangy\",\n  \"manhandle\",\n  \"manhole\",\n  \"manhood\",\n  \"manhunt\",\n  \"manicotti\",\n  \"manicure\",\n  \"manifesto\",\n  \"manila\",\n  \"mankind\",\n  \"manlike\",\n  \"manliness\",\n  \"manly\",\n  \"manmade\",\n  \"manned\",\n  \"mannish\",\n  \"manor\",\n  \"manpower\",\n  \"mantis\",\n  \"mantra\",\n  \"manual\",\n  \"many\",\n  \"map\",\n  \"marathon\",\n  \"marauding\",\n  \"marbled\",\n  \"marbles\",\n  \"marbling\",\n  \"march\",\n  \"mardi\",\n  \"margarine\",\n  \"margarita\",\n  \"margin\",\n  \"marigold\",\n  \"marina\",\n  \"marine\",\n  \"marital\",\n  \"maritime\",\n  \"marlin\",\n  \"marmalade\",\n  \"maroon\",\n  \"married\",\n  \"marrow\",\n  \"marry\",\n  \"marshland\",\n  \"marshy\",\n  \"marsupial\",\n  \"marvelous\",\n  \"marxism\",\n  \"mascot\",\n  \"masculine\",\n  \"mashed\",\n  \"mashing\",\n  \"massager\",\n  \"masses\",\n  \"massive\",\n  \"mastiff\",\n  \"matador\",\n  \"matchbook\",\n  \"matchbox\",\n  \"matcher\",\n  \"matching\",\n  \"matchless\",\n  \"material\",\n  \"maternal\",\n  \"maternity\",\n  \"math\",\n  \"mating\",\n  \"matriarch\",\n  \"matrimony\",\n  \"matrix\",\n  \"matron\",\n  \"matted\",\n  \"matter\",\n  \"maturely\",\n  \"maturing\",\n  \"maturity\",\n  \"mauve\",\n  \"maverick\",\n  \"maximize\",\n  \"maximum\",\n  \"maybe\",\n  \"mayday\",\n  \"mayflower\",\n  \"moaner\",\n  \"moaning\",\n  \"mobile\",\n  \"mobility\",\n  \"mobilize\",\n  \"mobster\",\n  \"mocha\",\n  \"mocker\",\n  \"mockup\",\n  \"modified\",\n  \"modify\",\n  \"modular\",\n  \"modulator\",\n  \"module\",\n  \"moisten\",\n  \"moistness\",\n  \"moisture\",\n  \"molar\",\n  \"molasses\",\n  \"mold\",\n  \"molecular\",\n  \"molecule\",\n  \"molehill\",\n  \"mollusk\",\n  \"mom\",\n  \"monastery\",\n  \"monday\",\n  \"monetary\",\n  \"monetize\",\n  \"moneybags\",\n  \"moneyless\",\n  \"moneywise\",\n  \"mongoose\",\n  \"mongrel\",\n  \"monitor\",\n  \"monkhood\",\n  \"monogamy\",\n  \"monogram\",\n  \"monologue\",\n  \"monopoly\",\n  \"monorail\",\n  \"monotone\",\n  \"monotype\",\n  \"monoxide\",\n  \"monsieur\",\n  \"monsoon\",\n  \"monstrous\",\n  \"monthly\",\n  \"monument\",\n  \"moocher\",\n  \"moodiness\",\n  \"moody\",\n  \"mooing\",\n  \"moonbeam\",\n  \"mooned\",\n  \"moonlight\",\n  \"moonlike\",\n  \"moonlit\",\n  \"moonrise\",\n  \"moonscape\",\n  \"moonshine\",\n  \"moonstone\",\n  \"moonwalk\",\n  \"mop\",\n  \"morale\",\n  \"morality\",\n  \"morally\",\n  \"morbidity\",\n  \"morbidly\",\n  \"morphine\",\n  \"morphing\",\n  \"morse\",\n  \"mortality\",\n  \"mortally\",\n  \"mortician\",\n  \"mortified\",\n  \"mortify\",\n  \"mortuary\",\n  \"mosaic\",\n  \"mossy\",\n  \"most\",\n  \"mothball\",\n  \"mothproof\",\n  \"motion\",\n  \"motivate\",\n  \"motivator\",\n  \"motive\",\n  \"motocross\",\n  \"motor\",\n  \"motto\",\n  \"mountable\",\n  \"mountain\",\n  \"mounted\",\n  \"mounting\",\n  \"mourner\",\n  \"mournful\",\n  \"mouse\",\n  \"mousiness\",\n  \"moustache\",\n  \"mousy\",\n  \"mouth\",\n  \"movable\",\n  \"move\",\n  \"movie\",\n  \"moving\",\n  \"mower\",\n  \"mowing\",\n  \"much\",\n  \"muck\",\n  \"mud\",\n  \"mug\",\n  \"mulberry\",\n  \"mulch\",\n  \"mule\",\n  \"mulled\",\n  \"mullets\",\n  \"multiple\",\n  \"multiply\",\n  \"multitask\",\n  \"multitude\",\n  \"mumble\",\n  \"mumbling\",\n  \"mumbo\",\n  \"mummified\",\n  \"mummify\",\n  \"mummy\",\n  \"mumps\",\n  \"munchkin\",\n  \"mundane\",\n  \"municipal\",\n  \"muppet\",\n  \"mural\",\n  \"murkiness\",\n  \"murky\",\n  \"murmuring\",\n  \"muscular\",\n  \"museum\",\n  \"mushily\",\n  \"mushiness\",\n  \"mushroom\",\n  \"mushy\",\n  \"music\",\n  \"musket\",\n  \"muskiness\",\n  \"musky\",\n  \"mustang\",\n  \"mustard\",\n  \"muster\",\n  \"mustiness\",\n  \"musty\",\n  \"mutable\",\n  \"mutate\",\n  \"mutation\",\n  \"mute\",\n  \"mutilated\",\n  \"mutilator\",\n  \"mutiny\",\n  \"mutt\",\n  \"mutual\",\n  \"muzzle\",\n  \"myself\",\n  \"myspace\",\n  \"mystified\",\n  \"mystify\",\n  \"myth\",\n  \"nacho\",\n  \"nag\",\n  \"nail\",\n  \"name\",\n  \"naming\",\n  \"nanny\",\n  \"nanometer\",\n  \"nape\",\n  \"napkin\",\n  \"napped\",\n  \"napping\",\n  \"nappy\",\n  \"narrow\",\n  \"nastily\",\n  \"nastiness\",\n  \"national\",\n  \"native\",\n  \"nativity\",\n  \"natural\",\n  \"nature\",\n  \"naturist\",\n  \"nautical\",\n  \"navigate\",\n  \"navigator\",\n  \"navy\",\n  \"nearby\",\n  \"nearest\",\n  \"nearly\",\n  \"nearness\",\n  \"neatly\",\n  \"neatness\",\n  \"nebula\",\n  \"nebulizer\",\n  \"nectar\",\n  \"negate\",\n  \"negation\",\n  \"negative\",\n  \"neglector\",\n  \"negligee\",\n  \"negligent\",\n  \"negotiate\",\n  \"nemeses\",\n  \"nemesis\",\n  \"neon\",\n  \"nephew\",\n  \"nerd\",\n  \"nervous\",\n  \"nervy\",\n  \"nest\",\n  \"net\",\n  \"neurology\",\n  \"neuron\",\n  \"neurosis\",\n  \"neurotic\",\n  \"neuter\",\n  \"neutron\",\n  \"never\",\n  \"next\",\n  \"nibble\",\n  \"nickname\",\n  \"nicotine\",\n  \"niece\",\n  \"nifty\",\n  \"nimble\",\n  \"nimbly\",\n  \"nineteen\",\n  \"ninetieth\",\n  \"ninja\",\n  \"nintendo\",\n  \"ninth\",\n  \"nuclear\",\n  \"nuclei\",\n  \"nucleus\",\n  \"nugget\",\n  \"nullify\",\n  \"number\",\n  \"numbing\",\n  \"numbly\",\n  \"numbness\",\n  \"numeral\",\n  \"numerate\",\n  \"numerator\",\n  \"numeric\",\n  \"numerous\",\n  \"nuptials\",\n  \"nursery\",\n  \"nursing\",\n  \"nurture\",\n  \"nutcase\",\n  \"nutlike\",\n  \"nutmeg\",\n  \"nutrient\",\n  \"nutshell\",\n  \"nuttiness\",\n  \"nutty\",\n  \"nuzzle\",\n  \"nylon\",\n  \"oaf\",\n  \"oak\",\n  \"oasis\",\n  \"oat\",\n  \"obedience\",\n  \"obedient\",\n  \"obituary\",\n  \"object\",\n  \"obligate\",\n  \"obliged\",\n  \"oblivion\",\n  \"oblivious\",\n  \"oblong\",\n  \"obnoxious\",\n  \"oboe\",\n  \"obscure\",\n  \"obscurity\",\n  \"observant\",\n  \"observer\",\n  \"observing\",\n  \"obsessed\",\n  \"obsession\",\n  \"obsessive\",\n  \"obsolete\",\n  \"obstacle\",\n  \"obstinate\",\n  \"obstruct\",\n  \"obtain\",\n  \"obtrusive\",\n  \"obtuse\",\n  \"obvious\",\n  \"occultist\",\n  \"occupancy\",\n  \"occupant\",\n  \"occupier\",\n  \"occupy\",\n  \"ocean\",\n  \"ocelot\",\n  \"octagon\",\n  \"octane\",\n  \"october\",\n  \"octopus\",\n  \"ogle\",\n  \"oil\",\n  \"oink\",\n  \"ointment\",\n  \"okay\",\n  \"old\",\n  \"olive\",\n  \"olympics\",\n  \"omega\",\n  \"omen\",\n  \"ominous\",\n  \"omission\",\n  \"omit\",\n  \"omnivore\",\n  \"onboard\",\n  \"oncoming\",\n  \"ongoing\",\n  \"onion\",\n  \"online\",\n  \"onlooker\",\n  \"only\",\n  \"onscreen\",\n  \"onset\",\n  \"onshore\",\n  \"onslaught\",\n  \"onstage\",\n  \"onto\",\n  \"onward\",\n  \"onyx\",\n  \"oops\",\n  \"ooze\",\n  \"oozy\",\n  \"opacity\",\n  \"opal\",\n  \"open\",\n  \"operable\",\n  \"operate\",\n  \"operating\",\n  \"operation\",\n  \"operative\",\n  \"operator\",\n  \"opium\",\n  \"opossum\",\n  \"opponent\",\n  \"oppose\",\n  \"opposing\",\n  \"opposite\",\n  \"oppressed\",\n  \"oppressor\",\n  \"opt\",\n  \"opulently\",\n  \"osmosis\",\n  \"other\",\n  \"otter\",\n  \"ouch\",\n  \"ought\",\n  \"ounce\",\n  \"outage\",\n  \"outback\",\n  \"outbid\",\n  \"outboard\",\n  \"outbound\",\n  \"outbreak\",\n  \"outburst\",\n  \"outcast\",\n  \"outclass\",\n  \"outcome\",\n  \"outdated\",\n  \"outdoors\",\n  \"outer\",\n  \"outfield\",\n  \"outfit\",\n  \"outflank\",\n  \"outgoing\",\n  \"outgrow\",\n  \"outhouse\",\n  \"outing\",\n  \"outlast\",\n  \"outlet\",\n  \"outline\",\n  \"outlook\",\n  \"outlying\",\n  \"outmatch\",\n  \"outmost\",\n  \"outnumber\",\n  \"outplayed\",\n  \"outpost\",\n  \"outpour\",\n  \"output\",\n  \"outrage\",\n  \"outrank\",\n  \"outreach\",\n  \"outright\",\n  \"outscore\",\n  \"outsell\",\n  \"outshine\",\n  \"outshoot\",\n  \"outsider\",\n  \"outskirts\",\n  \"outsmart\",\n  \"outsource\",\n  \"outspoken\",\n  \"outtakes\",\n  \"outthink\",\n  \"outward\",\n  \"outweigh\",\n  \"outwit\",\n  \"oval\",\n  \"ovary\",\n  \"oven\",\n  \"overact\",\n  \"overall\",\n  \"overarch\",\n  \"overbid\",\n  \"overbill\",\n  \"overbite\",\n  \"overblown\",\n  \"overboard\",\n  \"overbook\",\n  \"overbuilt\",\n  \"overcast\",\n  \"overcoat\",\n  \"overcome\",\n  \"overcook\",\n  \"overcrowd\",\n  \"overdraft\",\n  \"overdrawn\",\n  \"overdress\",\n  \"overdrive\",\n  \"overdue\",\n  \"overeager\",\n  \"overeater\",\n  \"overexert\",\n  \"overfed\",\n  \"overfeed\",\n  \"overfill\",\n  \"overflow\",\n  \"overfull\",\n  \"overgrown\",\n  \"overhand\",\n  \"overhang\",\n  \"overhaul\",\n  \"overhead\",\n  \"overhear\",\n  \"overheat\",\n  \"overhung\",\n  \"overjoyed\",\n  \"overkill\",\n  \"overlabor\",\n  \"overlaid\",\n  \"overlap\",\n  \"overlay\",\n  \"overload\",\n  \"overlook\",\n  \"overlord\",\n  \"overlying\",\n  \"overnight\",\n  \"overpass\",\n  \"overpay\",\n  \"overplant\",\n  \"overplay\",\n  \"overpower\",\n  \"overprice\",\n  \"overrate\",\n  \"overreach\",\n  \"overreact\",\n  \"override\",\n  \"overripe\",\n  \"overrule\",\n  \"overrun\",\n  \"overshoot\",\n  \"overshot\",\n  \"oversight\",\n  \"oversized\",\n  \"oversleep\",\n  \"oversold\",\n  \"overspend\",\n  \"overstate\",\n  \"overstay\",\n  \"overstep\",\n  \"overstock\",\n  \"overstuff\",\n  \"oversweet\",\n  \"overtake\",\n  \"overthrow\",\n  \"overtime\",\n  \"overtly\",\n  \"overtone\",\n  \"overture\",\n  \"overturn\",\n  \"overuse\",\n  \"overvalue\",\n  \"overview\",\n  \"overwrite\",\n  \"owl\",\n  \"oxford\",\n  \"oxidant\",\n  \"oxidation\",\n  \"oxidize\",\n  \"oxidizing\",\n  \"oxygen\",\n  \"oxymoron\",\n  \"oyster\",\n  \"ozone\",\n  \"paced\",\n  \"pacemaker\",\n  \"pacific\",\n  \"pacifier\",\n  \"pacifism\",\n  \"pacifist\",\n  \"pacify\",\n  \"padded\",\n  \"padding\",\n  \"paddle\",\n  \"paddling\",\n  \"padlock\",\n  \"pagan\",\n  \"pager\",\n  \"paging\",\n  \"pajamas\",\n  \"palace\",\n  \"palatable\",\n  \"palm\",\n  \"palpable\",\n  \"palpitate\",\n  \"paltry\",\n  \"pampered\",\n  \"pamperer\",\n  \"pampers\",\n  \"pamphlet\",\n  \"panama\",\n  \"pancake\",\n  \"pancreas\",\n  \"panda\",\n  \"pandemic\",\n  \"pang\",\n  \"panhandle\",\n  \"panic\",\n  \"panning\",\n  \"panorama\",\n  \"panoramic\",\n  \"panther\",\n  \"pantomime\",\n  \"pantry\",\n  \"pants\",\n  \"pantyhose\",\n  \"paparazzi\",\n  \"papaya\",\n  \"paper\",\n  \"paprika\",\n  \"papyrus\",\n  \"parabola\",\n  \"parachute\",\n  \"parade\",\n  \"paradox\",\n  \"paragraph\",\n  \"parakeet\",\n  \"paralegal\",\n  \"paralyses\",\n  \"paralysis\",\n  \"paralyze\",\n  \"paramedic\",\n  \"parameter\",\n  \"paramount\",\n  \"parasail\",\n  \"parasite\",\n  \"parasitic\",\n  \"parcel\",\n  \"parched\",\n  \"parchment\",\n  \"pardon\",\n  \"parish\",\n  \"parka\",\n  \"parking\",\n  \"parkway\",\n  \"parlor\",\n  \"parmesan\",\n  \"parole\",\n  \"parrot\",\n  \"parsley\",\n  \"parsnip\",\n  \"partake\",\n  \"parted\",\n  \"parting\",\n  \"partition\",\n  \"partly\",\n  \"partner\",\n  \"partridge\",\n  \"party\",\n  \"passable\",\n  \"passably\",\n  \"passage\",\n  \"passcode\",\n  \"passenger\",\n  \"passerby\",\n  \"passing\",\n  \"passion\",\n  \"passive\",\n  \"passivism\",\n  \"passover\",\n  \"passport\",\n  \"password\",\n  \"pasta\",\n  \"pasted\",\n  \"pastel\",\n  \"pastime\",\n  \"pastor\",\n  \"pastrami\",\n  \"pasture\",\n  \"pasty\",\n  \"patchwork\",\n  \"patchy\",\n  \"paternal\",\n  \"paternity\",\n  \"path\",\n  \"patience\",\n  \"patient\",\n  \"patio\",\n  \"patriarch\",\n  \"patriot\",\n  \"patrol\",\n  \"patronage\",\n  \"patronize\",\n  \"pauper\",\n  \"pavement\",\n  \"paver\",\n  \"pavestone\",\n  \"pavilion\",\n  \"paving\",\n  \"pawing\",\n  \"payable\",\n  \"payback\",\n  \"paycheck\",\n  \"payday\",\n  \"payee\",\n  \"payer\",\n  \"paying\",\n  \"payment\",\n  \"payphone\",\n  \"payroll\",\n  \"pebble\",\n  \"pebbly\",\n  \"pecan\",\n  \"pectin\",\n  \"peculiar\",\n  \"peddling\",\n  \"pediatric\",\n  \"pedicure\",\n  \"pedigree\",\n  \"pedometer\",\n  \"pegboard\",\n  \"pelican\",\n  \"pellet\",\n  \"pelt\",\n  \"pelvis\",\n  \"penalize\",\n  \"penalty\",\n  \"pencil\",\n  \"pendant\",\n  \"pending\",\n  \"penholder\",\n  \"penknife\",\n  \"pennant\",\n  \"penniless\",\n  \"penny\",\n  \"penpal\",\n  \"pension\",\n  \"pentagon\",\n  \"pentagram\",\n  \"pep\",\n  \"perceive\",\n  \"percent\",\n  \"perch\",\n  \"percolate\",\n  \"perennial\",\n  \"perfected\",\n  \"perfectly\",\n  \"perfume\",\n  \"periscope\",\n  \"perish\",\n  \"perjurer\",\n  \"perjury\",\n  \"perkiness\",\n  \"perky\",\n  \"perm\",\n  \"peroxide\",\n  \"perpetual\",\n  \"perplexed\",\n  \"persecute\",\n  \"persevere\",\n  \"persuaded\",\n  \"persuader\",\n  \"pesky\",\n  \"peso\",\n  \"pessimism\",\n  \"pessimist\",\n  \"pester\",\n  \"pesticide\",\n  \"petal\",\n  \"petite\",\n  \"petition\",\n  \"petri\",\n  \"petroleum\",\n  \"petted\",\n  \"petticoat\",\n  \"pettiness\",\n  \"petty\",\n  \"petunia\",\n  \"phantom\",\n  \"phobia\",\n  \"phoenix\",\n  \"phonebook\",\n  \"phoney\",\n  \"phonics\",\n  \"phoniness\",\n  \"phony\",\n  \"phosphate\",\n  \"photo\",\n  \"phrase\",\n  \"phrasing\",\n  \"placard\",\n  \"placate\",\n  \"placidly\",\n  \"plank\",\n  \"planner\",\n  \"plant\",\n  \"plasma\",\n  \"plaster\",\n  \"plastic\",\n  \"plated\",\n  \"platform\",\n  \"plating\",\n  \"platinum\",\n  \"platonic\",\n  \"platter\",\n  \"platypus\",\n  \"plausible\",\n  \"plausibly\",\n  \"playable\",\n  \"playback\",\n  \"player\",\n  \"playful\",\n  \"playgroup\",\n  \"playhouse\",\n  \"playing\",\n  \"playlist\",\n  \"playmaker\",\n  \"playmate\",\n  \"playoff\",\n  \"playpen\",\n  \"playroom\",\n  \"playset\",\n  \"plaything\",\n  \"playtime\",\n  \"plaza\",\n  \"pleading\",\n  \"pleat\",\n  \"pledge\",\n  \"plentiful\",\n  \"plenty\",\n  \"plethora\",\n  \"plexiglas\",\n  \"pliable\",\n  \"plod\",\n  \"plop\",\n  \"plot\",\n  \"plow\",\n  \"ploy\",\n  \"pluck\",\n  \"plug\",\n  \"plunder\",\n  \"plunging\",\n  \"plural\",\n  \"plus\",\n  \"plutonium\",\n  \"plywood\",\n  \"poach\",\n  \"pod\",\n  \"poem\",\n  \"poet\",\n  \"pogo\",\n  \"pointed\",\n  \"pointer\",\n  \"pointing\",\n  \"pointless\",\n  \"pointy\",\n  \"poise\",\n  \"poison\",\n  \"poker\",\n  \"poking\",\n  \"polar\",\n  \"police\",\n  \"policy\",\n  \"polio\",\n  \"polish\",\n  \"politely\",\n  \"polka\",\n  \"polo\",\n  \"polyester\",\n  \"polygon\",\n  \"polygraph\",\n  \"polymer\",\n  \"poncho\",\n  \"pond\",\n  \"pony\",\n  \"popcorn\",\n  \"pope\",\n  \"poplar\",\n  \"popper\",\n  \"poppy\",\n  \"popsicle\",\n  \"populace\",\n  \"popular\",\n  \"populate\",\n  \"porcupine\",\n  \"pork\",\n  \"porous\",\n  \"porridge\",\n  \"portable\",\n  \"portal\",\n  \"portfolio\",\n  \"porthole\",\n  \"portion\",\n  \"portly\",\n  \"portside\",\n  \"poser\",\n  \"posh\",\n  \"posing\",\n  \"possible\",\n  \"possibly\",\n  \"possum\",\n  \"postage\",\n  \"postal\",\n  \"postbox\",\n  \"postcard\",\n  \"posted\",\n  \"poster\",\n  \"posting\",\n  \"postnasal\",\n  \"posture\",\n  \"postwar\",\n  \"pouch\",\n  \"pounce\",\n  \"pouncing\",\n  \"pound\",\n  \"pouring\",\n  \"pout\",\n  \"powdered\",\n  \"powdering\",\n  \"powdery\",\n  \"power\",\n  \"powwow\",\n  \"pox\",\n  \"praising\",\n  \"prance\",\n  \"prancing\",\n  \"pranker\",\n  \"prankish\",\n  \"prankster\",\n  \"prayer\",\n  \"praying\",\n  \"preacher\",\n  \"preaching\",\n  \"preachy\",\n  \"preamble\",\n  \"precinct\",\n  \"precise\",\n  \"precision\",\n  \"precook\",\n  \"precut\",\n  \"predator\",\n  \"predefine\",\n  \"predict\",\n  \"preface\",\n  \"prefix\",\n  \"preflight\",\n  \"preformed\",\n  \"pregame\",\n  \"pregnancy\",\n  \"pregnant\",\n  \"preheated\",\n  \"prelaunch\",\n  \"prelaw\",\n  \"prelude\",\n  \"premiere\",\n  \"premises\",\n  \"premium\",\n  \"prenatal\",\n  \"preoccupy\",\n  \"preorder\",\n  \"prepaid\",\n  \"prepay\",\n  \"preplan\",\n  \"preppy\",\n  \"preschool\",\n  \"prescribe\",\n  \"preseason\",\n  \"preset\",\n  \"preshow\",\n  \"president\",\n  \"presoak\",\n  \"press\",\n  \"presume\",\n  \"presuming\",\n  \"preteen\",\n  \"pretended\",\n  \"pretender\",\n  \"pretense\",\n  \"pretext\",\n  \"pretty\",\n  \"pretzel\",\n  \"prevail\",\n  \"prevalent\",\n  \"prevent\",\n  \"preview\",\n  \"previous\",\n  \"prewar\",\n  \"prewashed\",\n  \"prideful\",\n  \"pried\",\n  \"primal\",\n  \"primarily\",\n  \"primary\",\n  \"primate\",\n  \"primer\",\n  \"primp\",\n  \"princess\",\n  \"print\",\n  \"prior\",\n  \"prism\",\n  \"prison\",\n  \"prissy\",\n  \"pristine\",\n  \"privacy\",\n  \"private\",\n  \"privatize\",\n  \"prize\",\n  \"proactive\",\n  \"probable\",\n  \"probably\",\n  \"probation\",\n  \"probe\",\n  \"probing\",\n  \"probiotic\",\n  \"problem\",\n  \"procedure\",\n  \"process\",\n  \"proclaim\",\n  \"procreate\",\n  \"procurer\",\n  \"prodigal\",\n  \"prodigy\",\n  \"produce\",\n  \"product\",\n  \"profane\",\n  \"profanity\",\n  \"professed\",\n  \"professor\",\n  \"profile\",\n  \"profound\",\n  \"profusely\",\n  \"progeny\",\n  \"prognosis\",\n  \"program\",\n  \"progress\",\n  \"projector\",\n  \"prologue\",\n  \"prolonged\",\n  \"promenade\",\n  \"prominent\",\n  \"promoter\",\n  \"promotion\",\n  \"prompter\",\n  \"promptly\",\n  \"prone\",\n  \"prong\",\n  \"pronounce\",\n  \"pronto\",\n  \"proofing\",\n  \"proofread\",\n  \"proofs\",\n  \"propeller\",\n  \"properly\",\n  \"property\",\n  \"proponent\",\n  \"proposal\",\n  \"propose\",\n  \"props\",\n  \"prorate\",\n  \"protector\",\n  \"protegee\",\n  \"proton\",\n  \"prototype\",\n  \"protozoan\",\n  \"protract\",\n  \"protrude\",\n  \"proud\",\n  \"provable\",\n  \"proved\",\n  \"proven\",\n  \"provided\",\n  \"provider\",\n  \"providing\",\n  \"province\",\n  \"proving\",\n  \"provoke\",\n  \"provoking\",\n  \"provolone\",\n  \"prowess\",\n  \"prowler\",\n  \"prowling\",\n  \"proximity\",\n  \"proxy\",\n  \"prozac\",\n  \"prude\",\n  \"prudishly\",\n  \"prune\",\n  \"pruning\",\n  \"pry\",\n  \"psychic\",\n  \"public\",\n  \"publisher\",\n  \"pucker\",\n  \"pueblo\",\n  \"pug\",\n  \"pull\",\n  \"pulmonary\",\n  \"pulp\",\n  \"pulsate\",\n  \"pulse\",\n  \"pulverize\",\n  \"puma\",\n  \"pumice\",\n  \"pummel\",\n  \"punch\",\n  \"punctual\",\n  \"punctuate\",\n  \"punctured\",\n  \"pungent\",\n  \"punisher\",\n  \"punk\",\n  \"pupil\",\n  \"puppet\",\n  \"puppy\",\n  \"purchase\",\n  \"pureblood\",\n  \"purebred\",\n  \"purely\",\n  \"pureness\",\n  \"purgatory\",\n  \"purge\",\n  \"purging\",\n  \"purifier\",\n  \"purify\",\n  \"purist\",\n  \"puritan\",\n  \"purity\",\n  \"purple\",\n  \"purplish\",\n  \"purposely\",\n  \"purr\",\n  \"purse\",\n  \"pursuable\",\n  \"pursuant\",\n  \"pursuit\",\n  \"purveyor\",\n  \"pushcart\",\n  \"pushchair\",\n  \"pusher\",\n  \"pushiness\",\n  \"pushing\",\n  \"pushover\",\n  \"pushpin\",\n  \"pushup\",\n  \"pushy\",\n  \"putdown\",\n  \"putt\",\n  \"puzzle\",\n  \"puzzling\",\n  \"pyramid\",\n  \"pyromania\",\n  \"python\",\n  \"quack\",\n  \"quadrant\",\n  \"quail\",\n  \"quaintly\",\n  \"quake\",\n  \"quaking\",\n  \"qualified\",\n  \"qualifier\",\n  \"qualify\",\n  \"quality\",\n  \"qualm\",\n  \"quantum\",\n  \"quarrel\",\n  \"quarry\",\n  \"quartered\",\n  \"quarterly\",\n  \"quarters\",\n  \"quartet\",\n  \"quench\",\n  \"query\",\n  \"quicken\",\n  \"quickly\",\n  \"quickness\",\n  \"quicksand\",\n  \"quickstep\",\n  \"quiet\",\n  \"quill\",\n  \"quilt\",\n  \"quintet\",\n  \"quintuple\",\n  \"quirk\",\n  \"quit\",\n  \"quiver\",\n  \"quizzical\",\n  \"quotable\",\n  \"quotation\",\n  \"quote\",\n  \"rabid\",\n  \"race\",\n  \"racing\",\n  \"racism\",\n  \"rack\",\n  \"racoon\",\n  \"radar\",\n  \"radial\",\n  \"radiance\",\n  \"radiantly\",\n  \"radiated\",\n  \"radiation\",\n  \"radiator\",\n  \"radio\",\n  \"radish\",\n  \"raffle\",\n  \"raft\",\n  \"rage\",\n  \"ragged\",\n  \"raging\",\n  \"ragweed\",\n  \"raider\",\n  \"railcar\",\n  \"railing\",\n  \"railroad\",\n  \"railway\",\n  \"raisin\",\n  \"rake\",\n  \"raking\",\n  \"rally\",\n  \"ramble\",\n  \"rambling\",\n  \"ramp\",\n  \"ramrod\",\n  \"ranch\",\n  \"rancidity\",\n  \"random\",\n  \"ranged\",\n  \"ranger\",\n  \"ranging\",\n  \"ranked\",\n  \"ranking\",\n  \"ransack\",\n  \"ranting\",\n  \"rants\",\n  \"rare\",\n  \"rarity\",\n  \"rascal\",\n  \"rash\",\n  \"rasping\",\n  \"ravage\",\n  \"raven\",\n  \"ravine\",\n  \"raving\",\n  \"ravioli\",\n  \"ravishing\",\n  \"reabsorb\",\n  \"reach\",\n  \"reacquire\",\n  \"reaction\",\n  \"reactive\",\n  \"reactor\",\n  \"reaffirm\",\n  \"ream\",\n  \"reanalyze\",\n  \"reappear\",\n  \"reapply\",\n  \"reappoint\",\n  \"reapprove\",\n  \"rearrange\",\n  \"rearview\",\n  \"reason\",\n  \"reassign\",\n  \"reassure\",\n  \"reattach\",\n  \"reawake\",\n  \"rebalance\",\n  \"rebate\",\n  \"rebel\",\n  \"rebirth\",\n  \"reboot\",\n  \"reborn\",\n  \"rebound\",\n  \"rebuff\",\n  \"rebuild\",\n  \"rebuilt\",\n  \"reburial\",\n  \"rebuttal\",\n  \"recall\",\n  \"recant\",\n  \"recapture\",\n  \"recast\",\n  \"recede\",\n  \"recent\",\n  \"recess\",\n  \"recharger\",\n  \"recipient\",\n  \"recital\",\n  \"recite\",\n  \"reckless\",\n  \"reclaim\",\n  \"recliner\",\n  \"reclining\",\n  \"recluse\",\n  \"reclusive\",\n  \"recognize\",\n  \"recoil\",\n  \"recollect\",\n  \"recolor\",\n  \"reconcile\",\n  \"reconfirm\",\n  \"reconvene\",\n  \"recopy\",\n  \"record\",\n  \"recount\",\n  \"recoup\",\n  \"recovery\",\n  \"recreate\",\n  \"rectal\",\n  \"rectangle\",\n  \"rectified\",\n  \"rectify\",\n  \"recycled\",\n  \"recycler\",\n  \"recycling\",\n  \"reemerge\",\n  \"reenact\",\n  \"reenter\",\n  \"reentry\",\n  \"reexamine\",\n  \"referable\",\n  \"referee\",\n  \"reference\",\n  \"refill\",\n  \"refinance\",\n  \"refined\",\n  \"refinery\",\n  \"refining\",\n  \"refinish\",\n  \"reflected\",\n  \"reflector\",\n  \"reflex\",\n  \"reflux\",\n  \"refocus\",\n  \"refold\",\n  \"reforest\",\n  \"reformat\",\n  \"reformed\",\n  \"reformer\",\n  \"reformist\",\n  \"refract\",\n  \"refrain\",\n  \"refreeze\",\n  \"refresh\",\n  \"refried\",\n  \"refueling\",\n  \"refund\",\n  \"refurbish\",\n  \"refurnish\",\n  \"refusal\",\n  \"refuse\",\n  \"refusing\",\n  \"refutable\",\n  \"refute\",\n  \"regain\",\n  \"regalia\",\n  \"regally\",\n  \"reggae\",\n  \"regime\",\n  \"region\",\n  \"register\",\n  \"registrar\",\n  \"registry\",\n  \"regress\",\n  \"regretful\",\n  \"regroup\",\n  \"regular\",\n  \"regulate\",\n  \"regulator\",\n  \"rehab\",\n  \"reheat\",\n  \"rehire\",\n  \"rehydrate\",\n  \"reimburse\",\n  \"reissue\",\n  \"reiterate\",\n  \"rejoice\",\n  \"rejoicing\",\n  \"rejoin\",\n  \"rekindle\",\n  \"relapse\",\n  \"relapsing\",\n  \"relatable\",\n  \"related\",\n  \"relation\",\n  \"relative\",\n  \"relax\",\n  \"relay\",\n  \"relearn\",\n  \"release\",\n  \"relenting\",\n  \"reliable\",\n  \"reliably\",\n  \"reliance\",\n  \"reliant\",\n  \"relic\",\n  \"relieve\",\n  \"relieving\",\n  \"relight\",\n  \"relish\",\n  \"relive\",\n  \"reload\",\n  \"relocate\",\n  \"relock\",\n  \"reluctant\",\n  \"rely\",\n  \"remake\",\n  \"remark\",\n  \"remarry\",\n  \"rematch\",\n  \"remedial\",\n  \"remedy\",\n  \"remember\",\n  \"reminder\",\n  \"remindful\",\n  \"remission\",\n  \"remix\",\n  \"remnant\",\n  \"remodeler\",\n  \"remold\",\n  \"remorse\",\n  \"remote\",\n  \"removable\",\n  \"removal\",\n  \"removed\",\n  \"remover\",\n  \"removing\",\n  \"rename\",\n  \"renderer\",\n  \"rendering\",\n  \"rendition\",\n  \"renegade\",\n  \"renewable\",\n  \"renewably\",\n  \"renewal\",\n  \"renewed\",\n  \"renounce\",\n  \"renovate\",\n  \"renovator\",\n  \"rentable\",\n  \"rental\",\n  \"rented\",\n  \"renter\",\n  \"reoccupy\",\n  \"reoccur\",\n  \"reopen\",\n  \"reorder\",\n  \"repackage\",\n  \"repacking\",\n  \"repaint\",\n  \"repair\",\n  \"repave\",\n  \"repaying\",\n  \"repayment\",\n  \"repeal\",\n  \"repeated\",\n  \"repeater\",\n  \"repent\",\n  \"rephrase\",\n  \"replace\",\n  \"replay\",\n  \"replica\",\n  \"reply\",\n  \"reporter\",\n  \"repose\",\n  \"repossess\",\n  \"repost\",\n  \"repressed\",\n  \"reprimand\",\n  \"reprint\",\n  \"reprise\",\n  \"reproach\",\n  \"reprocess\",\n  \"reproduce\",\n  \"reprogram\",\n  \"reps\",\n  \"reptile\",\n  \"reptilian\",\n  \"repugnant\",\n  \"repulsion\",\n  \"repulsive\",\n  \"repurpose\",\n  \"reputable\",\n  \"reputably\",\n  \"request\",\n  \"require\",\n  \"requisite\",\n  \"reroute\",\n  \"rerun\",\n  \"resale\",\n  \"resample\",\n  \"rescuer\",\n  \"reseal\",\n  \"research\",\n  \"reselect\",\n  \"reseller\",\n  \"resemble\",\n  \"resend\",\n  \"resent\",\n  \"reset\",\n  \"reshape\",\n  \"reshoot\",\n  \"reshuffle\",\n  \"residence\",\n  \"residency\",\n  \"resident\",\n  \"residual\",\n  \"residue\",\n  \"resigned\",\n  \"resilient\",\n  \"resistant\",\n  \"resisting\",\n  \"resize\",\n  \"resolute\",\n  \"resolved\",\n  \"resonant\",\n  \"resonate\",\n  \"resort\",\n  \"resource\",\n  \"respect\",\n  \"resubmit\",\n  \"result\",\n  \"resume\",\n  \"resupply\",\n  \"resurface\",\n  \"resurrect\",\n  \"retail\",\n  \"retainer\",\n  \"retaining\",\n  \"retake\",\n  \"retaliate\",\n  \"retention\",\n  \"rethink\",\n  \"retinal\",\n  \"retired\",\n  \"retiree\",\n  \"retiring\",\n  \"retold\",\n  \"retool\",\n  \"retorted\",\n  \"retouch\",\n  \"retrace\",\n  \"retract\",\n  \"retrain\",\n  \"retread\",\n  \"retreat\",\n  \"retrial\",\n  \"retrieval\",\n  \"retriever\",\n  \"retry\",\n  \"return\",\n  \"retying\",\n  \"retype\",\n  \"reunion\",\n  \"reunite\",\n  \"reusable\",\n  \"reuse\",\n  \"reveal\",\n  \"reveler\",\n  \"revenge\",\n  \"revenue\",\n  \"reverb\",\n  \"revered\",\n  \"reverence\",\n  \"reverend\",\n  \"reversal\",\n  \"reverse\",\n  \"reversing\",\n  \"reversion\",\n  \"revert\",\n  \"revisable\",\n  \"revise\",\n  \"revision\",\n  \"revisit\",\n  \"revivable\",\n  \"revival\",\n  \"reviver\",\n  \"reviving\",\n  \"revocable\",\n  \"revoke\",\n  \"revolt\",\n  \"revolver\",\n  \"revolving\",\n  \"reward\",\n  \"rewash\",\n  \"rewind\",\n  \"rewire\",\n  \"reword\",\n  \"rework\",\n  \"rewrap\",\n  \"rewrite\",\n  \"rhyme\",\n  \"ribbon\",\n  \"ribcage\",\n  \"rice\",\n  \"riches\",\n  \"richly\",\n  \"richness\",\n  \"rickety\",\n  \"ricotta\",\n  \"riddance\",\n  \"ridden\",\n  \"ride\",\n  \"riding\",\n  \"rifling\",\n  \"rift\",\n  \"rigging\",\n  \"rigid\",\n  \"rigor\",\n  \"rimless\",\n  \"rimmed\",\n  \"rind\",\n  \"rink\",\n  \"rinse\",\n  \"rinsing\",\n  \"riot\",\n  \"ripcord\",\n  \"ripeness\",\n  \"ripening\",\n  \"ripping\",\n  \"ripple\",\n  \"rippling\",\n  \"riptide\",\n  \"rise\",\n  \"rising\",\n  \"risk\",\n  \"risotto\",\n  \"ritalin\",\n  \"ritzy\",\n  \"rival\",\n  \"riverbank\",\n  \"riverbed\",\n  \"riverboat\",\n  \"riverside\",\n  \"riveter\",\n  \"riveting\",\n  \"roamer\",\n  \"roaming\",\n  \"roast\",\n  \"robbing\",\n  \"robe\",\n  \"robin\",\n  \"robotics\",\n  \"robust\",\n  \"rockband\",\n  \"rocker\",\n  \"rocket\",\n  \"rockfish\",\n  \"rockiness\",\n  \"rocking\",\n  \"rocklike\",\n  \"rockslide\",\n  \"rockstar\",\n  \"rocky\",\n  \"rogue\",\n  \"roman\",\n  \"romp\",\n  \"rope\",\n  \"roping\",\n  \"roster\",\n  \"rosy\",\n  \"rotten\",\n  \"rotting\",\n  \"rotunda\",\n  \"roulette\",\n  \"rounding\",\n  \"roundish\",\n  \"roundness\",\n  \"roundup\",\n  \"roundworm\",\n  \"routine\",\n  \"routing\",\n  \"rover\",\n  \"roving\",\n  \"royal\",\n  \"rubbed\",\n  \"rubber\",\n  \"rubbing\",\n  \"rubble\",\n  \"rubdown\",\n  \"ruby\",\n  \"ruckus\",\n  \"rudder\",\n  \"rug\",\n  \"ruined\",\n  \"rule\",\n  \"rumble\",\n  \"rumbling\",\n  \"rummage\",\n  \"rumor\",\n  \"runaround\",\n  \"rundown\",\n  \"runner\",\n  \"running\",\n  \"runny\",\n  \"runt\",\n  \"runway\",\n  \"rupture\",\n  \"rural\",\n  \"ruse\",\n  \"rush\",\n  \"rust\",\n  \"rut\",\n  \"sabbath\",\n  \"sabotage\",\n  \"sacrament\",\n  \"sacred\",\n  \"sacrifice\",\n  \"sadden\",\n  \"saddlebag\",\n  \"saddled\",\n  \"saddling\",\n  \"sadly\",\n  \"sadness\",\n  \"safari\",\n  \"safeguard\",\n  \"safehouse\",\n  \"safely\",\n  \"safeness\",\n  \"saffron\",\n  \"saga\",\n  \"sage\",\n  \"sagging\",\n  \"saggy\",\n  \"said\",\n  \"saint\",\n  \"sake\",\n  \"salad\",\n  \"salami\",\n  \"salaried\",\n  \"salary\",\n  \"saline\",\n  \"salon\",\n  \"saloon\",\n  \"salsa\",\n  \"salt\",\n  \"salutary\",\n  \"salute\",\n  \"salvage\",\n  \"salvaging\",\n  \"salvation\",\n  \"same\",\n  \"sample\",\n  \"sampling\",\n  \"sanction\",\n  \"sanctity\",\n  \"sanctuary\",\n  \"sandal\",\n  \"sandbag\",\n  \"sandbank\",\n  \"sandbar\",\n  \"sandblast\",\n  \"sandbox\",\n  \"sanded\",\n  \"sandfish\",\n  \"sanding\",\n  \"sandlot\",\n  \"sandpaper\",\n  \"sandpit\",\n  \"sandstone\",\n  \"sandstorm\",\n  \"sandworm\",\n  \"sandy\",\n  \"sanitary\",\n  \"sanitizer\",\n  \"sank\",\n  \"santa\",\n  \"sapling\",\n  \"sappiness\",\n  \"sappy\",\n  \"sarcasm\",\n  \"sarcastic\",\n  \"sardine\",\n  \"sash\",\n  \"sasquatch\",\n  \"sassy\",\n  \"satchel\",\n  \"satiable\",\n  \"satin\",\n  \"satirical\",\n  \"satisfied\",\n  \"satisfy\",\n  \"saturate\",\n  \"saturday\",\n  \"sauciness\",\n  \"saucy\",\n  \"sauna\",\n  \"savage\",\n  \"savanna\",\n  \"saved\",\n  \"savings\",\n  \"savior\",\n  \"savor\",\n  \"saxophone\",\n  \"say\",\n  \"scabbed\",\n  \"scabby\",\n  \"scalded\",\n  \"scalding\",\n  \"scale\",\n  \"scaling\",\n  \"scallion\",\n  \"scallop\",\n  \"scalping\",\n  \"scam\",\n  \"scandal\",\n  \"scanner\",\n  \"scanning\",\n  \"scant\",\n  \"scapegoat\",\n  \"scarce\",\n  \"scarcity\",\n  \"scarecrow\",\n  \"scared\",\n  \"scarf\",\n  \"scarily\",\n  \"scariness\",\n  \"scarring\",\n  \"scary\",\n  \"scavenger\",\n  \"scenic\",\n  \"schedule\",\n  \"schematic\",\n  \"scheme\",\n  \"scheming\",\n  \"schilling\",\n  \"schnapps\",\n  \"scholar\",\n  \"science\",\n  \"scientist\",\n  \"scion\",\n  \"scoff\",\n  \"scolding\",\n  \"scone\",\n  \"scoop\",\n  \"scooter\",\n  \"scope\",\n  \"scorch\",\n  \"scorebook\",\n  \"scorecard\",\n  \"scored\",\n  \"scoreless\",\n  \"scorer\",\n  \"scoring\",\n  \"scorn\",\n  \"scorpion\",\n  \"scotch\",\n  \"scoundrel\",\n  \"scoured\",\n  \"scouring\",\n  \"scouting\",\n  \"scouts\",\n  \"scowling\",\n  \"scrabble\",\n  \"scraggly\",\n  \"scrambled\",\n  \"scrambler\",\n  \"scrap\",\n  \"scratch\",\n  \"scrawny\",\n  \"screen\",\n  \"scribble\",\n  \"scribe\",\n  \"scribing\",\n  \"scrimmage\",\n  \"script\",\n  \"scroll\",\n  \"scrooge\",\n  \"scrounger\",\n  \"scrubbed\",\n  \"scrubber\",\n  \"scruffy\",\n  \"scrunch\",\n  \"scrutiny\",\n  \"scuba\",\n  \"scuff\",\n  \"sculptor\",\n  \"sculpture\",\n  \"scurvy\",\n  \"scuttle\",\n  \"secluded\",\n  \"secluding\",\n  \"seclusion\",\n  \"second\",\n  \"secrecy\",\n  \"secret\",\n  \"sectional\",\n  \"sector\",\n  \"secular\",\n  \"securely\",\n  \"security\",\n  \"sedan\",\n  \"sedate\",\n  \"sedation\",\n  \"sedative\",\n  \"sediment\",\n  \"seduce\",\n  \"seducing\",\n  \"segment\",\n  \"seismic\",\n  \"seizing\",\n  \"seldom\",\n  \"selected\",\n  \"selection\",\n  \"selective\",\n  \"selector\",\n  \"self\",\n  \"seltzer\",\n  \"semantic\",\n  \"semester\",\n  \"semicolon\",\n  \"semifinal\",\n  \"seminar\",\n  \"semisoft\",\n  \"semisweet\",\n  \"senate\",\n  \"senator\",\n  \"send\",\n  \"senior\",\n  \"senorita\",\n  \"sensation\",\n  \"sensitive\",\n  \"sensitize\",\n  \"sensually\",\n  \"sensuous\",\n  \"sepia\",\n  \"september\",\n  \"septic\",\n  \"septum\",\n  \"sequel\",\n  \"sequence\",\n  \"sequester\",\n  \"series\",\n  \"sermon\",\n  \"serotonin\",\n  \"serpent\",\n  \"serrated\",\n  \"serve\",\n  \"service\",\n  \"serving\",\n  \"sesame\",\n  \"sessions\",\n  \"setback\",\n  \"setting\",\n  \"settle\",\n  \"settling\",\n  \"setup\",\n  \"sevenfold\",\n  \"seventeen\",\n  \"seventh\",\n  \"seventy\",\n  \"severity\",\n  \"shabby\",\n  \"shack\",\n  \"shaded\",\n  \"shadily\",\n  \"shadiness\",\n  \"shading\",\n  \"shadow\",\n  \"shady\",\n  \"shaft\",\n  \"shakable\",\n  \"shakily\",\n  \"shakiness\",\n  \"shaking\",\n  \"shaky\",\n  \"shale\",\n  \"shallot\",\n  \"shallow\",\n  \"shame\",\n  \"shampoo\",\n  \"shamrock\",\n  \"shank\",\n  \"shanty\",\n  \"shape\",\n  \"shaping\",\n  \"share\",\n  \"sharpener\",\n  \"sharper\",\n  \"sharpie\",\n  \"sharply\",\n  \"sharpness\",\n  \"shawl\",\n  \"sheath\",\n  \"shed\",\n  \"sheep\",\n  \"sheet\",\n  \"shelf\",\n  \"shell\",\n  \"shelter\",\n  \"shelve\",\n  \"shelving\",\n  \"sherry\",\n  \"shield\",\n  \"shifter\",\n  \"shifting\",\n  \"shiftless\",\n  \"shifty\",\n  \"shimmer\",\n  \"shimmy\",\n  \"shindig\",\n  \"shine\",\n  \"shingle\",\n  \"shininess\",\n  \"shining\",\n  \"shiny\",\n  \"ship\",\n  \"shirt\",\n  \"shivering\",\n  \"shock\",\n  \"shone\",\n  \"shoplift\",\n  \"shopper\",\n  \"shopping\",\n  \"shoptalk\",\n  \"shore\",\n  \"shortage\",\n  \"shortcake\",\n  \"shortcut\",\n  \"shorten\",\n  \"shorter\",\n  \"shorthand\",\n  \"shortlist\",\n  \"shortly\",\n  \"shortness\",\n  \"shorts\",\n  \"shortwave\",\n  \"shorty\",\n  \"shout\",\n  \"shove\",\n  \"showbiz\",\n  \"showcase\",\n  \"showdown\",\n  \"shower\",\n  \"showgirl\",\n  \"showing\",\n  \"showman\",\n  \"shown\",\n  \"showoff\",\n  \"showpiece\",\n  \"showplace\",\n  \"showroom\",\n  \"showy\",\n  \"shrank\",\n  \"shrapnel\",\n  \"shredder\",\n  \"shredding\",\n  \"shrewdly\",\n  \"shriek\",\n  \"shrill\",\n  \"shrimp\",\n  \"shrine\",\n  \"shrink\",\n  \"shrivel\",\n  \"shrouded\",\n  \"shrubbery\",\n  \"shrubs\",\n  \"shrug\",\n  \"shrunk\",\n  \"shucking\",\n  \"shudder\",\n  \"shuffle\",\n  \"shuffling\",\n  \"shun\",\n  \"shush\",\n  \"shut\",\n  \"shy\",\n  \"siamese\",\n  \"siberian\",\n  \"sibling\",\n  \"siding\",\n  \"sierra\",\n  \"siesta\",\n  \"sift\",\n  \"sighing\",\n  \"silenced\",\n  \"silencer\",\n  \"silent\",\n  \"silica\",\n  \"silicon\",\n  \"silk\",\n  \"silliness\",\n  \"silly\",\n  \"silo\",\n  \"silt\",\n  \"silver\",\n  \"similarly\",\n  \"simile\",\n  \"simmering\",\n  \"simple\",\n  \"simplify\",\n  \"simply\",\n  \"sincere\",\n  \"sincerity\",\n  \"singer\",\n  \"singing\",\n  \"single\",\n  \"singular\",\n  \"sinister\",\n  \"sinless\",\n  \"sinner\",\n  \"sinuous\",\n  \"sip\",\n  \"siren\",\n  \"sister\",\n  \"sitcom\",\n  \"sitter\",\n  \"sitting\",\n  \"situated\",\n  \"situation\",\n  \"sixfold\",\n  \"sixteen\",\n  \"sixth\",\n  \"sixties\",\n  \"sixtieth\",\n  \"sixtyfold\",\n  \"sizable\",\n  \"sizably\",\n  \"size\",\n  \"sizing\",\n  \"sizzle\",\n  \"sizzling\",\n  \"skater\",\n  \"skating\",\n  \"skedaddle\",\n  \"skeletal\",\n  \"skeleton\",\n  \"skeptic\",\n  \"sketch\",\n  \"skewed\",\n  \"skewer\",\n  \"skid\",\n  \"skied\",\n  \"skier\",\n  \"skies\",\n  \"skiing\",\n  \"skilled\",\n  \"skillet\",\n  \"skillful\",\n  \"skimmed\",\n  \"skimmer\",\n  \"skimming\",\n  \"skimpily\",\n  \"skincare\",\n  \"skinhead\",\n  \"skinless\",\n  \"skinning\",\n  \"skinny\",\n  \"skintight\",\n  \"skipper\",\n  \"skipping\",\n  \"skirmish\",\n  \"skirt\",\n  \"skittle\",\n  \"skydiver\",\n  \"skylight\",\n  \"skyline\",\n  \"skype\",\n  \"skyrocket\",\n  \"skyward\",\n  \"slab\",\n  \"slacked\",\n  \"slacker\",\n  \"slacking\",\n  \"slackness\",\n  \"slacks\",\n  \"slain\",\n  \"slam\",\n  \"slander\",\n  \"slang\",\n  \"slapping\",\n  \"slapstick\",\n  \"slashed\",\n  \"slashing\",\n  \"slate\",\n  \"slather\",\n  \"slaw\",\n  \"sled\",\n  \"sleek\",\n  \"sleep\",\n  \"sleet\",\n  \"sleeve\",\n  \"slept\",\n  \"sliceable\",\n  \"sliced\",\n  \"slicer\",\n  \"slicing\",\n  \"slick\",\n  \"slider\",\n  \"slideshow\",\n  \"sliding\",\n  \"slighted\",\n  \"slighting\",\n  \"slightly\",\n  \"slimness\",\n  \"slimy\",\n  \"slinging\",\n  \"slingshot\",\n  \"slinky\",\n  \"slip\",\n  \"slit\",\n  \"sliver\",\n  \"slobbery\",\n  \"slogan\",\n  \"sloped\",\n  \"sloping\",\n  \"sloppily\",\n  \"sloppy\",\n  \"slot\",\n  \"slouching\",\n  \"slouchy\",\n  \"sludge\",\n  \"slug\",\n  \"slum\",\n  \"slurp\",\n  \"slush\",\n  \"sly\",\n  \"small\",\n  \"smartly\",\n  \"smartness\",\n  \"smasher\",\n  \"smashing\",\n  \"smashup\",\n  \"smell\",\n  \"smelting\",\n  \"smile\",\n  \"smilingly\",\n  \"smirk\",\n  \"smite\",\n  \"smith\",\n  \"smitten\",\n  \"smock\",\n  \"smog\",\n  \"smoked\",\n  \"smokeless\",\n  \"smokiness\",\n  \"smoking\",\n  \"smoky\",\n  \"smolder\",\n  \"smooth\",\n  \"smother\",\n  \"smudge\",\n  \"smudgy\",\n  \"smuggler\",\n  \"smuggling\",\n  \"smugly\",\n  \"smugness\",\n  \"snack\",\n  \"snagged\",\n  \"snaking\",\n  \"snap\",\n  \"snare\",\n  \"snarl\",\n  \"snazzy\",\n  \"sneak\",\n  \"sneer\",\n  \"sneeze\",\n  \"sneezing\",\n  \"snide\",\n  \"sniff\",\n  \"snippet\",\n  \"snipping\",\n  \"snitch\",\n  \"snooper\",\n  \"snooze\",\n  \"snore\",\n  \"snoring\",\n  \"snorkel\",\n  \"snort\",\n  \"snout\",\n  \"snowbird\",\n  \"snowboard\",\n  \"snowbound\",\n  \"snowcap\",\n  \"snowdrift\",\n  \"snowdrop\",\n  \"snowfall\",\n  \"snowfield\",\n  \"snowflake\",\n  \"snowiness\",\n  \"snowless\",\n  \"snowman\",\n  \"snowplow\",\n  \"snowshoe\",\n  \"snowstorm\",\n  \"snowsuit\",\n  \"snowy\",\n  \"snub\",\n  \"snuff\",\n  \"snuggle\",\n  \"snugly\",\n  \"snugness\",\n  \"speak\",\n  \"spearfish\",\n  \"spearhead\",\n  \"spearman\",\n  \"spearmint\",\n  \"species\",\n  \"specimen\",\n  \"specked\",\n  \"speckled\",\n  \"specks\",\n  \"spectacle\",\n  \"spectator\",\n  \"spectrum\",\n  \"speculate\",\n  \"speech\",\n  \"speed\",\n  \"spellbind\",\n  \"speller\",\n  \"spelling\",\n  \"spendable\",\n  \"spender\",\n  \"spending\",\n  \"spent\",\n  \"spew\",\n  \"sphere\",\n  \"spherical\",\n  \"sphinx\",\n  \"spider\",\n  \"spied\",\n  \"spiffy\",\n  \"spill\",\n  \"spilt\",\n  \"spinach\",\n  \"spinal\",\n  \"spindle\",\n  \"spinner\",\n  \"spinning\",\n  \"spinout\",\n  \"spinster\",\n  \"spiny\",\n  \"spiral\",\n  \"spirited\",\n  \"spiritism\",\n  \"spirits\",\n  \"spiritual\",\n  \"splashed\",\n  \"splashing\",\n  \"splashy\",\n  \"splatter\",\n  \"spleen\",\n  \"splendid\",\n  \"splendor\",\n  \"splice\",\n  \"splicing\",\n  \"splinter\",\n  \"splotchy\",\n  \"splurge\",\n  \"spoilage\",\n  \"spoiled\",\n  \"spoiler\",\n  \"spoiling\",\n  \"spoils\",\n  \"spoken\",\n  \"spokesman\",\n  \"sponge\",\n  \"spongy\",\n  \"sponsor\",\n  \"spoof\",\n  \"spookily\",\n  \"spooky\",\n  \"spool\",\n  \"spoon\",\n  \"spore\",\n  \"sporting\",\n  \"sports\",\n  \"sporty\",\n  \"spotless\",\n  \"spotlight\",\n  \"spotted\",\n  \"spotter\",\n  \"spotting\",\n  \"spotty\",\n  \"spousal\",\n  \"spouse\",\n  \"spout\",\n  \"sprain\",\n  \"sprang\",\n  \"sprawl\",\n  \"spray\",\n  \"spree\",\n  \"sprig\",\n  \"spring\",\n  \"sprinkled\",\n  \"sprinkler\",\n  \"sprint\",\n  \"sprite\",\n  \"sprout\",\n  \"spruce\",\n  \"sprung\",\n  \"spry\",\n  \"spud\",\n  \"spur\",\n  \"sputter\",\n  \"spyglass\",\n  \"squabble\",\n  \"squad\",\n  \"squall\",\n  \"squander\",\n  \"squash\",\n  \"squatted\",\n  \"squatter\",\n  \"squatting\",\n  \"squeak\",\n  \"squealer\",\n  \"squealing\",\n  \"squeamish\",\n  \"squeegee\",\n  \"squeeze\",\n  \"squeezing\",\n  \"squid\",\n  \"squiggle\",\n  \"squiggly\",\n  \"squint\",\n  \"squire\",\n  \"squirt\",\n  \"squishier\",\n  \"squishy\",\n  \"stability\",\n  \"stabilize\",\n  \"stable\",\n  \"stack\",\n  \"stadium\",\n  \"staff\",\n  \"stage\",\n  \"staging\",\n  \"stagnant\",\n  \"stagnate\",\n  \"stainable\",\n  \"stained\",\n  \"staining\",\n  \"stainless\",\n  \"stalemate\",\n  \"staleness\",\n  \"stalling\",\n  \"stallion\",\n  \"stamina\",\n  \"stammer\",\n  \"stamp\",\n  \"stand\",\n  \"stank\",\n  \"staple\",\n  \"stapling\",\n  \"starboard\",\n  \"starch\",\n  \"stardom\",\n  \"stardust\",\n  \"starfish\",\n  \"stargazer\",\n  \"staring\",\n  \"stark\",\n  \"starless\",\n  \"starlet\",\n  \"starlight\",\n  \"starlit\",\n  \"starring\",\n  \"starry\",\n  \"starship\",\n  \"starter\",\n  \"starting\",\n  \"startle\",\n  \"startling\",\n  \"startup\",\n  \"starved\",\n  \"starving\",\n  \"stash\",\n  \"state\",\n  \"static\",\n  \"statistic\",\n  \"statue\",\n  \"stature\",\n  \"status\",\n  \"statute\",\n  \"statutory\",\n  \"staunch\",\n  \"stays\",\n  \"steadfast\",\n  \"steadier\",\n  \"steadily\",\n  \"steadying\",\n  \"steam\",\n  \"steed\",\n  \"steep\",\n  \"steerable\",\n  \"steering\",\n  \"steersman\",\n  \"stegosaur\",\n  \"stellar\",\n  \"stem\",\n  \"stench\",\n  \"stencil\",\n  \"step\",\n  \"stereo\",\n  \"sterile\",\n  \"sterility\",\n  \"sterilize\",\n  \"sterling\",\n  \"sternness\",\n  \"sternum\",\n  \"stew\",\n  \"stick\",\n  \"stiffen\",\n  \"stiffly\",\n  \"stiffness\",\n  \"stifle\",\n  \"stifling\",\n  \"stillness\",\n  \"stilt\",\n  \"stimulant\",\n  \"stimulate\",\n  \"stimuli\",\n  \"stimulus\",\n  \"stinger\",\n  \"stingily\",\n  \"stinging\",\n  \"stingray\",\n  \"stingy\",\n  \"stinking\",\n  \"stinky\",\n  \"stipend\",\n  \"stipulate\",\n  \"stir\",\n  \"stitch\",\n  \"stock\",\n  \"stoic\",\n  \"stoke\",\n  \"stole\",\n  \"stomp\",\n  \"stonewall\",\n  \"stoneware\",\n  \"stonework\",\n  \"stoning\",\n  \"stony\",\n  \"stood\",\n  \"stooge\",\n  \"stool\",\n  \"stoop\",\n  \"stoplight\",\n  \"stoppable\",\n  \"stoppage\",\n  \"stopped\",\n  \"stopper\",\n  \"stopping\",\n  \"stopwatch\",\n  \"storable\",\n  \"storage\",\n  \"storeroom\",\n  \"storewide\",\n  \"storm\",\n  \"stout\",\n  \"stove\",\n  \"stowaway\",\n  \"stowing\",\n  \"straddle\",\n  \"straggler\",\n  \"strained\",\n  \"strainer\",\n  \"straining\",\n  \"strangely\",\n  \"stranger\",\n  \"strangle\",\n  \"strategic\",\n  \"strategy\",\n  \"stratus\",\n  \"straw\",\n  \"stray\",\n  \"streak\",\n  \"stream\",\n  \"street\",\n  \"strength\",\n  \"strenuous\",\n  \"strep\",\n  \"stress\",\n  \"stretch\",\n  \"strewn\",\n  \"stricken\",\n  \"strict\",\n  \"stride\",\n  \"strife\",\n  \"strike\",\n  \"striking\",\n  \"strive\",\n  \"striving\",\n  \"strobe\",\n  \"strode\",\n  \"stroller\",\n  \"strongbox\",\n  \"strongly\",\n  \"strongman\",\n  \"struck\",\n  \"structure\",\n  \"strudel\",\n  \"struggle\",\n  \"strum\",\n  \"strung\",\n  \"strut\",\n  \"stubbed\",\n  \"stubble\",\n  \"stubbly\",\n  \"stubborn\",\n  \"stucco\",\n  \"stuck\",\n  \"student\",\n  \"studied\",\n  \"studio\",\n  \"study\",\n  \"stuffed\",\n  \"stuffing\",\n  \"stuffy\",\n  \"stumble\",\n  \"stumbling\",\n  \"stump\",\n  \"stung\",\n  \"stunned\",\n  \"stunner\",\n  \"stunning\",\n  \"stunt\",\n  \"stupor\",\n  \"sturdily\",\n  \"sturdy\",\n  \"styling\",\n  \"stylishly\",\n  \"stylist\",\n  \"stylized\",\n  \"stylus\",\n  \"suave\",\n  \"subarctic\",\n  \"subatomic\",\n  \"subdivide\",\n  \"subdued\",\n  \"subduing\",\n  \"subfloor\",\n  \"subgroup\",\n  \"subheader\",\n  \"subject\",\n  \"sublease\",\n  \"sublet\",\n  \"sublevel\",\n  \"sublime\",\n  \"submarine\",\n  \"submerge\",\n  \"submersed\",\n  \"submitter\",\n  \"subpanel\",\n  \"subpar\",\n  \"subplot\",\n  \"subprime\",\n  \"subscribe\",\n  \"subscript\",\n  \"subsector\",\n  \"subside\",\n  \"subsiding\",\n  \"subsidize\",\n  \"subsidy\",\n  \"subsoil\",\n  \"subsonic\",\n  \"substance\",\n  \"subsystem\",\n  \"subtext\",\n  \"subtitle\",\n  \"subtly\",\n  \"subtotal\",\n  \"subtract\",\n  \"subtype\",\n  \"suburb\",\n  \"subway\",\n  \"subwoofer\",\n  \"subzero\",\n  \"succulent\",\n  \"such\",\n  \"suction\",\n  \"sudden\",\n  \"sudoku\",\n  \"suds\",\n  \"sufferer\",\n  \"suffering\",\n  \"suffice\",\n  \"suffix\",\n  \"suffocate\",\n  \"suffrage\",\n  \"sugar\",\n  \"suggest\",\n  \"suing\",\n  \"suitable\",\n  \"suitably\",\n  \"suitcase\",\n  \"suitor\",\n  \"sulfate\",\n  \"sulfide\",\n  \"sulfite\",\n  \"sulfur\",\n  \"sulk\",\n  \"sullen\",\n  \"sulphate\",\n  \"sulphuric\",\n  \"sultry\",\n  \"superbowl\",\n  \"superglue\",\n  \"superhero\",\n  \"superior\",\n  \"superjet\",\n  \"superman\",\n  \"supermom\",\n  \"supernova\",\n  \"supervise\",\n  \"supper\",\n  \"supplier\",\n  \"supply\",\n  \"support\",\n  \"supremacy\",\n  \"supreme\",\n  \"surcharge\",\n  \"surely\",\n  \"sureness\",\n  \"surface\",\n  \"surfacing\",\n  \"surfboard\",\n  \"surfer\",\n  \"surgery\",\n  \"surgical\",\n  \"surging\",\n  \"surname\",\n  \"surpass\",\n  \"surplus\",\n  \"surprise\",\n  \"surreal\",\n  \"surrender\",\n  \"surrogate\",\n  \"surround\",\n  \"survey\",\n  \"survival\",\n  \"survive\",\n  \"surviving\",\n  \"survivor\",\n  \"sushi\",\n  \"suspect\",\n  \"suspend\",\n  \"suspense\",\n  \"sustained\",\n  \"sustainer\",\n  \"swab\",\n  \"swaddling\",\n  \"swagger\",\n  \"swampland\",\n  \"swan\",\n  \"swapping\",\n  \"swarm\",\n  \"sway\",\n  \"swear\",\n  \"sweat\",\n  \"sweep\",\n  \"swell\",\n  \"swept\",\n  \"swerve\",\n  \"swifter\",\n  \"swiftly\",\n  \"swiftness\",\n  \"swimmable\",\n  \"swimmer\",\n  \"swimming\",\n  \"swimsuit\",\n  \"swimwear\",\n  \"swinger\",\n  \"swinging\",\n  \"swipe\",\n  \"swirl\",\n  \"switch\",\n  \"swivel\",\n  \"swizzle\",\n  \"swooned\",\n  \"swoop\",\n  \"swoosh\",\n  \"swore\",\n  \"sworn\",\n  \"swung\",\n  \"sycamore\",\n  \"sympathy\",\n  \"symphonic\",\n  \"symphony\",\n  \"symptom\",\n  \"synapse\",\n  \"syndrome\",\n  \"synergy\",\n  \"synopses\",\n  \"synopsis\",\n  \"synthesis\",\n  \"synthetic\",\n  \"syrup\",\n  \"system\",\n  \"t-shirt\",\n  \"tabasco\",\n  \"tabby\",\n  \"tableful\",\n  \"tables\",\n  \"tablet\",\n  \"tableware\",\n  \"tabloid\",\n  \"tackiness\",\n  \"tacking\",\n  \"tackle\",\n  \"tackling\",\n  \"tacky\",\n  \"taco\",\n  \"tactful\",\n  \"tactical\",\n  \"tactics\",\n  \"tactile\",\n  \"tactless\",\n  \"tadpole\",\n  \"taekwondo\",\n  \"tag\",\n  \"tainted\",\n  \"take\",\n  \"taking\",\n  \"talcum\",\n  \"talisman\",\n  \"tall\",\n  \"talon\",\n  \"tamale\",\n  \"tameness\",\n  \"tamer\",\n  \"tamper\",\n  \"tank\",\n  \"tanned\",\n  \"tannery\",\n  \"tanning\",\n  \"tantrum\",\n  \"tapeless\",\n  \"tapered\",\n  \"tapering\",\n  \"tapestry\",\n  \"tapioca\",\n  \"tapping\",\n  \"taps\",\n  \"tarantula\",\n  \"target\",\n  \"tarmac\",\n  \"tarnish\",\n  \"tarot\",\n  \"tartar\",\n  \"tartly\",\n  \"tartness\",\n  \"task\",\n  \"tassel\",\n  \"taste\",\n  \"tastiness\",\n  \"tasting\",\n  \"tasty\",\n  \"tattered\",\n  \"tattle\",\n  \"tattling\",\n  \"tattoo\",\n  \"taunt\",\n  \"tavern\",\n  \"thank\",\n  \"that\",\n  \"thaw\",\n  \"theater\",\n  \"theatrics\",\n  \"thee\",\n  \"theft\",\n  \"theme\",\n  \"theology\",\n  \"theorize\",\n  \"thermal\",\n  \"thermos\",\n  \"thesaurus\",\n  \"these\",\n  \"thesis\",\n  \"thespian\",\n  \"thicken\",\n  \"thicket\",\n  \"thickness\",\n  \"thieving\",\n  \"thievish\",\n  \"thigh\",\n  \"thimble\",\n  \"thing\",\n  \"think\",\n  \"thinly\",\n  \"thinner\",\n  \"thinness\",\n  \"thinning\",\n  \"thirstily\",\n  \"thirsting\",\n  \"thirsty\",\n  \"thirteen\",\n  \"thirty\",\n  \"thong\",\n  \"thorn\",\n  \"those\",\n  \"thousand\",\n  \"thrash\",\n  \"thread\",\n  \"threaten\",\n  \"threefold\",\n  \"thrift\",\n  \"thrill\",\n  \"thrive\",\n  \"thriving\",\n  \"throat\",\n  \"throbbing\",\n  \"throng\",\n  \"throttle\",\n  \"throwaway\",\n  \"throwback\",\n  \"thrower\",\n  \"throwing\",\n  \"thud\",\n  \"thumb\",\n  \"thumping\",\n  \"thursday\",\n  \"thus\",\n  \"thwarting\",\n  \"thyself\",\n  \"tiara\",\n  \"tibia\",\n  \"tidal\",\n  \"tidbit\",\n  \"tidiness\",\n  \"tidings\",\n  \"tidy\",\n  \"tiger\",\n  \"tighten\",\n  \"tightly\",\n  \"tightness\",\n  \"tightrope\",\n  \"tightwad\",\n  \"tigress\",\n  \"tile\",\n  \"tiling\",\n  \"till\",\n  \"tilt\",\n  \"timid\",\n  \"timing\",\n  \"timothy\",\n  \"tinderbox\",\n  \"tinfoil\",\n  \"tingle\",\n  \"tingling\",\n  \"tingly\",\n  \"tinker\",\n  \"tinkling\",\n  \"tinsel\",\n  \"tinsmith\",\n  \"tint\",\n  \"tinwork\",\n  \"tiny\",\n  \"tipoff\",\n  \"tipped\",\n  \"tipper\",\n  \"tipping\",\n  \"tiptoeing\",\n  \"tiptop\",\n  \"tiring\",\n  \"tissue\",\n  \"trace\",\n  \"tracing\",\n  \"track\",\n  \"traction\",\n  \"tractor\",\n  \"trade\",\n  \"trading\",\n  \"tradition\",\n  \"traffic\",\n  \"tragedy\",\n  \"trailing\",\n  \"trailside\",\n  \"train\",\n  \"traitor\",\n  \"trance\",\n  \"tranquil\",\n  \"transfer\",\n  \"transform\",\n  \"translate\",\n  \"transpire\",\n  \"transport\",\n  \"transpose\",\n  \"trapdoor\",\n  \"trapeze\",\n  \"trapezoid\",\n  \"trapped\",\n  \"trapper\",\n  \"trapping\",\n  \"traps\",\n  \"trash\",\n  \"travel\",\n  \"traverse\",\n  \"travesty\",\n  \"tray\",\n  \"treachery\",\n  \"treading\",\n  \"treadmill\",\n  \"treason\",\n  \"treat\",\n  \"treble\",\n  \"tree\",\n  \"trekker\",\n  \"tremble\",\n  \"trembling\",\n  \"tremor\",\n  \"trench\",\n  \"trend\",\n  \"trespass\",\n  \"triage\",\n  \"trial\",\n  \"triangle\",\n  \"tribesman\",\n  \"tribunal\",\n  \"tribune\",\n  \"tributary\",\n  \"tribute\",\n  \"triceps\",\n  \"trickery\",\n  \"trickily\",\n  \"tricking\",\n  \"trickle\",\n  \"trickster\",\n  \"tricky\",\n  \"tricolor\",\n  \"tricycle\",\n  \"trident\",\n  \"tried\",\n  \"trifle\",\n  \"trifocals\",\n  \"trillion\",\n  \"trilogy\",\n  \"trimester\",\n  \"trimmer\",\n  \"trimming\",\n  \"trimness\",\n  \"trinity\",\n  \"trio\",\n  \"tripod\",\n  \"tripping\",\n  \"triumph\",\n  \"trivial\",\n  \"trodden\",\n  \"trolling\",\n  \"trombone\",\n  \"trophy\",\n  \"tropical\",\n  \"tropics\",\n  \"trouble\",\n  \"troubling\",\n  \"trough\",\n  \"trousers\",\n  \"trout\",\n  \"trowel\",\n  \"truce\",\n  \"truck\",\n  \"truffle\",\n  \"trump\",\n  \"trunks\",\n  \"trustable\",\n  \"trustee\",\n  \"trustful\",\n  \"trusting\",\n  \"trustless\",\n  \"truth\",\n  \"try\",\n  \"tubby\",\n  \"tubeless\",\n  \"tubular\",\n  \"tucking\",\n  \"tuesday\",\n  \"tug\",\n  \"tuition\",\n  \"tulip\",\n  \"tumble\",\n  \"tumbling\",\n  \"tummy\",\n  \"turban\",\n  \"turbine\",\n  \"turbofan\",\n  \"turbojet\",\n  \"turbulent\",\n  \"turf\",\n  \"turkey\",\n  \"turmoil\",\n  \"turret\",\n  \"turtle\",\n  \"tusk\",\n  \"tutor\",\n  \"tutu\",\n  \"tux\",\n  \"tweak\",\n  \"tweed\",\n  \"tweet\",\n  \"tweezers\",\n  \"twelve\",\n  \"twentieth\",\n  \"twenty\",\n  \"twerp\",\n  \"twice\",\n  \"twiddle\",\n  \"twiddling\",\n  \"twig\",\n  \"twilight\",\n  \"twine\",\n  \"twins\",\n  \"twirl\",\n  \"twistable\",\n  \"twisted\",\n  \"twister\",\n  \"twisting\",\n  \"twisty\",\n  \"twitch\",\n  \"twitter\",\n  \"tycoon\",\n  \"tying\",\n  \"tyke\",\n  \"udder\",\n  \"ultimate\",\n  \"ultimatum\",\n  \"ultra\",\n  \"umbilical\",\n  \"umbrella\",\n  \"umpire\",\n  \"unabashed\",\n  \"unable\",\n  \"unadorned\",\n  \"unadvised\",\n  \"unafraid\",\n  \"unaired\",\n  \"unaligned\",\n  \"unaltered\",\n  \"unarmored\",\n  \"unashamed\",\n  \"unaudited\",\n  \"unawake\",\n  \"unaware\",\n  \"unbaked\",\n  \"unbalance\",\n  \"unbeaten\",\n  \"unbend\",\n  \"unbent\",\n  \"unbiased\",\n  \"unbitten\",\n  \"unblended\",\n  \"unblessed\",\n  \"unblock\",\n  \"unbolted\",\n  \"unbounded\",\n  \"unboxed\",\n  \"unbraided\",\n  \"unbridle\",\n  \"unbroken\",\n  \"unbuckled\",\n  \"unbundle\",\n  \"unburned\",\n  \"unbutton\",\n  \"uncanny\",\n  \"uncapped\",\n  \"uncaring\",\n  \"uncertain\",\n  \"unchain\",\n  \"unchanged\",\n  \"uncharted\",\n  \"uncheck\",\n  \"uncivil\",\n  \"unclad\",\n  \"unclaimed\",\n  \"unclamped\",\n  \"unclasp\",\n  \"uncle\",\n  \"unclip\",\n  \"uncloak\",\n  \"unclog\",\n  \"unclothed\",\n  \"uncoated\",\n  \"uncoiled\",\n  \"uncolored\",\n  \"uncombed\",\n  \"uncommon\",\n  \"uncooked\",\n  \"uncork\",\n  \"uncorrupt\",\n  \"uncounted\",\n  \"uncouple\",\n  \"uncouth\",\n  \"uncover\",\n  \"uncross\",\n  \"uncrown\",\n  \"uncrushed\",\n  \"uncured\",\n  \"uncurious\",\n  \"uncurled\",\n  \"uncut\",\n  \"undamaged\",\n  \"undated\",\n  \"undaunted\",\n  \"undead\",\n  \"undecided\",\n  \"undefined\",\n  \"underage\",\n  \"underarm\",\n  \"undercoat\",\n  \"undercook\",\n  \"undercut\",\n  \"underdog\",\n  \"underdone\",\n  \"underfed\",\n  \"underfeed\",\n  \"underfoot\",\n  \"undergo\",\n  \"undergrad\",\n  \"underhand\",\n  \"underline\",\n  \"underling\",\n  \"undermine\",\n  \"undermost\",\n  \"underpaid\",\n  \"underpass\",\n  \"underpay\",\n  \"underrate\",\n  \"undertake\",\n  \"undertone\",\n  \"undertook\",\n  \"undertow\",\n  \"underuse\",\n  \"underwear\",\n  \"underwent\",\n  \"underwire\",\n  \"undesired\",\n  \"undiluted\",\n  \"undivided\",\n  \"undocked\",\n  \"undoing\",\n  \"undone\",\n  \"undrafted\",\n  \"undress\",\n  \"undrilled\",\n  \"undusted\",\n  \"undying\",\n  \"unearned\",\n  \"unearth\",\n  \"unease\",\n  \"uneasily\",\n  \"uneasy\",\n  \"uneatable\",\n  \"uneaten\",\n  \"unedited\",\n  \"unelected\",\n  \"unending\",\n  \"unengaged\",\n  \"unenvied\",\n  \"unequal\",\n  \"unethical\",\n  \"uneven\",\n  \"unexpired\",\n  \"unexposed\",\n  \"unfailing\",\n  \"unfair\",\n  \"unfasten\",\n  \"unfazed\",\n  \"unfeeling\",\n  \"unfiled\",\n  \"unfilled\",\n  \"unfitted\",\n  \"unfitting\",\n  \"unfixable\",\n  \"unfixed\",\n  \"unflawed\",\n  \"unfocused\",\n  \"unfold\",\n  \"unfounded\",\n  \"unframed\",\n  \"unfreeze\",\n  \"unfrosted\",\n  \"unfrozen\",\n  \"unfunded\",\n  \"unglazed\",\n  \"ungloved\",\n  \"unglue\",\n  \"ungodly\",\n  \"ungraded\",\n  \"ungreased\",\n  \"unguarded\",\n  \"unguided\",\n  \"unhappily\",\n  \"unhappy\",\n  \"unharmed\",\n  \"unhealthy\",\n  \"unheard\",\n  \"unhearing\",\n  \"unheated\",\n  \"unhelpful\",\n  \"unhidden\",\n  \"unhinge\",\n  \"unhitched\",\n  \"unholy\",\n  \"unhook\",\n  \"unicorn\",\n  \"unicycle\",\n  \"unified\",\n  \"unifier\",\n  \"uniformed\",\n  \"uniformly\",\n  \"unify\",\n  \"unimpeded\",\n  \"uninjured\",\n  \"uninstall\",\n  \"uninsured\",\n  \"uninvited\",\n  \"union\",\n  \"uniquely\",\n  \"unisexual\",\n  \"unison\",\n  \"unissued\",\n  \"unit\",\n  \"universal\",\n  \"universe\",\n  \"unjustly\",\n  \"unkempt\",\n  \"unkind\",\n  \"unknotted\",\n  \"unknowing\",\n  \"unknown\",\n  \"unlaced\",\n  \"unlatch\",\n  \"unlawful\",\n  \"unleaded\",\n  \"unlearned\",\n  \"unleash\",\n  \"unless\",\n  \"unleveled\",\n  \"unlighted\",\n  \"unlikable\",\n  \"unlimited\",\n  \"unlined\",\n  \"unlinked\",\n  \"unlisted\",\n  \"unlit\",\n  \"unlivable\",\n  \"unloaded\",\n  \"unloader\",\n  \"unlocked\",\n  \"unlocking\",\n  \"unlovable\",\n  \"unloved\",\n  \"unlovely\",\n  \"unloving\",\n  \"unluckily\",\n  \"unlucky\",\n  \"unmade\",\n  \"unmanaged\",\n  \"unmanned\",\n  \"unmapped\",\n  \"unmarked\",\n  \"unmasked\",\n  \"unmasking\",\n  \"unmatched\",\n  \"unmindful\",\n  \"unmixable\",\n  \"unmixed\",\n  \"unmolded\",\n  \"unmoral\",\n  \"unmovable\",\n  \"unmoved\",\n  \"unmoving\",\n  \"unnamable\",\n  \"unnamed\",\n  \"unnatural\",\n  \"unneeded\",\n  \"unnerve\",\n  \"unnerving\",\n  \"unnoticed\",\n  \"unopened\",\n  \"unopposed\",\n  \"unpack\",\n  \"unpadded\",\n  \"unpaid\",\n  \"unpainted\",\n  \"unpaired\",\n  \"unpaved\",\n  \"unpeeled\",\n  \"unpicked\",\n  \"unpiloted\",\n  \"unpinned\",\n  \"unplanned\",\n  \"unplanted\",\n  \"unpleased\",\n  \"unpledged\",\n  \"unplowed\",\n  \"unplug\",\n  \"unpopular\",\n  \"unproven\",\n  \"unquote\",\n  \"unranked\",\n  \"unrated\",\n  \"unraveled\",\n  \"unreached\",\n  \"unread\",\n  \"unreal\",\n  \"unreeling\",\n  \"unrefined\",\n  \"unrelated\",\n  \"unrented\",\n  \"unrest\",\n  \"unretired\",\n  \"unrevised\",\n  \"unrigged\",\n  \"unripe\",\n  \"unrivaled\",\n  \"unroasted\",\n  \"unrobed\",\n  \"unroll\",\n  \"unruffled\",\n  \"unruly\",\n  \"unrushed\",\n  \"unsaddle\",\n  \"unsafe\",\n  \"unsaid\",\n  \"unsalted\",\n  \"unsaved\",\n  \"unsavory\",\n  \"unscathed\",\n  \"unscented\",\n  \"unscrew\",\n  \"unsealed\",\n  \"unseated\",\n  \"unsecured\",\n  \"unseeing\",\n  \"unseemly\",\n  \"unseen\",\n  \"unselect\",\n  \"unselfish\",\n  \"unsent\",\n  \"unsettled\",\n  \"unshackle\",\n  \"unshaken\",\n  \"unshaved\",\n  \"unshaven\",\n  \"unsheathe\",\n  \"unshipped\",\n  \"unsightly\",\n  \"unsigned\",\n  \"unskilled\",\n  \"unsliced\",\n  \"unsmooth\",\n  \"unsnap\",\n  \"unsocial\",\n  \"unsoiled\",\n  \"unsold\",\n  \"unsolved\",\n  \"unsorted\",\n  \"unspoiled\",\n  \"unspoken\",\n  \"unstable\",\n  \"unstaffed\",\n  \"unstamped\",\n  \"unsteady\",\n  \"unsterile\",\n  \"unstirred\",\n  \"unstitch\",\n  \"unstopped\",\n  \"unstuck\",\n  \"unstuffed\",\n  \"unstylish\",\n  \"unsubtle\",\n  \"unsubtly\",\n  \"unsuited\",\n  \"unsure\",\n  \"unsworn\",\n  \"untagged\",\n  \"untainted\",\n  \"untaken\",\n  \"untamed\",\n  \"untangled\",\n  \"untapped\",\n  \"untaxed\",\n  \"unthawed\",\n  \"unthread\",\n  \"untidy\",\n  \"untie\",\n  \"until\",\n  \"untimed\",\n  \"untimely\",\n  \"untitled\",\n  \"untoasted\",\n  \"untold\",\n  \"untouched\",\n  \"untracked\",\n  \"untrained\",\n  \"untreated\",\n  \"untried\",\n  \"untrimmed\",\n  \"untrue\",\n  \"untruth\",\n  \"unturned\",\n  \"untwist\",\n  \"untying\",\n  \"unusable\",\n  \"unused\",\n  \"unusual\",\n  \"unvalued\",\n  \"unvaried\",\n  \"unvarying\",\n  \"unveiled\",\n  \"unveiling\",\n  \"unvented\",\n  \"unviable\",\n  \"unvisited\",\n  \"unvocal\",\n  \"unwanted\",\n  \"unwarlike\",\n  \"unwary\",\n  \"unwashed\",\n  \"unwatched\",\n  \"unweave\",\n  \"unwed\",\n  \"unwelcome\",\n  \"unwell\",\n  \"unwieldy\",\n  \"unwilling\",\n  \"unwind\",\n  \"unwired\",\n  \"unwitting\",\n  \"unwomanly\",\n  \"unworldly\",\n  \"unworn\",\n  \"unworried\",\n  \"unworthy\",\n  \"unwound\",\n  \"unwoven\",\n  \"unwrapped\",\n  \"unwritten\",\n  \"unzip\",\n  \"upbeat\",\n  \"upchuck\",\n  \"upcoming\",\n  \"upcountry\",\n  \"update\",\n  \"upfront\",\n  \"upgrade\",\n  \"upheaval\",\n  \"upheld\",\n  \"uphill\",\n  \"uphold\",\n  \"uplifted\",\n  \"uplifting\",\n  \"upload\",\n  \"upon\",\n  \"upper\",\n  \"upright\",\n  \"uprising\",\n  \"upriver\",\n  \"uproar\",\n  \"uproot\",\n  \"upscale\",\n  \"upside\",\n  \"upstage\",\n  \"upstairs\",\n  \"upstart\",\n  \"upstate\",\n  \"upstream\",\n  \"upstroke\",\n  \"upswing\",\n  \"uptake\",\n  \"uptight\",\n  \"uptown\",\n  \"upturned\",\n  \"upward\",\n  \"upwind\",\n  \"uranium\",\n  \"urban\",\n  \"urchin\",\n  \"urethane\",\n  \"urgency\",\n  \"urgent\",\n  \"urging\",\n  \"urologist\",\n  \"urology\",\n  \"usable\",\n  \"usage\",\n  \"useable\",\n  \"used\",\n  \"uselessly\",\n  \"user\",\n  \"usher\",\n  \"usual\",\n  \"utensil\",\n  \"utility\",\n  \"utilize\",\n  \"utmost\",\n  \"utopia\",\n  \"utter\",\n  \"vacancy\",\n  \"vacant\",\n  \"vacate\",\n  \"vacation\",\n  \"vagabond\",\n  \"vagrancy\",\n  \"vagrantly\",\n  \"vaguely\",\n  \"vagueness\",\n  \"valiant\",\n  \"valid\",\n  \"valium\",\n  \"valley\",\n  \"valuables\",\n  \"value\",\n  \"vanilla\",\n  \"vanish\",\n  \"vanity\",\n  \"vanquish\",\n  \"vantage\",\n  \"vaporizer\",\n  \"variable\",\n  \"variably\",\n  \"varied\",\n  \"variety\",\n  \"various\",\n  \"varmint\",\n  \"varnish\",\n  \"varsity\",\n  \"varying\",\n  \"vascular\",\n  \"vaseline\",\n  \"vastly\",\n  \"vastness\",\n  \"veal\",\n  \"vegan\",\n  \"veggie\",\n  \"vehicular\",\n  \"velcro\",\n  \"velocity\",\n  \"velvet\",\n  \"vendetta\",\n  \"vending\",\n  \"vendor\",\n  \"veneering\",\n  \"vengeful\",\n  \"venomous\",\n  \"ventricle\",\n  \"venture\",\n  \"venue\",\n  \"venus\",\n  \"verbalize\",\n  \"verbally\",\n  \"verbose\",\n  \"verdict\",\n  \"verify\",\n  \"verse\",\n  \"version\",\n  \"versus\",\n  \"vertebrae\",\n  \"vertical\",\n  \"vertigo\",\n  \"very\",\n  \"vessel\",\n  \"vest\",\n  \"veteran\",\n  \"veto\",\n  \"vexingly\",\n  \"viability\",\n  \"viable\",\n  \"vibes\",\n  \"vice\",\n  \"vicinity\",\n  \"victory\",\n  \"video\",\n  \"viewable\",\n  \"viewer\",\n  \"viewing\",\n  \"viewless\",\n  \"viewpoint\",\n  \"vigorous\",\n  \"village\",\n  \"villain\",\n  \"vindicate\",\n  \"vineyard\",\n  \"vintage\",\n  \"violate\",\n  \"violation\",\n  \"violator\",\n  \"violet\",\n  \"violin\",\n  \"viper\",\n  \"viral\",\n  \"virtual\",\n  \"virtuous\",\n  \"virus\",\n  \"visa\",\n  \"viscosity\",\n  \"viscous\",\n  \"viselike\",\n  \"visible\",\n  \"visibly\",\n  \"vision\",\n  \"visiting\",\n  \"visitor\",\n  \"visor\",\n  \"vista\",\n  \"vitality\",\n  \"vitalize\",\n  \"vitally\",\n  \"vitamins\",\n  \"vivacious\",\n  \"vividly\",\n  \"vividness\",\n  \"vixen\",\n  \"vocalist\",\n  \"vocalize\",\n  \"vocally\",\n  \"vocation\",\n  \"voice\",\n  \"voicing\",\n  \"void\",\n  \"volatile\",\n  \"volley\",\n  \"voltage\",\n  \"volumes\",\n  \"voter\",\n  \"voting\",\n  \"voucher\",\n  \"vowed\",\n  \"vowel\",\n  \"voyage\",\n  \"wackiness\",\n  \"wad\",\n  \"wafer\",\n  \"waffle\",\n  \"waged\",\n  \"wager\",\n  \"wages\",\n  \"waggle\",\n  \"wagon\",\n  \"wake\",\n  \"waking\",\n  \"walk\",\n  \"walmart\",\n  \"walnut\",\n  \"walrus\",\n  \"waltz\",\n  \"wand\",\n  \"wannabe\",\n  \"wanted\",\n  \"wanting\",\n  \"wasabi\",\n  \"washable\",\n  \"washbasin\",\n  \"washboard\",\n  \"washbowl\",\n  \"washcloth\",\n  \"washday\",\n  \"washed\",\n  \"washer\",\n  \"washhouse\",\n  \"washing\",\n  \"washout\",\n  \"washroom\",\n  \"washstand\",\n  \"washtub\",\n  \"wasp\",\n  \"wasting\",\n  \"watch\",\n  \"water\",\n  \"waviness\",\n  \"waving\",\n  \"wavy\",\n  \"whacking\",\n  \"whacky\",\n  \"wham\",\n  \"wharf\",\n  \"wheat\",\n  \"whenever\",\n  \"whiff\",\n  \"whimsical\",\n  \"whinny\",\n  \"whiny\",\n  \"whisking\",\n  \"whoever\",\n  \"whole\",\n  \"whomever\",\n  \"whoopee\",\n  \"whooping\",\n  \"whoops\",\n  \"why\",\n  \"wick\",\n  \"widely\",\n  \"widen\",\n  \"widget\",\n  \"widow\",\n  \"width\",\n  \"wieldable\",\n  \"wielder\",\n  \"wife\",\n  \"wifi\",\n  \"wikipedia\",\n  \"wildcard\",\n  \"wildcat\",\n  \"wilder\",\n  \"wildfire\",\n  \"wildfowl\",\n  \"wildland\",\n  \"wildlife\",\n  \"wildly\",\n  \"wildness\",\n  \"willed\",\n  \"willfully\",\n  \"willing\",\n  \"willow\",\n  \"willpower\",\n  \"wilt\",\n  \"wimp\",\n  \"wince\",\n  \"wincing\",\n  \"wind\",\n  \"wing\",\n  \"winking\",\n  \"winner\",\n  \"winnings\",\n  \"winter\",\n  \"wipe\",\n  \"wired\",\n  \"wireless\",\n  \"wiring\",\n  \"wiry\",\n  \"wisdom\",\n  \"wise\",\n  \"wish\",\n  \"wisplike\",\n  \"wispy\",\n  \"wistful\",\n  \"wizard\",\n  \"wobble\",\n  \"wobbling\",\n  \"wobbly\",\n  \"wok\",\n  \"wolf\",\n  \"wolverine\",\n  \"womanhood\",\n  \"womankind\",\n  \"womanless\",\n  \"womanlike\",\n  \"womanly\",\n  \"womb\",\n  \"woof\",\n  \"wooing\",\n  \"wool\",\n  \"woozy\",\n  \"word\",\n  \"work\",\n  \"worried\",\n  \"worrier\",\n  \"worrisome\",\n  \"worry\",\n  \"worsening\",\n  \"worshiper\",\n  \"worst\",\n  \"wound\",\n  \"woven\",\n  \"wow\",\n  \"wrangle\",\n  \"wrath\",\n  \"wreath\",\n  \"wreckage\",\n  \"wrecker\",\n  \"wrecking\",\n  \"wrench\",\n  \"wriggle\",\n  \"wriggly\",\n  \"wrinkle\",\n  \"wrinkly\",\n  \"wrist\",\n  \"writing\",\n  \"written\",\n  \"wrongdoer\",\n  \"wronged\",\n  \"wrongful\",\n  \"wrongly\",\n  \"wrongness\",\n  \"wrought\",\n  \"xbox\",\n  \"xerox\",\n  \"yahoo\",\n  \"yam\",\n  \"yanking\",\n  \"yapping\",\n  \"yard\",\n  \"yarn\",\n  \"yeah\",\n  \"yearbook\",\n  \"yearling\",\n  \"yearly\",\n  \"yearning\",\n  \"yeast\",\n  \"yelling\",\n  \"yelp\",\n  \"yen\",\n  \"yesterday\",\n  \"yiddish\",\n  \"yield\",\n  \"yin\",\n  \"yippee\",\n  \"yo-yo\",\n  \"yodel\",\n  \"yoga\",\n  \"yogurt\",\n  \"yonder\",\n  \"yoyo\",\n  \"yummy\",\n  \"zap\",\n  \"zealous\",\n  \"zebra\",\n  \"zen\",\n  \"zeppelin\",\n  \"zero\",\n  \"zestfully\",\n  \"zesty\",\n  \"zigzagged\",\n  \"zipfile\",\n  \"zipping\",\n  \"zippy\",\n  \"zips\",\n  \"zit\",\n  \"zodiac\",\n  \"zombie\",\n  \"zone\",\n  \"zoning\",\n  \"zookeeper\",\n  \"zoologist\",\n  \"zoology\",\n  \"zoom\",\n];\n","export class GeneratedPasswordHistory {\n  password: string;\n  date: number;\n\n  constructor(password: string, date: number) {\n    this.password = password;\n    this.date = date;\n  }\n}\n","import { PolicyService } from \"../../../admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"../../../admin-console/enums\";\nimport { PasswordGeneratorPolicyOptions } from \"../../../admin-console/models/domain/password-generator-policy-options\";\nimport { CryptoService } from \"../../../platform/abstractions/crypto.service\";\nimport { StateService } from \"../../../platform/abstractions/state.service\";\nimport { EFFLongWordList } from \"../../../platform/misc/wordlist\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\n\nimport { GeneratedPasswordHistory } from \"./generated-password-history\";\nimport { PasswordGenerationServiceAbstraction } from \"./password-generation.service.abstraction\";\nimport { PasswordGeneratorOptions } from \"./password-generator-options\";\n\nconst DefaultOptions: PasswordGeneratorOptions = {\n  length: 14,\n  ambiguous: false,\n  number: true,\n  minNumber: 1,\n  uppercase: true,\n  minUppercase: 0,\n  lowercase: true,\n  minLowercase: 0,\n  special: false,\n  minSpecial: 1,\n  type: \"password\",\n  numWords: 3,\n  wordSeparator: \"-\",\n  capitalize: false,\n  includeNumber: false,\n};\n\nconst MaxPasswordsInHistory = 100;\n\nexport class PasswordGenerationService implements PasswordGenerationServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private policyService: PolicyService,\n    private stateService: StateService\n  ) {}\n\n  async generatePassword(options: PasswordGeneratorOptions): Promise<string> {\n    // overload defaults with given options\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.type === \"passphrase\") {\n      return this.generatePassphrase(options);\n    }\n\n    // sanitize\n    this.sanitizePasswordLength(o, true);\n\n    const minLength: number = o.minUppercase + o.minLowercase + o.minNumber + o.minSpecial;\n    if (o.length < minLength) {\n      o.length = minLength;\n    }\n\n    const positions: string[] = [];\n    if (o.lowercase && o.minLowercase > 0) {\n      for (let i = 0; i < o.minLowercase; i++) {\n        positions.push(\"l\");\n      }\n    }\n    if (o.uppercase && o.minUppercase > 0) {\n      for (let i = 0; i < o.minUppercase; i++) {\n        positions.push(\"u\");\n      }\n    }\n    if (o.number && o.minNumber > 0) {\n      for (let i = 0; i < o.minNumber; i++) {\n        positions.push(\"n\");\n      }\n    }\n    if (o.special && o.minSpecial > 0) {\n      for (let i = 0; i < o.minSpecial; i++) {\n        positions.push(\"s\");\n      }\n    }\n    while (positions.length < o.length) {\n      positions.push(\"a\");\n    }\n\n    // shuffle\n    await this.shuffleArray(positions);\n\n    // build out the char sets\n    let allCharSet = \"\";\n\n    let lowercaseCharSet = \"abcdefghijkmnopqrstuvwxyz\";\n    if (o.ambiguous) {\n      lowercaseCharSet += \"l\";\n    }\n    if (o.lowercase) {\n      allCharSet += lowercaseCharSet;\n    }\n\n    let uppercaseCharSet = \"ABCDEFGHJKLMNPQRSTUVWXYZ\";\n    if (o.ambiguous) {\n      uppercaseCharSet += \"IO\";\n    }\n    if (o.uppercase) {\n      allCharSet += uppercaseCharSet;\n    }\n\n    let numberCharSet = \"23456789\";\n    if (o.ambiguous) {\n      numberCharSet += \"01\";\n    }\n    if (o.number) {\n      allCharSet += numberCharSet;\n    }\n\n    const specialCharSet = \"!@#$%^&*\";\n    if (o.special) {\n      allCharSet += specialCharSet;\n    }\n\n    let password = \"\";\n    for (let i = 0; i < o.length; i++) {\n      let positionChars: string;\n      switch (positions[i]) {\n        case \"l\":\n          positionChars = lowercaseCharSet;\n          break;\n        case \"u\":\n          positionChars = uppercaseCharSet;\n          break;\n        case \"n\":\n          positionChars = numberCharSet;\n          break;\n        case \"s\":\n          positionChars = specialCharSet;\n          break;\n        case \"a\":\n          positionChars = allCharSet;\n          break;\n        default:\n          break;\n      }\n\n      const randomCharIndex = await this.cryptoService.randomNumber(0, positionChars.length - 1);\n      password += positionChars.charAt(randomCharIndex);\n    }\n\n    return password;\n  }\n\n  async generatePassphrase(options: PasswordGeneratorOptions): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.numWords == null || o.numWords <= 2) {\n      o.numWords = DefaultOptions.numWords;\n    }\n    if (o.wordSeparator == null || o.wordSeparator.length === 0 || o.wordSeparator.length > 1) {\n      o.wordSeparator = \" \";\n    }\n    if (o.capitalize == null) {\n      o.capitalize = false;\n    }\n    if (o.includeNumber == null) {\n      o.includeNumber = false;\n    }\n\n    const listLength = EFFLongWordList.length - 1;\n    const wordList = new Array(o.numWords);\n    for (let i = 0; i < o.numWords; i++) {\n      const wordIndex = await this.cryptoService.randomNumber(0, listLength);\n      if (o.capitalize) {\n        wordList[i] = this.capitalize(EFFLongWordList[wordIndex]);\n      } else {\n        wordList[i] = EFFLongWordList[wordIndex];\n      }\n    }\n\n    if (o.includeNumber) {\n      await this.appendRandomNumberToRandomWord(wordList);\n    }\n    return wordList.join(o.wordSeparator);\n  }\n\n  async getOptions(): Promise<[PasswordGeneratorOptions, PasswordGeneratorPolicyOptions]> {\n    let options = await this.stateService.getPasswordGenerationOptions();\n    if (options == null) {\n      options = Object.assign({}, DefaultOptions);\n    } else {\n      options = Object.assign({}, DefaultOptions, options);\n    }\n    await this.stateService.setPasswordGenerationOptions(options);\n    const enforcedOptions = await this.enforcePasswordGeneratorPoliciesOnOptions(options);\n    options = enforcedOptions[0];\n    return [options, enforcedOptions[1]];\n  }\n\n  async enforcePasswordGeneratorPoliciesOnOptions(\n    options: PasswordGeneratorOptions\n  ): Promise<[PasswordGeneratorOptions, PasswordGeneratorPolicyOptions]> {\n    let enforcedPolicyOptions = await this.getPasswordGeneratorPolicyOptions();\n    if (enforcedPolicyOptions != null) {\n      if (options.length < enforcedPolicyOptions.minLength) {\n        options.length = enforcedPolicyOptions.minLength;\n      }\n\n      if (enforcedPolicyOptions.useUppercase) {\n        options.uppercase = true;\n      }\n\n      if (enforcedPolicyOptions.useLowercase) {\n        options.lowercase = true;\n      }\n\n      if (enforcedPolicyOptions.useNumbers) {\n        options.number = true;\n      }\n\n      if (options.minNumber < enforcedPolicyOptions.numberCount) {\n        options.minNumber = enforcedPolicyOptions.numberCount;\n      }\n\n      if (enforcedPolicyOptions.useSpecial) {\n        options.special = true;\n      }\n\n      if (options.minSpecial < enforcedPolicyOptions.specialCount) {\n        options.minSpecial = enforcedPolicyOptions.specialCount;\n      }\n\n      // Must normalize these fields because the receiving call expects all options to pass the current rules\n      if (options.minSpecial + options.minNumber > options.length) {\n        options.minSpecial = options.length - options.minNumber;\n      }\n\n      if (options.numWords < enforcedPolicyOptions.minNumberWords) {\n        options.numWords = enforcedPolicyOptions.minNumberWords;\n      }\n\n      if (enforcedPolicyOptions.capitalize) {\n        options.capitalize = true;\n      }\n\n      if (enforcedPolicyOptions.includeNumber) {\n        options.includeNumber = true;\n      }\n\n      // Force default type if password/passphrase selected via policy\n      if (\n        enforcedPolicyOptions.defaultType === \"password\" ||\n        enforcedPolicyOptions.defaultType === \"passphrase\"\n      ) {\n        options.type = enforcedPolicyOptions.defaultType;\n      }\n    } else {\n      // UI layer expects an instantiated object to prevent more explicit null checks\n      enforcedPolicyOptions = new PasswordGeneratorPolicyOptions();\n    }\n    return [options, enforcedPolicyOptions];\n  }\n\n  async getPasswordGeneratorPolicyOptions(): Promise<PasswordGeneratorPolicyOptions> {\n    const policies = await this.policyService?.getAll(PolicyType.PasswordGenerator);\n    let enforcedOptions: PasswordGeneratorPolicyOptions = null;\n\n    if (policies == null || policies.length === 0) {\n      return enforcedOptions;\n    }\n\n    policies.forEach((currentPolicy) => {\n      if (!currentPolicy.enabled || currentPolicy.data == null) {\n        return;\n      }\n\n      if (enforcedOptions == null) {\n        enforcedOptions = new PasswordGeneratorPolicyOptions();\n      }\n\n      // Password wins in multi-org collisions\n      if (currentPolicy.data.defaultType != null && enforcedOptions.defaultType !== \"password\") {\n        enforcedOptions.defaultType = currentPolicy.data.defaultType;\n      }\n\n      if (\n        currentPolicy.data.minLength != null &&\n        currentPolicy.data.minLength > enforcedOptions.minLength\n      ) {\n        enforcedOptions.minLength = currentPolicy.data.minLength;\n      }\n\n      if (currentPolicy.data.useUpper) {\n        enforcedOptions.useUppercase = true;\n      }\n\n      if (currentPolicy.data.useLower) {\n        enforcedOptions.useLowercase = true;\n      }\n\n      if (currentPolicy.data.useNumbers) {\n        enforcedOptions.useNumbers = true;\n      }\n\n      if (\n        currentPolicy.data.minNumbers != null &&\n        currentPolicy.data.minNumbers > enforcedOptions.numberCount\n      ) {\n        enforcedOptions.numberCount = currentPolicy.data.minNumbers;\n      }\n\n      if (currentPolicy.data.useSpecial) {\n        enforcedOptions.useSpecial = true;\n      }\n\n      if (\n        currentPolicy.data.minSpecial != null &&\n        currentPolicy.data.minSpecial > enforcedOptions.specialCount\n      ) {\n        enforcedOptions.specialCount = currentPolicy.data.minSpecial;\n      }\n\n      if (\n        currentPolicy.data.minNumberWords != null &&\n        currentPolicy.data.minNumberWords > enforcedOptions.minNumberWords\n      ) {\n        enforcedOptions.minNumberWords = currentPolicy.data.minNumberWords;\n      }\n\n      if (currentPolicy.data.capitalize) {\n        enforcedOptions.capitalize = true;\n      }\n\n      if (currentPolicy.data.includeNumber) {\n        enforcedOptions.includeNumber = true;\n      }\n    });\n\n    return enforcedOptions;\n  }\n\n  async saveOptions(options: PasswordGeneratorOptions) {\n    await this.stateService.setPasswordGenerationOptions(options);\n  }\n\n  async getHistory(): Promise<GeneratedPasswordHistory[]> {\n    const hasKey = await this.cryptoService.hasUserKey();\n    if (!hasKey) {\n      return new Array<GeneratedPasswordHistory>();\n    }\n\n    if ((await this.stateService.getDecryptedPasswordGenerationHistory()) == null) {\n      const encrypted = await this.stateService.getEncryptedPasswordGenerationHistory();\n      const decrypted = await this.decryptHistory(encrypted);\n      await this.stateService.setDecryptedPasswordGenerationHistory(decrypted);\n    }\n\n    const passwordGenerationHistory =\n      await this.stateService.getDecryptedPasswordGenerationHistory();\n    return passwordGenerationHistory != null\n      ? passwordGenerationHistory\n      : new Array<GeneratedPasswordHistory>();\n  }\n\n  async addHistory(password: string): Promise<void> {\n    // Cannot add new history if no key is available\n    const hasKey = await this.cryptoService.hasUserKey();\n    if (!hasKey) {\n      return;\n    }\n\n    const currentHistory = await this.getHistory();\n\n    // Prevent duplicates\n    if (this.matchesPrevious(password, currentHistory)) {\n      return;\n    }\n\n    currentHistory.unshift(new GeneratedPasswordHistory(password, Date.now()));\n\n    // Remove old items.\n    if (currentHistory.length > MaxPasswordsInHistory) {\n      currentHistory.pop();\n    }\n\n    const newHistory = await this.encryptHistory(currentHistory);\n    await this.stateService.setDecryptedPasswordGenerationHistory(currentHistory);\n    return await this.stateService.setEncryptedPasswordGenerationHistory(newHistory);\n  }\n\n  async clear(userId?: string): Promise<void> {\n    await this.stateService.setEncryptedPasswordGenerationHistory(null, { userId: userId });\n    await this.stateService.setDecryptedPasswordGenerationHistory(null, { userId: userId });\n  }\n\n  normalizeOptions(\n    options: PasswordGeneratorOptions,\n    enforcedPolicyOptions: PasswordGeneratorPolicyOptions\n  ) {\n    options.minLowercase = 0;\n    options.minUppercase = 0;\n\n    if (!options.length || options.length < 5) {\n      options.length = 5;\n    } else if (options.length > 128) {\n      options.length = 128;\n    }\n\n    if (options.length < enforcedPolicyOptions.minLength) {\n      options.length = enforcedPolicyOptions.minLength;\n    }\n\n    if (!options.minNumber) {\n      options.minNumber = 0;\n    } else if (options.minNumber > options.length) {\n      options.minNumber = options.length;\n    } else if (options.minNumber > 9) {\n      options.minNumber = 9;\n    }\n\n    if (options.minNumber < enforcedPolicyOptions.numberCount) {\n      options.minNumber = enforcedPolicyOptions.numberCount;\n    }\n\n    if (!options.minSpecial) {\n      options.minSpecial = 0;\n    } else if (options.minSpecial > options.length) {\n      options.minSpecial = options.length;\n    } else if (options.minSpecial > 9) {\n      options.minSpecial = 9;\n    }\n\n    if (options.minSpecial < enforcedPolicyOptions.specialCount) {\n      options.minSpecial = enforcedPolicyOptions.specialCount;\n    }\n\n    if (options.minSpecial + options.minNumber > options.length) {\n      options.minSpecial = options.length - options.minNumber;\n    }\n\n    if (options.numWords == null || options.length < 3) {\n      options.numWords = 3;\n    } else if (options.numWords > 20) {\n      options.numWords = 20;\n    }\n\n    if (options.numWords < enforcedPolicyOptions.minNumberWords) {\n      options.numWords = enforcedPolicyOptions.minNumberWords;\n    }\n\n    if (options.wordSeparator != null && options.wordSeparator.length > 1) {\n      options.wordSeparator = options.wordSeparator[0];\n    }\n\n    this.sanitizePasswordLength(options, false);\n  }\n\n  private capitalize(str: string) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  private async appendRandomNumberToRandomWord(wordList: string[]) {\n    if (wordList == null || wordList.length <= 0) {\n      return;\n    }\n    const index = await this.cryptoService.randomNumber(0, wordList.length - 1);\n    const num = await this.cryptoService.randomNumber(0, 9);\n    wordList[index] = wordList[index] + num;\n  }\n\n  private async encryptHistory(\n    history: GeneratedPasswordHistory[]\n  ): Promise<GeneratedPasswordHistory[]> {\n    if (history == null || history.length === 0) {\n      return Promise.resolve([]);\n    }\n\n    const promises = history.map(async (item) => {\n      const encrypted = await this.cryptoService.encrypt(item.password);\n      return new GeneratedPasswordHistory(encrypted.encryptedString, item.date);\n    });\n\n    return await Promise.all(promises);\n  }\n\n  private async decryptHistory(\n    history: GeneratedPasswordHistory[]\n  ): Promise<GeneratedPasswordHistory[]> {\n    if (history == null || history.length === 0) {\n      return Promise.resolve([]);\n    }\n\n    const promises = history.map(async (item) => {\n      const decrypted = await this.cryptoService.decryptToUtf8(new EncString(item.password));\n      return new GeneratedPasswordHistory(decrypted, item.date);\n    });\n\n    return await Promise.all(promises);\n  }\n\n  private matchesPrevious(password: string, history: GeneratedPasswordHistory[]): boolean {\n    if (history == null || history.length === 0) {\n      return false;\n    }\n\n    return history[history.length - 1].password === password;\n  }\n\n  // ref: https://stackoverflow.com/a/12646864/1090359\n  private async shuffleArray(array: string[]) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = await this.cryptoService.randomNumber(0, i);\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  private sanitizePasswordLength(options: any, forGeneration: boolean) {\n    let minUppercaseCalc = 0;\n    let minLowercaseCalc = 0;\n    let minNumberCalc: number = options.minNumber;\n    let minSpecialCalc: number = options.minSpecial;\n\n    if (options.uppercase && options.minUppercase <= 0) {\n      minUppercaseCalc = 1;\n    } else if (!options.uppercase) {\n      minUppercaseCalc = 0;\n    }\n\n    if (options.lowercase && options.minLowercase <= 0) {\n      minLowercaseCalc = 1;\n    } else if (!options.lowercase) {\n      minLowercaseCalc = 0;\n    }\n\n    if (options.number && options.minNumber <= 0) {\n      minNumberCalc = 1;\n    } else if (!options.number) {\n      minNumberCalc = 0;\n    }\n\n    if (options.special && options.minSpecial <= 0) {\n      minSpecialCalc = 1;\n    } else if (!options.special) {\n      minSpecialCalc = 0;\n    }\n\n    // This should never happen but is a final safety net\n    if (!options.length || options.length < 1) {\n      options.length = 10;\n    }\n\n    const minLength: number = minUppercaseCalc + minLowercaseCalc + minNumberCalc + minSpecialCalc;\n    // Normalize and Generation both require this modification\n    if (options.length < minLength) {\n      options.length = minLength;\n    }\n\n    // Apply other changes if the options object passed in is for generation\n    if (forGeneration) {\n      options.minUppercase = minUppercaseCalc;\n      options.minLowercase = minLowercaseCalc;\n      options.minNumber = minNumberCalc;\n      options.minSpecial = minSpecialCalc;\n    }\n  }\n}\n","import { ApiService } from \"../../../../abstractions/api.service\";\n\nimport { Forwarder } from \"./forwarder\";\nimport { ForwarderOptions } from \"./forwarder-options\";\n\nexport class AnonAddyForwarder implements Forwarder {\n  async generate(apiService: ApiService, options: ForwarderOptions): Promise<string> {\n    if (options.apiKey == null || options.apiKey === \"\") {\n      throw \"Invalid addy.io API token.\";\n    }\n    if (options.anonaddy?.domain == null || options.anonaddy.domain === \"\") {\n      throw \"Invalid addy.io domain.\";\n    }\n    if (options.anonaddy?.baseUrl == null || options.anonaddy.baseUrl === \"\") {\n      throw \"Invalid addy.io url.\";\n    }\n\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Bearer \" + options.apiKey,\n        \"Content-Type\": \"application/json\",\n        \"X-Requested-With\": \"XMLHttpRequest\",\n      }),\n    };\n    const url = options.anonaddy.baseUrl + \"/api/v1/aliases\";\n    requestInit.body = JSON.stringify({\n      domain: options.anonaddy.domain,\n      description:\n        (options.website != null ? \"Website: \" + options.website + \". \" : \"\") +\n        \"Generated by Bitwarden.\",\n    });\n    const request = new Request(url, requestInit);\n    const response = await apiService.nativeFetch(request);\n    if (response.status === 200 || response.status === 201) {\n      const json = await response.json();\n      return json?.data?.email;\n    }\n    if (response.status === 401) {\n      throw \"Invalid addy.io API token.\";\n    }\n    if (response?.statusText != null) {\n      throw \"addy.io error:\\n\" + response.statusText;\n    }\n    throw \"Unknown addy.io error occurred.\";\n  }\n}\n","import { ApiService } from \"../../../../abstractions/api.service\";\n\nimport { Forwarder } from \"./forwarder\";\nimport { ForwarderOptions } from \"./forwarder-options\";\n\nexport class DuckDuckGoForwarder implements Forwarder {\n  async generate(apiService: ApiService, options: ForwarderOptions): Promise<string> {\n    if (options.apiKey == null || options.apiKey === \"\") {\n      throw \"Invalid DuckDuckGo API token.\";\n    }\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Bearer \" + options.apiKey,\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    const url = \"https://quack.duckduckgo.com/api/email/addresses\";\n    const request = new Request(url, requestInit);\n    const response = await apiService.nativeFetch(request);\n    if (response.status === 200 || response.status === 201) {\n      const json = await response.json();\n      if (json.address) {\n        return `${json.address}@duck.com`;\n      }\n    } else if (response.status === 401) {\n      throw \"Invalid DuckDuckGo API token.\";\n    }\n    throw \"Unknown DuckDuckGo error occurred.\";\n  }\n}\n","import { ApiService } from \"../../../../abstractions/api.service\";\n\nimport { Forwarder } from \"./forwarder\";\nimport { ForwarderOptions } from \"./forwarder-options\";\n\nexport class FastmailForwarder implements Forwarder {\n  async generate(apiService: ApiService, options: ForwarderOptions): Promise<string> {\n    if (options.apiKey == null || options.apiKey === \"\") {\n      throw \"Invalid Fastmail API token.\";\n    }\n\n    const accountId = await this.getAccountId(apiService, options);\n    if (accountId == null || accountId === \"\") {\n      throw \"Unable to obtain Fastmail masked email account ID.\";\n    }\n\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Bearer \" + options.apiKey,\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    const url = \"https://api.fastmail.com/jmap/api/\";\n    requestInit.body = JSON.stringify({\n      using: [\"https://www.fastmail.com/dev/maskedemail\", \"urn:ietf:params:jmap:core\"],\n      methodCalls: [\n        [\n          \"MaskedEmail/set\",\n          {\n            accountId: accountId,\n            create: {\n              \"new-masked-email\": {\n                state: \"enabled\",\n                description: \"\",\n                url: options.website,\n                emailPrefix: options.fastmail.prefix,\n              },\n            },\n          },\n          \"0\",\n        ],\n      ],\n    });\n    const request = new Request(url, requestInit);\n    const response = await apiService.nativeFetch(request);\n    if (response.status === 200) {\n      const json = await response.json();\n      if (\n        json.methodResponses != null &&\n        json.methodResponses.length > 0 &&\n        json.methodResponses[0].length > 0\n      ) {\n        if (json.methodResponses[0][0] === \"MaskedEmail/set\") {\n          if (json.methodResponses[0][1]?.created?.[\"new-masked-email\"] != null) {\n            return json.methodResponses[0][1]?.created?.[\"new-masked-email\"]?.email;\n          }\n          if (json.methodResponses[0][1]?.notCreated?.[\"new-masked-email\"] != null) {\n            throw (\n              \"Fastmail error: \" +\n              json.methodResponses[0][1]?.notCreated?.[\"new-masked-email\"]?.description\n            );\n          }\n        } else if (json.methodResponses[0][0] === \"error\") {\n          throw \"Fastmail error: \" + json.methodResponses[0][1]?.description;\n        }\n      }\n    }\n    if (response.status === 401 || response.status === 403) {\n      throw \"Invalid Fastmail API token.\";\n    }\n    throw \"Unknown Fastmail error occurred.\";\n  }\n\n  private async getAccountId(apiService: ApiService, options: ForwarderOptions): Promise<string> {\n    const requestInit: RequestInit = {\n      cache: \"no-store\",\n      method: \"GET\",\n      headers: new Headers({\n        Authorization: \"Bearer \" + options.apiKey,\n      }),\n    };\n    const url = \"https://api.fastmail.com/.well-known/jmap\";\n    const request = new Request(url, requestInit);\n    const response = await apiService.nativeFetch(request);\n    if (response.status === 200) {\n      const json = await response.json();\n      if (json.primaryAccounts != null) {\n        return json.primaryAccounts[\"https://www.fastmail.com/dev/maskedemail\"];\n      }\n    }\n    return null;\n  }\n}\n","import { ApiService } from \"../../../../abstractions/api.service\";\n\nimport { Forwarder } from \"./forwarder\";\nimport { ForwarderOptions } from \"./forwarder-options\";\n\nexport class FirefoxRelayForwarder implements Forwarder {\n  async generate(apiService: ApiService, options: ForwarderOptions): Promise<string> {\n    if (options.apiKey == null || options.apiKey === \"\") {\n      throw \"Invalid Firefox Relay API token.\";\n    }\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Token \" + options.apiKey,\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    const url = \"https://relay.firefox.com/api/v1/relayaddresses/\";\n    requestInit.body = JSON.stringify({\n      enabled: true,\n      generated_for: options.website,\n      description:\n        (options.website != null ? options.website + \" - \" : \"\") + \"Generated by Bitwarden.\",\n    });\n    const request = new Request(url, requestInit);\n    const response = await apiService.nativeFetch(request);\n    if (response.status === 200 || response.status === 201) {\n      const json = await response.json();\n      return json?.full_address;\n    }\n    if (response.status === 401) {\n      throw \"Invalid Firefox Relay API token.\";\n    }\n    throw \"Unknown Firefox Relay error occurred.\";\n  }\n}\n","export class ForwarderOptions {\n  apiKey: string;\n  website: string;\n  fastmail = new FastmailForwarderOptions();\n  anonaddy = new AnonAddyForwarderOptions();\n  forwardemail = new ForwardEmailForwarderOptions();\n  simplelogin = new SimpleLoginForwarderOptions();\n}\n\nexport class FastmailForwarderOptions {\n  prefix: string;\n}\n\nexport class AnonAddyForwarderOptions {\n  domain: string;\n  baseUrl: string;\n}\n\nexport class ForwardEmailForwarderOptions {\n  domain: string;\n}\n\nexport class SimpleLoginForwarderOptions {\n  baseUrl: string;\n}\n","import { ApiService } from \"../../../../abstractions/api.service\";\n\nimport { Forwarder } from \"./forwarder\";\nimport { ForwarderOptions } from \"./forwarder-options\";\n\nexport class SimpleLoginForwarder implements Forwarder {\n  async generate(apiService: ApiService, options: ForwarderOptions): Promise<string> {\n    if (options.apiKey == null || options.apiKey === \"\") {\n      throw \"Invalid SimpleLogin API key.\";\n    }\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authentication: options.apiKey,\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    let url = options.simplelogin.baseUrl + \"/api/alias/random/new\";\n    if (options.website != null) {\n      url += \"?hostname=\" + options.website;\n    }\n    requestInit.body = JSON.stringify({\n      note:\n        (options.website != null ? \"Website: \" + options.website + \". \" : \"\") +\n        \"Generated by Bitwarden.\",\n    });\n    const request = new Request(url, requestInit);\n    const response = await apiService.nativeFetch(request);\n    if (response.status === 200 || response.status === 201) {\n      const json = await response.json();\n      return json.alias;\n    }\n    if (response.status === 401) {\n      throw \"Invalid SimpleLogin API key.\";\n    }\n    const json = await response.json();\n    if (json?.error != null) {\n      throw \"SimpleLogin error:\" + json.error;\n    }\n    throw \"Unknown SimpleLogin error occurred.\";\n  }\n}\n","import { ApiService } from \"../../../../abstractions/api.service\";\nimport { Utils } from \"../../../../platform/misc/utils\";\n\nimport { Forwarder } from \"./forwarder\";\nimport { ForwarderOptions } from \"./forwarder-options\";\n\nexport class ForwardEmailForwarder implements Forwarder {\n  async generate(apiService: ApiService, options: ForwarderOptions): Promise<string> {\n    if (options.apiKey == null || options.apiKey === \"\") {\n      throw \"Invalid Forward Email API key.\";\n    }\n    if (options.forwardemail?.domain == null || options.forwardemail.domain === \"\") {\n      throw \"Invalid Forward Email domain.\";\n    }\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Basic \" + Utils.fromUtf8ToB64(options.apiKey + \":\"),\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    const url = `https://api.forwardemail.net/v1/domains/${options.forwardemail.domain}/aliases`;\n    requestInit.body = JSON.stringify({\n      labels: options.website,\n      description:\n        (options.website != null ? \"Website: \" + options.website + \". \" : \"\") +\n        \"Generated by Bitwarden.\",\n    });\n    const request = new Request(url, requestInit);\n    const response = await apiService.nativeFetch(request);\n    if (response.status === 200 || response.status === 201) {\n      const json = await response.json();\n      return json?.name + \"@\" + (json?.domain?.name || options.forwardemail.domain);\n    }\n    if (response.status === 401) {\n      throw \"Invalid Forward Email API key.\";\n    }\n    const json = await response.json();\n    if (json?.message != null) {\n      throw \"Forward Email error:\\n\" + json.message;\n    }\n    if (json?.error != null) {\n      throw \"Forward Email error:\\n\" + json.error;\n    }\n    throw \"Unknown Forward Email error occurred.\";\n  }\n}\n","import { ApiService } from \"../../../abstractions/api.service\";\nimport { CryptoService } from \"../../../platform/abstractions/crypto.service\";\nimport { StateService } from \"../../../platform/abstractions/state.service\";\nimport { EFFLongWordList } from \"../../../platform/misc/wordlist\";\n\nimport {\n  AnonAddyForwarder,\n  DuckDuckGoForwarder,\n  FastmailForwarder,\n  FirefoxRelayForwarder,\n  ForwardEmailForwarder,\n  Forwarder,\n  ForwarderOptions,\n  SimpleLoginForwarder,\n} from \"./email-forwarders\";\nimport { UsernameGeneratorOptions } from \"./username-generation-options\";\nimport { UsernameGenerationServiceAbstraction } from \"./username-generation.service.abstraction\";\n\nconst DefaultOptions: UsernameGeneratorOptions = {\n  type: \"word\",\n  wordCapitalize: true,\n  wordIncludeNumber: true,\n  subaddressType: \"random\",\n  catchallType: \"random\",\n  forwardedService: \"\",\n  forwardedAnonAddyDomain: \"anonaddy.me\",\n  forwardedAnonAddyBaseUrl: \"https://app.addy.io\",\n  forwardedForwardEmailDomain: \"hideaddress.net\",\n  forwardedSimpleLoginBaseUrl: \"https://app.simplelogin.io\",\n};\n\nexport class UsernameGenerationService implements UsernameGenerationServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private stateService: StateService,\n    private apiService: ApiService\n  ) {}\n\n  generateUsername(options: UsernameGeneratorOptions): Promise<string> {\n    if (options.type === \"catchall\") {\n      return this.generateCatchall(options);\n    } else if (options.type === \"subaddress\") {\n      return this.generateSubaddress(options);\n    } else if (options.type === \"forwarded\") {\n      return this.generateForwarded(options);\n    } else {\n      return this.generateWord(options);\n    }\n  }\n\n  async generateWord(options: UsernameGeneratorOptions): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.wordCapitalize == null) {\n      o.wordCapitalize = true;\n    }\n    if (o.wordIncludeNumber == null) {\n      o.wordIncludeNumber = true;\n    }\n\n    const wordIndex = await this.cryptoService.randomNumber(0, EFFLongWordList.length - 1);\n    let word = EFFLongWordList[wordIndex];\n    if (o.wordCapitalize) {\n      word = word.charAt(0).toUpperCase() + word.slice(1);\n    }\n    if (o.wordIncludeNumber) {\n      const num = await this.cryptoService.randomNumber(1, 9999);\n      word = word + this.zeroPad(num.toString(), 4);\n    }\n    return word;\n  }\n\n  async generateSubaddress(options: UsernameGeneratorOptions): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    const subaddressEmail = o.subaddressEmail;\n    if (subaddressEmail == null || subaddressEmail.length < 3) {\n      return o.subaddressEmail;\n    }\n    const atIndex = subaddressEmail.indexOf(\"@\");\n    if (atIndex < 1 || atIndex >= subaddressEmail.length - 1) {\n      return subaddressEmail;\n    }\n    if (o.subaddressType == null) {\n      o.subaddressType = \"random\";\n    }\n\n    const emailBeginning = subaddressEmail.substr(0, atIndex);\n    const emailEnding = subaddressEmail.substr(atIndex + 1, subaddressEmail.length);\n\n    let subaddressString = \"\";\n    if (o.subaddressType === \"random\") {\n      subaddressString = await this.randomString(8);\n    } else if (o.subaddressType === \"website-name\") {\n      subaddressString = o.website;\n    }\n    return emailBeginning + \"+\" + subaddressString + \"@\" + emailEnding;\n  }\n\n  async generateCatchall(options: UsernameGeneratorOptions): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.catchallDomain == null || o.catchallDomain === \"\") {\n      return null;\n    }\n    if (o.catchallType == null) {\n      o.catchallType = \"random\";\n    }\n\n    let startString = \"\";\n    if (o.catchallType === \"random\") {\n      startString = await this.randomString(8);\n    } else if (o.catchallType === \"website-name\") {\n      startString = o.website;\n    }\n    return startString + \"@\" + o.catchallDomain;\n  }\n\n  async generateForwarded(options: UsernameGeneratorOptions): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.forwardedService == null) {\n      return null;\n    }\n\n    let forwarder: Forwarder = null;\n    const forwarderOptions = new ForwarderOptions();\n    forwarderOptions.website = o.website;\n    if (o.forwardedService === \"simplelogin\") {\n      forwarder = new SimpleLoginForwarder();\n      forwarderOptions.apiKey = o.forwardedSimpleLoginApiKey;\n      forwarderOptions.simplelogin.baseUrl = o.forwardedSimpleLoginBaseUrl;\n    } else if (o.forwardedService === \"anonaddy\") {\n      forwarder = new AnonAddyForwarder();\n      forwarderOptions.apiKey = o.forwardedAnonAddyApiToken;\n      forwarderOptions.anonaddy.domain = o.forwardedAnonAddyDomain;\n      forwarderOptions.anonaddy.baseUrl = o.forwardedAnonAddyBaseUrl;\n    } else if (o.forwardedService === \"firefoxrelay\") {\n      forwarder = new FirefoxRelayForwarder();\n      forwarderOptions.apiKey = o.forwardedFirefoxApiToken;\n    } else if (o.forwardedService === \"fastmail\") {\n      forwarder = new FastmailForwarder();\n      forwarderOptions.apiKey = o.forwardedFastmailApiToken;\n    } else if (o.forwardedService === \"duckduckgo\") {\n      forwarder = new DuckDuckGoForwarder();\n      forwarderOptions.apiKey = o.forwardedDuckDuckGoToken;\n    } else if (o.forwardedService === \"forwardemail\") {\n      forwarder = new ForwardEmailForwarder();\n      forwarderOptions.apiKey = o.forwardedForwardEmailApiToken;\n      forwarderOptions.forwardemail.domain = o.forwardedForwardEmailDomain;\n    }\n\n    if (forwarder == null) {\n      return null;\n    }\n\n    return forwarder.generate(this.apiService, forwarderOptions);\n  }\n\n  async getOptions(): Promise<UsernameGeneratorOptions> {\n    let options = await this.stateService.getUsernameGenerationOptions();\n    if (options == null) {\n      options = Object.assign({}, DefaultOptions);\n    } else {\n      options = Object.assign({}, DefaultOptions, options);\n    }\n    await this.stateService.setUsernameGenerationOptions(options);\n    return options;\n  }\n\n  async saveOptions(options: UsernameGeneratorOptions) {\n    await this.stateService.setUsernameGenerationOptions(options);\n  }\n\n  private async randomString(length: number) {\n    let str = \"\";\n    const charSet = \"abcdefghijklmnopqrstuvwxyz1234567890\";\n    for (let i = 0; i < length; i++) {\n      const randomCharIndex = await this.cryptoService.randomNumber(0, charSet.length - 1);\n      str += charSet.charAt(randomCharIndex);\n    }\n    return str;\n  }\n\n  // ref: https://stackoverflow.com/a/10073788\n  private zeroPad(number: string, width: number) {\n    return number.length >= width\n      ? number\n      : new Array(width - number.length + 1).join(\"0\") + number;\n  }\n}\n","export enum SendType {\n  Text = 0,\n  File = 1,\n}\n","import * as zxcvbn from \"zxcvbn\";\n\nimport { PasswordStrengthServiceAbstraction } from \"./password-strength.service.abstraction\";\n\nexport class PasswordStrengthService implements PasswordStrengthServiceAbstraction {\n  /**\n   * Calculates a password strength score using zxcvbn.\n   * @param password The password to calculate the strength of.\n   * @param emailInput An unparsed email address to use as user input.\n   * @param userInputs An array of additional user inputs to use when calculating the strength.\n   */\n  getPasswordStrength(\n    password: string,\n    emailInput: string = null,\n    userInputs: string[] = null\n  ): zxcvbn.ZXCVBNResult {\n    if (password == null || password.length === 0) {\n      return null;\n    }\n    const globalUserInputs = [\n      \"bitwarden\",\n      \"bit\",\n      \"warden\",\n      ...(userInputs ?? []),\n      ...this.emailToUserInputs(emailInput),\n    ];\n    // Use a hash set to get rid of any duplicate user inputs\n    const finalUserInputs = Array.from(new Set(globalUserInputs));\n    const result = zxcvbn(password, finalUserInputs);\n    return result;\n  }\n\n  /**\n   * Convert an email address into a list of user inputs for zxcvbn by\n   * taking the local part of the email address and splitting it into words.\n   * @param email\n   * @private\n   */\n  private emailToUserInputs(email: string): string[] {\n    if (email == null || email.length === 0) {\n      return [];\n    }\n    const atPosition = email.indexOf(\"@\");\n    if (atPosition < 0) {\n      return [];\n    }\n    return email\n      .substring(0, atPosition)\n      .trim()\n      .toLowerCase()\n      .split(/[^A-Za-z0-9]/);\n  }\n}\n","import { SendFileApi } from \"../api/send-file.api\";\n\nexport class SendFileData {\n  id: string;\n  fileName: string;\n  size: string;\n  sizeName: string;\n\n  constructor(data?: SendFileApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.id = data.id;\n    this.fileName = data.fileName;\n    this.size = data.size;\n    this.sizeName = data.sizeName;\n  }\n}\n","import { SendTextApi } from \"../api/send-text.api\";\n\nexport class SendTextData {\n  text: string;\n  hidden: boolean;\n\n  constructor(data?: SendTextApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.text = data.text;\n    this.hidden = data.hidden;\n  }\n}\n","import { SendType } from \"../../enums/send-type\";\nimport { SendResponse } from \"../response/send.response\";\n\nimport { SendFileData } from \"./send-file.data\";\nimport { SendTextData } from \"./send-text.data\";\n\nexport class SendData {\n  id: string;\n  accessId: string;\n  type: SendType;\n  name: string;\n  notes: string;\n  file: SendFileData;\n  text: SendTextData;\n  key: string;\n  maxAccessCount?: number;\n  accessCount: number;\n  revisionDate: string;\n  expirationDate: string;\n  deletionDate: string;\n  password: string;\n  disabled: boolean;\n  hideEmail: boolean;\n\n  constructor(response?: SendResponse) {\n    if (response == null) {\n      return;\n    }\n\n    this.id = response.id;\n    this.accessId = response.accessId;\n    this.type = response.type;\n    this.name = response.name;\n    this.notes = response.notes;\n    this.key = response.key;\n    this.maxAccessCount = response.maxAccessCount;\n    this.accessCount = response.accessCount;\n    this.revisionDate = response.revisionDate;\n    this.expirationDate = response.expirationDate;\n    this.deletionDate = response.deletionDate;\n    this.password = response.password;\n    this.disabled = response.disable;\n    this.hideEmail = response.hideEmail;\n\n    switch (this.type) {\n      case SendType.Text:\n        this.text = new SendTextData(response.text);\n        break;\n      case SendType.File:\n        this.file = new SendFileData(response.file);\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { SendType } from \"../../enums/send-type\";\nimport { SendFileApi } from \"../api/send-file.api\";\nimport { SendTextApi } from \"../api/send-text.api\";\nimport { Send } from \"../domain/send\";\n\nexport class SendRequest {\n  type: SendType;\n  fileLength?: number;\n  name: string;\n  notes: string;\n  key: string;\n  maxAccessCount?: number;\n  expirationDate: string;\n  deletionDate: string;\n  text: SendTextApi;\n  file: SendFileApi;\n  password: string;\n  disabled: boolean;\n  hideEmail: boolean;\n\n  constructor(send: Send, fileLength?: number) {\n    this.type = send.type;\n    this.fileLength = fileLength;\n    this.name = send.name ? send.name.encryptedString : null;\n    this.notes = send.notes ? send.notes.encryptedString : null;\n    this.maxAccessCount = send.maxAccessCount;\n    this.expirationDate = send.expirationDate != null ? send.expirationDate.toISOString() : null;\n    this.deletionDate = send.deletionDate != null ? send.deletionDate.toISOString() : null;\n    this.key = send.key != null ? send.key.encryptedString : null;\n    this.password = send.password;\n    this.disabled = send.disabled;\n    this.hideEmail = send.hideEmail;\n\n    switch (this.type) {\n      case SendType.Text:\n        this.text = new SendTextApi();\n        this.text.text = send.text.text != null ? send.text.text.encryptedString : null;\n        this.text.hidden = send.text.hidden;\n        break;\n      case SendType.File:\n        this.file = new SendFileApi();\n        this.file.fileName = send.file.fileName != null ? send.file.fileName.encryptedString : null;\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\nimport { SendType } from \"../../enums/send-type\";\nimport { SendFileApi } from \"../api/send-file.api\";\nimport { SendTextApi } from \"../api/send-text.api\";\n\nexport class SendAccessResponse extends BaseResponse {\n  id: string;\n  type: SendType;\n  name: string;\n  file: SendFileApi;\n  text: SendTextApi;\n  expirationDate: Date;\n  creatorIdentifier: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n\n    const text = this.getResponseProperty(\"Text\");\n    if (text != null) {\n      this.text = new SendTextApi(text);\n    }\n\n    const file = this.getResponseProperty(\"File\");\n    if (file != null) {\n      this.file = new SendFileApi(file);\n    }\n\n    this.expirationDate = this.getResponseProperty(\"ExpirationDate\");\n    this.creatorIdentifier = this.getResponseProperty(\"CreatorIdentifier\");\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\n\nexport class SendFileDownloadDataResponse extends BaseResponse {\n  id: string = null;\n  url: string = null;\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.url = this.getResponseProperty(\"Url\");\n  }\n}\n","import { FileUploadType } from \"../../../../enums\";\nimport { BaseResponse } from \"../../../../models/response/base.response\";\n\nimport { SendResponse } from \"./send.response\";\n\nexport class SendFileUploadDataResponse extends BaseResponse {\n  fileUploadType: FileUploadType;\n  sendResponse: SendResponse;\n  url: string = null;\n  constructor(response: any) {\n    super(response);\n    this.fileUploadType = this.getResponseProperty(\"FileUploadType\");\n    const sendResponse = this.getResponseProperty(\"SendResponse\");\n    this.sendResponse = sendResponse == null ? null : new SendResponse(sendResponse);\n    this.url = this.getResponseProperty(\"Url\");\n  }\n}\n","import { ApiService } from \"../../../abstractions/api.service\";\nimport { ErrorResponse } from \"../../../models/response/error.response\";\nimport { ListResponse } from \"../../../models/response/list.response\";\nimport {\n  FileUploadApiMethods,\n  FileUploadService,\n} from \"../../../platform/abstractions/file-upload/file-upload.service\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { EncArrayBuffer } from \"../../../platform/models/domain/enc-array-buffer\";\nimport { SendType } from \"../enums/send-type\";\nimport { SendData } from \"../models/data/send.data\";\nimport { Send } from \"../models/domain/send\";\nimport { SendAccessRequest } from \"../models/request/send-access.request\";\nimport { SendRequest } from \"../models/request/send.request\";\nimport { SendAccessResponse } from \"../models/response/send-access.response\";\nimport { SendFileDownloadDataResponse } from \"../models/response/send-file-download-data.response\";\nimport { SendFileUploadDataResponse } from \"../models/response/send-file-upload-data.response\";\nimport { SendResponse } from \"../models/response/send.response\";\nimport { SendAccessView } from \"../models/view/send-access.view\";\n\nimport { SendApiService as SendApiServiceAbstraction } from \"./send-api.service.abstraction\";\nimport { InternalSendService } from \"./send.service.abstraction\";\n\nexport class SendApiService implements SendApiServiceAbstraction {\n  constructor(\n    private apiService: ApiService,\n    private fileUploadService: FileUploadService,\n    private sendService: InternalSendService\n  ) {}\n\n  async getSend(id: string): Promise<SendResponse> {\n    const r = await this.apiService.send(\"GET\", \"/sends/\" + id, null, true, true);\n    return new SendResponse(r);\n  }\n\n  async postSendAccess(\n    id: string,\n    request: SendAccessRequest,\n    apiUrl?: string\n  ): Promise<SendAccessResponse> {\n    const addSendIdHeader = (headers: Headers) => {\n      headers.set(\"Send-Id\", id);\n    };\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/sends/access/\" + id,\n      request,\n      false,\n      true,\n      apiUrl,\n      addSendIdHeader\n    );\n    return new SendAccessResponse(r);\n  }\n\n  async getSendFileDownloadData(\n    send: SendAccessView,\n    request: SendAccessRequest,\n    apiUrl?: string\n  ): Promise<SendFileDownloadDataResponse> {\n    const addSendIdHeader = (headers: Headers) => {\n      headers.set(\"Send-Id\", send.id);\n    };\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/sends/\" + send.id + \"/access/file/\" + send.file.id,\n      request,\n      false,\n      true,\n      apiUrl,\n      addSendIdHeader\n    );\n    return new SendFileDownloadDataResponse(r);\n  }\n\n  async getSends(): Promise<ListResponse<SendResponse>> {\n    const r = await this.apiService.send(\"GET\", \"/sends\", null, true, true);\n    return new ListResponse(r, SendResponse);\n  }\n\n  async postSend(request: SendRequest): Promise<SendResponse> {\n    const r = await this.apiService.send(\"POST\", \"/sends\", request, true, true);\n    return new SendResponse(r);\n  }\n\n  async postFileTypeSend(request: SendRequest): Promise<SendFileUploadDataResponse> {\n    const r = await this.apiService.send(\"POST\", \"/sends/file/v2\", request, true, true);\n    return new SendFileUploadDataResponse(r);\n  }\n\n  async renewSendFileUploadUrl(\n    sendId: string,\n    fileId: string\n  ): Promise<SendFileUploadDataResponse> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/sends/\" + sendId + \"/file/\" + fileId,\n      null,\n      true,\n      true\n    );\n    return new SendFileUploadDataResponse(r);\n  }\n\n  postSendFile(sendId: string, fileId: string, data: FormData): Promise<any> {\n    return this.apiService.send(\"POST\", \"/sends/\" + sendId + \"/file/\" + fileId, data, true, false);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async postSendFileLegacy(data: FormData): Promise<SendResponse> {\n    const r = await this.apiService.send(\"POST\", \"/sends/file\", data, true, true);\n    return new SendResponse(r);\n  }\n\n  async putSend(id: string, request: SendRequest): Promise<SendResponse> {\n    const r = await this.apiService.send(\"PUT\", \"/sends/\" + id, request, true, true);\n    return new SendResponse(r);\n  }\n\n  async putSendRemovePassword(id: string): Promise<SendResponse> {\n    const r = await this.apiService.send(\n      \"PUT\",\n      \"/sends/\" + id + \"/remove-password\",\n      null,\n      true,\n      true\n    );\n    return new SendResponse(r);\n  }\n\n  deleteSend(id: string): Promise<any> {\n    return this.apiService.send(\"DELETE\", \"/sends/\" + id, null, true, false);\n  }\n\n  async save(sendData: [Send, EncArrayBuffer]): Promise<any> {\n    const response = await this.upload(sendData);\n\n    const data = new SendData(response);\n    await this.sendService.upsert(data);\n  }\n\n  async delete(id: string): Promise<any> {\n    await this.deleteSend(id);\n    await this.sendService.delete(id);\n  }\n\n  async removePassword(id: string): Promise<any> {\n    const response = await this.putSendRemovePassword(id);\n    const data = new SendData(response);\n    await this.sendService.upsert(data);\n  }\n\n  // Send File Upload methods\n\n  private async upload(sendData: [Send, EncArrayBuffer]): Promise<SendResponse> {\n    const request = new SendRequest(sendData[0], sendData[1]?.buffer.byteLength);\n    let response: SendResponse;\n    if (sendData[0].id == null) {\n      if (sendData[0].type === SendType.Text) {\n        response = await this.postSend(request);\n      } else {\n        try {\n          const uploadDataResponse = await this.postFileTypeSend(request);\n          response = uploadDataResponse.sendResponse;\n          await this.fileUploadService.upload(\n            uploadDataResponse,\n            sendData[0].file.fileName,\n            sendData[1],\n            this.generateMethods(uploadDataResponse, response)\n          );\n        } catch (e) {\n          if (e instanceof ErrorResponse && (e as ErrorResponse).statusCode === 404) {\n            response = await this.legacyServerSendFileUpload(sendData, request);\n          } else if (e instanceof ErrorResponse) {\n            throw new Error((e as ErrorResponse).getSingleMessage());\n          } else {\n            throw e;\n          }\n        }\n      }\n      sendData[0].id = response.id;\n      sendData[0].accessId = response.accessId;\n    } else {\n      response = await this.putSend(sendData[0].id, request);\n    }\n    return response;\n  }\n\n  private generateMethods(\n    uploadData: SendFileUploadDataResponse,\n    response: SendResponse\n  ): FileUploadApiMethods {\n    return {\n      postDirect: this.generatePostDirectCallback(response),\n      renewFileUploadUrl: this.generateRenewFileUploadUrlCallback(response.id, response.file.id),\n      rollback: this.generateRollbackCallback(response.id),\n    };\n  }\n\n  private generatePostDirectCallback(sendResponse: SendResponse) {\n    return (data: FormData) => {\n      return this.postSendFile(sendResponse.id, sendResponse.file.id, data);\n    };\n  }\n\n  private generateRenewFileUploadUrlCallback(sendId: string, fileId: string) {\n    return async () => {\n      const renewResponse = await this.renewSendFileUploadUrl(sendId, fileId);\n      return renewResponse?.url;\n    };\n  }\n\n  private generateRollbackCallback(sendId: string) {\n    return () => {\n      return this.deleteSend(sendId);\n    };\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async legacyServerSendFileUpload(\n    sendData: [Send, EncArrayBuffer],\n    request: SendRequest\n  ): Promise<SendResponse> {\n    const fd = new FormData();\n    try {\n      const blob = new Blob([sendData[1].buffer], { type: \"application/octet-stream\" });\n      fd.append(\"model\", JSON.stringify(request));\n      fd.append(\"data\", blob, sendData[0].file.fileName.encryptedString);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\"model\", JSON.stringify(request));\n        fd.append(\n          \"data\",\n          Buffer.from(sendData[1].buffer) as any,\n          {\n            filepath: sendData[0].file.fileName.encryptedString,\n            contentType: \"application/octet-stream\",\n          } as any\n        );\n      } else {\n        throw e;\n      }\n    }\n    return await this.postSendFileLegacy(fd);\n  }\n}\n","// required to avoid linting errors when there are no flags\n/* eslint-disable @typescript-eslint/ban-types */\nexport type SharedFlags = {\n  multithreadDecryption: boolean;\n  showPasswordless?: boolean;\n  enableCipherKeyEncryption?: boolean;\n};\n\n// required to avoid linting errors when there are no flags\n/* eslint-disable @typescript-eslint/ban-types */\nexport type SharedDevFlags = {};\n\nfunction getFlags<T>(envFlags: string | T): T {\n  if (typeof envFlags === \"string\") {\n    return JSON.parse(envFlags) as T;\n  } else {\n    return envFlags as T;\n  }\n}\n\n/**\n * Gets the value of a feature flag from environment.\n * All flags default to \"on\" (true).\n * Only use for shared code in `libs`, otherwise use the client-specific function.\n * @param flag The name of the feature flag to check\n * @returns The value of the flag\n */\nexport function flagEnabled<Flags extends SharedFlags>(flag: keyof Flags): boolean {\n  const flags = getFlags<Flags>(process.env.FLAGS);\n  return flags[flag] == null || !!flags[flag];\n}\n\n/**\n * Gets the value of a dev flag from environment.\n * Will always return false unless in development.\n * Only use for shared code in `libs`, otherwise use the client-specific function.\n * @param flag The name of the dev flag to check\n * @returns The value of the flag\n */\nexport function devFlagEnabled<DevFlags extends SharedDevFlags>(flag: keyof DevFlags): boolean {\n  if (process.env.ENV !== \"development\") {\n    return false;\n  }\n\n  const devFlags = getFlags<DevFlags>(process.env.DEV_FLAGS);\n  return devFlags[flag] == null || !!devFlags[flag];\n}\n\n/**\n * Gets the value of a dev flag from environment.\n * Will always return false unless in development.\n * @param flag The name of the dev flag to check\n * @returns The value of the flag\n * @throws Error if the flag is not enabled\n */\nexport function devFlagValue<DevFlags extends SharedDevFlags>(\n  flag: keyof DevFlags\n): DevFlags[keyof DevFlags] {\n  if (!devFlagEnabled(flag)) {\n    throw new Error(`This method should not be called, it is protected by a disabled dev flag.`);\n  }\n\n  const devFlags = getFlags<DevFlags>(process.env.DEV_FLAGS);\n  return devFlags[flag];\n}\n","/**\n * Use as a Decorator on async functions, it will prevent multiple 'active' calls as the same time\n *\n * If a promise was returned from a previous call to this function, that hasn't yet resolved it will\n * be returned, instead of calling the original function again\n *\n * Results are not cached, once the promise has returned, the next call will result in a fresh call\n *\n * Read more at https://github.com/bitwarden/jslib/pull/7\n */\nexport function sequentialize(cacheKey: (args: any[]) => string) {\n  return (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const originalMethod: () => Promise<any> = descriptor.value;\n    const caches = new Map<any, Map<string, Promise<any>>>();\n\n    const getCache = (obj: any) => {\n      let cache = caches.get(obj);\n      if (cache != null) {\n        return cache;\n      }\n      cache = new Map<string, Promise<any>>();\n      caches.set(obj, cache);\n      return cache;\n    };\n\n    return {\n      value: function (...args: any[]) {\n        const cache = getCache(this);\n        const argsCacheKey = cacheKey(args);\n        let response = cache.get(argsCacheKey);\n        if (response != null) {\n          return response;\n        }\n\n        const onFinally = () => {\n          cache.delete(argsCacheKey);\n          if (cache.size === 0) {\n            caches.delete(this);\n          }\n        };\n        response = originalMethod\n          .apply(this, args)\n          .then((val: any) => {\n            onFinally();\n            return val;\n          })\n          .catch((err: any) => {\n            onFinally();\n            throw err;\n          });\n\n        cache.set(argsCacheKey, response);\n        return response;\n      },\n    };\n  };\n}\n","import { CipherView } from \"../view/cipher.view\";\n\nconst CacheTTL = 3000;\n\nexport class SortedCiphersCache {\n  private readonly sortedCiphersByUrl: Map<string, Ciphers> = new Map<string, Ciphers>();\n  private readonly timeouts: Map<string, any> = new Map<string, any>();\n\n  constructor(private readonly comparator: (a: CipherView, b: CipherView) => number) {}\n\n  isCached(url: string) {\n    return this.sortedCiphersByUrl.has(url);\n  }\n\n  addCiphers(url: string, ciphers: CipherView[]) {\n    ciphers.sort(this.comparator);\n    this.sortedCiphersByUrl.set(url, new Ciphers(ciphers));\n    this.resetTimer(url);\n  }\n\n  getLastUsed(url: string) {\n    this.resetTimer(url);\n    return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getLastUsed() : null;\n  }\n\n  getLastLaunched(url: string) {\n    return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getLastLaunched() : null;\n  }\n\n  getNext(url: string) {\n    this.resetTimer(url);\n    return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getNext() : null;\n  }\n\n  updateLastUsedIndex(url: string) {\n    if (this.isCached(url)) {\n      this.sortedCiphersByUrl.get(url).updateLastUsedIndex();\n    }\n  }\n\n  clear() {\n    this.sortedCiphersByUrl.clear();\n    this.timeouts.clear();\n  }\n\n  private resetTimer(url: string) {\n    clearTimeout(this.timeouts.get(url));\n    this.timeouts.set(\n      url,\n      setTimeout(() => {\n        this.sortedCiphersByUrl.delete(url);\n        this.timeouts.delete(url);\n      }, CacheTTL)\n    );\n  }\n}\n\nclass Ciphers {\n  lastUsedIndex = -1;\n\n  constructor(private readonly ciphers: CipherView[]) {}\n\n  getLastUsed() {\n    this.lastUsedIndex = Math.max(this.lastUsedIndex, 0);\n    return this.ciphers[this.lastUsedIndex];\n  }\n\n  getLastLaunched() {\n    const usedCiphers = this.ciphers.filter((cipher) => cipher.localData?.lastLaunched);\n    const sortedCiphers = usedCiphers.sort(\n      (x, y) => y.localData.lastLaunched.valueOf() - x.localData.lastLaunched.valueOf()\n    );\n    return sortedCiphers[0];\n  }\n\n  getNextIndex() {\n    return (this.lastUsedIndex + 1) % this.ciphers.length;\n  }\n\n  getNext() {\n    return this.ciphers[this.getNextIndex()];\n  }\n\n  updateLastUsedIndex() {\n    this.lastUsedIndex = this.getNextIndex();\n  }\n}\n","export class CipherBulkDeleteRequest {\n  ids: string[];\n  organizationId: string;\n\n  constructor(ids: string[], organizationId?: string) {\n    this.ids = ids == null ? [] : ids;\n    this.organizationId = organizationId;\n  }\n}\n","export class CipherBulkMoveRequest {\n  ids: string[];\n  folderId: string;\n\n  constructor(ids: string[], folderId: string) {\n    this.ids = ids == null ? [] : ids;\n    this.folderId = folderId;\n  }\n}\n","export class CipherBulkRestoreRequest {\n  ids: string[];\n  organizationId: string;\n\n  constructor(ids: string[], organizationId?: string) {\n    this.ids = ids == null ? [] : ids;\n    this.organizationId = organizationId;\n  }\n}\n","export class AttachmentRequest {\n  fileName: string;\n  key: string;\n  fileSize: number;\n  adminRequest: boolean;\n}\n","import { CardApi } from \"../../../models/api/card.api\";\nimport { FieldApi } from \"../../../models/api/field.api\";\nimport { IdentityApi } from \"../../../models/api/identity.api\";\nimport { LoginUriApi } from \"../../../models/api/login-uri.api\";\nimport { LoginApi } from \"../../../models/api/login.api\";\nimport { SecureNoteApi } from \"../../../models/api/secure-note.api\";\nimport { Fido2CredentialApi } from \"../../api/fido2-credential.api\";\nimport { CipherRepromptType } from \"../../enums/cipher-reprompt-type\";\nimport { CipherType } from \"../../enums/cipher-type\";\nimport { Cipher } from \"../domain/cipher\";\n\nimport { AttachmentRequest } from \"./attachment.request\";\nimport { PasswordHistoryRequest } from \"./password-history.request\";\n\nexport class CipherRequest {\n  type: CipherType;\n  folderId: string;\n  organizationId: string;\n  name: string;\n  notes: string;\n  favorite: boolean;\n  login: LoginApi;\n  secureNote: SecureNoteApi;\n  card: CardApi;\n  identity: IdentityApi;\n  fields: FieldApi[];\n  passwordHistory: PasswordHistoryRequest[];\n  // Deprecated, remove at some point and rename attachments2 to attachments\n  attachments: { [id: string]: string };\n  attachments2: { [id: string]: AttachmentRequest };\n  lastKnownRevisionDate: Date;\n  reprompt: CipherRepromptType;\n  key: string;\n\n  constructor(cipher: Cipher) {\n    this.type = cipher.type;\n    this.folderId = cipher.folderId;\n    this.organizationId = cipher.organizationId;\n    this.name = cipher.name ? cipher.name.encryptedString : null;\n    this.notes = cipher.notes ? cipher.notes.encryptedString : null;\n    this.favorite = cipher.favorite;\n    this.lastKnownRevisionDate = cipher.revisionDate;\n    this.reprompt = cipher.reprompt;\n    this.key = cipher.key?.encryptedString;\n\n    switch (this.type) {\n      case CipherType.Login:\n        this.login = new LoginApi();\n        this.login.uris = null;\n        this.login.username = cipher.login.username ? cipher.login.username.encryptedString : null;\n        this.login.password = cipher.login.password ? cipher.login.password.encryptedString : null;\n        this.login.passwordRevisionDate =\n          cipher.login.passwordRevisionDate != null\n            ? cipher.login.passwordRevisionDate.toISOString()\n            : null;\n        this.login.totp = cipher.login.totp ? cipher.login.totp.encryptedString : null;\n        this.login.autofillOnPageLoad = cipher.login.autofillOnPageLoad;\n\n        if (cipher.login.uris != null) {\n          this.login.uris = cipher.login.uris.map((u) => {\n            const uri = new LoginUriApi();\n            uri.uri = u.uri != null ? u.uri.encryptedString : null;\n            uri.match = u.match != null ? u.match : null;\n            return uri;\n          });\n        }\n\n        if (cipher.login.fido2Credentials != null) {\n          this.login.fido2Credentials = cipher.login.fido2Credentials.map((key) => {\n            const keyApi = new Fido2CredentialApi();\n            keyApi.credentialId =\n              key.credentialId != null ? key.credentialId.encryptedString : null;\n            keyApi.keyType =\n              key.keyType != null ? (key.keyType.encryptedString as \"public-key\") : null;\n            keyApi.keyAlgorithm =\n              key.keyAlgorithm != null ? (key.keyAlgorithm.encryptedString as \"ECDSA\") : null;\n            keyApi.keyCurve =\n              key.keyCurve != null ? (key.keyCurve.encryptedString as \"P-256\") : null;\n            keyApi.keyValue = key.keyValue != null ? key.keyValue.encryptedString : null;\n            keyApi.rpId = key.rpId != null ? key.rpId.encryptedString : null;\n            keyApi.rpName = key.rpName != null ? key.rpName.encryptedString : null;\n            keyApi.counter = key.counter != null ? key.counter.encryptedString : null;\n            keyApi.userHandle = key.userHandle != null ? key.userHandle.encryptedString : null;\n            keyApi.userDisplayName =\n              key.userDisplayName != null ? key.userDisplayName.encryptedString : null;\n            keyApi.discoverable =\n              key.discoverable != null ? key.discoverable.encryptedString : null;\n            keyApi.creationDate = key.creationDate != null ? key.creationDate.toISOString() : null;\n            return keyApi;\n          });\n        }\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNoteApi();\n        this.secureNote.type = cipher.secureNote.type;\n        break;\n      case CipherType.Card:\n        this.card = new CardApi();\n        this.card.cardholderName =\n          cipher.card.cardholderName != null ? cipher.card.cardholderName.encryptedString : null;\n        this.card.brand = cipher.card.brand != null ? cipher.card.brand.encryptedString : null;\n        this.card.number = cipher.card.number != null ? cipher.card.number.encryptedString : null;\n        this.card.expMonth =\n          cipher.card.expMonth != null ? cipher.card.expMonth.encryptedString : null;\n        this.card.expYear =\n          cipher.card.expYear != null ? cipher.card.expYear.encryptedString : null;\n        this.card.code = cipher.card.code != null ? cipher.card.code.encryptedString : null;\n        break;\n      case CipherType.Identity:\n        this.identity = new IdentityApi();\n        this.identity.title =\n          cipher.identity.title != null ? cipher.identity.title.encryptedString : null;\n        this.identity.firstName =\n          cipher.identity.firstName != null ? cipher.identity.firstName.encryptedString : null;\n        this.identity.middleName =\n          cipher.identity.middleName != null ? cipher.identity.middleName.encryptedString : null;\n        this.identity.lastName =\n          cipher.identity.lastName != null ? cipher.identity.lastName.encryptedString : null;\n        this.identity.address1 =\n          cipher.identity.address1 != null ? cipher.identity.address1.encryptedString : null;\n        this.identity.address2 =\n          cipher.identity.address2 != null ? cipher.identity.address2.encryptedString : null;\n        this.identity.address3 =\n          cipher.identity.address3 != null ? cipher.identity.address3.encryptedString : null;\n        this.identity.city =\n          cipher.identity.city != null ? cipher.identity.city.encryptedString : null;\n        this.identity.state =\n          cipher.identity.state != null ? cipher.identity.state.encryptedString : null;\n        this.identity.postalCode =\n          cipher.identity.postalCode != null ? cipher.identity.postalCode.encryptedString : null;\n        this.identity.country =\n          cipher.identity.country != null ? cipher.identity.country.encryptedString : null;\n        this.identity.company =\n          cipher.identity.company != null ? cipher.identity.company.encryptedString : null;\n        this.identity.email =\n          cipher.identity.email != null ? cipher.identity.email.encryptedString : null;\n        this.identity.phone =\n          cipher.identity.phone != null ? cipher.identity.phone.encryptedString : null;\n        this.identity.ssn =\n          cipher.identity.ssn != null ? cipher.identity.ssn.encryptedString : null;\n        this.identity.username =\n          cipher.identity.username != null ? cipher.identity.username.encryptedString : null;\n        this.identity.passportNumber =\n          cipher.identity.passportNumber != null\n            ? cipher.identity.passportNumber.encryptedString\n            : null;\n        this.identity.licenseNumber =\n          cipher.identity.licenseNumber != null\n            ? cipher.identity.licenseNumber.encryptedString\n            : null;\n        break;\n      default:\n        break;\n    }\n\n    if (cipher.fields != null) {\n      this.fields = cipher.fields.map((f) => {\n        const field = new FieldApi();\n        field.type = f.type;\n        field.name = f.name ? f.name.encryptedString : null;\n        field.value = f.value ? f.value.encryptedString : null;\n        field.linkedId = f.linkedId;\n        return field;\n      });\n    }\n\n    if (cipher.passwordHistory != null) {\n      this.passwordHistory = [];\n      cipher.passwordHistory.forEach((ph) => {\n        this.passwordHistory.push({\n          lastUsedDate: ph.lastUsedDate,\n          password: ph.password ? ph.password.encryptedString : null,\n        });\n      });\n    }\n\n    if (cipher.attachments != null) {\n      this.attachments = {};\n      this.attachments2 = {};\n      cipher.attachments.forEach((attachment) => {\n        const fileName = attachment.fileName ? attachment.fileName.encryptedString : null;\n        this.attachments[attachment.id] = fileName;\n        const attachmentRequest = new AttachmentRequest();\n        attachmentRequest.fileName = fileName;\n        if (attachment.key != null) {\n          attachmentRequest.key = attachment.key.encryptedString;\n        }\n        this.attachments2[attachment.id] = attachmentRequest;\n      });\n    }\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherRequest } from \"./cipher.request\";\n\nexport class CipherWithIdRequest extends CipherRequest {\n  id: string;\n\n  constructor(cipher: Cipher) {\n    super(cipher);\n    this.id = cipher.id;\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherWithIdRequest } from \"./cipher-with-id.request\";\n\nexport class CipherBulkShareRequest {\n  ciphers: CipherWithIdRequest[];\n  collectionIds: string[];\n\n  constructor(ciphers: Cipher[], collectionIds: string[]) {\n    if (ciphers != null) {\n      this.ciphers = [];\n      ciphers.forEach((c) => {\n        this.ciphers.push(new CipherWithIdRequest(c));\n      });\n    }\n    this.collectionIds = collectionIds;\n  }\n}\n","export class CipherCollectionsRequest {\n  collectionIds: string[];\n\n  constructor(collectionIds: string[]) {\n    this.collectionIds = collectionIds == null ? [] : collectionIds;\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherRequest } from \"./cipher.request\";\n\nexport class CipherCreateRequest {\n  cipher: CipherRequest;\n  collectionIds: string[];\n\n  constructor(cipher: Cipher) {\n    this.cipher = new CipherRequest(cipher);\n    this.collectionIds = cipher.collectionIds;\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nexport class CipherPartialRequest {\n  folderId: string;\n  favorite: boolean;\n\n  constructor(cipher: Cipher) {\n    this.folderId = cipher.folderId;\n    this.favorite = cipher.favorite;\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherRequest } from \"./cipher.request\";\n\nexport class CipherShareRequest {\n  cipher: CipherRequest;\n  collectionIds: string[];\n\n  constructor(cipher: Cipher) {\n    this.cipher = new CipherRequest(cipher);\n    this.collectionIds = cipher.collectionIds;\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\nimport { SemVer } from \"semver\";\n\nimport { ApiService } from \"../../abstractions/api.service\";\nimport { SearchService } from \"../../abstractions/search.service\";\nimport { SettingsService } from \"../../abstractions/settings.service\";\nimport { FieldType, UriMatchType } from \"../../enums\";\nimport { ErrorResponse } from \"../../models/response/error.response\";\nimport { View } from \"../../models/view/view\";\nimport { ConfigServiceAbstraction } from \"../../platform/abstractions/config/config.service.abstraction\";\nimport { CryptoService } from \"../../platform/abstractions/crypto.service\";\nimport { EncryptService } from \"../../platform/abstractions/encrypt.service\";\nimport { I18nService } from \"../../platform/abstractions/i18n.service\";\nimport { StateService } from \"../../platform/abstractions/state.service\";\nimport { flagEnabled } from \"../../platform/misc/flags\";\nimport { sequentialize } from \"../../platform/misc/sequentialize\";\nimport { Utils } from \"../../platform/misc/utils\";\nimport Domain from \"../../platform/models/domain/domain-base\";\nimport { EncArrayBuffer } from \"../../platform/models/domain/enc-array-buffer\";\nimport { EncString } from \"../../platform/models/domain/enc-string\";\nimport {\n  OrgKey,\n  SymmetricCryptoKey,\n  UserKey,\n} from \"../../platform/models/domain/symmetric-crypto-key\";\nimport { CipherService as CipherServiceAbstraction } from \"../abstractions/cipher.service\";\nimport { CipherFileUploadService } from \"../abstractions/file-upload/cipher-file-upload.service\";\nimport { CipherType } from \"../enums/cipher-type\";\nimport { CipherData } from \"../models/data/cipher.data\";\nimport { Attachment } from \"../models/domain/attachment\";\nimport { Card } from \"../models/domain/card\";\nimport { Cipher } from \"../models/domain/cipher\";\nimport { Fido2Credential } from \"../models/domain/fido2-credential\";\nimport { Field } from \"../models/domain/field\";\nimport { Identity } from \"../models/domain/identity\";\nimport { Login } from \"../models/domain/login\";\nimport { LoginUri } from \"../models/domain/login-uri\";\nimport { Password } from \"../models/domain/password\";\nimport { SecureNote } from \"../models/domain/secure-note\";\nimport { SortedCiphersCache } from \"../models/domain/sorted-ciphers-cache\";\nimport { CipherBulkDeleteRequest } from \"../models/request/cipher-bulk-delete.request\";\nimport { CipherBulkMoveRequest } from \"../models/request/cipher-bulk-move.request\";\nimport { CipherBulkRestoreRequest } from \"../models/request/cipher-bulk-restore.request\";\nimport { CipherBulkShareRequest } from \"../models/request/cipher-bulk-share.request\";\nimport { CipherCollectionsRequest } from \"../models/request/cipher-collections.request\";\nimport { CipherCreateRequest } from \"../models/request/cipher-create.request\";\nimport { CipherPartialRequest } from \"../models/request/cipher-partial.request\";\nimport { CipherShareRequest } from \"../models/request/cipher-share.request\";\nimport { CipherRequest } from \"../models/request/cipher.request\";\nimport { CipherResponse } from \"../models/response/cipher.response\";\nimport { AttachmentView } from \"../models/view/attachment.view\";\nimport { CipherView } from \"../models/view/cipher.view\";\nimport { FieldView } from \"../models/view/field.view\";\nimport { PasswordHistoryView } from \"../models/view/password-history.view\";\n\nconst CIPHER_KEY_ENC_MIN_SERVER_VER = new SemVer(\"2023.9.1\");\n\nexport class CipherService implements CipherServiceAbstraction {\n  private sortedCiphersCache: SortedCiphersCache = new SortedCiphersCache(\n    this.sortCiphersByLastUsed\n  );\n\n  constructor(\n    private cryptoService: CryptoService,\n    private settingsService: SettingsService,\n    private apiService: ApiService,\n    private i18nService: I18nService,\n    private searchService: SearchService,\n    private stateService: StateService,\n    private encryptService: EncryptService,\n    private cipherFileUploadService: CipherFileUploadService,\n    private configService: ConfigServiceAbstraction\n  ) {}\n\n  async getDecryptedCipherCache(): Promise<CipherView[]> {\n    const decryptedCiphers = await this.stateService.getDecryptedCiphers();\n    return decryptedCiphers;\n  }\n\n  async setDecryptedCipherCache(value: CipherView[]) {\n    await this.stateService.setDecryptedCiphers(value);\n    if (this.searchService != null) {\n      if (value == null) {\n        this.searchService.clearIndex();\n      } else {\n        this.searchService.indexCiphers(value);\n      }\n    }\n  }\n\n  async clearCache(userId?: string): Promise<void> {\n    await this.clearDecryptedCiphersState(userId);\n  }\n\n  async encrypt(\n    model: CipherView,\n    keyForEncryption?: SymmetricCryptoKey,\n    keyForCipherKeyDecryption?: SymmetricCryptoKey,\n    originalCipher: Cipher = null\n  ): Promise<Cipher> {\n    if (model.id != null) {\n      if (originalCipher == null) {\n        originalCipher = await this.get(model.id);\n      }\n      if (originalCipher != null) {\n        await this.updateModelfromExistingCipher(model, originalCipher);\n      }\n      this.adjustPasswordHistoryLength(model);\n    }\n\n    const cipher = new Cipher();\n    cipher.id = model.id;\n    cipher.folderId = model.folderId;\n    cipher.favorite = model.favorite;\n    cipher.organizationId = model.organizationId;\n    cipher.type = model.type;\n    cipher.collectionIds = model.collectionIds;\n    cipher.revisionDate = model.revisionDate;\n    cipher.reprompt = model.reprompt;\n    cipher.edit = model.edit;\n\n    if (await this.getCipherKeyEncryptionEnabled()) {\n      cipher.key = originalCipher?.key ?? null;\n      const userOrOrgKey = await this.getKeyForCipherKeyDecryption(cipher);\n      // The keyForEncryption is only used for encrypting the cipher key, not the cipher itself, since cipher key encryption is enabled.\n      // If the caller has provided a key for cipher key encryption, use it. Otherwise, use the user or org key.\n      keyForEncryption ||= userOrOrgKey;\n      // If the caller has provided a key for cipher key decryption, use it. Otherwise, use the user or org key.\n      keyForCipherKeyDecryption ||= userOrOrgKey;\n      return this.encryptCipherWithCipherKey(\n        model,\n        cipher,\n        keyForEncryption,\n        keyForCipherKeyDecryption\n      );\n    } else {\n      if (keyForEncryption == null && cipher.organizationId != null) {\n        keyForEncryption = await this.cryptoService.getOrgKey(cipher.organizationId);\n        if (keyForEncryption == null) {\n          throw new Error(\"Cannot encrypt cipher for organization. No key.\");\n        }\n      }\n      // We want to ensure that the cipher key is null if cipher key encryption is disabled\n      // so that decryption uses the proper key.\n      cipher.key = null;\n      return this.encryptCipher(model, cipher, keyForEncryption);\n    }\n  }\n\n  async encryptAttachments(\n    attachmentsModel: AttachmentView[],\n    key: SymmetricCryptoKey\n  ): Promise<Attachment[]> {\n    if (attachmentsModel == null || attachmentsModel.length === 0) {\n      return null;\n    }\n\n    const promises: Promise<any>[] = [];\n    const encAttachments: Attachment[] = [];\n    attachmentsModel.forEach(async (model) => {\n      const attachment = new Attachment();\n      attachment.id = model.id;\n      attachment.size = model.size;\n      attachment.sizeName = model.sizeName;\n      attachment.url = model.url;\n      const promise = this.encryptObjProperty(\n        model,\n        attachment,\n        {\n          fileName: null,\n        },\n        key\n      ).then(async () => {\n        if (model.key != null) {\n          attachment.key = await this.cryptoService.encrypt(model.key.key, key);\n        }\n        encAttachments.push(attachment);\n      });\n      promises.push(promise);\n    });\n\n    await Promise.all(promises);\n    return encAttachments;\n  }\n\n  async encryptFields(fieldsModel: FieldView[], key: SymmetricCryptoKey): Promise<Field[]> {\n    if (!fieldsModel || !fieldsModel.length) {\n      return null;\n    }\n\n    const self = this;\n    const encFields: Field[] = [];\n    await fieldsModel.reduce(async (promise, field) => {\n      await promise;\n      const encField = await self.encryptField(field, key);\n      encFields.push(encField);\n    }, Promise.resolve());\n\n    return encFields;\n  }\n\n  async encryptField(fieldModel: FieldView, key: SymmetricCryptoKey): Promise<Field> {\n    const field = new Field();\n    field.type = fieldModel.type;\n    field.linkedId = fieldModel.linkedId;\n    // normalize boolean type field values\n    if (fieldModel.type === FieldType.Boolean && fieldModel.value !== \"true\") {\n      fieldModel.value = \"false\";\n    }\n\n    await this.encryptObjProperty(\n      fieldModel,\n      field,\n      {\n        name: null,\n        value: null,\n      },\n      key\n    );\n\n    return field;\n  }\n\n  async encryptPasswordHistories(\n    phModels: PasswordHistoryView[],\n    key: SymmetricCryptoKey\n  ): Promise<Password[]> {\n    if (!phModels || !phModels.length) {\n      return null;\n    }\n\n    const self = this;\n    const encPhs: Password[] = [];\n    await phModels.reduce(async (promise, ph) => {\n      await promise;\n      const encPh = await self.encryptPasswordHistory(ph, key);\n      encPhs.push(encPh);\n    }, Promise.resolve());\n\n    return encPhs;\n  }\n\n  async encryptPasswordHistory(\n    phModel: PasswordHistoryView,\n    key: SymmetricCryptoKey\n  ): Promise<Password> {\n    const ph = new Password();\n    ph.lastUsedDate = phModel.lastUsedDate;\n\n    await this.encryptObjProperty(\n      phModel,\n      ph,\n      {\n        password: null,\n      },\n      key\n    );\n\n    return ph;\n  }\n\n  async get(id: string): Promise<Cipher> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    // eslint-disable-next-line\n    if (ciphers == null || !ciphers.hasOwnProperty(id)) {\n      return null;\n    }\n\n    const localData = await this.stateService.getLocalData();\n    return new Cipher(ciphers[id], localData ? localData[id] : null);\n  }\n\n  async getAll(): Promise<Cipher[]> {\n    const localData = await this.stateService.getLocalData();\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    const response: Cipher[] = [];\n    for (const id in ciphers) {\n      // eslint-disable-next-line\n      if (ciphers.hasOwnProperty(id)) {\n        response.push(new Cipher(ciphers[id], localData ? localData[id] : null));\n      }\n    }\n    return response;\n  }\n\n  @sequentialize(() => \"getAllDecrypted\")\n  async getAllDecrypted(): Promise<CipherView[]> {\n    if ((await this.getDecryptedCipherCache()) != null) {\n      await this.reindexCiphers();\n      return await this.getDecryptedCipherCache();\n    }\n\n    const ciphers = await this.getAll();\n    const orgKeys = await this.cryptoService.getOrgKeys();\n    const userKey = await this.cryptoService.getUserKeyWithLegacySupport();\n    if (orgKeys?.size === 0 && userKey == null) {\n      // return early if there are no keys to decrypt with\n      return;\n    }\n\n    // Group ciphers by orgId or under 'null' for the user's ciphers\n    const grouped = ciphers.reduce((agg, c) => {\n      agg[c.organizationId] ??= [];\n      agg[c.organizationId].push(c);\n      return agg;\n    }, {} as Record<string, Cipher[]>);\n\n    const decCiphers = (\n      await Promise.all(\n        Object.entries(grouped).map(([orgId, groupedCiphers]) =>\n          this.encryptService.decryptItems(groupedCiphers, orgKeys.get(orgId) ?? userKey)\n        )\n      )\n    )\n      .flat()\n      .sort(this.getLocaleSortingFunction());\n\n    await this.setDecryptedCipherCache(decCiphers);\n    return decCiphers;\n  }\n\n  private async reindexCiphers() {\n    const userId = await this.stateService.getUserId();\n    const reindexRequired =\n      this.searchService != null && (this.searchService.indexedEntityId ?? userId) !== userId;\n    if (reindexRequired) {\n      this.searchService.indexCiphers(await this.getDecryptedCipherCache(), userId);\n    }\n  }\n\n  async getAllDecryptedForGrouping(groupingId: string, folder = true): Promise<CipherView[]> {\n    const ciphers = await this.getAllDecrypted();\n\n    return ciphers.filter((cipher) => {\n      if (cipher.isDeleted) {\n        return false;\n      }\n      if (folder && cipher.folderId === groupingId) {\n        return true;\n      } else if (\n        !folder &&\n        cipher.collectionIds != null &&\n        cipher.collectionIds.indexOf(groupingId) > -1\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  async getAllDecryptedForUrl(\n    url: string,\n    includeOtherTypes?: CipherType[],\n    defaultMatch: UriMatchType = null\n  ): Promise<CipherView[]> {\n    if (url == null && includeOtherTypes == null) {\n      return Promise.resolve([]);\n    }\n\n    const equivalentDomains = this.settingsService.getEquivalentDomains(url);\n    const ciphers = await this.getAllDecrypted();\n    defaultMatch ??= await this.stateService.getDefaultUriMatch();\n\n    return ciphers.filter((cipher) => {\n      const cipherIsLogin = cipher.type === CipherType.Login && cipher.login !== null;\n\n      if (cipher.deletedDate !== null) {\n        return false;\n      }\n\n      if (\n        Array.isArray(includeOtherTypes) &&\n        includeOtherTypes.includes(cipher.type) &&\n        !cipherIsLogin\n      ) {\n        return true;\n      }\n\n      if (cipherIsLogin) {\n        return cipher.login.matchesUri(url, equivalentDomains, defaultMatch);\n      }\n\n      return false;\n    });\n  }\n\n  async getAllFromApiForOrganization(organizationId: string): Promise<CipherView[]> {\n    const response = await this.apiService.getCiphersOrganization(organizationId);\n    if (response?.data == null || response.data.length < 1) {\n      return [];\n    }\n\n    const ciphers = response.data.map((cr) => new Cipher(new CipherData(cr)));\n    const key = await this.cryptoService.getOrgKey(organizationId);\n    const decCiphers = await this.encryptService.decryptItems(ciphers, key);\n\n    decCiphers.sort(this.getLocaleSortingFunction());\n    return decCiphers;\n  }\n\n  async getLastUsedForUrl(url: string, autofillOnPageLoad = false): Promise<CipherView> {\n    return this.getCipherForUrl(url, true, false, autofillOnPageLoad);\n  }\n\n  async getLastLaunchedForUrl(url: string, autofillOnPageLoad = false): Promise<CipherView> {\n    return this.getCipherForUrl(url, false, true, autofillOnPageLoad);\n  }\n\n  async getNextCipherForUrl(url: string): Promise<CipherView> {\n    return this.getCipherForUrl(url, false, false, false);\n  }\n\n  updateLastUsedIndexForUrl(url: string) {\n    this.sortedCiphersCache.updateLastUsedIndex(url);\n  }\n\n  async updateLastUsedDate(id: string): Promise<void> {\n    let ciphersLocalData = await this.stateService.getLocalData();\n    if (!ciphersLocalData) {\n      ciphersLocalData = {};\n    }\n\n    if (ciphersLocalData[id]) {\n      ciphersLocalData[id].lastUsedDate = new Date().getTime();\n    } else {\n      ciphersLocalData[id] = {\n        lastUsedDate: new Date().getTime(),\n      };\n    }\n\n    await this.stateService.setLocalData(ciphersLocalData);\n\n    const decryptedCipherCache = await this.stateService.getDecryptedCiphers();\n    if (!decryptedCipherCache) {\n      return;\n    }\n\n    for (let i = 0; i < decryptedCipherCache.length; i++) {\n      const cached = decryptedCipherCache[i];\n      if (cached.id === id) {\n        cached.localData = ciphersLocalData[id];\n        break;\n      }\n    }\n    await this.stateService.setDecryptedCiphers(decryptedCipherCache);\n  }\n\n  async updateLastLaunchedDate(id: string): Promise<void> {\n    let ciphersLocalData = await this.stateService.getLocalData();\n    if (!ciphersLocalData) {\n      ciphersLocalData = {};\n    }\n\n    if (ciphersLocalData[id]) {\n      ciphersLocalData[id].lastLaunched = new Date().getTime();\n    } else {\n      ciphersLocalData[id] = {\n        lastUsedDate: new Date().getTime(),\n      };\n    }\n\n    await this.stateService.setLocalData(ciphersLocalData);\n\n    const decryptedCipherCache = await this.stateService.getDecryptedCiphers();\n    if (!decryptedCipherCache) {\n      return;\n    }\n\n    for (let i = 0; i < decryptedCipherCache.length; i++) {\n      const cached = decryptedCipherCache[i];\n      if (cached.id === id) {\n        cached.localData = ciphersLocalData[id];\n        break;\n      }\n    }\n    await this.stateService.setDecryptedCiphers(decryptedCipherCache);\n  }\n\n  async saveNeverDomain(domain: string): Promise<void> {\n    if (domain == null) {\n      return;\n    }\n\n    let domains = await this.stateService.getNeverDomains();\n    if (!domains) {\n      domains = {};\n    }\n    domains[domain] = null;\n    await this.stateService.setNeverDomains(domains);\n  }\n\n  async createWithServer(cipher: Cipher, orgAdmin?: boolean): Promise<any> {\n    let response: CipherResponse;\n    if (orgAdmin && cipher.organizationId != null) {\n      const request = new CipherCreateRequest(cipher);\n      response = await this.apiService.postCipherAdmin(request);\n    } else if (cipher.collectionIds != null) {\n      const request = new CipherCreateRequest(cipher);\n      response = await this.apiService.postCipherCreate(request);\n    } else {\n      const request = new CipherRequest(cipher);\n      response = await this.apiService.postCipher(request);\n    }\n    cipher.id = response.id;\n\n    const data = new CipherData(response, cipher.collectionIds);\n    await this.upsert(data);\n  }\n\n  async updateWithServer(cipher: Cipher, orgAdmin?: boolean, isNotClone?: boolean): Promise<any> {\n    let response: CipherResponse;\n    if (orgAdmin && isNotClone) {\n      const request = new CipherRequest(cipher);\n      response = await this.apiService.putCipherAdmin(cipher.id, request);\n    } else if (cipher.edit) {\n      const request = new CipherRequest(cipher);\n      response = await this.apiService.putCipher(cipher.id, request);\n    } else {\n      const request = new CipherPartialRequest(cipher);\n      response = await this.apiService.putPartialCipher(cipher.id, request);\n    }\n\n    const data = new CipherData(response, cipher.collectionIds);\n    await this.upsert(data);\n  }\n\n  async shareWithServer(\n    cipher: CipherView,\n    organizationId: string,\n    collectionIds: string[]\n  ): Promise<any> {\n    const attachmentPromises: Promise<any>[] = [];\n    if (cipher.attachments != null) {\n      cipher.attachments.forEach((attachment) => {\n        if (attachment.key == null) {\n          attachmentPromises.push(\n            this.shareAttachmentWithServer(attachment, cipher.id, organizationId)\n          );\n        }\n      });\n    }\n    await Promise.all(attachmentPromises);\n\n    cipher.organizationId = organizationId;\n    cipher.collectionIds = collectionIds;\n    const encCipher = await this.encryptSharedCipher(cipher);\n    const request = new CipherShareRequest(encCipher);\n    const response = await this.apiService.putShareCipher(cipher.id, request);\n    const data = new CipherData(response, collectionIds);\n    await this.upsert(data);\n  }\n\n  async shareManyWithServer(\n    ciphers: CipherView[],\n    organizationId: string,\n    collectionIds: string[]\n  ): Promise<any> {\n    const promises: Promise<any>[] = [];\n    const encCiphers: Cipher[] = [];\n    for (const cipher of ciphers) {\n      cipher.organizationId = organizationId;\n      cipher.collectionIds = collectionIds;\n      promises.push(\n        this.encryptSharedCipher(cipher).then((c) => {\n          encCiphers.push(c);\n        })\n      );\n    }\n    await Promise.all(promises);\n    const request = new CipherBulkShareRequest(encCiphers, collectionIds);\n    try {\n      await this.apiService.putShareCiphers(request);\n    } catch (e) {\n      for (const cipher of ciphers) {\n        cipher.organizationId = null;\n        cipher.collectionIds = null;\n      }\n      throw e;\n    }\n    await this.upsert(encCiphers.map((c) => c.toCipherData()));\n  }\n\n  saveAttachmentWithServer(cipher: Cipher, unencryptedFile: any, admin = false): Promise<Cipher> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(unencryptedFile);\n      reader.onload = async (evt: any) => {\n        try {\n          const cData = await this.saveAttachmentRawWithServer(\n            cipher,\n            unencryptedFile.name,\n            evt.target.result,\n            admin\n          );\n          resolve(cData);\n        } catch (e) {\n          reject(e);\n        }\n      };\n      reader.onerror = () => {\n        reject(\"Error reading file.\");\n      };\n    });\n  }\n\n  async saveAttachmentRawWithServer(\n    cipher: Cipher,\n    filename: string,\n    data: Uint8Array,\n    admin = false\n  ): Promise<Cipher> {\n    const encKey = await this.getKeyForCipherKeyDecryption(cipher);\n    const cipherKeyEncryptionEnabled = await this.getCipherKeyEncryptionEnabled();\n\n    const cipherEncKey =\n      cipherKeyEncryptionEnabled && cipher.key != null\n        ? (new SymmetricCryptoKey(\n            await this.encryptService.decryptToBytes(cipher.key, encKey)\n          ) as UserKey)\n        : encKey;\n\n    //if cipher key encryption is disabled but the item has an individual key,\n    //then we rollback to using the user key as the main key of encryption of the item\n    //in order to keep item and it's attachments with the same encryption level\n    if (cipher.key != null && !cipherKeyEncryptionEnabled) {\n      const model = await cipher.decrypt(await this.getKeyForCipherKeyDecryption(cipher));\n      cipher = await this.encrypt(model);\n      await this.updateWithServer(cipher);\n    }\n\n    const encFileName = await this.encryptService.encrypt(filename, cipherEncKey);\n\n    const dataEncKey = await this.cryptoService.makeDataEncKey(cipherEncKey);\n    const encData = await this.encryptService.encryptToBytes(new Uint8Array(data), dataEncKey[0]);\n\n    const response = await this.cipherFileUploadService.upload(\n      cipher,\n      encFileName,\n      encData,\n      admin,\n      dataEncKey\n    );\n\n    const cData = new CipherData(response, cipher.collectionIds);\n    if (!admin) {\n      await this.upsert(cData);\n    }\n    return new Cipher(cData);\n  }\n\n  async saveCollectionsWithServer(cipher: Cipher): Promise<any> {\n    const request = new CipherCollectionsRequest(cipher.collectionIds);\n    await this.apiService.putCipherCollections(cipher.id, request);\n    const data = cipher.toCipherData();\n    await this.upsert(data);\n  }\n\n  async upsert(cipher: CipherData | CipherData[]): Promise<any> {\n    let ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      ciphers = {};\n    }\n\n    if (cipher instanceof CipherData) {\n      const c = cipher as CipherData;\n      ciphers[c.id] = c;\n    } else {\n      (cipher as CipherData[]).forEach((c) => {\n        ciphers[c.id] = c;\n      });\n    }\n\n    await this.replace(ciphers);\n  }\n\n  async replace(ciphers: { [id: string]: CipherData }): Promise<any> {\n    await this.clearDecryptedCiphersState();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    await this.clearEncryptedCiphersState(userId);\n    await this.clearCache(userId);\n  }\n\n  async moveManyWithServer(ids: string[], folderId: string): Promise<any> {\n    await this.apiService.putMoveCiphers(new CipherBulkMoveRequest(ids, folderId));\n\n    let ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      ciphers = {};\n    }\n\n    ids.forEach((id) => {\n      // eslint-disable-next-line\n      if (ciphers.hasOwnProperty(id)) {\n        ciphers[id].folderId = folderId;\n      }\n    });\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      if (ciphers[id] == null) {\n        return;\n      }\n      delete ciphers[id];\n    } else {\n      (id as string[]).forEach((i) => {\n        delete ciphers[i];\n      });\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async deleteWithServer(id: string, asAdmin = false): Promise<any> {\n    if (asAdmin) {\n      await this.apiService.deleteCipherAdmin(id);\n    } else {\n      await this.apiService.deleteCipher(id);\n    }\n\n    await this.delete(id);\n  }\n\n  async deleteManyWithServer(ids: string[], asAdmin = false): Promise<any> {\n    const request = new CipherBulkDeleteRequest(ids);\n    if (asAdmin) {\n      await this.apiService.deleteManyCiphersAdmin(request);\n    } else {\n      await this.apiService.deleteManyCiphers(request);\n    }\n    await this.delete(ids);\n  }\n\n  async deleteAttachment(id: string, attachmentId: string): Promise<void> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n\n    // eslint-disable-next-line\n    if (ciphers == null || !ciphers.hasOwnProperty(id) || ciphers[id].attachments == null) {\n      return;\n    }\n\n    for (let i = 0; i < ciphers[id].attachments.length; i++) {\n      if (ciphers[id].attachments[i].id === attachmentId) {\n        ciphers[id].attachments.splice(i, 1);\n      }\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async deleteAttachmentWithServer(id: string, attachmentId: string): Promise<void> {\n    try {\n      await this.apiService.deleteCipherAttachment(id, attachmentId);\n    } catch (e) {\n      return Promise.reject((e as ErrorResponse).getSingleMessage());\n    }\n    await this.deleteAttachment(id, attachmentId);\n  }\n\n  sortCiphersByLastUsed(a: CipherView, b: CipherView): number {\n    const aLastUsed =\n      a.localData && a.localData.lastUsedDate ? (a.localData.lastUsedDate as number) : null;\n    const bLastUsed =\n      b.localData && b.localData.lastUsedDate ? (b.localData.lastUsedDate as number) : null;\n\n    const bothNotNull = aLastUsed != null && bLastUsed != null;\n    if (bothNotNull && aLastUsed < bLastUsed) {\n      return 1;\n    }\n    if (aLastUsed != null && bLastUsed == null) {\n      return -1;\n    }\n\n    if (bothNotNull && aLastUsed > bLastUsed) {\n      return -1;\n    }\n    if (bLastUsed != null && aLastUsed == null) {\n      return 1;\n    }\n\n    return 0;\n  }\n\n  sortCiphersByLastUsedThenName(a: CipherView, b: CipherView): number {\n    const result = this.sortCiphersByLastUsed(a, b);\n    if (result !== 0) {\n      return result;\n    }\n\n    return this.getLocaleSortingFunction()(a, b);\n  }\n\n  getLocaleSortingFunction(): (a: CipherView, b: CipherView) => number {\n    return (a, b) => {\n      let aName = a.name;\n      let bName = b.name;\n\n      if (aName == null && bName != null) {\n        return -1;\n      }\n      if (aName != null && bName == null) {\n        return 1;\n      }\n      if (aName == null && bName == null) {\n        return 0;\n      }\n\n      const result = this.i18nService.collator\n        ? this.i18nService.collator.compare(aName, bName)\n        : aName.localeCompare(bName);\n\n      if (result !== 0 || a.type !== CipherType.Login || b.type !== CipherType.Login) {\n        return result;\n      }\n\n      if (a.login.username != null) {\n        aName += a.login.username;\n      }\n\n      if (b.login.username != null) {\n        bName += b.login.username;\n      }\n\n      return this.i18nService.collator\n        ? this.i18nService.collator.compare(aName, bName)\n        : aName.localeCompare(bName);\n    };\n  }\n\n  async softDelete(id: string | string[]): Promise<any> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      return;\n    }\n\n    const setDeletedDate = (cipherId: string) => {\n      if (ciphers[cipherId] == null) {\n        return;\n      }\n      ciphers[cipherId].deletedDate = new Date().toISOString();\n    };\n\n    if (typeof id === \"string\") {\n      setDeletedDate(id);\n    } else {\n      (id as string[]).forEach(setDeletedDate);\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async softDeleteWithServer(id: string, asAdmin = false): Promise<any> {\n    if (asAdmin) {\n      await this.apiService.putDeleteCipherAdmin(id);\n    } else {\n      await this.apiService.putDeleteCipher(id);\n    }\n\n    await this.softDelete(id);\n  }\n\n  async softDeleteManyWithServer(ids: string[], asAdmin = false): Promise<any> {\n    const request = new CipherBulkDeleteRequest(ids);\n    if (asAdmin) {\n      await this.apiService.putDeleteManyCiphersAdmin(request);\n    } else {\n      await this.apiService.putDeleteManyCiphers(request);\n    }\n\n    await this.softDelete(ids);\n  }\n\n  async restore(\n    cipher: { id: string; revisionDate: string } | { id: string; revisionDate: string }[]\n  ) {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      return;\n    }\n\n    const clearDeletedDate = (c: { id: string; revisionDate: string }) => {\n      if (ciphers[c.id] == null) {\n        return;\n      }\n      ciphers[c.id].deletedDate = null;\n      ciphers[c.id].revisionDate = c.revisionDate;\n    };\n\n    if (cipher.constructor.name === Array.name) {\n      (cipher as { id: string; revisionDate: string }[]).forEach(clearDeletedDate);\n    } else {\n      clearDeletedDate(cipher as { id: string; revisionDate: string });\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async restoreWithServer(id: string, asAdmin = false): Promise<any> {\n    let response;\n    if (asAdmin) {\n      response = await this.apiService.putRestoreCipherAdmin(id);\n    } else {\n      response = await this.apiService.putRestoreCipher(id);\n    }\n\n    await this.restore({ id: id, revisionDate: response.revisionDate });\n  }\n\n  async restoreManyWithServer(\n    ids: string[],\n    organizationId: string = null,\n    asAdmin = false\n  ): Promise<void> {\n    let response;\n    if (asAdmin) {\n      const request = new CipherBulkRestoreRequest(ids, organizationId);\n      response = await this.apiService.putRestoreManyCiphersAdmin(request);\n    } else {\n      const request = new CipherBulkRestoreRequest(ids);\n      response = await this.apiService.putRestoreManyCiphers(request);\n    }\n\n    const restores: { id: string; revisionDate: string }[] = [];\n    for (const cipher of response.data) {\n      restores.push({ id: cipher.id, revisionDate: cipher.revisionDate });\n    }\n    await this.restore(restores);\n  }\n\n  async getKeyForCipherKeyDecryption(cipher: Cipher): Promise<UserKey | OrgKey> {\n    return (\n      (await this.cryptoService.getOrgKey(cipher.organizationId)) ||\n      ((await this.cryptoService.getUserKeyWithLegacySupport()) as UserKey)\n    );\n  }\n\n  // Helpers\n\n  // In the case of a cipher that is being shared with an organization, we want to decrypt the\n  // cipher key with the user's key and then re-encrypt it with the organization's key.\n  private async encryptSharedCipher(model: CipherView): Promise<Cipher> {\n    const keyForCipherKeyDecryption = await this.cryptoService.getUserKeyWithLegacySupport();\n    return await this.encrypt(model, null, keyForCipherKeyDecryption);\n  }\n\n  private async updateModelfromExistingCipher(\n    model: CipherView,\n    originalCipher: Cipher\n  ): Promise<void> {\n    const existingCipher = await originalCipher.decrypt(\n      await this.getKeyForCipherKeyDecryption(originalCipher)\n    );\n    model.passwordHistory = existingCipher.passwordHistory || [];\n    if (model.type === CipherType.Login && existingCipher.type === CipherType.Login) {\n      if (\n        existingCipher.login.password != null &&\n        existingCipher.login.password !== \"\" &&\n        existingCipher.login.password !== model.login.password\n      ) {\n        const ph = new PasswordHistoryView();\n        ph.password = existingCipher.login.password;\n        ph.lastUsedDate = model.login.passwordRevisionDate = new Date();\n        model.passwordHistory.splice(0, 0, ph);\n      } else {\n        model.login.passwordRevisionDate = existingCipher.login.passwordRevisionDate;\n      }\n    }\n    if (existingCipher.hasFields) {\n      const existingHiddenFields = existingCipher.fields.filter(\n        (f) =>\n          f.type === FieldType.Hidden &&\n          f.name != null &&\n          f.name !== \"\" &&\n          f.value != null &&\n          f.value !== \"\"\n      );\n      const hiddenFields =\n        model.fields == null\n          ? []\n          : model.fields.filter(\n              (f) => f.type === FieldType.Hidden && f.name != null && f.name !== \"\"\n            );\n      existingHiddenFields.forEach((ef) => {\n        const matchedField = hiddenFields.find((f) => f.name === ef.name);\n        if (matchedField == null || matchedField.value !== ef.value) {\n          const ph = new PasswordHistoryView();\n          ph.password = ef.name + \": \" + ef.value;\n          ph.lastUsedDate = new Date();\n          model.passwordHistory.splice(0, 0, ph);\n        }\n      });\n    }\n  }\n\n  private adjustPasswordHistoryLength(model: CipherView) {\n    if (model.passwordHistory != null && model.passwordHistory.length === 0) {\n      model.passwordHistory = null;\n    } else if (model.passwordHistory != null && model.passwordHistory.length > 5) {\n      // only save last 5 history\n      model.passwordHistory = model.passwordHistory.slice(0, 5);\n    }\n  }\n\n  private async shareAttachmentWithServer(\n    attachmentView: AttachmentView,\n    cipherId: string,\n    organizationId: string\n  ): Promise<any> {\n    const attachmentResponse = await this.apiService.nativeFetch(\n      new Request(attachmentView.url, { cache: \"no-store\" })\n    );\n    if (attachmentResponse.status !== 200) {\n      throw Error(\"Failed to download attachment: \" + attachmentResponse.status.toString());\n    }\n\n    const encBuf = await EncArrayBuffer.fromResponse(attachmentResponse);\n    const decBuf = await this.cryptoService.decryptFromBytes(encBuf, null);\n\n    let encKey: UserKey | OrgKey;\n    encKey = await this.cryptoService.getOrgKey(organizationId);\n    encKey ||= (await this.cryptoService.getUserKeyWithLegacySupport()) as UserKey;\n\n    const dataEncKey = await this.cryptoService.makeDataEncKey(encKey);\n\n    const encFileName = await this.encryptService.encrypt(attachmentView.fileName, encKey);\n    const encData = await this.encryptService.encryptToBytes(new Uint8Array(decBuf), dataEncKey[0]);\n\n    const fd = new FormData();\n    try {\n      const blob = new Blob([encData.buffer], { type: \"application/octet-stream\" });\n      fd.append(\"key\", dataEncKey[1].encryptedString);\n      fd.append(\"data\", blob, encFileName.encryptedString);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\"key\", dataEncKey[1].encryptedString);\n        fd.append(\n          \"data\",\n          Buffer.from(encData.buffer) as any,\n          {\n            filepath: encFileName.encryptedString,\n            contentType: \"application/octet-stream\",\n          } as any\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    try {\n      await this.apiService.postShareCipherAttachment(\n        cipherId,\n        attachmentView.id,\n        fd,\n        organizationId\n      );\n    } catch (e) {\n      throw new Error((e as ErrorResponse).getSingleMessage());\n    }\n  }\n\n  private async encryptObjProperty<V extends View, D extends Domain>(\n    model: V,\n    obj: D,\n    map: any,\n    key: SymmetricCryptoKey\n  ): Promise<void> {\n    const promises = [];\n    const self = this;\n\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      (function (theProp, theObj) {\n        const p = Promise.resolve()\n          .then(() => {\n            const modelProp = (model as any)[map[theProp] || theProp];\n            if (modelProp && modelProp !== \"\") {\n              return self.cryptoService.encrypt(modelProp, key);\n            }\n            return null;\n          })\n          .then((val: EncString) => {\n            (theObj as any)[theProp] = val;\n          });\n        promises.push(p);\n      })(prop, obj);\n    }\n\n    await Promise.all(promises);\n  }\n\n  private async encryptCipherData(cipher: Cipher, model: CipherView, key: SymmetricCryptoKey) {\n    switch (cipher.type) {\n      case CipherType.Login:\n        cipher.login = new Login();\n        cipher.login.passwordRevisionDate = model.login.passwordRevisionDate;\n        cipher.login.autofillOnPageLoad = model.login.autofillOnPageLoad;\n        await this.encryptObjProperty(\n          model.login,\n          cipher.login,\n          {\n            username: null,\n            password: null,\n            totp: null,\n          },\n          key\n        );\n\n        if (model.login.uris != null) {\n          cipher.login.uris = [];\n          for (let i = 0; i < model.login.uris.length; i++) {\n            const loginUri = new LoginUri();\n            loginUri.match = model.login.uris[i].match;\n            await this.encryptObjProperty(\n              model.login.uris[i],\n              loginUri,\n              {\n                uri: null,\n              },\n              key\n            );\n            cipher.login.uris.push(loginUri);\n          }\n        }\n\n        if (model.login.fido2Credentials != null) {\n          cipher.login.fido2Credentials = await Promise.all(\n            model.login.fido2Credentials.map(async (viewKey) => {\n              const domainKey = new Fido2Credential();\n              await this.encryptObjProperty(\n                viewKey,\n                domainKey,\n                {\n                  credentialId: null,\n                  keyType: null,\n                  keyAlgorithm: null,\n                  keyCurve: null,\n                  keyValue: null,\n                  rpId: null,\n                  rpName: null,\n                  userHandle: null,\n                  userDisplayName: null,\n                  origin: null,\n                },\n                key\n              );\n              domainKey.counter = await this.cryptoService.encrypt(String(viewKey.counter), key);\n              domainKey.discoverable = await this.cryptoService.encrypt(\n                String(viewKey.discoverable),\n                key\n              );\n              domainKey.creationDate = viewKey.creationDate;\n              return domainKey;\n            })\n          );\n        }\n        return;\n      case CipherType.SecureNote:\n        cipher.secureNote = new SecureNote();\n        cipher.secureNote.type = model.secureNote.type;\n        return;\n      case CipherType.Card:\n        cipher.card = new Card();\n        await this.encryptObjProperty(\n          model.card,\n          cipher.card,\n          {\n            cardholderName: null,\n            brand: null,\n            number: null,\n            expMonth: null,\n            expYear: null,\n            code: null,\n          },\n          key\n        );\n        return;\n      case CipherType.Identity:\n        cipher.identity = new Identity();\n        await this.encryptObjProperty(\n          model.identity,\n          cipher.identity,\n          {\n            title: null,\n            firstName: null,\n            middleName: null,\n            lastName: null,\n            address1: null,\n            address2: null,\n            address3: null,\n            city: null,\n            state: null,\n            postalCode: null,\n            country: null,\n            company: null,\n            email: null,\n            phone: null,\n            ssn: null,\n            username: null,\n            passportNumber: null,\n            licenseNumber: null,\n          },\n          key\n        );\n        return;\n      default:\n        throw new Error(\"Unknown cipher type.\");\n    }\n  }\n\n  private async getCipherForUrl(\n    url: string,\n    lastUsed: boolean,\n    lastLaunched: boolean,\n    autofillOnPageLoad: boolean\n  ): Promise<CipherView> {\n    const cacheKey = autofillOnPageLoad ? \"autofillOnPageLoad-\" + url : url;\n\n    if (!this.sortedCiphersCache.isCached(cacheKey)) {\n      let ciphers = await this.getAllDecryptedForUrl(url);\n      if (!ciphers) {\n        return null;\n      }\n\n      if (autofillOnPageLoad) {\n        const autofillOnPageLoadDefault = await this.stateService.getAutoFillOnPageLoadDefault();\n        ciphers = ciphers.filter(\n          (cipher) =>\n            cipher.login.autofillOnPageLoad ||\n            (cipher.login.autofillOnPageLoad == null && autofillOnPageLoadDefault !== false)\n        );\n        if (ciphers.length === 0) {\n          return null;\n        }\n      }\n\n      this.sortedCiphersCache.addCiphers(cacheKey, ciphers);\n    }\n\n    if (lastLaunched) {\n      return this.sortedCiphersCache.getLastLaunched(cacheKey);\n    } else if (lastUsed) {\n      return this.sortedCiphersCache.getLastUsed(cacheKey);\n    } else {\n      return this.sortedCiphersCache.getNext(cacheKey);\n    }\n  }\n\n  private async clearEncryptedCiphersState(userId?: string) {\n    await this.stateService.setEncryptedCiphers(null, { userId: userId });\n  }\n\n  private async clearDecryptedCiphersState(userId?: string) {\n    await this.stateService.setDecryptedCiphers(null, { userId: userId });\n    this.clearSortedCiphers();\n  }\n\n  private clearSortedCiphers() {\n    this.sortedCiphersCache.clear();\n  }\n\n  private async encryptCipher(\n    model: CipherView,\n    cipher: Cipher,\n    key: SymmetricCryptoKey\n  ): Promise<Cipher> {\n    await Promise.all([\n      this.encryptObjProperty(\n        model,\n        cipher,\n        {\n          name: null,\n          notes: null,\n        },\n        key\n      ),\n      this.encryptCipherData(cipher, model, key),\n      this.encryptFields(model.fields, key).then((fields) => {\n        cipher.fields = fields;\n      }),\n      this.encryptPasswordHistories(model.passwordHistory, key).then((ph) => {\n        cipher.passwordHistory = ph;\n      }),\n      this.encryptAttachments(model.attachments, key).then((attachments) => {\n        cipher.attachments = attachments;\n      }),\n    ]);\n\n    return cipher;\n  }\n\n  private async encryptCipherWithCipherKey(\n    model: CipherView,\n    cipher: Cipher,\n    keyForCipherKeyEncryption: SymmetricCryptoKey,\n    keyForCipherKeyDecryption: SymmetricCryptoKey\n  ): Promise<Cipher> {\n    // First, we get the key for cipher key encryption, in its decrypted form\n    let decryptedCipherKey: SymmetricCryptoKey;\n    if (cipher.key == null) {\n      decryptedCipherKey = await this.cryptoService.makeCipherKey();\n    } else {\n      decryptedCipherKey = new SymmetricCryptoKey(\n        await this.encryptService.decryptToBytes(cipher.key, keyForCipherKeyDecryption)\n      );\n    }\n\n    // Then, we have to encrypt the cipher key with the proper key.\n    cipher.key = await this.encryptService.encrypt(\n      decryptedCipherKey.key,\n      keyForCipherKeyEncryption\n    );\n\n    // Finally, we can encrypt the cipher with the decrypted cipher key.\n    return this.encryptCipher(model, cipher, decryptedCipherKey);\n  }\n\n  private async getCipherKeyEncryptionEnabled(): Promise<boolean> {\n    return (\n      flagEnabled(\"enableCipherKeyEncryption\") &&\n      (await firstValueFrom(\n        this.configService.checkServerMeetsVersionRequirement$(CIPHER_KEY_ENC_MIN_SERVER_VER)\n      ))\n    );\n  }\n}\n","export class TreeNode<T extends ITreeNodeObject> {\n  node: T;\n  parent: TreeNode<T>;\n  children: TreeNode<T>[] = [];\n\n  constructor(node: T, parent: TreeNode<T>, name?: string, id?: string) {\n    this.parent = parent;\n    this.node = node;\n    if (name) {\n      this.node.name = name;\n    }\n    if (id) {\n      this.node.id = id;\n    }\n  }\n}\n\nexport interface ITreeNodeObject {\n  id: string;\n  name: string;\n}\n","import { ITreeNodeObject, TreeNode } from \"../models/domain/tree-node\";\n\nexport class ServiceUtils {\n  /**\n   * Recursively adds a node to nodeTree\n   * @param {TreeNode<ITreeNodeObject>[]} nodeTree - An array of TreeNodes that the node will be added to\n   * @param {number} partIndex - Index of the `parts` array that is being processed\n   * @param {string[]} parts - Array of strings that represent the path to the `obj` node\n   * @param {ITreeNodeObject} obj - The node to be added to the tree\n   * @param {ITreeNodeObject} parent - The parent node of the `obj` node\n   * @param {string} delimiter - The delimiter used to split the path string, will be used to combine the path for missing nodes\n   */\n  static nestedTraverse(\n    nodeTree: TreeNode<ITreeNodeObject>[],\n    partIndex: number,\n    parts: string[],\n    obj: ITreeNodeObject,\n    parent: TreeNode<ITreeNodeObject> | undefined,\n    delimiter: string\n  ) {\n    if (parts.length <= partIndex) {\n      return;\n    }\n\n    const end: boolean = partIndex === parts.length - 1;\n    const partName: string = parts[partIndex];\n\n    for (let i = 0; i < nodeTree.length; i++) {\n      if (nodeTree[i].node.name !== partName) {\n        continue;\n      }\n      if (end && nodeTree[i].node.id !== obj.id) {\n        // Another node exists with the same name as the node being added\n        nodeTree.push(new TreeNode(obj, parent, partName));\n        return;\n      }\n      // Move down the tree to the next level\n      ServiceUtils.nestedTraverse(\n        nodeTree[i].children,\n        partIndex + 1,\n        parts,\n        obj,\n        nodeTree[i],\n        delimiter\n      );\n      return;\n    }\n\n    // If there's no node here with the same name...\n    if (nodeTree.filter((n) => n.node.name === partName).length === 0) {\n      // And we're at the end of the path given, add the node\n      if (end) {\n        nodeTree.push(new TreeNode(obj, parent, partName));\n        return;\n      }\n      // And we're not at the end of the path, combine the current name with the next name\n      // 1, *1.2, 1.2.1 becomes\n      // 1, *1.2/1.2.1\n      const newPartName = partName + delimiter + parts[partIndex + 1];\n      ServiceUtils.nestedTraverse(\n        nodeTree,\n        0,\n        [newPartName, ...parts.slice(partIndex + 2)],\n        obj,\n        parent,\n        delimiter\n      );\n    }\n  }\n\n  /**\n   * Searches a tree for a node with a matching `id`\n   * @param {TreeNode<T>} nodeTree - A single TreeNode branch that will be searched\n   * @param {string} id - The id of the node to be found\n   * @returns {TreeNode<T>} The node with a matching `id`\n   */\n  static getTreeNodeObject<T extends ITreeNodeObject>(\n    nodeTree: TreeNode<T>,\n    id: string\n  ): TreeNode<T> {\n    if (nodeTree.node.id === id) {\n      return nodeTree;\n    }\n    for (let i = 0; i < nodeTree.children.length; i++) {\n      if (nodeTree.children[i].children != null) {\n        const node = ServiceUtils.getTreeNodeObject(nodeTree.children[i], id);\n        if (node !== null) {\n          return node;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Searches an array of tree nodes for a node with a matching `id`\n   * @param {TreeNode<T>} nodeTree - An array of TreeNode branches that will be searched\n   * @param {string} id - The id of the node to be found\n   * @returns {TreeNode<T>} The node with a matching `id`\n   */\n  static getTreeNodeObjectFromList<T extends ITreeNodeObject>(\n    nodeTree: TreeNode<T>[],\n    id: string\n  ): TreeNode<T> {\n    for (let i = 0; i < nodeTree.length; i++) {\n      if (nodeTree[i].node.id === id) {\n        return nodeTree[i];\n      } else if (nodeTree[i].children != null) {\n        const node = ServiceUtils.getTreeNodeObjectFromList(nodeTree[i].children, id);\n        if (node !== null) {\n          return node;\n        }\n      }\n    }\n    return null;\n  }\n}\n","import { CollectionDetailsResponse } from \"../response/collection.response\";\n\nexport class CollectionData {\n  id: string;\n  organizationId: string;\n  name: string;\n  externalId: string;\n  readOnly: boolean;\n  hidePasswords: boolean;\n\n  constructor(response: CollectionDetailsResponse) {\n    this.id = response.id;\n    this.organizationId = response.organizationId;\n    this.name = response.name;\n    this.externalId = response.externalId;\n    this.readOnly = response.readOnly;\n    this.hidePasswords = response.hidePasswords;\n  }\n}\n","import { Organization } from \"../../../admin-console/models/domain/organization\";\nimport { ITreeNodeObject } from \"../../../models/domain/tree-node\";\nimport { View } from \"../../../models/view/view\";\nimport { Collection } from \"../domain/collection\";\nimport { CollectionAccessDetailsResponse } from \"../response/collection.response\";\n\nexport const NestingDelimiter = \"/\";\n\nexport class CollectionView implements View, ITreeNodeObject {\n  id: string = null;\n  organizationId: string = null;\n  name: string = null;\n  externalId: string = null;\n  // readOnly applies to the items within a collection\n  readOnly: boolean = null;\n  hidePasswords: boolean = null;\n\n  constructor(c?: Collection | CollectionAccessDetailsResponse) {\n    if (!c) {\n      return;\n    }\n\n    this.id = c.id;\n    this.organizationId = c.organizationId;\n    this.externalId = c.externalId;\n    if (c instanceof Collection) {\n      this.readOnly = c.readOnly;\n      this.hidePasswords = c.hidePasswords;\n    }\n  }\n\n  // For editing collection details, not the items within it.\n  canEdit(org: Organization): boolean {\n    if (org.id !== this.organizationId) {\n      throw new Error(\n        \"Id of the organization provided does not match the org id of the collection.\"\n      );\n    }\n    return org?.canEditAnyCollection || org?.canEditAssignedCollections;\n  }\n\n  // For deleting a collection, not the items within it.\n  canDelete(org: Organization): boolean {\n    if (org.id !== this.organizationId) {\n      throw new Error(\n        \"Id of the organization provided does not match the org id of the collection.\"\n      );\n    }\n    return org?.canDeleteAnyCollection || org?.canDeleteAssignedCollections;\n  }\n}\n","import Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { CollectionData } from \"../data/collection.data\";\nimport { CollectionView } from \"../view/collection.view\";\n\nexport class Collection extends Domain {\n  id: string;\n  organizationId: string;\n  name: EncString;\n  externalId: string;\n  readOnly: boolean;\n  hidePasswords: boolean;\n\n  constructor(obj?: CollectionData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        organizationId: null,\n        name: null,\n        externalId: null,\n        readOnly: null,\n        hidePasswords: null,\n      },\n      [\"id\", \"organizationId\", \"externalId\", \"readOnly\", \"hidePasswords\"]\n    );\n  }\n\n  decrypt(): Promise<CollectionView> {\n    return this.decryptObj(\n      new CollectionView(this),\n      {\n        name: null,\n      },\n      this.organizationId\n    );\n  }\n}\n","import { ServiceUtils } from \"../../misc/serviceUtils\";\nimport { TreeNode } from \"../../models/domain/tree-node\";\nimport { CryptoService } from \"../../platform/abstractions/crypto.service\";\nimport { I18nService } from \"../../platform/abstractions/i18n.service\";\nimport { StateService } from \"../../platform/abstractions/state.service\";\nimport { Utils } from \"../../platform/misc/utils\";\nimport { CollectionService as CollectionServiceAbstraction } from \"../../vault/abstractions/collection.service\";\nimport { CollectionData } from \"../models/data/collection.data\";\nimport { Collection } from \"../models/domain/collection\";\nimport { CollectionView } from \"../models/view/collection.view\";\n\nconst NestingDelimiter = \"/\";\n\nexport class CollectionService implements CollectionServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private i18nService: I18nService,\n    private stateService: StateService\n  ) {}\n\n  async clearCache(userId?: string): Promise<void> {\n    await this.stateService.setDecryptedCollections(null, { userId: userId });\n  }\n\n  async encrypt(model: CollectionView): Promise<Collection> {\n    if (model.organizationId == null) {\n      throw new Error(\"Collection has no organization id.\");\n    }\n    const key = await this.cryptoService.getOrgKey(model.organizationId);\n    if (key == null) {\n      throw new Error(\"No key for this collection's organization.\");\n    }\n    const collection = new Collection();\n    collection.id = model.id;\n    collection.organizationId = model.organizationId;\n    collection.readOnly = model.readOnly;\n    collection.name = await this.cryptoService.encrypt(model.name, key);\n    return collection;\n  }\n\n  async decryptMany(collections: Collection[]): Promise<CollectionView[]> {\n    if (collections == null) {\n      return [];\n    }\n    const decCollections: CollectionView[] = [];\n    const promises: Promise<any>[] = [];\n    collections.forEach((collection) => {\n      promises.push(collection.decrypt().then((c) => decCollections.push(c)));\n    });\n    await Promise.all(promises);\n    return decCollections.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n  }\n\n  async get(id: string): Promise<Collection> {\n    const collections = await this.stateService.getEncryptedCollections();\n    // eslint-disable-next-line\n    if (collections == null || !collections.hasOwnProperty(id)) {\n      return null;\n    }\n\n    return new Collection(collections[id]);\n  }\n\n  async getAll(): Promise<Collection[]> {\n    const collections = await this.stateService.getEncryptedCollections();\n    const response: Collection[] = [];\n    for (const id in collections) {\n      // eslint-disable-next-line\n      if (collections.hasOwnProperty(id)) {\n        response.push(new Collection(collections[id]));\n      }\n    }\n    return response;\n  }\n\n  async getAllDecrypted(): Promise<CollectionView[]> {\n    let decryptedCollections = await this.stateService.getDecryptedCollections();\n    if (decryptedCollections != null) {\n      return decryptedCollections;\n    }\n\n    const hasKey = await this.cryptoService.hasUserKey();\n    if (!hasKey) {\n      throw new Error(\"No key.\");\n    }\n\n    const collections = await this.getAll();\n    decryptedCollections = await this.decryptMany(collections);\n\n    await this.stateService.setDecryptedCollections(decryptedCollections);\n    return decryptedCollections;\n  }\n\n  async getAllNested(collections: CollectionView[] = null): Promise<TreeNode<CollectionView>[]> {\n    if (collections == null) {\n      collections = await this.getAllDecrypted();\n    }\n    const nodes: TreeNode<CollectionView>[] = [];\n    collections.forEach((c) => {\n      const collectionCopy = new CollectionView();\n      collectionCopy.id = c.id;\n      collectionCopy.organizationId = c.organizationId;\n      const parts = c.name != null ? c.name.replace(/^\\/+|\\/+$/g, \"\").split(NestingDelimiter) : [];\n      ServiceUtils.nestedTraverse(nodes, 0, parts, collectionCopy, null, NestingDelimiter);\n    });\n    return nodes;\n  }\n\n  /**\n   * @deprecated August 30 2022: Moved to new Vault Filter Service\n   * Remove when Desktop and Browser are updated\n   */\n  async getNested(id: string): Promise<TreeNode<CollectionView>> {\n    const collections = await this.getAllNested();\n    return ServiceUtils.getTreeNodeObjectFromList(collections, id) as TreeNode<CollectionView>;\n  }\n\n  async upsert(collection: CollectionData | CollectionData[]): Promise<any> {\n    let collections = await this.stateService.getEncryptedCollections();\n    if (collections == null) {\n      collections = {};\n    }\n\n    if (collection instanceof CollectionData) {\n      const c = collection as CollectionData;\n      collections[c.id] = c;\n    } else {\n      (collection as CollectionData[]).forEach((c) => {\n        collections[c.id] = c;\n      });\n    }\n\n    await this.replace(collections);\n  }\n\n  async replace(collections: { [id: string]: CollectionData }): Promise<any> {\n    await this.clearCache();\n    await this.stateService.setEncryptedCollections(collections);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    await this.clearCache(userId);\n    await this.stateService.setEncryptedCollections(null, { userId: userId });\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const collections = await this.stateService.getEncryptedCollections();\n    if (collections == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      delete collections[id];\n    } else {\n      (id as string[]).forEach((i) => {\n        delete collections[i];\n      });\n    }\n\n    await this.replace(collections);\n  }\n}\n","/**\n * This class represents an abstraction of the WebAuthn Authenticator model as described by W3C:\n * https://www.w3.org/TR/webauthn-3/#sctn-authenticator-model\n *\n * The authenticator provides key management and cryptographic signatures.\n */\nexport abstract class Fido2AuthenticatorService {\n  /**\n   * Create and save a new credential as described in:\n   * https://www.w3.org/TR/webauthn-3/#sctn-op-make-cred\n   *\n   * @param params Parameters for creating a new credential\n   * @param abortController An AbortController that can be used to abort the operation.\n   * @returns A promise that resolves with the new credential and an attestation signature.\n   **/\n  makeCredential: (\n    params: Fido2AuthenticatorMakeCredentialsParams,\n    tab: chrome.tabs.Tab,\n    abortController?: AbortController\n  ) => Promise<Fido2AuthenticatorMakeCredentialResult>;\n\n  /**\n   * Generate an assertion using an existing credential as describe in:\n   * https://www.w3.org/TR/webauthn-3/#sctn-op-get-assertion\n   *\n   * @param params Parameters for generating an assertion\n   * @param abortController An AbortController that can be used to abort the operation.\n   * @returns A promise that resolves with the asserted credential and an assertion signature.\n   */\n  getAssertion: (\n    params: Fido2AuthenticatorGetAssertionParams,\n    tab: chrome.tabs.Tab,\n    abortController?: AbortController\n  ) => Promise<Fido2AuthenticatorGetAssertionResult>;\n}\n\nexport enum Fido2AlgorithmIdentifier {\n  ES256 = -7,\n  RS256 = -257,\n}\n\nexport enum Fido2AuthenticatorErrorCode {\n  Unknown = \"UnknownError\",\n  NotSupported = \"NotSupportedError\",\n  InvalidState = \"InvalidStateError\",\n  NotAllowed = \"NotAllowedError\",\n  Constraint = \"ConstraintError\",\n}\n\nexport class Fido2AuthenticatorError extends Error {\n  constructor(readonly errorCode: Fido2AuthenticatorErrorCode) {\n    super(errorCode);\n  }\n}\n\nexport interface PublicKeyCredentialDescriptor {\n  id: BufferSource;\n  transports?: (\"ble\" | \"hybrid\" | \"internal\" | \"nfc\" | \"usb\")[];\n  type: \"public-key\";\n}\n\n/**\n * Parameters for {@link Fido2AuthenticatorService.makeCredential}\n *\n * This interface represents the input parameters described in\n * https://www.w3.org/TR/webauthn-3/#sctn-op-make-cred\n */\nexport interface Fido2AuthenticatorMakeCredentialsParams {\n  /** The hash of the serialized client data, provided by the client. */\n  hash: BufferSource;\n  /** The Relying Party's PublicKeyCredentialRpEntity. */\n  rpEntity: {\n    name: string;\n    id?: string;\n  };\n  /** The user account’s PublicKeyCredentialUserEntity, containing the user handle given by the Relying Party. */\n  userEntity: {\n    id: BufferSource;\n    name?: string;\n    displayName?: string;\n    icon?: string;\n  };\n  /** A sequence of pairs of PublicKeyCredentialType and public key algorithms (COSEAlgorithmIdentifier) requested by the Relying Party. This sequence is ordered from most preferred to least preferred. The authenticator makes a best-effort to create the most preferred credential that it can. */\n  credTypesAndPubKeyAlgs: {\n    alg: number;\n    type: \"public-key\"; // not used\n  }[];\n  /** An OPTIONAL list of PublicKeyCredentialDescriptor objects provided by the Relying Party with the intention that, if any of these are known to the authenticator, it SHOULD NOT create a new credential. excludeCredentialDescriptorList contains a list of known credentials. */\n  excludeCredentialDescriptorList?: PublicKeyCredentialDescriptor[];\n  /** A map from extension identifiers to their authenticator extension inputs, created by the client based on the extensions requested by the Relying Party, if any. */\n  extensions?: {\n    appid?: string;\n    appidExclude?: string;\n    credProps?: boolean;\n    uvm?: boolean;\n  };\n  /** A Boolean value that indicates that individually-identifying attestation MAY be returned by the authenticator. */\n  enterpriseAttestationPossible?: boolean; // Ignored by bitwarden at the moment\n  /** The effective resident key requirement for credential creation, a Boolean value determined by the client. Resident is synonymous with discoverable. */\n  requireResidentKey: boolean;\n  requireUserVerification: boolean;\n  /** Forwarded to user interface */\n  fallbackSupported: boolean;\n  /** The constant Boolean value true. It is included here as a pseudo-parameter to simplify applying this abstract authenticator model to implementations that may wish to make a test of user presence optional although WebAuthn does not. */\n  // requireUserPresence: true; // Always required\n}\n\nexport interface Fido2AuthenticatorMakeCredentialResult {\n  credentialId: BufferSource;\n  attestationObject: BufferSource;\n  authData: BufferSource;\n  publicKeyAlgorithm: number;\n}\n\n/**\n * Parameters for {@link Fido2AuthenticatorService.getAssertion}\n\n * This interface represents the input parameters described in\n * https://www.w3.org/TR/webauthn-3/#sctn-op-get-assertion\n */\nexport interface Fido2AuthenticatorGetAssertionParams {\n  /** The caller’s RP ID, as determined by the user agent and the client. */\n  rpId: string;\n  /** The hash of the serialized client data, provided by the client. */\n  hash: BufferSource;\n  allowCredentialDescriptorList: PublicKeyCredentialDescriptor[];\n  /** The effective user verification requirement for assertion, a Boolean value provided by the client. */\n  requireUserVerification: boolean;\n  /** The constant Boolean value true. It is included here as a pseudo-parameter to simplify applying this abstract authenticator model to implementations that may wish to make a test of user presence optional although WebAuthn does not. */\n  // requireUserPresence: boolean; // Always required\n  extensions: unknown;\n  /** Forwarded to user interface */\n  fallbackSupported: boolean;\n}\n\nexport interface Fido2AuthenticatorGetAssertionResult {\n  selectedCredential: {\n    id: Uint8Array;\n    userHandle?: Uint8Array;\n  };\n  authenticatorData: Uint8Array;\n  signature: Uint8Array;\n}\n","export const UserRequestedFallbackAbortReason = \"UserRequestedFallback\";\n\nexport type UserVerification = \"discouraged\" | \"preferred\" | \"required\";\n\n/**\n * This class represents an abstraction of the WebAuthn Client as described by W3C:\n * https://www.w3.org/TR/webauthn-3/#webauthn-client\n *\n * The WebAuthn Client is an intermediary entity typically implemented in the user agent\n * (in whole, or in part). Conceptually, it underlies the Web Authentication API and embodies\n * the implementation of the Web Authentication API's operations.\n *\n * It is responsible for both marshalling the inputs for the underlying authenticator operations,\n * and for returning the results of the latter operations to the Web Authentication API's callers.\n */\nexport abstract class Fido2ClientService {\n  /**\n   * Allows WebAuthn Relying Party scripts to request the creation of a new public key credential source.\n   * For more information please see: https://www.w3.org/TR/webauthn-3/#sctn-createCredential\n   *\n   * @param params The parameters for the credential creation operation.\n   * @param abortController An AbortController that can be used to abort the operation.\n   * @returns A promise that resolves with the new credential.\n   */\n  createCredential: (\n    params: CreateCredentialParams,\n    tab: chrome.tabs.Tab,\n    abortController?: AbortController\n  ) => Promise<CreateCredentialResult>;\n\n  /**\n   * Allows WebAuthn Relying Party scripts to discover and use an existing public key credential, with the user’s consent.\n   * Relying Party script can optionally specify some criteria to indicate what credential sources are acceptable to it.\n   * For more information please see: https://www.w3.org/TR/webauthn-3/#sctn-getAssertion\n   *\n   * @param params The parameters for the credential assertion operation.\n   * @param abortController An AbortController that can be used to abort the operation.\n   * @returns A promise that resolves with the asserted credential.\n   */\n  assertCredential: (\n    params: AssertCredentialParams,\n    tab: chrome.tabs.Tab,\n    abortController?: AbortController\n  ) => Promise<AssertCredentialResult>;\n\n  isFido2FeatureEnabled: () => Promise<boolean>;\n}\n\n/**\n * Parameters for creating a new credential.\n */\nexport interface CreateCredentialParams {\n  /** The Relaying Parties origin, see: https://html.spec.whatwg.org/multipage/browsers.html#concept-origin */\n  origin: string;\n  /**\n   * A value which is true if and only if the caller’s environment settings object is same-origin with its ancestors.\n   * It is false if caller is cross-origin.\n   * */\n  sameOriginWithAncestors: boolean;\n  /** The Relying Party's preference for attestation conveyance */\n  attestation?: \"direct\" | \"enterprise\" | \"indirect\" | \"none\";\n  /** The Relying Party's requirements of the authenticator used in the creation of the credential. */\n  authenticatorSelection?: {\n    // authenticatorAttachment?: AuthenticatorAttachment; // not used\n    requireResidentKey?: boolean;\n    residentKey?: \"discouraged\" | \"preferred\" | \"required\";\n    userVerification?: UserVerification;\n  };\n  /** Challenge intended to be used for generating the newly created credential's attestation object. */\n  challenge: string; // b64 encoded\n  /**\n   * This member is intended for use by Relying Parties that wish to limit the creation of multiple credentials for\n   * the same account on a single authenticator. The client is requested to return an error if the new credential would\n   * be created on an authenticator that also contains one of the credentials enumerated in this parameter.\n   * */\n  excludeCredentials?: {\n    id: string; // b64 encoded\n    transports?: (\"ble\" | \"hybrid\" | \"internal\" | \"nfc\" | \"usb\")[];\n    type: \"public-key\";\n  }[];\n  /**\n   * This member contains additional parameters requesting additional processing by the client and authenticator.\n   * Not currently supported.\n   **/\n  extensions?: {\n    appid?: string;\n    appidExclude?: string;\n    credProps?: boolean;\n    uvm?: boolean;\n  };\n  /**\n   * This member contains information about the desired properties of the credential to be created.\n   * The sequence is ordered from most preferred to least preferred.\n   * The client makes a best-effort to create the most preferred credential that it can.\n   */\n  pubKeyCredParams: PublicKeyCredentialParam[];\n  /** Data about the Relying Party responsible for the request. */\n  rp: {\n    id?: string;\n    name: string;\n  };\n  /** Data about the user account for which the Relying Party is requesting attestation. */\n  user: {\n    id: string; // b64 encoded\n    displayName: string;\n  };\n  /** Forwarded to user interface */\n  fallbackSupported: boolean;\n  /**\n   * This member specifies a time, in milliseconds, that the caller is willing to wait for the call to complete.\n   * This is treated as a hint, and MAY be overridden by the client.\n   **/\n  timeout?: number;\n}\n\n/**\n * The result of creating a new credential.\n */\nexport interface CreateCredentialResult {\n  credentialId: string;\n  clientDataJSON: string;\n  attestationObject: string;\n  authData: string;\n  publicKeyAlgorithm: number;\n  transports: string[];\n}\n\n/**\n * Parameters for asserting a credential.\n */\nexport interface AssertCredentialParams {\n  allowedCredentialIds: string[];\n  rpId: string;\n  origin: string;\n  challenge: string;\n  userVerification?: UserVerification;\n  timeout: number;\n  sameOriginWithAncestors: boolean;\n  fallbackSupported: boolean;\n}\n\n/**\n * The result of asserting a credential.\n */\nexport interface AssertCredentialResult {\n  credentialId: string;\n  clientDataJSON: string;\n  authenticatorData: string;\n  signature: string;\n  userHandle: string;\n}\n\n/**\n * A description of a key type and algorithm.\n *\n * @example {\n *   alg: -7, // ES256\n *   type: \"public-key\"\n * }\n */\nexport interface PublicKeyCredentialParam {\n  alg: number;\n  type: \"public-key\";\n}\n\n/**\n * Error thrown when the user requests a fallback to the browser's built-in WebAuthn implementation.\n */\nexport class FallbackRequestedError extends Error {\n  readonly fallbackRequested = true;\n  constructor() {\n    super(\"FallbackRequested\");\n  }\n}\n","/**\nThe MIT License (MIT)\n\nCopyright (c) 2014-2016 Patrick Gansterer <paroga@paroga.com>\nCopyright (c) 2020-present Aaron Huggins <ahuggins@aaronhuggins.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nExported from GitHub release version 0.4.0\n*/\n\n/* eslint-disable */\n/** @hidden */\nconst POW_2_24 = 5.960464477539063e-8;\n/** @hidden */\nconst POW_2_32 = 4294967296;\n/** @hidden */\nconst POW_2_53 = 9007199254740992;\n/** @hidden */\nconst DECODE_CHUNK_SIZE = 8192;\n\n/** @hidden */\nfunction objectIs(x: any, y: any) {\n  if (typeof Object.is === \"function\") return Object.is(x, y);\n\n  // SameValue algorithm\n  // Steps 1-5, 7-10\n  if (x === y) {\n    // Steps 6.b-6.e: +0 != -0\n    return x !== 0 || 1 / x === 1 / y;\n  }\n\n  // Step 6.a: NaN == NaN\n  return x !== x && y !== y;\n}\n\n/** A function that extracts tagged values. */\ntype TaggedValueFunction = (value: any, tag: number) => TaggedValue;\n/** A function that extracts simple values. */\ntype SimpleValueFunction = (value: any) => SimpleValue;\n\n/** Convenience class for structuring a tagged value. */\nexport class TaggedValue {\n  constructor(value: any, tag: number) {\n    this.value = value;\n    this.tag = tag;\n  }\n\n  value: any;\n  tag: number;\n}\n\n/** Convenience class for structuring a simple value. */\nexport class SimpleValue {\n  constructor(value: any) {\n    this.value = value;\n  }\n\n  value: any;\n}\n\n/**\n * Converts a Concise Binary Object Representation (CBOR) buffer into an object.\n * @param {ArrayBuffer|SharedArrayBuffer} data - A valid CBOR buffer.\n * @param {Function} [tagger] - A function that extracts tagged values. This function is called for each member of the object.\n * @param {Function} [simpleValue] - A function that extracts simple values. This function is called for each member of the object.\n * @returns {any} The CBOR buffer converted to a JavaScript value.\n */\nexport function decode<T = any>(\n  data: ArrayBuffer | SharedArrayBuffer,\n  tagger?: TaggedValueFunction,\n  simpleValue?: SimpleValueFunction\n): T {\n  let dataView = new DataView(data);\n  let ta = new Uint8Array(data);\n  let offset = 0;\n  let tagValueFunction: TaggedValueFunction = function (value: number, tag: number): any {\n    return new TaggedValue(value, tag);\n  };\n  let simpleValFunction: SimpleValueFunction = function (value: number): SimpleValue {\n    return undefined as unknown as SimpleValue;\n  };\n\n  if (typeof tagger === \"function\") tagValueFunction = tagger;\n  if (typeof simpleValue === \"function\") simpleValFunction = simpleValue;\n\n  function commitRead<T>(length: number, value: T): T {\n    offset += length;\n    return value;\n  }\n  function readArrayBuffer(length: number) {\n    return commitRead(length, new Uint8Array(data, offset, length));\n  }\n  function readFloat16() {\n    let tempArrayBuffer = new ArrayBuffer(4);\n    let tempDataView = new DataView(tempArrayBuffer);\n    let value = readUint16();\n\n    let sign = value & 0x8000;\n    let exponent = value & 0x7c00;\n    let fraction = value & 0x03ff;\n\n    if (exponent === 0x7c00) exponent = 0xff << 10;\n    else if (exponent !== 0) exponent += (127 - 15) << 10;\n    else if (fraction !== 0) return (sign ? -1 : 1) * fraction * POW_2_24;\n\n    tempDataView.setUint32(0, (sign << 16) | (exponent << 13) | (fraction << 13));\n    return tempDataView.getFloat32(0);\n  }\n  function readFloat32(): number {\n    return commitRead(4, dataView.getFloat32(offset));\n  }\n  function readFloat64(): number {\n    return commitRead(8, dataView.getFloat64(offset));\n  }\n  function readUint8(): number {\n    return commitRead(1, ta[offset]);\n  }\n  function readUint16(): number {\n    return commitRead(2, dataView.getUint16(offset));\n  }\n  function readUint32(): number {\n    return commitRead(4, dataView.getUint32(offset));\n  }\n  function readUint64(): number {\n    return readUint32() * POW_2_32 + readUint32();\n  }\n  function readBreak(): boolean {\n    if (ta[offset] !== 0xff) return false;\n    offset += 1;\n    return true;\n  }\n  function readLength(additionalInformation: number): number {\n    if (additionalInformation < 24) return additionalInformation;\n    if (additionalInformation === 24) return readUint8();\n    if (additionalInformation === 25) return readUint16();\n    if (additionalInformation === 26) return readUint32();\n    if (additionalInformation === 27) return readUint64();\n    if (additionalInformation === 31) return -1;\n    throw new Error(\"Invalid length encoding\");\n  }\n  function readIndefiniteStringLength(majorType: number): number {\n    let initialByte = readUint8();\n    if (initialByte === 0xff) return -1;\n    let length = readLength(initialByte & 0x1f);\n    if (length < 0 || initialByte >> 5 !== majorType)\n      throw new Error(\"Invalid indefinite length element\");\n    return length;\n  }\n\n  function appendUtf16Data(utf16data: number[], length: number) {\n    for (let i = 0; i < length; ++i) {\n      let value = readUint8();\n      if (value & 0x80) {\n        if (value < 0xe0) {\n          value = ((value & 0x1f) << 6) | (readUint8() & 0x3f);\n          length -= 1;\n        } else if (value < 0xf0) {\n          value = ((value & 0x0f) << 12) | ((readUint8() & 0x3f) << 6) | (readUint8() & 0x3f);\n          length -= 2;\n        } else {\n          value =\n            ((value & 0x0f) << 18) |\n            ((readUint8() & 0x3f) << 12) |\n            ((readUint8() & 0x3f) << 6) |\n            (readUint8() & 0x3f);\n          length -= 3;\n        }\n      }\n\n      if (value < 0x10000) {\n        utf16data.push(value);\n      } else {\n        value -= 0x10000;\n        utf16data.push(0xd800 | (value >> 10));\n        utf16data.push(0xdc00 | (value & 0x3ff));\n      }\n    }\n  }\n\n  function decodeItem(): any {\n    let initialByte = readUint8();\n    let majorType = initialByte >> 5;\n    let additionalInformation = initialByte & 0x1f;\n    let i;\n    let length;\n\n    if (majorType === 7) {\n      switch (additionalInformation) {\n        case 25:\n          return readFloat16();\n        case 26:\n          return readFloat32();\n        case 27:\n          return readFloat64();\n      }\n    }\n\n    length = readLength(additionalInformation);\n    if (length < 0 && (majorType < 2 || 6 < majorType)) throw new Error(\"Invalid length\");\n\n    switch (majorType) {\n      case 0:\n        return length;\n      case 1:\n        return -1 - length;\n      case 2:\n        if (length < 0) {\n          let elements = [];\n          let fullArrayLength = 0;\n          while ((length = readIndefiniteStringLength(majorType)) >= 0) {\n            fullArrayLength += length;\n            elements.push(readArrayBuffer(length));\n          }\n          let fullArray = new Uint8Array(fullArrayLength);\n          let fullArrayOffset = 0;\n          for (i = 0; i < elements.length; ++i) {\n            fullArray.set(elements[i], fullArrayOffset);\n            fullArrayOffset += elements[i].length;\n          }\n          return fullArray;\n        }\n        return readArrayBuffer(length);\n      case 3:\n        let utf16data: number[] = [];\n        if (length < 0) {\n          while ((length = readIndefiniteStringLength(majorType)) >= 0)\n            appendUtf16Data(utf16data, length);\n        } else {\n          appendUtf16Data(utf16data, length);\n        }\n        let string = \"\";\n        for (i = 0; i < utf16data.length; i += DECODE_CHUNK_SIZE) {\n          string += String.fromCharCode.apply(null, utf16data.slice(i, i + DECODE_CHUNK_SIZE));\n        }\n        return string;\n      case 4:\n        let retArray;\n        if (length < 0) {\n          retArray = [];\n          while (!readBreak()) retArray.push(decodeItem());\n        } else {\n          retArray = new Array(length);\n          for (i = 0; i < length; ++i) retArray[i] = decodeItem();\n        }\n        return retArray;\n      case 5:\n        let retObject: any = {};\n        for (i = 0; i < length || (length < 0 && !readBreak()); ++i) {\n          let key = decodeItem();\n          retObject[key] = decodeItem();\n        }\n        return retObject;\n      case 6:\n        return tagValueFunction(decodeItem(), length);\n      case 7:\n        switch (length) {\n          case 20:\n            return false;\n          case 21:\n            return true;\n          case 22:\n            return null;\n          case 23:\n            return undefined;\n          default:\n            return simpleValFunction(length);\n        }\n    }\n  }\n\n  let ret = decodeItem();\n  if (offset !== data.byteLength) throw new Error(\"Remaining bytes\");\n  return ret;\n}\n\n/**\n * Converts a JavaScript value to a Concise Binary Object Representation (CBOR) buffer.\n * @param {any} value - A JavaScript value, usually an object or array, to be converted.\n * @returns {ArrayBuffer} The JavaScript value converted to CBOR format.\n */\nexport function encode<T = any>(value: T): ArrayBuffer {\n  let data = new ArrayBuffer(256);\n  let dataView = new DataView(data);\n  let byteView = new Uint8Array(data);\n  let lastLength: number;\n  let offset = 0;\n\n  function prepareWrite(length: number): DataView {\n    let newByteLength = data.byteLength;\n    let requiredLength = offset + length;\n    while (newByteLength < requiredLength) newByteLength <<= 1;\n    if (newByteLength !== data.byteLength) {\n      let oldDataView = dataView;\n      data = new ArrayBuffer(newByteLength);\n      dataView = new DataView(data);\n      byteView = new Uint8Array(data);\n      let uint32count = (offset + 3) >> 2;\n      for (let i = 0; i < uint32count; ++i)\n        dataView.setUint32(i << 2, oldDataView.getUint32(i << 2));\n    }\n\n    lastLength = length;\n    return dataView;\n  }\n  function commitWrite(...args: any[]) {\n    offset += lastLength;\n  }\n  function writeFloat64(val: number) {\n    commitWrite(prepareWrite(8).setFloat64(offset, val));\n  }\n  function writeUint8(val: number) {\n    commitWrite(prepareWrite(1).setUint8(offset, val));\n  }\n  function writeUint8Array(val: number[] | Uint8Array) {\n    prepareWrite(val.length);\n    byteView.set(val, offset);\n    commitWrite();\n  }\n  function writeUint16(val: number) {\n    commitWrite(prepareWrite(2).setUint16(offset, val));\n  }\n  function writeUint32(val: number) {\n    commitWrite(prepareWrite(4).setUint32(offset, val));\n  }\n  function writeUint64(val: number) {\n    let low = val % POW_2_32;\n    let high = (val - low) / POW_2_32;\n    let view = prepareWrite(8);\n    view.setUint32(offset, high);\n    view.setUint32(offset + 4, low);\n    commitWrite();\n  }\n  function writeVarUint(val: number, mod: number = 0) {\n    if (val <= 0xff) {\n      if (val < 24) {\n        writeUint8(val | mod);\n      } else {\n        writeUint8(0x18 | mod);\n        writeUint8(val);\n      }\n    } else if (val <= 0xffff) {\n      writeUint8(0x19 | mod);\n      writeUint16(val);\n    } else if (val <= 0xffffffff) {\n      writeUint8(0x1a | mod);\n      writeUint32(val);\n    } else {\n      writeUint8(0x1b | mod);\n      writeUint64(val);\n    }\n  }\n  function writeTypeAndLength(type: number, length: number) {\n    if (length < 24) {\n      writeUint8((type << 5) | length);\n    } else if (length < 0x100) {\n      writeUint8((type << 5) | 24);\n      writeUint8(length);\n    } else if (length < 0x10000) {\n      writeUint8((type << 5) | 25);\n      writeUint16(length);\n    } else if (length < 0x100000000) {\n      writeUint8((type << 5) | 26);\n      writeUint32(length);\n    } else {\n      writeUint8((type << 5) | 27);\n      writeUint64(length);\n    }\n  }\n\n  function encodeItem(val: any) {\n    let i;\n\n    if (val === false) return writeUint8(0xf4);\n    if (val === true) return writeUint8(0xf5);\n    if (val === null) return writeUint8(0xf6);\n    if (val === undefined) return writeUint8(0xf7);\n    if (objectIs(val, -0)) return writeUint8Array([0xf9, 0x80, 0x00]);\n\n    switch (typeof val) {\n      case \"number\":\n        if (Math.floor(val) === val) {\n          if (0 <= val && val <= POW_2_53) return writeTypeAndLength(0, val);\n          if (-POW_2_53 <= val && val < 0) return writeTypeAndLength(1, -(val + 1));\n        }\n        writeUint8(0xfb);\n        return writeFloat64(val);\n\n      case \"string\":\n        let utf8data = [];\n        for (i = 0; i < val.length; ++i) {\n          let charCode = val.charCodeAt(i);\n          if (charCode < 0x80) {\n            utf8data.push(charCode);\n          } else if (charCode < 0x800) {\n            utf8data.push(0xc0 | (charCode >> 6));\n            utf8data.push(0x80 | (charCode & 0x3f));\n          } else if (charCode < 0xd800 || charCode >= 0xe000) {\n            utf8data.push(0xe0 | (charCode >> 12));\n            utf8data.push(0x80 | ((charCode >> 6) & 0x3f));\n            utf8data.push(0x80 | (charCode & 0x3f));\n          } else {\n            charCode = (charCode & 0x3ff) << 10;\n            charCode |= val.charCodeAt(++i) & 0x3ff;\n            charCode += 0x10000;\n\n            utf8data.push(0xf0 | (charCode >> 18));\n            utf8data.push(0x80 | ((charCode >> 12) & 0x3f));\n            utf8data.push(0x80 | ((charCode >> 6) & 0x3f));\n            utf8data.push(0x80 | (charCode & 0x3f));\n          }\n        }\n\n        writeTypeAndLength(3, utf8data.length);\n        return writeUint8Array(utf8data);\n\n      default:\n        let length;\n        let converted;\n        if (Array.isArray(val)) {\n          length = val.length;\n          writeTypeAndLength(4, length);\n          for (i = 0; i < length; i += 1) encodeItem(val[i]);\n        } else if (val instanceof Uint8Array) {\n          writeTypeAndLength(2, val.length);\n          writeUint8Array(val);\n        } else if (ArrayBuffer.isView(val)) {\n          converted = new Uint8Array(val.buffer);\n          writeTypeAndLength(2, converted.length);\n          writeUint8Array(converted);\n        } else if (\n          val instanceof ArrayBuffer ||\n          (typeof SharedArrayBuffer === \"function\" && val instanceof SharedArrayBuffer)\n        ) {\n          converted = new Uint8Array(val);\n          writeTypeAndLength(2, converted.length);\n          writeUint8Array(converted);\n        } else if (val instanceof TaggedValue) {\n          writeVarUint(val.tag, 0b11000000);\n          encodeItem(val.value);\n        } else {\n          let keys = Object.keys(val);\n          length = keys.length;\n          writeTypeAndLength(5, length);\n          for (i = 0; i < length; i += 1) {\n            let key = keys[i];\n            encodeItem(key);\n            encodeItem(val[key]);\n          }\n        }\n    }\n  }\n\n  encodeItem(value);\n\n  if (\"slice\" in data) return data.slice(0, offset);\n\n  let ret = new ArrayBuffer(offset);\n  let retView = new DataView(ret);\n  for (let i = 0; i < offset; ++i) retView.setUint8(i, dataView.getUint8(i));\n  return ret;\n}\n\n/**\n * An intrinsic object that provides functions to convert JavaScript values\n * to and from the Concise Binary Object Representation (CBOR) format.\n */\nexport const CBOR: {\n  decode: <T = any>(\n    data: ArrayBuffer | SharedArrayBuffer,\n    tagger?: TaggedValueFunction,\n    simpleValue?: SimpleValueFunction\n  ) => T;\n  encode: <T = any>(value: T) => ArrayBuffer;\n} = {\n  decode,\n  encode,\n};\n","/*\n   Copyright 2015 D2L Corporation\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License. */\n\n// Changes:\n// - Cherry-pick the methods that we have a need for.\n// - Add typings.\n// - Original code is made for running in node, this version is adapted to work in the browser.\n\n// https://github.com/Brightspace/node-ecdsa-sig-formatter/blob/master/src/param-bytes-for-alg.js\n\nfunction getParamSize(keySize: number) {\n  const result = ((keySize / 8) | 0) + (keySize % 8 === 0 ? 0 : 1);\n  return result;\n}\n\nconst paramBytesForAlg = {\n  ES256: getParamSize(256),\n  ES384: getParamSize(384),\n  ES512: getParamSize(521),\n};\n\ntype Alg = keyof typeof paramBytesForAlg;\n\nfunction getParamBytesForAlg(alg: Alg) {\n  const paramBytes = paramBytesForAlg[alg];\n  if (paramBytes) {\n    return paramBytes;\n  }\n\n  throw new Error('Unknown algorithm \"' + alg + '\"');\n}\n\n// https://github.com/Brightspace/node-ecdsa-sig-formatter/blob/master/src/ecdsa-sig-formatter.js\n\nconst MAX_OCTET = 0x80,\n  CLASS_UNIVERSAL = 0,\n  PRIMITIVE_BIT = 0x20,\n  TAG_SEQ = 0x10,\n  TAG_INT = 0x02,\n  ENCODED_TAG_SEQ = TAG_SEQ | PRIMITIVE_BIT | (CLASS_UNIVERSAL << 6),\n  ENCODED_TAG_INT = TAG_INT | (CLASS_UNIVERSAL << 6);\n\nfunction countPadding(buf: Uint8Array, start: number, stop: number) {\n  let padding = 0;\n  while (start + padding < stop && buf[start + padding] === 0) {\n    ++padding;\n  }\n\n  const needsSign = buf[start + padding] >= MAX_OCTET;\n  if (needsSign) {\n    --padding;\n  }\n\n  return padding;\n}\n\nexport function joseToDer(signature: Uint8Array, alg: Alg) {\n  const paramBytes = getParamBytesForAlg(alg);\n\n  const signatureBytes = signature.length;\n  if (signatureBytes !== paramBytes * 2) {\n    throw new TypeError(\n      '\"' +\n        alg +\n        '\" signatures must be \"' +\n        paramBytes * 2 +\n        '\" bytes, saw \"' +\n        signatureBytes +\n        '\"'\n    );\n  }\n\n  const rPadding = countPadding(signature, 0, paramBytes);\n  const sPadding = countPadding(signature, paramBytes, signature.length);\n  const rLength = paramBytes - rPadding;\n  const sLength = paramBytes - sPadding;\n\n  const rsBytes = 1 + 1 + rLength + 1 + 1 + sLength;\n\n  const shortLength = rsBytes < MAX_OCTET;\n\n  const dst = new Uint8Array((shortLength ? 2 : 3) + rsBytes);\n\n  let offset = 0;\n  dst[offset++] = ENCODED_TAG_SEQ;\n  if (shortLength) {\n    dst[offset++] = rsBytes;\n  } else {\n    dst[offset++] = MAX_OCTET | 1;\n    dst[offset++] = rsBytes & 0xff;\n  }\n  dst[offset++] = ENCODED_TAG_INT;\n  dst[offset++] = rLength;\n  if (rPadding < 0) {\n    dst[offset++] = 0;\n    dst.set(signature.subarray(0, paramBytes), offset);\n    offset += paramBytes;\n  } else {\n    dst.set(signature.subarray(rPadding, paramBytes), offset);\n    offset += paramBytes;\n  }\n  dst[offset++] = ENCODED_TAG_INT;\n  dst[offset++] = sLength;\n  if (sPadding < 0) {\n    dst[offset++] = 0;\n    dst.set(signature.subarray(paramBytes), offset);\n  } else {\n    dst.set(signature.subarray(paramBytes + sPadding), offset);\n  }\n\n  return dst;\n}\n","import { Utils } from \"../../../platform/misc/utils\";\n\nexport class Fido2Utils {\n  static bufferToString(bufferSource: BufferSource): string {\n    const buffer = Fido2Utils.bufferSourceToUint8Array(bufferSource);\n\n    return Utils.fromBufferToUrlB64(buffer);\n  }\n\n  static stringToBuffer(str: string): Uint8Array {\n    return Utils.fromUrlB64ToArray(str);\n  }\n\n  static bufferSourceToUint8Array(bufferSource: BufferSource) {\n    if (Fido2Utils.isArrayBuffer(bufferSource)) {\n      return new Uint8Array(bufferSource);\n    } else {\n      return new Uint8Array(bufferSource.buffer);\n    }\n  }\n\n  /** Utility function to identify type of bufferSource. Necessary because of differences between runtimes */\n  private static isArrayBuffer(bufferSource: BufferSource): bufferSource is ArrayBuffer {\n    return bufferSource instanceof ArrayBuffer || bufferSource.buffer === undefined;\n  }\n}\n","/*\n  License for: guidToRawFormat, guidToStandardFormat\n  Source: https://github.com/uuidjs/uuid/\n  The MIT License (MIT)\n  Copyright (c) 2010-2020 Robert Kieffer and other contributors\n  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.*/\n\n/** Private array used for optimization */\nconst byteToHex = Array.from({ length: 256 }, (_, i) => (i + 0x100).toString(16).substring(1));\n\n/** Convert standard format (XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX) UUID to raw 16 byte array. */\nexport function guidToRawFormat(guid: string) {\n  if (!isValidGuid(guid)) {\n    throw TypeError(\"GUID parameter is invalid\");\n  }\n\n  let v;\n  const arr = new Uint8Array(16);\n\n  // Parse ########-....-....-....-............\n  arr[0] = (v = parseInt(guid.slice(0, 8), 16)) >>> 24;\n  arr[1] = (v >>> 16) & 0xff;\n  arr[2] = (v >>> 8) & 0xff;\n  arr[3] = v & 0xff;\n\n  // Parse ........-####-....-....-............\n  arr[4] = (v = parseInt(guid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff;\n\n  // Parse ........-....-####-....-............\n  arr[6] = (v = parseInt(guid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff;\n\n  // Parse ........-....-....-####-............\n  arr[8] = (v = parseInt(guid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff;\n\n  // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n  arr[10] = ((v = parseInt(guid.slice(24, 36), 16)) / 0x10000000000) & 0xff;\n  arr[11] = (v / 0x100000000) & 0xff;\n  arr[12] = (v >>> 24) & 0xff;\n  arr[13] = (v >>> 16) & 0xff;\n  arr[14] = (v >>> 8) & 0xff;\n  arr[15] = v & 0xff;\n\n  return arr;\n}\n\n/** Convert raw 16 byte array to standard format (XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX) UUID. */\nexport function guidToStandardFormat(bufferSource: BufferSource) {\n  const arr =\n    bufferSource instanceof ArrayBuffer\n      ? new Uint8Array(bufferSource)\n      : new Uint8Array(bufferSource.buffer);\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  const guid = (\n    byteToHex[arr[0]] +\n    byteToHex[arr[1]] +\n    byteToHex[arr[2]] +\n    byteToHex[arr[3]] +\n    \"-\" +\n    byteToHex[arr[4]] +\n    byteToHex[arr[5]] +\n    \"-\" +\n    byteToHex[arr[6]] +\n    byteToHex[arr[7]] +\n    \"-\" +\n    byteToHex[arr[8]] +\n    byteToHex[arr[9]] +\n    \"-\" +\n    byteToHex[arr[10]] +\n    byteToHex[arr[11]] +\n    byteToHex[arr[12]] +\n    byteToHex[arr[13]] +\n    byteToHex[arr[14]] +\n    byteToHex[arr[15]]\n  ).toLowerCase();\n\n  // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // or more input array values not mapping to a hex octet (leading to \"undefined\" in the uuid)\n  if (!isValidGuid(guid)) {\n    throw TypeError(\"Converted GUID is invalid\");\n  }\n\n  return guid;\n}\n\n// Perform format validation, without enforcing any variant restrictions as Utils.isGuid does\nfunction isValidGuid(guid: string): boolean {\n  return RegExp(/^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/, \"i\").test(guid);\n}\n","import { LogService } from \"../../../platform/abstractions/log.service\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { CipherService } from \"../../abstractions/cipher.service\";\nimport {\n  Fido2AlgorithmIdentifier,\n  Fido2AuthenticatorError,\n  Fido2AuthenticatorErrorCode,\n  Fido2AuthenticatorGetAssertionParams,\n  Fido2AuthenticatorGetAssertionResult,\n  Fido2AuthenticatorMakeCredentialResult,\n  Fido2AuthenticatorMakeCredentialsParams,\n  Fido2AuthenticatorService as Fido2AuthenticatorServiceAbstraction,\n  PublicKeyCredentialDescriptor,\n} from \"../../abstractions/fido2/fido2-authenticator.service.abstraction\";\nimport { FallbackRequestedError } from \"../../abstractions/fido2/fido2-client.service.abstraction\";\nimport { Fido2UserInterfaceService } from \"../../abstractions/fido2/fido2-user-interface.service.abstraction\";\nimport { SyncService } from \"../../abstractions/sync/sync.service.abstraction\";\nimport { CipherRepromptType } from \"../../enums/cipher-reprompt-type\";\nimport { CipherType } from \"../../enums/cipher-type\";\nimport { CipherView } from \"../../models/view/cipher.view\";\nimport { Fido2CredentialView } from \"../../models/view/fido2-credential.view\";\n\nimport { CBOR } from \"./cbor\";\nimport { joseToDer } from \"./ecdsa-utils\";\nimport { Fido2Utils } from \"./fido2-utils\";\nimport { guidToRawFormat, guidToStandardFormat } from \"./guid-utils\";\n\n// AAGUID: 6e8248d5-b479-40db-a3d8-11116f7e8349\nexport const AAGUID = new Uint8Array([\n  0xd5, 0x48, 0x82, 0x6e, 0x79, 0xb4, 0xdb, 0x40, 0xa3, 0xd8, 0x11, 0x11, 0x6f, 0x7e, 0x83, 0x49,\n]);\n\nconst KeyUsages: KeyUsage[] = [\"sign\"];\n\n/**\n * Bitwarden implementation of the WebAuthn Authenticator Model as described by W3C\n * https://www.w3.org/TR/webauthn-3/#sctn-authenticator-model\n *\n * It is highly recommended that the W3C specification is used a reference when reading this code.\n */\nexport class Fido2AuthenticatorService implements Fido2AuthenticatorServiceAbstraction {\n  constructor(\n    private cipherService: CipherService,\n    private userInterface: Fido2UserInterfaceService,\n    private syncService: SyncService,\n    private logService?: LogService\n  ) {}\n\n  async makeCredential(\n    params: Fido2AuthenticatorMakeCredentialsParams,\n    tab: chrome.tabs.Tab,\n    abortController?: AbortController\n  ): Promise<Fido2AuthenticatorMakeCredentialResult> {\n    const userInterfaceSession = await this.userInterface.newSession(\n      params.fallbackSupported,\n      tab,\n      abortController\n    );\n\n    try {\n      if (params.credTypesAndPubKeyAlgs.every((p) => p.alg !== Fido2AlgorithmIdentifier.ES256)) {\n        const requestedAlgorithms = params.credTypesAndPubKeyAlgs.map((p) => p.alg).join(\", \");\n        this.logService?.warning(\n          `[Fido2Authenticator] No compatible algorithms found, RP requested: ${requestedAlgorithms}`\n        );\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.NotSupported);\n      }\n\n      if (\n        params.requireResidentKey != undefined &&\n        typeof params.requireResidentKey !== \"boolean\"\n      ) {\n        this.logService?.error(\n          `[Fido2Authenticator] Invalid 'requireResidentKey' value: ${String(\n            params.requireResidentKey\n          )}`\n        );\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.Unknown);\n      }\n\n      if (\n        params.requireUserVerification != undefined &&\n        typeof params.requireUserVerification !== \"boolean\"\n      ) {\n        this.logService?.error(\n          `[Fido2Authenticator] Invalid 'requireUserVerification' value: ${String(\n            params.requireUserVerification\n          )}`\n        );\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.Unknown);\n      }\n\n      await userInterfaceSession.ensureUnlockedVault();\n      await this.syncService.fullSync(false);\n\n      const existingCipherIds = await this.findExcludedCredentials(\n        params.excludeCredentialDescriptorList\n      );\n      if (existingCipherIds.length > 0) {\n        this.logService?.info(\n          `[Fido2Authenticator] Aborting due to excluded credential found in vault.`\n        );\n        await userInterfaceSession.informExcludedCredential(existingCipherIds);\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.NotAllowed);\n      }\n\n      let cipher: CipherView;\n      let fido2Credential: Fido2CredentialView;\n      let keyPair: CryptoKeyPair;\n      let userVerified = false;\n      let credentialId: string;\n      const response = await userInterfaceSession.confirmNewCredential({\n        credentialName: params.rpEntity.name,\n        userName: params.userEntity.displayName,\n        userVerification: params.requireUserVerification,\n      });\n      const cipherId = response.cipherId;\n      userVerified = response.userVerified;\n\n      if (cipherId === undefined) {\n        this.logService?.warning(\n          `[Fido2Authenticator] Aborting because user confirmation was not recieved.`\n        );\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.NotAllowed);\n      }\n\n      try {\n        keyPair = await createKeyPair();\n\n        const encrypted = await this.cipherService.get(cipherId);\n        cipher = await encrypted.decrypt(\n          await this.cipherService.getKeyForCipherKeyDecryption(encrypted)\n        );\n\n        if (\n          !userVerified &&\n          (params.requireUserVerification || cipher.reprompt !== CipherRepromptType.None)\n        ) {\n          this.logService?.warning(\n            `[Fido2Authenticator] Aborting because user verification was unsuccessful.`\n          );\n          throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.NotAllowed);\n        }\n\n        fido2Credential = await createKeyView(params, keyPair.privateKey);\n        cipher.login.fido2Credentials = [fido2Credential];\n        const reencrypted = await this.cipherService.encrypt(cipher);\n        await this.cipherService.updateWithServer(reencrypted);\n        credentialId = fido2Credential.credentialId;\n      } catch (error) {\n        this.logService?.error(\n          `[Fido2Authenticator] Aborting because of unknown error when creating credential: ${error}`\n        );\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.Unknown);\n      }\n\n      const authData = await generateAuthData({\n        rpId: params.rpEntity.id,\n        credentialId: guidToRawFormat(credentialId),\n        counter: fido2Credential.counter,\n        userPresence: true,\n        userVerification: userVerified,\n        keyPair,\n      });\n      const attestationObject = new Uint8Array(\n        CBOR.encode({\n          fmt: \"none\",\n          attStmt: {},\n          authData,\n        })\n      );\n\n      return {\n        credentialId: guidToRawFormat(credentialId),\n        attestationObject,\n        authData,\n        publicKeyAlgorithm: -7,\n      };\n    } finally {\n      userInterfaceSession.close();\n    }\n  }\n\n  async getAssertion(\n    params: Fido2AuthenticatorGetAssertionParams,\n    tab: chrome.tabs.Tab,\n    abortController?: AbortController\n  ): Promise<Fido2AuthenticatorGetAssertionResult> {\n    const userInterfaceSession = await this.userInterface.newSession(\n      params.fallbackSupported,\n      tab,\n      abortController\n    );\n    try {\n      if (\n        params.requireUserVerification != undefined &&\n        typeof params.requireUserVerification !== \"boolean\"\n      ) {\n        this.logService?.error(\n          `[Fido2Authenticator] Invalid 'requireUserVerification' value: ${String(\n            params.requireUserVerification\n          )}`\n        );\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.Unknown);\n      }\n\n      let cipherOptions: CipherView[];\n\n      await userInterfaceSession.ensureUnlockedVault();\n      await this.syncService.fullSync(false);\n\n      if (params.allowCredentialDescriptorList?.length > 0) {\n        cipherOptions = await this.findCredentialsById(\n          params.allowCredentialDescriptorList,\n          params.rpId\n        );\n      } else {\n        cipherOptions = await this.findCredentialsByRp(params.rpId);\n      }\n\n      if (cipherOptions.length === 0) {\n        this.logService?.info(\n          `[Fido2Authenticator] Aborting because no matching credentials were found in the vault.`\n        );\n\n        if (params.fallbackSupported) {\n          throw new FallbackRequestedError();\n        }\n\n        await userInterfaceSession.informCredentialNotFound();\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.NotAllowed);\n      }\n\n      const response = await userInterfaceSession.pickCredential({\n        cipherIds: cipherOptions.map((cipher) => cipher.id),\n        userVerification: params.requireUserVerification,\n      });\n      const selectedCipherId = response.cipherId;\n      const userVerified = response.userVerified;\n      const selectedCipher = cipherOptions.find((c) => c.id === selectedCipherId);\n\n      if (selectedCipher === undefined) {\n        this.logService?.error(\n          `[Fido2Authenticator] Aborting because the selected credential could not be found.`\n        );\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.NotAllowed);\n      }\n\n      if (\n        !userVerified &&\n        (params.requireUserVerification || selectedCipher.reprompt !== CipherRepromptType.None)\n      ) {\n        this.logService?.warning(\n          `[Fido2Authenticator] Aborting because user verification was unsuccessful.`\n        );\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.NotAllowed);\n      }\n\n      try {\n        const selectedFido2Credential = selectedCipher.login.fido2Credentials[0];\n        const selectedCredentialId = selectedFido2Credential.credentialId;\n\n        ++selectedFido2Credential.counter;\n\n        selectedCipher.localData = {\n          ...selectedCipher.localData,\n          lastUsedDate: new Date().getTime(),\n        };\n        const encrypted = await this.cipherService.encrypt(selectedCipher);\n        await this.cipherService.updateWithServer(encrypted);\n\n        const authenticatorData = await generateAuthData({\n          rpId: selectedFido2Credential.rpId,\n          credentialId: guidToRawFormat(selectedCredentialId),\n          counter: selectedFido2Credential.counter,\n          userPresence: true,\n          userVerification: userVerified,\n        });\n\n        const signature = await generateSignature({\n          authData: authenticatorData,\n          clientDataHash: params.hash,\n          privateKey: await getPrivateKeyFromFido2Credential(selectedFido2Credential),\n        });\n\n        return {\n          authenticatorData,\n          selectedCredential: {\n            id: guidToRawFormat(selectedCredentialId),\n            userHandle: Fido2Utils.stringToBuffer(selectedFido2Credential.userHandle),\n          },\n          signature,\n        };\n      } catch (error) {\n        this.logService?.error(\n          `[Fido2Authenticator] Aborting because of unknown error when asserting credential: ${error}`\n        );\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.Unknown);\n      }\n    } finally {\n      userInterfaceSession.close();\n    }\n  }\n\n  /** Finds existing crendetials and returns the `cipherId` for each one */\n  private async findExcludedCredentials(\n    credentials: PublicKeyCredentialDescriptor[]\n  ): Promise<string[]> {\n    const ids: string[] = [];\n\n    for (const credential of credentials) {\n      try {\n        ids.push(guidToStandardFormat(credential.id));\n        // eslint-disable-next-line no-empty\n      } catch {}\n    }\n\n    if (ids.length === 0) {\n      return [];\n    }\n\n    const ciphers = await this.cipherService.getAllDecrypted();\n    return ciphers\n      .filter(\n        (cipher) =>\n          !cipher.isDeleted &&\n          cipher.organizationId == undefined &&\n          cipher.type === CipherType.Login &&\n          cipher.login.hasFido2Credentials &&\n          ids.includes(cipher.login.fido2Credentials[0].credentialId)\n      )\n      .map((cipher) => cipher.id);\n  }\n\n  private async findCredentialsById(\n    credentials: PublicKeyCredentialDescriptor[],\n    rpId: string\n  ): Promise<CipherView[]> {\n    const ids: string[] = [];\n\n    for (const credential of credentials) {\n      try {\n        ids.push(guidToStandardFormat(credential.id));\n        // eslint-disable-next-line no-empty\n      } catch {}\n    }\n\n    if (ids.length === 0) {\n      return [];\n    }\n\n    const ciphers = await this.cipherService.getAllDecrypted();\n    return ciphers.filter(\n      (cipher) =>\n        !cipher.isDeleted &&\n        cipher.type === CipherType.Login &&\n        cipher.login.hasFido2Credentials &&\n        cipher.login.fido2Credentials[0].rpId === rpId &&\n        ids.includes(cipher.login.fido2Credentials[0].credentialId)\n    );\n  }\n\n  private async findCredentialsByRp(rpId: string): Promise<CipherView[]> {\n    const ciphers = await this.cipherService.getAllDecrypted();\n    return ciphers.filter(\n      (cipher) =>\n        !cipher.isDeleted &&\n        cipher.type === CipherType.Login &&\n        cipher.login.hasFido2Credentials &&\n        cipher.login.fido2Credentials[0].rpId === rpId &&\n        cipher.login.fido2Credentials[0].discoverable\n    );\n  }\n}\n\nasync function createKeyPair() {\n  return await crypto.subtle.generateKey(\n    {\n      name: \"ECDSA\",\n      namedCurve: \"P-256\",\n    },\n    true,\n    KeyUsages\n  );\n}\n\nasync function createKeyView(\n  params: Fido2AuthenticatorMakeCredentialsParams,\n  keyValue: CryptoKey\n): Promise<Fido2CredentialView> {\n  if (keyValue.algorithm.name !== \"ECDSA\" && (keyValue.algorithm as any).namedCurve !== \"P-256\") {\n    throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.Unknown);\n  }\n\n  const pkcs8Key = await crypto.subtle.exportKey(\"pkcs8\", keyValue);\n  const fido2Credential = new Fido2CredentialView();\n  fido2Credential.credentialId = Utils.newGuid();\n  fido2Credential.keyType = \"public-key\";\n  fido2Credential.keyAlgorithm = \"ECDSA\";\n  fido2Credential.keyCurve = \"P-256\";\n  fido2Credential.keyValue = Fido2Utils.bufferToString(pkcs8Key);\n  fido2Credential.rpId = params.rpEntity.id;\n  fido2Credential.userHandle = Fido2Utils.bufferToString(params.userEntity.id);\n  fido2Credential.counter = 0;\n  fido2Credential.rpName = params.rpEntity.name;\n  fido2Credential.userDisplayName = params.userEntity.displayName;\n  fido2Credential.discoverable = params.requireResidentKey;\n  fido2Credential.creationDate = new Date();\n\n  return fido2Credential;\n}\n\nasync function getPrivateKeyFromFido2Credential(\n  fido2Credential: Fido2CredentialView\n): Promise<CryptoKey> {\n  const keyBuffer = Fido2Utils.stringToBuffer(fido2Credential.keyValue);\n  return await crypto.subtle.importKey(\n    \"pkcs8\",\n    keyBuffer,\n    {\n      name: fido2Credential.keyAlgorithm,\n      namedCurve: fido2Credential.keyCurve,\n    } as EcKeyImportParams,\n    true,\n    KeyUsages\n  );\n}\n\ninterface AuthDataParams {\n  rpId: string;\n  credentialId: BufferSource;\n  userPresence: boolean;\n  userVerification: boolean;\n  counter: number;\n  keyPair?: CryptoKeyPair;\n}\n\nasync function generateAuthData(params: AuthDataParams) {\n  const authData: Array<number> = [];\n\n  const rpIdHash = new Uint8Array(\n    await crypto.subtle.digest({ name: \"SHA-256\" }, Utils.fromByteStringToArray(params.rpId))\n  );\n  authData.push(...rpIdHash);\n\n  const flags = authDataFlags({\n    extensionData: false,\n    attestationData: params.keyPair != undefined,\n    userVerification: params.userVerification,\n    userPresence: params.userPresence,\n  });\n  authData.push(flags);\n\n  // add 4 bytes of counter - we use time in epoch seconds as monotonic counter\n  // TODO: Consider changing this to a cryptographically safe random number\n  const counter = params.counter;\n  authData.push(\n    ((counter & 0xff000000) >> 24) & 0xff,\n    ((counter & 0x00ff0000) >> 16) & 0xff,\n    ((counter & 0x0000ff00) >> 8) & 0xff,\n    counter & 0x000000ff\n  );\n\n  if (params.keyPair) {\n    // attestedCredentialData\n    const attestedCredentialData: Array<number> = [];\n\n    attestedCredentialData.push(...AAGUID);\n\n    // credentialIdLength (2 bytes) and credential Id\n    const rawId = Fido2Utils.bufferSourceToUint8Array(params.credentialId);\n    const credentialIdLength = [(rawId.length - (rawId.length & 0xff)) / 256, rawId.length & 0xff];\n    attestedCredentialData.push(...credentialIdLength);\n    attestedCredentialData.push(...rawId);\n\n    const publicKeyJwk = await crypto.subtle.exportKey(\"jwk\", params.keyPair.publicKey);\n    // COSE format of the EC256 key\n    const keyX = Utils.fromUrlB64ToArray(publicKeyJwk.x);\n    const keyY = Utils.fromUrlB64ToArray(publicKeyJwk.y);\n\n    // Can't get `cbor-redux` to encode in CTAP2 canonical CBOR. So we do it manually:\n    const coseBytes = new Uint8Array(77);\n    coseBytes.set([0xa5, 0x01, 0x02, 0x03, 0x26, 0x20, 0x01, 0x21, 0x58, 0x20], 0);\n    coseBytes.set(keyX, 10);\n    coseBytes.set([0x22, 0x58, 0x20], 10 + 32);\n    coseBytes.set(keyY, 10 + 32 + 3);\n\n    // credential public key - convert to array from CBOR encoded COSE key\n    attestedCredentialData.push(...coseBytes);\n\n    authData.push(...attestedCredentialData);\n  }\n\n  return new Uint8Array(authData);\n}\n\ninterface SignatureParams {\n  authData: Uint8Array;\n  clientDataHash: BufferSource;\n  privateKey: CryptoKey;\n}\n\nasync function generateSignature(params: SignatureParams) {\n  const sigBase = new Uint8Array([\n    ...params.authData,\n    ...Fido2Utils.bufferSourceToUint8Array(params.clientDataHash),\n  ]);\n  const p1336_signature = new Uint8Array(\n    await crypto.subtle.sign(\n      {\n        name: \"ECDSA\",\n        hash: { name: \"SHA-256\" },\n      },\n      params.privateKey,\n      sigBase\n    )\n  );\n\n  const asn1Der_signature = joseToDer(p1336_signature, \"ES256\");\n\n  return asn1Der_signature;\n}\n\ninterface Flags {\n  extensionData: boolean;\n  attestationData: boolean;\n  userVerification: boolean;\n  userPresence: boolean;\n}\n\nfunction authDataFlags(options: Flags): number {\n  let flags = 0;\n\n  if (options.extensionData) {\n    flags |= 0b1000000;\n  }\n\n  if (options.attestationData) {\n    flags |= 0b01000000;\n  }\n\n  if (options.userVerification) {\n    flags |= 0b00000100;\n  }\n\n  if (options.userPresence) {\n    flags |= 0b00000001;\n  }\n\n  return flags;\n}\n","export enum FeatureFlag {\n  DisplayEuEnvironmentFlag = \"display-eu-environment\",\n  DisplayLowKdfIterationWarningFlag = \"display-kdf-iteration-warning\",\n  Fido2VaultCredentials = \"fido2-vault-credentials\",\n  TrustedDeviceEncryption = \"trusted-device-encryption\",\n  PasswordlessLogin = \"passwordless-login\",\n  AutofillV2 = \"autofill-v2\",\n  BrowserFilelessImport = \"browser-fileless-import\",\n}\n\n// Replace this with a type safe lookup of the feature flag values in PM-2282\nexport type FeatureFlagValue = number | string | boolean;\n","import { parse } from \"tldts\";\n\nexport function isValidRpId(rpId: string, origin: string) {\n  const parsedOrigin = parse(origin, { allowPrivateDomains: true });\n  const parsedRpId = parse(rpId, { allowPrivateDomains: true });\n\n  return (\n    (parsedOrigin.domain == null &&\n      parsedOrigin.hostname == parsedRpId.hostname &&\n      parsedOrigin.hostname == \"localhost\") ||\n    (parsedOrigin.domain != null &&\n      parsedOrigin.domain == parsedRpId.domain &&\n      parsedOrigin.subdomain.endsWith(parsedRpId.subdomain))\n  );\n}\n","import { parse } from \"tldts\";\n\nimport { AuthService } from \"../../../auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"../../../auth/enums/authentication-status\";\nimport { FeatureFlag } from \"../../../enums/feature-flag.enum\";\nimport { ConfigServiceAbstraction } from \"../../../platform/abstractions/config/config.service.abstraction\";\nimport { LogService } from \"../../../platform/abstractions/log.service\";\nimport { StateService } from \"../../../platform/abstractions/state.service\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport {\n  Fido2AuthenticatorError,\n  Fido2AuthenticatorErrorCode,\n  Fido2AuthenticatorGetAssertionParams,\n  Fido2AuthenticatorMakeCredentialsParams,\n  Fido2AuthenticatorService,\n  PublicKeyCredentialDescriptor,\n} from \"../../abstractions/fido2/fido2-authenticator.service.abstraction\";\nimport {\n  AssertCredentialParams,\n  AssertCredentialResult,\n  CreateCredentialParams,\n  CreateCredentialResult,\n  FallbackRequestedError,\n  Fido2ClientService as Fido2ClientServiceAbstraction,\n  PublicKeyCredentialParam,\n  UserRequestedFallbackAbortReason,\n  UserVerification,\n} from \"../../abstractions/fido2/fido2-client.service.abstraction\";\n\nimport { isValidRpId } from \"./domain-utils\";\nimport { Fido2Utils } from \"./fido2-utils\";\n\n/**\n * Bitwarden implementation of the Web Authentication API as described by W3C\n * https://www.w3.org/TR/webauthn-3/#sctn-api\n *\n * It is highly recommended that the W3C specification is used a reference when reading this code.\n */\nexport class Fido2ClientService implements Fido2ClientServiceAbstraction {\n  constructor(\n    private authenticator: Fido2AuthenticatorService,\n    private configService: ConfigServiceAbstraction,\n    private authService: AuthService,\n    private stateService: StateService,\n    private logService?: LogService\n  ) {}\n\n  async isFido2FeatureEnabled(): Promise<boolean> {\n    return await this.configService.getFeatureFlag<boolean>(FeatureFlag.Fido2VaultCredentials);\n  }\n\n  async createCredential(\n    params: CreateCredentialParams,\n    tab: chrome.tabs.Tab,\n    abortController = new AbortController()\n  ): Promise<CreateCredentialResult> {\n    const enableFido2VaultCredentials = await this.isFido2FeatureEnabled();\n\n    if (!enableFido2VaultCredentials) {\n      this.logService?.warning(`[Fido2Client] Fido2VaultCredential is not enabled`);\n      throw new FallbackRequestedError();\n    }\n\n    const authStatus = await this.authService.getAuthStatus();\n\n    if (authStatus === AuthenticationStatus.LoggedOut) {\n      this.logService?.warning(`[Fido2Client] Fido2VaultCredential is not enabled`);\n      throw new FallbackRequestedError();\n    }\n\n    if (!params.sameOriginWithAncestors) {\n      this.logService?.warning(\n        `[Fido2Client] Invalid 'sameOriginWithAncestors' value: ${params.sameOriginWithAncestors}`\n      );\n      throw new DOMException(\"Invalid 'sameOriginWithAncestors' value\", \"NotAllowedError\");\n    }\n\n    const userId = Fido2Utils.stringToBuffer(params.user.id);\n    if (userId.length < 1 || userId.length > 64) {\n      this.logService?.warning(\n        `[Fido2Client] Invalid 'user.id' length: ${params.user.id} (${userId.length})`\n      );\n      throw new TypeError(\"Invalid 'user.id' length\");\n    }\n\n    const parsedOrigin = parse(params.origin, { allowPrivateDomains: true });\n    params.rp.id = params.rp.id ?? parsedOrigin.hostname;\n\n    const neverDomains = await this.stateService.getNeverDomains();\n    if (neverDomains != null && parsedOrigin.hostname in neverDomains) {\n      this.logService?.warning(`[Fido2Client] Excluded domain`);\n      throw new FallbackRequestedError();\n    }\n\n    if (parsedOrigin.hostname == undefined || !params.origin.startsWith(\"https://\")) {\n      this.logService?.warning(`[Fido2Client] Invalid https origin: ${params.origin}`);\n      throw new DOMException(\"'origin' is not a valid https origin\", \"SecurityError\");\n    }\n\n    if (!isValidRpId(params.rp.id, params.origin)) {\n      this.logService?.warning(\n        `[Fido2Client] 'rp.id' cannot be used with the current origin: rp.id = ${params.rp.id}; origin = ${params.origin}`\n      );\n      throw new DOMException(\"'rp.id' cannot be used with the current origin\", \"SecurityError\");\n    }\n\n    let credTypesAndPubKeyAlgs: PublicKeyCredentialParam[];\n    if (params.pubKeyCredParams?.length > 0) {\n      // Filter out all unsupported algorithms\n      credTypesAndPubKeyAlgs = params.pubKeyCredParams.filter(\n        (kp) => kp.alg === -7 && kp.type === \"public-key\"\n      );\n    } else {\n      // Assign default algorithms\n      credTypesAndPubKeyAlgs = [\n        { alg: -7, type: \"public-key\" },\n        { alg: -257, type: \"public-key\" },\n      ];\n    }\n\n    if (credTypesAndPubKeyAlgs.length === 0) {\n      const requestedAlgorithms = credTypesAndPubKeyAlgs.map((p) => p.alg).join(\", \");\n      this.logService?.warning(\n        `[Fido2Client] No compatible algorithms found, RP requested: ${requestedAlgorithms}`\n      );\n      throw new DOMException(\"No supported key algorithms were found\", \"NotSupportedError\");\n    }\n\n    const collectedClientData = {\n      type: \"webauthn.create\",\n      challenge: params.challenge,\n      origin: params.origin,\n      crossOrigin: !params.sameOriginWithAncestors,\n      // tokenBinding: {} // Not currently supported\n    };\n    const clientDataJSON = JSON.stringify(collectedClientData);\n    const clientDataJSONBytes = Utils.fromByteStringToArray(clientDataJSON);\n    const clientDataHash = await crypto.subtle.digest({ name: \"SHA-256\" }, clientDataJSONBytes);\n    const makeCredentialParams = mapToMakeCredentialParams({\n      params,\n      credTypesAndPubKeyAlgs,\n      clientDataHash,\n    });\n\n    // Set timeout before invoking authenticator\n    if (abortController.signal.aborted) {\n      this.logService?.info(`[Fido2Client] Aborted with AbortController`);\n      throw new DOMException(\"The operation either timed out or was not allowed.\", \"AbortError\");\n    }\n    const timeout = setAbortTimeout(\n      abortController,\n      params.authenticatorSelection?.userVerification,\n      params.timeout\n    );\n\n    let makeCredentialResult;\n    try {\n      makeCredentialResult = await this.authenticator.makeCredential(\n        makeCredentialParams,\n        tab,\n        abortController\n      );\n    } catch (error) {\n      if (\n        abortController.signal.aborted &&\n        abortController.signal.reason === UserRequestedFallbackAbortReason\n      ) {\n        this.logService?.info(`[Fido2Client] Aborting because user requested fallback`);\n        throw new FallbackRequestedError();\n      }\n\n      if (\n        error instanceof Fido2AuthenticatorError &&\n        error.errorCode === Fido2AuthenticatorErrorCode.InvalidState\n      ) {\n        this.logService?.warning(`[Fido2Client] Unknown error: ${error}`);\n        throw new DOMException(\"Unknown error occured.\", \"InvalidStateError\");\n      }\n\n      this.logService?.info(`[Fido2Client] Aborted by user: ${error}`);\n      throw new DOMException(\n        \"The operation either timed out or was not allowed.\",\n        \"NotAllowedError\"\n      );\n    }\n\n    if (abortController.signal.aborted) {\n      this.logService?.info(`[Fido2Client] Aborted with AbortController`);\n      throw new DOMException(\"The operation either timed out or was not allowed.\", \"AbortError\");\n    }\n\n    clearTimeout(timeout);\n    return {\n      credentialId: Fido2Utils.bufferToString(makeCredentialResult.credentialId),\n      attestationObject: Fido2Utils.bufferToString(makeCredentialResult.attestationObject),\n      authData: Fido2Utils.bufferToString(makeCredentialResult.authData),\n      clientDataJSON: Fido2Utils.bufferToString(clientDataJSONBytes),\n      publicKeyAlgorithm: makeCredentialResult.publicKeyAlgorithm,\n      transports: [\"internal\"],\n    };\n  }\n\n  async assertCredential(\n    params: AssertCredentialParams,\n    tab: chrome.tabs.Tab,\n    abortController = new AbortController()\n  ): Promise<AssertCredentialResult> {\n    const enableFido2VaultCredentials = await this.isFido2FeatureEnabled();\n\n    if (!enableFido2VaultCredentials) {\n      this.logService?.warning(`[Fido2Client] Fido2VaultCredential is not enabled`);\n      throw new FallbackRequestedError();\n    }\n\n    const authStatus = await this.authService.getAuthStatus();\n\n    if (authStatus === AuthenticationStatus.LoggedOut) {\n      this.logService?.warning(`[Fido2Client] Fido2VaultCredential is not enabled`);\n      throw new FallbackRequestedError();\n    }\n\n    const parsedOrigin = parse(params.origin, { allowPrivateDomains: true });\n    params.rpId = params.rpId ?? parsedOrigin.hostname;\n\n    const neverDomains = await this.stateService.getNeverDomains();\n    if (neverDomains != null && parsedOrigin.hostname in neverDomains) {\n      this.logService?.warning(`[Fido2Client] Excluded domain`);\n      throw new FallbackRequestedError();\n    }\n\n    if (parsedOrigin.hostname == undefined || !params.origin.startsWith(\"https://\")) {\n      this.logService?.warning(`[Fido2Client] Invalid https origin: ${params.origin}`);\n      throw new DOMException(\"'origin' is not a valid https origin\", \"SecurityError\");\n    }\n\n    if (!isValidRpId(params.rpId, params.origin)) {\n      this.logService?.warning(\n        `[Fido2Client] 'rp.id' cannot be used with the current origin: rp.id = ${params.rpId}; origin = ${params.origin}`\n      );\n      throw new DOMException(\"'rp.id' cannot be used with the current origin\", \"SecurityError\");\n    }\n\n    const collectedClientData = {\n      type: \"webauthn.get\",\n      challenge: params.challenge,\n      origin: params.origin,\n      crossOrigin: !params.sameOriginWithAncestors,\n      // tokenBinding: {} // Not currently supported\n    };\n    const clientDataJSON = JSON.stringify(collectedClientData);\n    const clientDataJSONBytes = Utils.fromByteStringToArray(clientDataJSON);\n    const clientDataHash = await crypto.subtle.digest({ name: \"SHA-256\" }, clientDataJSONBytes);\n    const getAssertionParams = mapToGetAssertionParams({ params, clientDataHash });\n\n    if (abortController.signal.aborted) {\n      this.logService?.info(`[Fido2Client] Aborted with AbortController`);\n      throw new DOMException(\"The operation either timed out or was not allowed.\", \"AbortError\");\n    }\n\n    const timeout = setAbortTimeout(abortController, params.userVerification, params.timeout);\n\n    let getAssertionResult;\n    try {\n      getAssertionResult = await this.authenticator.getAssertion(\n        getAssertionParams,\n        tab,\n        abortController\n      );\n    } catch (error) {\n      if (error instanceof FallbackRequestedError) {\n        this.logService?.info(`[Fido2Client] Aborting because of auto fallback`);\n        throw error;\n      }\n\n      if (\n        abortController.signal.aborted &&\n        abortController.signal.reason === UserRequestedFallbackAbortReason\n      ) {\n        this.logService?.info(`[Fido2Client] Aborting because user requested fallback`);\n        throw new FallbackRequestedError();\n      }\n\n      if (\n        error instanceof Fido2AuthenticatorError &&\n        error.errorCode === Fido2AuthenticatorErrorCode.InvalidState\n      ) {\n        this.logService?.warning(`[Fido2Client] Unknown error: ${error}`);\n        throw new DOMException(\"Unknown error occured.\", \"InvalidStateError\");\n      }\n\n      this.logService?.info(`[Fido2Client] Aborted by user: ${error}`);\n      throw new DOMException(\n        \"The operation either timed out or was not allowed.\",\n        \"NotAllowedError\"\n      );\n    }\n\n    if (abortController.signal.aborted) {\n      this.logService?.info(`[Fido2Client] Aborted with AbortController`);\n      throw new DOMException(\"The operation either timed out or was not allowed.\", \"AbortError\");\n    }\n    clearTimeout(timeout);\n\n    return {\n      authenticatorData: Fido2Utils.bufferToString(getAssertionResult.authenticatorData),\n      clientDataJSON: Fido2Utils.bufferToString(clientDataJSONBytes),\n      credentialId: Fido2Utils.bufferToString(getAssertionResult.selectedCredential.id),\n      userHandle:\n        getAssertionResult.selectedCredential.userHandle !== undefined\n          ? Fido2Utils.bufferToString(getAssertionResult.selectedCredential.userHandle)\n          : undefined,\n      signature: Fido2Utils.bufferToString(getAssertionResult.signature),\n    };\n  }\n}\n\nconst TIMEOUTS = {\n  NO_VERIFICATION: {\n    DEFAULT: 120000,\n    MIN: 30000,\n    MAX: 180000,\n  },\n  WITH_VERIFICATION: {\n    DEFAULT: 300000,\n    MIN: 30000,\n    MAX: 600000,\n  },\n};\n\nfunction setAbortTimeout(\n  abortController: AbortController,\n  userVerification?: UserVerification,\n  timeout?: number\n): number {\n  let clampedTimeout: number;\n\n  if (userVerification === \"required\") {\n    timeout = timeout ?? TIMEOUTS.WITH_VERIFICATION.DEFAULT;\n    clampedTimeout = Math.max(\n      TIMEOUTS.WITH_VERIFICATION.MIN,\n      Math.min(timeout, TIMEOUTS.WITH_VERIFICATION.MAX)\n    );\n  } else {\n    timeout = timeout ?? TIMEOUTS.NO_VERIFICATION.DEFAULT;\n    clampedTimeout = Math.max(\n      TIMEOUTS.NO_VERIFICATION.MIN,\n      Math.min(timeout, TIMEOUTS.NO_VERIFICATION.MAX)\n    );\n  }\n\n  return window.setTimeout(() => abortController.abort(), clampedTimeout);\n}\n\n/**\n * Convert data gathered by the WebAuthn Client to a format that can be used by the authenticator.\n */\nfunction mapToMakeCredentialParams({\n  params,\n  credTypesAndPubKeyAlgs,\n  clientDataHash,\n}: {\n  params: CreateCredentialParams;\n  credTypesAndPubKeyAlgs: PublicKeyCredentialParam[];\n  clientDataHash: ArrayBuffer;\n}): Fido2AuthenticatorMakeCredentialsParams {\n  const excludeCredentialDescriptorList: PublicKeyCredentialDescriptor[] =\n    params.excludeCredentials?.map((credential) => ({\n      id: Fido2Utils.stringToBuffer(credential.id),\n      transports: credential.transports,\n      type: credential.type,\n    })) ?? [];\n\n  const requireResidentKey =\n    params.authenticatorSelection?.residentKey === \"required\" ||\n    params.authenticatorSelection?.residentKey === \"preferred\" ||\n    (params.authenticatorSelection?.residentKey === undefined &&\n      params.authenticatorSelection?.requireResidentKey === true);\n\n  const requireUserVerification =\n    params.authenticatorSelection?.userVerification === \"required\" ||\n    params.authenticatorSelection?.userVerification === \"preferred\" ||\n    params.authenticatorSelection?.userVerification === undefined;\n\n  return {\n    requireResidentKey,\n    requireUserVerification,\n    enterpriseAttestationPossible: params.attestation === \"enterprise\",\n    excludeCredentialDescriptorList,\n    credTypesAndPubKeyAlgs,\n    hash: clientDataHash,\n    rpEntity: {\n      id: params.rp.id,\n      name: params.rp.name,\n    },\n    userEntity: {\n      id: Fido2Utils.stringToBuffer(params.user.id),\n      displayName: params.user.displayName,\n    },\n    fallbackSupported: params.fallbackSupported,\n  };\n}\n\n/**\n * Convert data gathered by the WebAuthn Client to a format that can be used by the authenticator.\n */\nfunction mapToGetAssertionParams({\n  params,\n  clientDataHash,\n}: {\n  params: AssertCredentialParams;\n  clientDataHash: ArrayBuffer;\n}): Fido2AuthenticatorGetAssertionParams {\n  const allowCredentialDescriptorList: PublicKeyCredentialDescriptor[] =\n    params.allowedCredentialIds.map((id) => ({\n      id: Fido2Utils.stringToBuffer(id),\n      type: \"public-key\",\n    }));\n\n  const requireUserVerification =\n    params.userVerification === \"required\" ||\n    params.userVerification === \"preferred\" ||\n    params.userVerification === undefined;\n\n  return {\n    rpId: params.rpId,\n    requireUserVerification,\n    hash: clientDataHash,\n    allowCredentialDescriptorList,\n    extensions: {},\n    fallbackSupported: params.fallbackSupported,\n  };\n}\n","import { ApiService } from \"../../../abstractions/api.service\";\nimport { ErrorResponse } from \"../../../models/response/error.response\";\nimport {\n  FileUploadApiMethods,\n  FileUploadService,\n} from \"../../../platform/abstractions/file-upload/file-upload.service\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { EncArrayBuffer } from \"../../../platform/models/domain/enc-array-buffer\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { CipherFileUploadService as CipherFileUploadServiceAbstraction } from \"../../abstractions/file-upload/cipher-file-upload.service\";\nimport { Cipher } from \"../../models/domain/cipher\";\nimport { AttachmentRequest } from \"../../models/request/attachment.request\";\nimport { AttachmentUploadDataResponse } from \"../../models/response/attachment-upload-data.response\";\nimport { CipherResponse } from \"../../models/response/cipher.response\";\n\nexport class CipherFileUploadService implements CipherFileUploadServiceAbstraction {\n  constructor(private apiService: ApiService, private fileUploadService: FileUploadService) {}\n\n  async upload(\n    cipher: Cipher,\n    encFileName: EncString,\n    encData: EncArrayBuffer,\n    admin: boolean,\n    dataEncKey: [SymmetricCryptoKey, EncString]\n  ): Promise<CipherResponse> {\n    const request: AttachmentRequest = {\n      key: dataEncKey[1].encryptedString,\n      fileName: encFileName.encryptedString,\n      fileSize: encData.buffer.byteLength,\n      adminRequest: admin,\n    };\n\n    let response: CipherResponse;\n    try {\n      const uploadDataResponse = await this.apiService.postCipherAttachment(cipher.id, request);\n      response = admin ? uploadDataResponse.cipherMiniResponse : uploadDataResponse.cipherResponse;\n      await this.fileUploadService.upload(\n        uploadDataResponse,\n        encFileName,\n        encData,\n        this.generateMethods(uploadDataResponse, response, request.adminRequest)\n      );\n    } catch (e) {\n      if (\n        (e instanceof ErrorResponse && (e as ErrorResponse).statusCode === 404) ||\n        (e as ErrorResponse).statusCode === 405\n      ) {\n        response = await this.legacyServerAttachmentFileUpload(\n          request.adminRequest,\n          cipher.id,\n          encFileName,\n          encData,\n          dataEncKey[1]\n        );\n      } else if (e instanceof ErrorResponse) {\n        throw new Error((e as ErrorResponse).getSingleMessage());\n      } else {\n        throw e;\n      }\n    }\n    return response;\n  }\n\n  private generateMethods(\n    uploadData: AttachmentUploadDataResponse,\n    response: CipherResponse,\n    isAdmin: boolean\n  ): FileUploadApiMethods {\n    return {\n      postDirect: this.generatePostDirectCallback(uploadData, isAdmin),\n      renewFileUploadUrl: this.generateRenewFileUploadUrlCallback(uploadData, response, isAdmin),\n      rollback: this.generateRollbackCallback(response, uploadData, isAdmin),\n    };\n  }\n\n  private generatePostDirectCallback(uploadData: AttachmentUploadDataResponse, isAdmin: boolean) {\n    return (data: FormData) => {\n      const response = isAdmin ? uploadData.cipherMiniResponse : uploadData.cipherResponse;\n      return this.apiService.postAttachmentFile(response.id, uploadData.attachmentId, data);\n    };\n  }\n\n  private generateRenewFileUploadUrlCallback(\n    uploadData: AttachmentUploadDataResponse,\n    response: CipherResponse,\n    isAdmin: boolean\n  ) {\n    return async () => {\n      const renewResponse = await this.apiService.renewAttachmentUploadUrl(\n        response.id,\n        uploadData.attachmentId\n      );\n      return renewResponse?.url;\n    };\n  }\n\n  private generateRollbackCallback(\n    response: CipherResponse,\n    uploadData: AttachmentUploadDataResponse,\n    isAdmin: boolean\n  ) {\n    return () => {\n      if (isAdmin) {\n        return this.apiService.deleteCipherAttachmentAdmin(response.id, uploadData.attachmentId);\n      } else {\n        return this.apiService.deleteCipherAttachment(response.id, uploadData.attachmentId);\n      }\n    };\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async legacyServerAttachmentFileUpload(\n    admin: boolean,\n    cipherId: string,\n    encFileName: EncString,\n    encData: EncArrayBuffer,\n    key: EncString\n  ) {\n    const fd = new FormData();\n    try {\n      const blob = new Blob([encData.buffer], { type: \"application/octet-stream\" });\n      fd.append(\"key\", key.encryptedString);\n      fd.append(\"data\", blob, encFileName.encryptedString);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\"key\", key.encryptedString);\n        fd.append(\n          \"data\",\n          Buffer.from(encData.buffer) as any,\n          {\n            filepath: encFileName.encryptedString,\n            contentType: \"application/octet-stream\",\n          } as any\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    let response: CipherResponse;\n    try {\n      if (admin) {\n        response = await this.apiService.postCipherAttachmentAdminLegacy(cipherId, fd);\n      } else {\n        response = await this.apiService.postCipherAttachmentLegacy(cipherId, fd);\n      }\n    } catch (e) {\n      throw new Error((e as ErrorResponse).getSingleMessage());\n    }\n\n    return response;\n  }\n}\n","import { FolderResponse } from \"../response/folder.response\";\n\nexport class FolderData {\n  id: string;\n  name: string;\n  revisionDate: string;\n\n  constructor(response: FolderResponse) {\n    this.name = response.name;\n    this.id = response.id;\n    this.revisionDate = response.revisionDate;\n  }\n}\n","import { Folder } from \"../domain/folder\";\n\nexport class FolderRequest {\n  name: string;\n\n  constructor(folder: Folder) {\n    this.name = folder.name ? folder.name.encryptedString : null;\n  }\n}\n","import { ApiService } from \"../../../abstractions/api.service\";\nimport { FolderApiServiceAbstraction } from \"../../../vault/abstractions/folder/folder-api.service.abstraction\";\nimport { InternalFolderService } from \"../../../vault/abstractions/folder/folder.service.abstraction\";\nimport { FolderData } from \"../../../vault/models/data/folder.data\";\nimport { Folder } from \"../../../vault/models/domain/folder\";\nimport { FolderRequest } from \"../../../vault/models/request/folder.request\";\nimport { FolderResponse } from \"../../../vault/models/response/folder.response\";\n\nexport class FolderApiService implements FolderApiServiceAbstraction {\n  constructor(private folderService: InternalFolderService, private apiService: ApiService) {}\n\n  async save(folder: Folder): Promise<any> {\n    const request = new FolderRequest(folder);\n\n    let response: FolderResponse;\n    if (folder.id == null) {\n      response = await this.postFolder(request);\n      folder.id = response.id;\n    } else {\n      response = await this.putFolder(folder.id, request);\n    }\n\n    const data = new FolderData(response);\n    await this.folderService.upsert(data);\n  }\n\n  async delete(id: string): Promise<any> {\n    await this.deleteFolder(id);\n    await this.folderService.delete(id);\n  }\n\n  async get(id: string): Promise<FolderResponse> {\n    const r = await this.apiService.send(\"GET\", \"/folders/\" + id, null, true, true);\n    return new FolderResponse(r);\n  }\n\n  private async postFolder(request: FolderRequest): Promise<FolderResponse> {\n    const r = await this.apiService.send(\"POST\", \"/folders\", request, true, true);\n    return new FolderResponse(r);\n  }\n\n  async putFolder(id: string, request: FolderRequest): Promise<FolderResponse> {\n    const r = await this.apiService.send(\"PUT\", \"/folders/\" + id, request, true, true);\n    return new FolderResponse(r);\n  }\n\n  private deleteFolder(id: string): Promise<any> {\n    return this.apiService.send(\"DELETE\", \"/folders/\" + id, null, true, false);\n  }\n}\n","import { Subject } from \"rxjs\";\n\nimport { SyncNotifierService as SyncNotifierServiceAbstraction } from \"../../abstractions/sync/sync-notifier.service.abstraction\";\nimport { SyncEventArgs } from \"../../types/sync-event-args\";\n\n/**\n * This class should most likely have 0 dependencies because it will hopefully\n * be rolled into SyncService once upon a time.\n */\nexport class SyncNotifierService implements SyncNotifierServiceAbstraction {\n  private _sync = new Subject<SyncEventArgs>();\n\n  sync$ = this._sync.asObservable();\n\n  next(event: SyncEventArgs): void {\n    this._sync.next(event);\n  }\n}\n","import { ProductType, ProviderType } from \"../../../enums\";\nimport { OrganizationUserStatusType, OrganizationUserType } from \"../../enums\";\nimport { PermissionsApi } from \"../api/permissions.api\";\nimport { ProfileOrganizationResponse } from \"../response/profile-organization.response\";\n\nexport class OrganizationData {\n  id: string;\n  name: string;\n  status: OrganizationUserStatusType;\n  type: OrganizationUserType;\n  enabled: boolean;\n  usePolicies: boolean;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useSso: boolean;\n  useKeyConnector: boolean;\n  useScim: boolean;\n  useCustomPermissions: boolean;\n  useResetPassword: boolean;\n  useSecretsManager: boolean;\n  usePasswordManager: boolean;\n  useActivateAutofillPolicy: boolean;\n  selfHost: boolean;\n  usersGetPremium: boolean;\n  seats: number;\n  maxCollections: number;\n  maxStorageGb?: number;\n  ssoBound: boolean;\n  identifier: string;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  userId: string;\n  hasPublicAndPrivateKeys: boolean;\n  providerId: string;\n  providerName: string;\n  providerType?: ProviderType;\n  isProviderUser: boolean;\n  isMember: boolean;\n  familySponsorshipFriendlyName: string;\n  familySponsorshipAvailable: boolean;\n  planProductType: ProductType;\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n  familySponsorshipLastSyncDate?: Date;\n  familySponsorshipValidUntil?: Date;\n  familySponsorshipToDelete?: boolean;\n  accessSecretsManager: boolean;\n\n  constructor(\n    response: ProfileOrganizationResponse,\n    options: {\n      isMember: boolean;\n      isProviderUser: boolean;\n    }\n  ) {\n    this.id = response.id;\n    this.name = response.name;\n    this.status = response.status;\n    this.type = response.type;\n    this.enabled = response.enabled;\n    this.usePolicies = response.usePolicies;\n    this.useGroups = response.useGroups;\n    this.useDirectory = response.useDirectory;\n    this.useEvents = response.useEvents;\n    this.useTotp = response.useTotp;\n    this.use2fa = response.use2fa;\n    this.useApi = response.useApi;\n    this.useSso = response.useSso;\n    this.useKeyConnector = response.useKeyConnector;\n    this.useScim = response.useScim;\n    this.useCustomPermissions = response.useCustomPermissions;\n    this.useResetPassword = response.useResetPassword;\n    this.useSecretsManager = response.useSecretsManager;\n    this.usePasswordManager = response.usePasswordManager;\n    this.useActivateAutofillPolicy = response.useActivateAutofillPolicy;\n    this.selfHost = response.selfHost;\n    this.usersGetPremium = response.usersGetPremium;\n    this.seats = response.seats;\n    this.maxCollections = response.maxCollections;\n    this.maxStorageGb = response.maxStorageGb;\n    this.ssoBound = response.ssoBound;\n    this.identifier = response.identifier;\n    this.permissions = response.permissions;\n    this.resetPasswordEnrolled = response.resetPasswordEnrolled;\n    this.userId = response.userId;\n    this.hasPublicAndPrivateKeys = response.hasPublicAndPrivateKeys;\n    this.providerId = response.providerId;\n    this.providerName = response.providerName;\n    this.providerType = response.providerType;\n    this.familySponsorshipFriendlyName = response.familySponsorshipFriendlyName;\n    this.familySponsorshipAvailable = response.familySponsorshipAvailable;\n    this.planProductType = response.planProductType;\n    this.keyConnectorEnabled = response.keyConnectorEnabled;\n    this.keyConnectorUrl = response.keyConnectorUrl;\n    this.familySponsorshipLastSyncDate = response.familySponsorshipLastSyncDate;\n    this.familySponsorshipValidUntil = response.familySponsorshipValidUntil;\n    this.familySponsorshipToDelete = response.familySponsorshipToDelete;\n    this.accessSecretsManager = response.accessSecretsManager;\n\n    this.isMember = options.isMember;\n    this.isProviderUser = options.isProviderUser;\n  }\n}\n","import { ProviderUserStatusType, ProviderUserType } from \"../../enums\";\nimport { ProfileProviderResponse } from \"../response/profile-provider.response\";\n\nexport class ProviderData {\n  id: string;\n  name: string;\n  status: ProviderUserStatusType;\n  type: ProviderUserType;\n  enabled: boolean;\n  userId: string;\n  useEvents: boolean;\n\n  constructor(response: ProfileProviderResponse) {\n    this.id = response.id;\n    this.name = response.name;\n    this.status = response.status;\n    this.type = response.type;\n    this.enabled = response.enabled;\n    this.userId = response.userId;\n    this.useEvents = response.useEvents;\n  }\n}\n","import { ApiService } from \"../../../abstractions/api.service\";\nimport { SettingsService } from \"../../../abstractions/settings.service\";\nimport { InternalOrganizationServiceAbstraction } from \"../../../admin-console/abstractions/organization/organization.service.abstraction\";\nimport { InternalPolicyService } from \"../../../admin-console/abstractions/policy/policy.service.abstraction\";\nimport { ProviderService } from \"../../../admin-console/abstractions/provider.service\";\nimport { OrganizationData } from \"../../../admin-console/models/data/organization.data\";\nimport { PolicyData } from \"../../../admin-console/models/data/policy.data\";\nimport { ProviderData } from \"../../../admin-console/models/data/provider.data\";\nimport { PolicyResponse } from \"../../../admin-console/models/response/policy.response\";\nimport { KeyConnectorService } from \"../../../auth/abstractions/key-connector.service\";\nimport { ForceResetPasswordReason } from \"../../../auth/models/domain/force-reset-password-reason\";\nimport { DomainsResponse } from \"../../../models/response/domains.response\";\nimport {\n  SyncCipherNotification,\n  SyncFolderNotification,\n  SyncSendNotification,\n} from \"../../../models/response/notification.response\";\nimport { ProfileResponse } from \"../../../models/response/profile.response\";\nimport { CryptoService } from \"../../../platform/abstractions/crypto.service\";\nimport { LogService } from \"../../../platform/abstractions/log.service\";\nimport { MessagingService } from \"../../../platform/abstractions/messaging.service\";\nimport { StateService } from \"../../../platform/abstractions/state.service\";\nimport { sequentialize } from \"../../../platform/misc/sequentialize\";\nimport { SendData } from \"../../../tools/send/models/data/send.data\";\nimport { SendResponse } from \"../../../tools/send/models/response/send.response\";\nimport { SendApiService } from \"../../../tools/send/services/send-api.service.abstraction\";\nimport { InternalSendService } from \"../../../tools/send/services/send.service.abstraction\";\nimport { CipherService } from \"../../../vault/abstractions/cipher.service\";\nimport { FolderApiServiceAbstraction } from \"../../../vault/abstractions/folder/folder-api.service.abstraction\";\nimport { InternalFolderService } from \"../../../vault/abstractions/folder/folder.service.abstraction\";\nimport { SyncService as SyncServiceAbstraction } from \"../../../vault/abstractions/sync/sync.service.abstraction\";\nimport { CipherData } from \"../../../vault/models/data/cipher.data\";\nimport { FolderData } from \"../../../vault/models/data/folder.data\";\nimport { CipherResponse } from \"../../../vault/models/response/cipher.response\";\nimport { FolderResponse } from \"../../../vault/models/response/folder.response\";\nimport { CollectionService } from \"../../abstractions/collection.service\";\nimport { CollectionData } from \"../../models/data/collection.data\";\nimport { CollectionDetailsResponse } from \"../../models/response/collection.response\";\n\nexport class SyncService implements SyncServiceAbstraction {\n  syncInProgress = false;\n\n  constructor(\n    private apiService: ApiService,\n    private settingsService: SettingsService,\n    private folderService: InternalFolderService,\n    private cipherService: CipherService,\n    private cryptoService: CryptoService,\n    private collectionService: CollectionService,\n    private messagingService: MessagingService,\n    private policyService: InternalPolicyService,\n    private sendService: InternalSendService,\n    private logService: LogService,\n    private keyConnectorService: KeyConnectorService,\n    private stateService: StateService,\n    private providerService: ProviderService,\n    private folderApiService: FolderApiServiceAbstraction,\n    private organizationService: InternalOrganizationServiceAbstraction,\n    private sendApiService: SendApiService,\n    private logoutCallback: (expired: boolean) => Promise<void>\n  ) {}\n\n  async getLastSync(): Promise<Date> {\n    if ((await this.stateService.getUserId()) == null) {\n      return null;\n    }\n\n    const lastSync = await this.stateService.getLastSync();\n    if (lastSync) {\n      return new Date(lastSync);\n    }\n\n    return null;\n  }\n\n  async setLastSync(date: Date, userId?: string): Promise<any> {\n    await this.stateService.setLastSync(date.toJSON(), { userId: userId });\n  }\n\n  @sequentialize(() => \"fullSync\")\n  async fullSync(forceSync: boolean, allowThrowOnError = false): Promise<boolean> {\n    this.syncStarted();\n    const isAuthenticated = await this.stateService.getIsAuthenticated();\n    if (!isAuthenticated) {\n      return this.syncCompleted(false);\n    }\n\n    const now = new Date();\n    let needsSync = false;\n    try {\n      needsSync = await this.needsSyncing(forceSync);\n    } catch (e) {\n      if (allowThrowOnError) {\n        throw e;\n      }\n    }\n\n    if (!needsSync) {\n      await this.setLastSync(now);\n      return this.syncCompleted(false);\n    }\n\n    try {\n      await this.apiService.refreshIdentityToken();\n      const response = await this.apiService.getSync();\n\n      await this.syncProfile(response.profile);\n      await this.syncFolders(response.folders);\n      await this.syncCollections(response.collections);\n      await this.syncCiphers(response.ciphers);\n      await this.syncSends(response.sends);\n      await this.syncSettings(response.domains);\n      await this.syncPolicies(response.policies);\n\n      await this.setLastSync(now);\n      return this.syncCompleted(true);\n    } catch (e) {\n      if (allowThrowOnError) {\n        throw e;\n      } else {\n        return this.syncCompleted(false);\n      }\n    }\n  }\n\n  async syncUpsertFolder(notification: SyncFolderNotification, isEdit: boolean): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      try {\n        const localFolder = await this.folderService.get(notification.id);\n        if (\n          (!isEdit && localFolder == null) ||\n          (isEdit && localFolder != null && localFolder.revisionDate < notification.revisionDate)\n        ) {\n          const remoteFolder = await this.folderApiService.get(notification.id);\n          if (remoteFolder != null) {\n            await this.folderService.upsert(new FolderData(remoteFolder));\n            this.messagingService.send(\"syncedUpsertedFolder\", { folderId: notification.id });\n            return this.syncCompleted(true);\n          }\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncDeleteFolder(notification: SyncFolderNotification): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      await this.folderService.delete(notification.id);\n      this.messagingService.send(\"syncedDeletedFolder\", { folderId: notification.id });\n      this.syncCompleted(true);\n      return true;\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncUpsertCipher(notification: SyncCipherNotification, isEdit: boolean): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      try {\n        let shouldUpdate = true;\n        const localCipher = await this.cipherService.get(notification.id);\n        if (localCipher != null && localCipher.revisionDate >= notification.revisionDate) {\n          shouldUpdate = false;\n        }\n\n        let checkCollections = false;\n        if (shouldUpdate) {\n          if (isEdit) {\n            shouldUpdate = localCipher != null;\n            checkCollections = true;\n          } else {\n            if (notification.collectionIds == null || notification.organizationId == null) {\n              shouldUpdate = localCipher == null;\n            } else {\n              shouldUpdate = false;\n              checkCollections = true;\n            }\n          }\n        }\n\n        if (\n          !shouldUpdate &&\n          checkCollections &&\n          notification.organizationId != null &&\n          notification.collectionIds != null &&\n          notification.collectionIds.length > 0\n        ) {\n          const collections = await this.collectionService.getAll();\n          if (collections != null) {\n            for (let i = 0; i < collections.length; i++) {\n              if (notification.collectionIds.indexOf(collections[i].id) > -1) {\n                shouldUpdate = true;\n                break;\n              }\n            }\n          }\n        }\n\n        if (shouldUpdate) {\n          const remoteCipher = await this.apiService.getFullCipherDetails(notification.id);\n          if (remoteCipher != null) {\n            await this.cipherService.upsert(new CipherData(remoteCipher));\n            this.messagingService.send(\"syncedUpsertedCipher\", { cipherId: notification.id });\n            return this.syncCompleted(true);\n          }\n        }\n      } catch (e) {\n        if (e != null && e.statusCode === 404 && isEdit) {\n          await this.cipherService.delete(notification.id);\n          this.messagingService.send(\"syncedDeletedCipher\", { cipherId: notification.id });\n          return this.syncCompleted(true);\n        }\n      }\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncDeleteCipher(notification: SyncCipherNotification): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      await this.cipherService.delete(notification.id);\n      this.messagingService.send(\"syncedDeletedCipher\", { cipherId: notification.id });\n      return this.syncCompleted(true);\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncUpsertSend(notification: SyncSendNotification, isEdit: boolean): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      try {\n        const localSend = this.sendService.get(notification.id);\n        if (\n          (!isEdit && localSend == null) ||\n          (isEdit && localSend != null && localSend.revisionDate < notification.revisionDate)\n        ) {\n          const remoteSend = await this.sendApiService.getSend(notification.id);\n          if (remoteSend != null) {\n            await this.sendService.upsert(new SendData(remoteSend));\n            this.messagingService.send(\"syncedUpsertedSend\", { sendId: notification.id });\n            return this.syncCompleted(true);\n          }\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncDeleteSend(notification: SyncSendNotification): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      await this.sendService.delete(notification.id);\n      this.messagingService.send(\"syncedDeletedSend\", { sendId: notification.id });\n      this.syncCompleted(true);\n      return true;\n    }\n    return this.syncCompleted(false);\n  }\n\n  // Helpers\n\n  private syncStarted() {\n    this.syncInProgress = true;\n    this.messagingService.send(\"syncStarted\");\n  }\n\n  private syncCompleted(successfully: boolean): boolean {\n    this.syncInProgress = false;\n    this.messagingService.send(\"syncCompleted\", { successfully: successfully });\n    return successfully;\n  }\n\n  private async needsSyncing(forceSync: boolean) {\n    if (forceSync) {\n      return true;\n    }\n\n    const lastSync = await this.getLastSync();\n    if (lastSync == null || lastSync.getTime() === 0) {\n      return true;\n    }\n\n    const response = await this.apiService.getAccountRevisionDate();\n    if (new Date(response) <= lastSync) {\n      return false;\n    }\n    return true;\n  }\n\n  private async syncProfile(response: ProfileResponse) {\n    const stamp = await this.stateService.getSecurityStamp();\n    if (stamp != null && stamp !== response.securityStamp) {\n      if (this.logoutCallback != null) {\n        await this.logoutCallback(true);\n      }\n\n      throw new Error(\"Stamp has changed\");\n    }\n\n    await this.cryptoService.setMasterKeyEncryptedUserKey(response.key);\n    await this.cryptoService.setPrivateKey(response.privateKey);\n    await this.cryptoService.setProviderKeys(response.providers);\n    await this.cryptoService.setOrgKeys(response.organizations, response.providerOrganizations);\n    await this.stateService.setAvatarColor(response.avatarColor);\n    await this.stateService.setSecurityStamp(response.securityStamp);\n    await this.stateService.setEmailVerified(response.emailVerified);\n    await this.stateService.setHasPremiumPersonally(response.premiumPersonally);\n    await this.stateService.setHasPremiumFromOrganization(response.premiumFromOrganization);\n    await this.keyConnectorService.setUsesKeyConnector(response.usesKeyConnector);\n\n    // The `forcePasswordReset` flag indicates an admin has reset the user's password and must be updated\n    if (response.forcePasswordReset) {\n      await this.stateService.setForcePasswordResetReason(\n        ForceResetPasswordReason.AdminForcePasswordReset\n      );\n    }\n\n    await this.syncProfileOrganizations(response);\n\n    const providers: { [id: string]: ProviderData } = {};\n    response.providers.forEach((p) => {\n      providers[p.id] = new ProviderData(p);\n    });\n\n    await this.providerService.save(providers);\n\n    if (await this.keyConnectorService.userNeedsMigration()) {\n      await this.keyConnectorService.setConvertAccountRequired(true);\n      this.messagingService.send(\"convertAccountToKeyConnector\");\n    } else {\n      this.keyConnectorService.removeConvertAccountRequired();\n    }\n  }\n\n  private async syncProfileOrganizations(response: ProfileResponse) {\n    const organizations: { [id: string]: OrganizationData } = {};\n    response.organizations.forEach((o) => {\n      organizations[o.id] = new OrganizationData(o, {\n        isMember: true,\n        isProviderUser: false,\n      });\n    });\n\n    response.providerOrganizations.forEach((o) => {\n      if (organizations[o.id] == null) {\n        organizations[o.id] = new OrganizationData(o, {\n          isMember: false,\n          isProviderUser: true,\n        });\n      } else {\n        organizations[o.id].isProviderUser = true;\n      }\n    });\n\n    await this.organizationService.replace(organizations);\n  }\n\n  private async syncFolders(response: FolderResponse[]) {\n    const folders: { [id: string]: FolderData } = {};\n    response.forEach((f) => {\n      folders[f.id] = new FolderData(f);\n    });\n    return await this.folderService.replace(folders);\n  }\n\n  private async syncCollections(response: CollectionDetailsResponse[]) {\n    const collections: { [id: string]: CollectionData } = {};\n    response.forEach((c) => {\n      collections[c.id] = new CollectionData(c);\n    });\n    return await this.collectionService.replace(collections);\n  }\n\n  private async syncCiphers(response: CipherResponse[]) {\n    const ciphers: { [id: string]: CipherData } = {};\n    response.forEach((c) => {\n      ciphers[c.id] = new CipherData(c);\n    });\n    return await this.cipherService.replace(ciphers);\n  }\n\n  private async syncSends(response: SendResponse[]) {\n    const sends: { [id: string]: SendData } = {};\n    response.forEach((s) => {\n      sends[s.id] = new SendData(s);\n    });\n    return await this.sendService.replace(sends);\n  }\n\n  private async syncSettings(response: DomainsResponse) {\n    let eqDomains: string[][] = [];\n    if (response != null && response.equivalentDomains != null) {\n      eqDomains = eqDomains.concat(response.equivalentDomains);\n    }\n\n    if (response != null && response.globalEquivalentDomains != null) {\n      response.globalEquivalentDomains.forEach((global) => {\n        if (global.domains.length > 0) {\n          eqDomains.push(global.domains);\n        }\n      });\n    }\n\n    return this.settingsService.setEquivalentDomains(eqDomains);\n  }\n\n  private async syncPolicies(response: PolicyResponse[]) {\n    const policies: { [id: string]: PolicyData } = {};\n    if (response != null) {\n      response.forEach((p) => {\n        policies[p.id] = new PolicyData(p);\n      });\n    }\n    return await this.policyService.replace(policies);\n  }\n}\n","import { EncString } from \"../../platform/models/domain/enc-string\";\nimport { Card as CardDomain } from \"../../vault/models/domain/card\";\nimport { CardView } from \"../../vault/models/view/card.view\";\n\nexport class CardExport {\n  static template(): CardExport {\n    const req = new CardExport();\n    req.cardholderName = \"John Doe\";\n    req.brand = \"visa\";\n    req.number = \"4242424242424242\";\n    req.expMonth = \"04\";\n    req.expYear = \"2023\";\n    req.code = \"123\";\n    return req;\n  }\n\n  static toView(req: CardExport, view = new CardView()) {\n    view.cardholderName = req.cardholderName;\n    view.brand = req.brand;\n    view.number = req.number;\n    view.expMonth = req.expMonth;\n    view.expYear = req.expYear;\n    view.code = req.code;\n    return view;\n  }\n\n  static toDomain(req: CardExport, domain = new CardDomain()) {\n    domain.cardholderName = req.cardholderName != null ? new EncString(req.cardholderName) : null;\n    domain.brand = req.brand != null ? new EncString(req.brand) : null;\n    domain.number = req.number != null ? new EncString(req.number) : null;\n    domain.expMonth = req.expMonth != null ? new EncString(req.expMonth) : null;\n    domain.expYear = req.expYear != null ? new EncString(req.expYear) : null;\n    domain.code = req.code != null ? new EncString(req.code) : null;\n    return domain;\n  }\n\n  cardholderName: string;\n  brand: string;\n  number: string;\n  expMonth: string;\n  expYear: string;\n  code: string;\n\n  constructor(o?: CardView | CardDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof CardView) {\n      this.cardholderName = o.cardholderName;\n      this.brand = o.brand;\n      this.number = o.number;\n      this.expMonth = o.expMonth;\n      this.expYear = o.expYear;\n      this.code = o.code;\n    } else {\n      this.cardholderName = o.cardholderName?.encryptedString;\n      this.brand = o.brand?.encryptedString;\n      this.number = o.number?.encryptedString;\n      this.expMonth = o.expMonth?.encryptedString;\n      this.expYear = o.expYear?.encryptedString;\n      this.code = o.code?.encryptedString;\n    }\n  }\n}\n","import { FieldType, LinkedIdType } from \"../../enums\";\nimport { EncString } from \"../../platform/models/domain/enc-string\";\nimport { Field as FieldDomain } from \"../../vault/models/domain/field\";\nimport { FieldView } from \"../../vault/models/view/field.view\";\n\nexport class FieldExport {\n  static template(): FieldExport {\n    const req = new FieldExport();\n    req.name = \"Field name\";\n    req.value = \"Some value\";\n    req.type = FieldType.Text;\n    return req;\n  }\n\n  static toView(req: FieldExport, view = new FieldView()) {\n    view.type = req.type;\n    view.value = req.value;\n    view.name = req.name;\n    view.linkedId = req.linkedId;\n    return view;\n  }\n\n  static toDomain(req: FieldExport, domain = new FieldDomain()) {\n    domain.type = req.type;\n    domain.value = req.value != null ? new EncString(req.value) : null;\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    domain.linkedId = req.linkedId;\n    return domain;\n  }\n\n  name: string;\n  value: string;\n  type: FieldType;\n  linkedId: LinkedIdType;\n\n  constructor(o?: FieldView | FieldDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof FieldView) {\n      this.name = o.name;\n      this.value = o.value;\n    } else {\n      this.name = o.name?.encryptedString;\n      this.value = o.value?.encryptedString;\n    }\n    this.type = o.type;\n    this.linkedId = o.linkedId;\n  }\n}\n","import { EncString } from \"../../platform/models/domain/enc-string\";\nimport { Identity as IdentityDomain } from \"../../vault/models/domain/identity\";\nimport { IdentityView } from \"../../vault/models/view/identity.view\";\n\nexport class IdentityExport {\n  static template(): IdentityExport {\n    const req = new IdentityExport();\n    req.title = \"Mr\";\n    req.firstName = \"John\";\n    req.middleName = \"William\";\n    req.lastName = \"Doe\";\n    req.address1 = \"123 Any St\";\n    req.address2 = \"Apt #123\";\n    req.address3 = null;\n    req.city = \"New York\";\n    req.state = \"NY\";\n    req.postalCode = \"10001\";\n    req.country = \"US\";\n    req.company = \"Acme Inc.\";\n    req.email = \"john@company.com\";\n    req.phone = \"5555551234\";\n    req.ssn = \"000-123-4567\";\n    req.username = \"jdoe\";\n    req.passportNumber = \"US-123456789\";\n    req.licenseNumber = \"D123-12-123-12333\";\n    return req;\n  }\n\n  static toView(req: IdentityExport, view = new IdentityView()) {\n    view.title = req.title;\n    view.firstName = req.firstName;\n    view.middleName = req.middleName;\n    view.lastName = req.lastName;\n    view.address1 = req.address1;\n    view.address2 = req.address2;\n    view.address3 = req.address3;\n    view.city = req.city;\n    view.state = req.state;\n    view.postalCode = req.postalCode;\n    view.country = req.country;\n    view.company = req.company;\n    view.email = req.email;\n    view.phone = req.phone;\n    view.ssn = req.ssn;\n    view.username = req.username;\n    view.passportNumber = req.passportNumber;\n    view.licenseNumber = req.licenseNumber;\n    return view;\n  }\n\n  static toDomain(req: IdentityExport, domain = new IdentityDomain()) {\n    domain.title = req.title != null ? new EncString(req.title) : null;\n    domain.firstName = req.firstName != null ? new EncString(req.firstName) : null;\n    domain.middleName = req.middleName != null ? new EncString(req.middleName) : null;\n    domain.lastName = req.lastName != null ? new EncString(req.lastName) : null;\n    domain.address1 = req.address1 != null ? new EncString(req.address1) : null;\n    domain.address2 = req.address2 != null ? new EncString(req.address2) : null;\n    domain.address3 = req.address3 != null ? new EncString(req.address3) : null;\n    domain.city = req.city != null ? new EncString(req.city) : null;\n    domain.state = req.state != null ? new EncString(req.state) : null;\n    domain.postalCode = req.postalCode != null ? new EncString(req.postalCode) : null;\n    domain.country = req.country != null ? new EncString(req.country) : null;\n    domain.company = req.company != null ? new EncString(req.company) : null;\n    domain.email = req.email != null ? new EncString(req.email) : null;\n    domain.phone = req.phone != null ? new EncString(req.phone) : null;\n    domain.ssn = req.ssn != null ? new EncString(req.ssn) : null;\n    domain.username = req.username != null ? new EncString(req.username) : null;\n    domain.passportNumber = req.passportNumber != null ? new EncString(req.passportNumber) : null;\n    domain.licenseNumber = req.licenseNumber != null ? new EncString(req.licenseNumber) : null;\n    return domain;\n  }\n\n  title: string;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  address1: string;\n  address2: string;\n  address3: string;\n  city: string;\n  state: string;\n  postalCode: string;\n  country: string;\n  company: string;\n  email: string;\n  phone: string;\n  ssn: string;\n  username: string;\n  passportNumber: string;\n  licenseNumber: string;\n\n  constructor(o?: IdentityView | IdentityDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof IdentityView) {\n      this.title = o.title;\n      this.firstName = o.firstName;\n      this.middleName = o.middleName;\n      this.lastName = o.lastName;\n      this.address1 = o.address1;\n      this.address2 = o.address2;\n      this.address3 = o.address3;\n      this.city = o.city;\n      this.state = o.state;\n      this.postalCode = o.postalCode;\n      this.country = o.country;\n      this.company = o.company;\n      this.email = o.email;\n      this.phone = o.phone;\n      this.ssn = o.ssn;\n      this.username = o.username;\n      this.passportNumber = o.passportNumber;\n      this.licenseNumber = o.licenseNumber;\n    } else {\n      this.title = o.title?.encryptedString;\n      this.firstName = o.firstName?.encryptedString;\n      this.middleName = o.middleName?.encryptedString;\n      this.lastName = o.lastName?.encryptedString;\n      this.address1 = o.address1?.encryptedString;\n      this.address2 = o.address2?.encryptedString;\n      this.address3 = o.address3?.encryptedString;\n      this.city = o.city?.encryptedString;\n      this.state = o.state?.encryptedString;\n      this.postalCode = o.postalCode?.encryptedString;\n      this.country = o.country?.encryptedString;\n      this.company = o.company?.encryptedString;\n      this.email = o.email?.encryptedString;\n      this.phone = o.phone?.encryptedString;\n      this.ssn = o.ssn?.encryptedString;\n      this.username = o.username?.encryptedString;\n      this.passportNumber = o.passportNumber?.encryptedString;\n      this.licenseNumber = o.licenseNumber?.encryptedString;\n    }\n  }\n}\n","import { EncString } from \"../../platform/models/domain/enc-string\";\nimport { Fido2Credential } from \"../../vault/models/domain/fido2-credential\";\nimport { Fido2CredentialView } from \"../../vault/models/view/fido2-credential.view\";\n\n/**\n * Represents format of Fido2 Credentials in JSON exports.\n */\nexport class Fido2CredentialExport {\n  /**\n   * Generates a template for Fido2CredentialExport\n   * @returns Instance of Fido2CredentialExport with predefined values.\n   */\n  static template(): Fido2CredentialExport {\n    const req = new Fido2CredentialExport();\n    req.credentialId = \"keyId\";\n    req.keyType = \"keyType\";\n    req.keyAlgorithm = \"keyAlgorithm\";\n    req.keyCurve = \"keyCurve\";\n    req.keyValue = \"keyValue\";\n    req.rpId = \"rpId\";\n    req.userHandle = \"userHandle\";\n    req.counter = \"counter\";\n    req.rpName = \"rpName\";\n    req.userDisplayName = \"userDisplayName\";\n    req.discoverable = \"false\";\n    req.creationDate = null;\n    return req;\n  }\n\n  /**\n   * Converts a Fido2CredentialExport object to its view representation.\n   * @param req - The Fido2CredentialExport object to be converted.\n   * @param view - (Optional) The Fido2CredentialView object to popualte with Fido2CredentialExport data\n   * @returns Fido2CredentialView - The populated view, or a new instance if none was provided.\n   */\n  static toView(req: Fido2CredentialExport, view = new Fido2CredentialView()) {\n    view.credentialId = req.credentialId;\n    view.keyType = req.keyType as \"public-key\";\n    view.keyAlgorithm = req.keyAlgorithm as \"ECDSA\";\n    view.keyCurve = req.keyCurve as \"P-256\";\n    view.keyValue = req.keyValue;\n    view.rpId = req.rpId;\n    view.userHandle = req.userHandle;\n    view.counter = parseInt(req.counter);\n    view.rpName = req.rpName;\n    view.userDisplayName = req.userDisplayName;\n    view.discoverable = req.discoverable === \"true\";\n    view.creationDate = new Date(req.creationDate);\n    return view;\n  }\n\n  /**\n   * Converts a Fido2CredentialExport object to its domain representation.\n   * @param req - The Fido2CredentialExport object to be converted.\n   * @param domain - (Optional) The Fido2Credential object to popualte with Fido2CredentialExport data\n   * @returns Fido2Credential - The populated domain, or a new instance if none was provided.\n   */\n  static toDomain(req: Fido2CredentialExport, domain = new Fido2Credential()) {\n    domain.credentialId = req.credentialId != null ? new EncString(req.credentialId) : null;\n    domain.keyType = req.keyType != null ? new EncString(req.keyType) : null;\n    domain.keyAlgorithm = req.keyAlgorithm != null ? new EncString(req.keyAlgorithm) : null;\n    domain.keyCurve = req.keyCurve != null ? new EncString(req.keyCurve) : null;\n    domain.keyValue = req.keyValue != null ? new EncString(req.keyValue) : null;\n    domain.rpId = req.rpId != null ? new EncString(req.rpId) : null;\n    domain.userHandle = req.userHandle != null ? new EncString(req.userHandle) : null;\n    domain.counter = req.counter != null ? new EncString(req.counter) : null;\n    domain.rpName = req.rpName != null ? new EncString(req.rpName) : null;\n    domain.userDisplayName =\n      req.userDisplayName != null ? new EncString(req.userDisplayName) : null;\n    domain.discoverable = req.discoverable != null ? new EncString(req.discoverable) : null;\n    domain.creationDate = req.creationDate;\n    return domain;\n  }\n\n  credentialId: string;\n  keyType: string;\n  keyAlgorithm: string;\n  keyCurve: string;\n  keyValue: string;\n  rpId: string;\n  userHandle: string;\n  counter: string;\n  rpName: string;\n  userDisplayName: string;\n  discoverable: string;\n  creationDate: Date;\n\n  /**\n   * Constructs a new Fid2CredentialExport instance.\n   *\n   * @param o - The credential storing the data being exported. When not provided, an empty export is created instead.\n   */\n  constructor(o?: Fido2CredentialView | Fido2Credential) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof Fido2CredentialView) {\n      this.credentialId = o.credentialId;\n      this.keyType = o.keyType;\n      this.keyAlgorithm = o.keyAlgorithm;\n      this.keyCurve = o.keyCurve;\n      this.keyValue = o.keyValue;\n      this.rpId = o.rpId;\n      this.userHandle = o.userHandle;\n      this.counter = String(o.counter);\n      this.rpName = o.rpName;\n      this.userDisplayName = o.userDisplayName;\n      this.discoverable = String(o.discoverable);\n    } else {\n      this.credentialId = o.credentialId?.encryptedString;\n      this.keyType = o.keyType?.encryptedString;\n      this.keyAlgorithm = o.keyAlgorithm?.encryptedString;\n      this.keyCurve = o.keyCurve?.encryptedString;\n      this.keyValue = o.keyValue?.encryptedString;\n      this.rpId = o.rpId?.encryptedString;\n      this.userHandle = o.userHandle?.encryptedString;\n      this.counter = o.counter?.encryptedString;\n      this.rpName = o.rpName?.encryptedString;\n      this.userDisplayName = o.userDisplayName?.encryptedString;\n      this.discoverable = o.discoverable?.encryptedString;\n    }\n    this.creationDate = o.creationDate;\n  }\n}\n","import { UriMatchType } from \"../../enums\";\nimport { EncString } from \"../../platform/models/domain/enc-string\";\nimport { LoginUri as LoginUriDomain } from \"../../vault/models/domain/login-uri\";\nimport { LoginUriView } from \"../../vault/models/view/login-uri.view\";\n\nexport class LoginUriExport {\n  static template(): LoginUriExport {\n    const req = new LoginUriExport();\n    req.uri = \"https://google.com\";\n    req.match = null;\n    return req;\n  }\n\n  static toView(req: LoginUriExport, view = new LoginUriView()) {\n    view.uri = req.uri;\n    view.match = req.match;\n    return view;\n  }\n\n  static toDomain(req: LoginUriExport, domain = new LoginUriDomain()) {\n    domain.uri = req.uri != null ? new EncString(req.uri) : null;\n    domain.match = req.match;\n    return domain;\n  }\n\n  uri: string;\n  match: UriMatchType = null;\n\n  constructor(o?: LoginUriView | LoginUriDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof LoginUriView) {\n      this.uri = o.uri;\n    } else {\n      this.uri = o.uri?.encryptedString;\n    }\n    this.match = o.match;\n  }\n}\n","import { EncString } from \"../../platform/models/domain/enc-string\";\nimport { Login as LoginDomain } from \"../../vault/models/domain/login\";\nimport { LoginView } from \"../../vault/models/view/login.view\";\n\nimport { Fido2CredentialExport } from \"./fido2-credential.export\";\nimport { LoginUriExport } from \"./login-uri.export\";\n\nexport class LoginExport {\n  static template(): LoginExport {\n    const req = new LoginExport();\n    req.uris = [];\n    req.username = \"jdoe\";\n    req.password = \"myp@ssword123\";\n    req.totp = \"JBSWY3DPEHPK3PXP\";\n    req.fido2Credentials = [Fido2CredentialExport.template()];\n    return req;\n  }\n\n  static toView(req: LoginExport, view = new LoginView()) {\n    if (req.uris != null) {\n      view.uris = req.uris.map((u) => LoginUriExport.toView(u));\n    }\n    view.username = req.username;\n    view.password = req.password;\n    view.totp = req.totp;\n    if (req.fido2Credentials != null) {\n      view.fido2Credentials = req.fido2Credentials.map((key) => Fido2CredentialExport.toView(key));\n    }\n    return view;\n  }\n\n  static toDomain(req: LoginExport, domain = new LoginDomain()) {\n    if (req.uris != null) {\n      domain.uris = req.uris.map((u) => LoginUriExport.toDomain(u));\n    }\n    domain.username = req.username != null ? new EncString(req.username) : null;\n    domain.password = req.password != null ? new EncString(req.password) : null;\n    domain.totp = req.totp != null ? new EncString(req.totp) : null;\n    // Fido2credentials are currently not supported for exports.\n\n    return domain;\n  }\n\n  uris: LoginUriExport[];\n  username: string;\n  password: string;\n  totp: string;\n  fido2Credentials: Fido2CredentialExport[] = [];\n\n  constructor(o?: LoginView | LoginDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o.uris != null) {\n      if (o instanceof LoginView) {\n        this.uris = o.uris.map((u) => new LoginUriExport(u));\n      } else {\n        this.uris = o.uris.map((u) => new LoginUriExport(u));\n      }\n    }\n\n    if (o.fido2Credentials != null) {\n      this.fido2Credentials = o.fido2Credentials.map((key) => new Fido2CredentialExport(key));\n    }\n\n    if (o instanceof LoginView) {\n      this.username = o.username;\n      this.password = o.password;\n      this.totp = o.totp;\n    } else {\n      this.username = o.username?.encryptedString;\n      this.password = o.password?.encryptedString;\n      this.totp = o.totp?.encryptedString;\n    }\n  }\n}\n","import { EncString } from \"../../platform/models/domain/enc-string\";\nimport { Password } from \"../../vault/models/domain/password\";\nimport { PasswordHistoryView } from \"../../vault/models/view/password-history.view\";\n\nexport class PasswordHistoryExport {\n  static template(): PasswordHistoryExport {\n    const req = new PasswordHistoryExport();\n    req.password = null;\n    req.lastUsedDate = null;\n    return req;\n  }\n\n  static toView(req: PasswordHistoryExport, view = new PasswordHistoryView()) {\n    view.password = req.password;\n    view.lastUsedDate = req.lastUsedDate;\n    return view;\n  }\n\n  static toDomain(req: PasswordHistoryExport, domain = new Password()) {\n    domain.password = req.password != null ? new EncString(req.password) : null;\n    domain.lastUsedDate = req.lastUsedDate;\n    return domain;\n  }\n\n  password: string;\n  lastUsedDate: Date = null;\n\n  constructor(o?: PasswordHistoryView | Password) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof PasswordHistoryView) {\n      this.password = o.password;\n    } else {\n      this.password = o.password?.encryptedString;\n    }\n    this.lastUsedDate = o.lastUsedDate;\n  }\n}\n","import { SecureNoteType } from \"../../enums\";\nimport { SecureNote as SecureNoteDomain } from \"../../vault/models/domain/secure-note\";\nimport { SecureNoteView } from \"../../vault/models/view/secure-note.view\";\n\nexport class SecureNoteExport {\n  static template(): SecureNoteExport {\n    const req = new SecureNoteExport();\n    req.type = SecureNoteType.Generic;\n    return req;\n  }\n\n  static toView(req: SecureNoteExport, view = new SecureNoteView()) {\n    view.type = req.type;\n    return view;\n  }\n\n  static toDomain(req: SecureNoteExport, view = new SecureNoteDomain()) {\n    view.type = req.type;\n    return view;\n  }\n\n  type: SecureNoteType;\n\n  constructor(o?: SecureNoteView | SecureNoteDomain) {\n    if (o == null) {\n      return;\n    }\n\n    this.type = o.type;\n  }\n}\n","import { EncString } from \"../../platform/models/domain/enc-string\";\nimport { CipherRepromptType } from \"../../vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"../../vault/enums/cipher-type\";\nimport { Cipher as CipherDomain } from \"../../vault/models/domain/cipher\";\nimport { CipherView } from \"../../vault/models/view/cipher.view\";\n\nimport { CardExport } from \"./card.export\";\nimport { FieldExport } from \"./field.export\";\nimport { IdentityExport } from \"./identity.export\";\nimport { LoginExport } from \"./login.export\";\nimport { PasswordHistoryExport } from \"./password-history.export\";\nimport { SecureNoteExport } from \"./secure-note.export\";\n\nexport class CipherExport {\n  static template(): CipherExport {\n    const req = new CipherExport();\n    req.organizationId = null;\n    req.collectionIds = null;\n    req.folderId = null;\n    req.type = CipherType.Login;\n    req.name = \"Item name\";\n    req.notes = \"Some notes about this item.\";\n    req.favorite = false;\n    req.fields = [];\n    req.login = null;\n    req.secureNote = null;\n    req.card = null;\n    req.identity = null;\n    req.reprompt = CipherRepromptType.None;\n    req.passwordHistory = [];\n    req.creationDate = null;\n    req.revisionDate = null;\n    req.deletedDate = null;\n    return req;\n  }\n\n  static toView(req: CipherExport, view = new CipherView()) {\n    view.type = req.type;\n    view.folderId = req.folderId;\n    if (view.organizationId == null) {\n      view.organizationId = req.organizationId;\n    }\n    if (view.collectionIds || req.collectionIds) {\n      const set = new Set((view.collectionIds ?? []).concat(req.collectionIds ?? []));\n      view.collectionIds = Array.from(set.values());\n    }\n    view.name = req.name;\n    view.notes = req.notes;\n    view.favorite = req.favorite;\n    view.reprompt = req.reprompt ?? CipherRepromptType.None;\n\n    if (req.fields != null) {\n      view.fields = req.fields.map((f) => FieldExport.toView(f));\n    }\n\n    switch (req.type) {\n      case CipherType.Login:\n        view.login = LoginExport.toView(req.login);\n        break;\n      case CipherType.SecureNote:\n        view.secureNote = SecureNoteExport.toView(req.secureNote);\n        break;\n      case CipherType.Card:\n        view.card = CardExport.toView(req.card);\n        break;\n      case CipherType.Identity:\n        view.identity = IdentityExport.toView(req.identity);\n        break;\n    }\n\n    if (req.passwordHistory != null) {\n      view.passwordHistory = req.passwordHistory.map((ph) => PasswordHistoryExport.toView(ph));\n    }\n\n    view.creationDate = req.creationDate;\n    view.revisionDate = req.revisionDate;\n    view.deletedDate = req.deletedDate;\n    return view;\n  }\n\n  static toDomain(req: CipherExport, domain = new CipherDomain()) {\n    domain.type = req.type;\n    domain.folderId = req.folderId;\n    if (domain.organizationId == null) {\n      domain.organizationId = req.organizationId;\n    }\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    domain.notes = req.notes != null ? new EncString(req.notes) : null;\n    domain.favorite = req.favorite;\n    domain.reprompt = req.reprompt ?? CipherRepromptType.None;\n    domain.key = req.key != null ? new EncString(req.key) : null;\n\n    if (req.fields != null) {\n      domain.fields = req.fields.map((f) => FieldExport.toDomain(f));\n    }\n\n    switch (req.type) {\n      case CipherType.Login:\n        domain.login = LoginExport.toDomain(req.login);\n        break;\n      case CipherType.SecureNote:\n        domain.secureNote = SecureNoteExport.toDomain(req.secureNote);\n        break;\n      case CipherType.Card:\n        domain.card = CardExport.toDomain(req.card);\n        break;\n      case CipherType.Identity:\n        domain.identity = IdentityExport.toDomain(req.identity);\n        break;\n    }\n\n    if (req.passwordHistory != null) {\n      domain.passwordHistory = req.passwordHistory.map((ph) => PasswordHistoryExport.toDomain(ph));\n    }\n\n    domain.creationDate = req.creationDate;\n    domain.revisionDate = req.revisionDate;\n    domain.deletedDate = req.deletedDate;\n    return domain;\n  }\n\n  type: CipherType;\n  folderId: string;\n  organizationId: string;\n  collectionIds: string[];\n  name: string;\n  notes: string;\n  favorite: boolean;\n  fields: FieldExport[];\n  login: LoginExport;\n  secureNote: SecureNoteExport;\n  card: CardExport;\n  identity: IdentityExport;\n  reprompt: CipherRepromptType;\n  passwordHistory: PasswordHistoryExport[] = null;\n  revisionDate: Date = null;\n  creationDate: Date = null;\n  deletedDate: Date = null;\n  key: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CipherView | CipherDomain) {\n    this.organizationId = o.organizationId;\n    this.folderId = o.folderId;\n    this.type = o.type;\n    this.reprompt = o.reprompt;\n\n    if (o instanceof CipherView) {\n      this.name = o.name;\n      this.notes = o.notes;\n    } else {\n      this.name = o.name?.encryptedString;\n      this.notes = o.notes?.encryptedString;\n      this.key = o.key?.encryptedString;\n    }\n\n    this.favorite = o.favorite;\n\n    if (o.fields != null) {\n      if (o instanceof CipherView) {\n        this.fields = o.fields.map((f) => new FieldExport(f));\n      } else {\n        this.fields = o.fields.map((f) => new FieldExport(f));\n      }\n    }\n\n    switch (o.type) {\n      case CipherType.Login:\n        this.login = new LoginExport(o.login);\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNoteExport(o.secureNote);\n        break;\n      case CipherType.Card:\n        this.card = new CardExport(o.card);\n        break;\n      case CipherType.Identity:\n        this.identity = new IdentityExport(o.identity);\n        break;\n    }\n\n    if (o.passwordHistory != null) {\n      if (o instanceof CipherView) {\n        this.passwordHistory = o.passwordHistory.map((ph) => new PasswordHistoryExport(ph));\n      } else {\n        this.passwordHistory = o.passwordHistory.map((ph) => new PasswordHistoryExport(ph));\n      }\n    }\n\n    this.creationDate = o.creationDate;\n    this.revisionDate = o.revisionDate;\n    this.deletedDate = o.deletedDate;\n  }\n}\n","import { Cipher as CipherDomain } from \"../../vault/models/domain/cipher\";\nimport { CipherView } from \"../../vault/models/view/cipher.view\";\n\nimport { CipherExport } from \"./cipher.export\";\n\nexport class CipherWithIdExport extends CipherExport {\n  id: string;\n  collectionIds: string[];\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CipherView | CipherDomain) {\n    this.id = o.id;\n    super.build(o);\n    this.collectionIds = o.collectionIds;\n  }\n}\n","import { EncString } from \"../../platform/models/domain/enc-string\";\nimport { Collection as CollectionDomain } from \"../../vault/models/domain/collection\";\nimport { CollectionView } from \"../../vault/models/view/collection.view\";\n\nexport class CollectionExport {\n  static template(): CollectionExport {\n    const req = new CollectionExport();\n    req.organizationId = \"00000000-0000-0000-0000-000000000000\";\n    req.name = \"Collection name\";\n    req.externalId = null;\n    return req;\n  }\n\n  static toView(req: CollectionExport, view = new CollectionView()) {\n    view.name = req.name;\n    view.externalId = req.externalId;\n    if (view.organizationId == null) {\n      view.organizationId = req.organizationId;\n    }\n    return view;\n  }\n\n  static toDomain(req: CollectionExport, domain = new CollectionDomain()) {\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    domain.externalId = req.externalId;\n    if (domain.organizationId == null) {\n      domain.organizationId = req.organizationId;\n    }\n    return domain;\n  }\n\n  organizationId: string;\n  name: string;\n  externalId: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CollectionView | CollectionDomain) {\n    this.organizationId = o.organizationId;\n    if (o instanceof CollectionView) {\n      this.name = o.name;\n    } else {\n      this.name = o.name?.encryptedString;\n    }\n    this.externalId = o.externalId;\n  }\n}\n","import { Collection as CollectionDomain } from \"../../vault/models/domain/collection\";\nimport { CollectionView } from \"../../vault/models/view/collection.view\";\n\nimport { CollectionExport } from \"./collection.export\";\n\nexport class CollectionWithIdExport extends CollectionExport {\n  id: string;\n\n  static toView(req: CollectionWithIdExport, view = new CollectionView()) {\n    view.id = req.id;\n    return super.toView(req, view);\n  }\n\n  static toDomain(req: CollectionWithIdExport, domain = new CollectionDomain()) {\n    domain.id = req.id;\n    return super.toDomain(req, domain);\n  }\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CollectionView | CollectionDomain) {\n    this.id = o.id;\n    super.build(o);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { ITreeNodeObject } from \"../../../models/domain/tree-node\";\nimport { View } from \"../../../models/view/view\";\nimport { Folder } from \"../domain/folder\";\n\nexport class FolderView implements View, ITreeNodeObject {\n  id: string = null;\n  name: string = null;\n  revisionDate: Date = null;\n\n  constructor(f?: Folder) {\n    if (!f) {\n      return;\n    }\n\n    this.id = f.id;\n    this.revisionDate = f.revisionDate;\n  }\n\n  static fromJSON(obj: Jsonify<FolderView>) {\n    const revisionDate = obj.revisionDate == null ? null : new Date(obj.revisionDate);\n    return Object.assign(new FolderView(), obj, { revisionDate });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { FolderData } from \"../data/folder.data\";\nimport { FolderView } from \"../view/folder.view\";\n\nexport class Folder extends Domain {\n  id: string;\n  name: EncString;\n  revisionDate: Date;\n\n  constructor(obj?: FolderData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        name: null,\n      },\n      [\"id\"]\n    );\n\n    this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;\n  }\n\n  decrypt(): Promise<FolderView> {\n    return this.decryptObj(\n      new FolderView(this),\n      {\n        name: null,\n      },\n      null\n    );\n  }\n\n  static fromJSON(obj: Jsonify<Folder>) {\n    const revisionDate = obj.revisionDate == null ? null : new Date(obj.revisionDate);\n    return Object.assign(new Folder(), obj, { name: EncString.fromJSON(obj.name), revisionDate });\n  }\n}\n","import { EncString } from \"../../platform/models/domain/enc-string\";\nimport { Folder as FolderDomain } from \"../../vault/models/domain/folder\";\nimport { FolderView } from \"../../vault/models/view/folder.view\";\n\nexport class FolderExport {\n  static template(): FolderExport {\n    const req = new FolderExport();\n    req.name = \"Folder name\";\n    return req;\n  }\n\n  static toView(req: FolderExport, view = new FolderView()) {\n    view.name = req.name;\n    return view;\n  }\n\n  static toDomain(req: FolderExport, domain = new FolderDomain()) {\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    return domain;\n  }\n\n  name: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: FolderView | FolderDomain) {\n    if (o instanceof FolderView) {\n      this.name = o.name;\n    } else {\n      this.name = o.name?.encryptedString;\n    }\n  }\n}\n","import { Folder as FolderDomain } from \"../../vault/models/domain/folder\";\nimport { FolderView } from \"../../vault/models/view/folder.view\";\n\nimport { FolderExport } from \"./folder.export\";\n\nexport class FolderWithIdExport extends FolderExport {\n  id: string;\n\n  static toView(req: FolderWithIdExport, view = new FolderView()) {\n    view.id = req.id;\n    return super.toView(req, view);\n  }\n\n  static toDomain(req: FolderWithIdExport, domain = new FolderDomain()) {\n    domain.id = req.id;\n    return super.toDomain(req, domain);\n  }\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: FolderView | FolderDomain) {\n    this.id = o.id;\n    super.build(o);\n  }\n}\n","export class ExportHelper {\n  static getFileName(prefix: string = null, extension = \"csv\"): string {\n    const now = new Date();\n    const dateString =\n      now.getFullYear() +\n      \"\" +\n      this.padNumber(now.getMonth() + 1, 2) +\n      \"\" +\n      this.padNumber(now.getDate(), 2) +\n      this.padNumber(now.getHours(), 2) +\n      \"\" +\n      this.padNumber(now.getMinutes(), 2) +\n      this.padNumber(now.getSeconds(), 2);\n\n    return \"bitwarden\" + (prefix ? \"_\" + prefix : \"\") + \"_export_\" + dateString + \".\" + extension;\n  }\n\n  private static padNumber(num: number, width: number, padCharacter = \"0\"): string {\n    const numString = num.toString();\n    return numString.length >= width\n      ? numString\n      : new Array(width - numString.length + 1).join(padCharacter) + numString;\n  }\n}\n","import * as papa from \"papaparse\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { KdfConfig } from \"@bitwarden/common/auth/models/domain/kdf-config\";\nimport { KdfType } from \"@bitwarden/common/enums\";\nimport {\n  CipherWithIdExport,\n  CollectionWithIdExport,\n  FolderWithIdExport,\n} from \"@bitwarden/common/models/export\";\nimport { CryptoFunctionService } from \"@bitwarden/common/platform/abstractions/crypto-function.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherData } from \"@bitwarden/common/vault/models/data/cipher.data\";\nimport { CollectionData } from \"@bitwarden/common/vault/models/data/collection.data\";\nimport { Cipher } from \"@bitwarden/common/vault/models/domain/cipher\";\nimport { Collection } from \"@bitwarden/common/vault/models/domain/collection\";\nimport { Folder } from \"@bitwarden/common/vault/models/domain/folder\";\nimport { CollectionDetailsResponse } from \"@bitwarden/common/vault/models/response/collection.response\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ExportHelper } from \"../../export-helper\";\nimport {\n  BitwardenCsvExportType,\n  BitwardenCsvIndividualExportType,\n  BitwardenCsvOrgExportType,\n} from \"../bitwarden-csv-export-type\";\nimport {\n  BitwardenEncryptedIndividualJsonExport,\n  BitwardenEncryptedOrgJsonExport,\n  BitwardenUnEncryptedIndividualJsonExport,\n  BitwardenUnEncryptedOrgJsonExport,\n  BitwardenPasswordProtectedFileFormat,\n} from \"../bitwarden-json-export-types\";\n\nimport { ExportFormat, VaultExportServiceAbstraction } from \"./vault-export.service.abstraction\";\n\nexport class VaultExportService implements VaultExportServiceAbstraction {\n  constructor(\n    private folderService: FolderService,\n    private cipherService: CipherService,\n    private apiService: ApiService,\n    private cryptoService: CryptoService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private stateService: StateService\n  ) {}\n\n  async getExport(format: ExportFormat = \"csv\", organizationId?: string): Promise<string> {\n    if (organizationId) {\n      return await this.getOrganizationExport(organizationId, format);\n    }\n\n    if (format === \"encrypted_json\") {\n      return this.getEncryptedExport();\n    } else {\n      return this.getDecryptedExport(format);\n    }\n  }\n\n  async getPasswordProtectedExport(password: string, organizationId?: string): Promise<string> {\n    const clearText = organizationId\n      ? await this.getOrganizationExport(organizationId, \"json\")\n      : await this.getExport(\"json\");\n\n    const kdfType: KdfType = await this.stateService.getKdfType();\n    const kdfConfig: KdfConfig = await this.stateService.getKdfConfig();\n\n    const salt = Utils.fromBufferToB64(await this.cryptoFunctionService.randomBytes(16));\n    const key = await this.cryptoService.makePinKey(password, salt, kdfType, kdfConfig);\n\n    const encKeyValidation = await this.cryptoService.encrypt(Utils.newGuid(), key);\n    const encText = await this.cryptoService.encrypt(clearText, key);\n\n    const jsonDoc: BitwardenPasswordProtectedFileFormat = {\n      encrypted: true,\n      passwordProtected: true,\n      salt: salt,\n      kdfType: kdfType,\n      kdfIterations: kdfConfig.iterations,\n      kdfMemory: kdfConfig.memory,\n      kdfParallelism: kdfConfig.parallelism,\n      encKeyValidation_DO_NOT_EDIT: encKeyValidation.encryptedString,\n      data: encText.encryptedString,\n    };\n\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n\n  async getOrganizationExport(\n    organizationId: string,\n    format: ExportFormat = \"csv\"\n  ): Promise<string> {\n    if (format === \"encrypted_json\") {\n      return this.getOrganizationEncryptedExport(organizationId);\n    } else {\n      return this.getOrganizationDecryptedExport(organizationId, format);\n    }\n  }\n\n  getFileName(prefix: string = null, extension = \"csv\"): string {\n    return ExportHelper.getFileName(prefix, extension);\n  }\n\n  private async getDecryptedExport(format: \"json\" | \"csv\"): Promise<string> {\n    let decFolders: FolderView[] = [];\n    let decCiphers: CipherView[] = [];\n    const promises = [];\n\n    promises.push(\n      this.folderService.getAllDecryptedFromState().then((folders) => {\n        decFolders = folders;\n      })\n    );\n\n    promises.push(\n      this.cipherService.getAllDecrypted().then((ciphers) => {\n        decCiphers = ciphers.filter((f) => f.deletedDate == null);\n      })\n    );\n\n    await Promise.all(promises);\n\n    if (format === \"csv\") {\n      const foldersMap = new Map<string, FolderView>();\n      decFolders.forEach((f) => {\n        if (f.id != null) {\n          foldersMap.set(f.id, f);\n        }\n      });\n\n      const exportCiphers: BitwardenCsvIndividualExportType[] = [];\n      decCiphers.forEach((c) => {\n        // only export logins and secure notes\n        if (c.type !== CipherType.Login && c.type !== CipherType.SecureNote) {\n          return;\n        }\n        if (c.organizationId != null) {\n          return;\n        }\n\n        const cipher = {} as BitwardenCsvIndividualExportType;\n        cipher.folder =\n          c.folderId != null && foldersMap.has(c.folderId) ? foldersMap.get(c.folderId).name : null;\n        cipher.favorite = c.favorite ? 1 : null;\n        this.buildCommonCipher(cipher, c);\n        exportCiphers.push(cipher);\n      });\n\n      return papa.unparse(exportCiphers);\n    } else {\n      const jsonDoc: BitwardenUnEncryptedIndividualJsonExport = {\n        encrypted: false,\n        folders: [],\n        items: [],\n      };\n\n      decFolders.forEach((f) => {\n        if (f.id == null) {\n          return;\n        }\n        const folder = new FolderWithIdExport();\n        folder.build(f);\n        jsonDoc.folders.push(folder);\n      });\n\n      decCiphers.forEach((c) => {\n        if (c.organizationId != null) {\n          return;\n        }\n        const cipher = new CipherWithIdExport();\n        cipher.build(c);\n        cipher.collectionIds = null;\n        jsonDoc.items.push(cipher);\n      });\n\n      return JSON.stringify(jsonDoc, null, \"  \");\n    }\n  }\n\n  private async getEncryptedExport(): Promise<string> {\n    let folders: Folder[] = [];\n    let ciphers: Cipher[] = [];\n    const promises = [];\n\n    promises.push(\n      this.folderService.getAllFromState().then((f) => {\n        folders = f;\n      })\n    );\n\n    promises.push(\n      this.cipherService.getAll().then((c) => {\n        ciphers = c.filter((f) => f.deletedDate == null);\n      })\n    );\n\n    await Promise.all(promises);\n\n    const encKeyValidation = await this.cryptoService.encrypt(Utils.newGuid());\n\n    const jsonDoc: BitwardenEncryptedIndividualJsonExport = {\n      encrypted: true,\n      encKeyValidation_DO_NOT_EDIT: encKeyValidation.encryptedString,\n      folders: [],\n      items: [],\n    };\n\n    folders.forEach((f) => {\n      if (f.id == null) {\n        return;\n      }\n      const folder = new FolderWithIdExport();\n      folder.build(f);\n      jsonDoc.folders.push(folder);\n    });\n\n    ciphers.forEach((c) => {\n      if (c.organizationId != null) {\n        return;\n      }\n      const cipher = new CipherWithIdExport();\n      cipher.build(c);\n      cipher.collectionIds = null;\n      jsonDoc.items.push(cipher);\n    });\n\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n\n  private async getOrganizationDecryptedExport(\n    organizationId: string,\n    format: \"json\" | \"csv\"\n  ): Promise<string> {\n    const decCollections: CollectionView[] = [];\n    const decCiphers: CipherView[] = [];\n    const promises = [];\n\n    promises.push(\n      this.apiService.getOrganizationExport(organizationId).then((exportData) => {\n        const exportPromises: any = [];\n        if (exportData != null) {\n          if (exportData.collections != null && exportData.collections.length > 0) {\n            exportData.collections.forEach((c) => {\n              const collection = new Collection(new CollectionData(c as CollectionDetailsResponse));\n              exportPromises.push(\n                collection.decrypt().then((decCol) => {\n                  decCollections.push(decCol);\n                })\n              );\n            });\n          }\n          if (exportData.ciphers != null && exportData.ciphers.length > 0) {\n            exportData.ciphers\n              .filter((c) => c.deletedDate === null)\n              .forEach(async (c) => {\n                const cipher = new Cipher(new CipherData(c));\n                exportPromises.push(\n                  this.cipherService\n                    .getKeyForCipherKeyDecryption(cipher)\n                    .then((key) => cipher.decrypt(key))\n                    .then((decCipher) => {\n                      decCiphers.push(decCipher);\n                    })\n                );\n              });\n          }\n        }\n        return Promise.all(exportPromises);\n      })\n    );\n\n    await Promise.all(promises);\n\n    if (format === \"csv\") {\n      const collectionsMap = new Map<string, CollectionView>();\n      decCollections.forEach((c) => {\n        collectionsMap.set(c.id, c);\n      });\n\n      const exportCiphers: BitwardenCsvOrgExportType[] = [];\n      decCiphers.forEach((c) => {\n        // only export logins and secure notes\n        if (c.type !== CipherType.Login && c.type !== CipherType.SecureNote) {\n          return;\n        }\n\n        const cipher = {} as BitwardenCsvOrgExportType;\n        cipher.collections = [];\n        if (c.collectionIds != null) {\n          cipher.collections = c.collectionIds\n            .filter((id) => collectionsMap.has(id))\n            .map((id) => collectionsMap.get(id).name);\n        }\n        this.buildCommonCipher(cipher, c);\n        exportCiphers.push(cipher);\n      });\n\n      return papa.unparse(exportCiphers);\n    } else {\n      const jsonDoc: BitwardenUnEncryptedOrgJsonExport = {\n        encrypted: false,\n        collections: [],\n        items: [],\n      };\n\n      decCollections.forEach((c) => {\n        const collection = new CollectionWithIdExport();\n        collection.build(c);\n        jsonDoc.collections.push(collection);\n      });\n\n      decCiphers.forEach((c) => {\n        const cipher = new CipherWithIdExport();\n        cipher.build(c);\n        jsonDoc.items.push(cipher);\n      });\n      return JSON.stringify(jsonDoc, null, \"  \");\n    }\n  }\n\n  private async getOrganizationEncryptedExport(organizationId: string): Promise<string> {\n    const collections: Collection[] = [];\n    const ciphers: Cipher[] = [];\n    const promises = [];\n\n    promises.push(\n      this.apiService.getCollections(organizationId).then((c) => {\n        if (c != null && c.data != null && c.data.length > 0) {\n          c.data.forEach((r) => {\n            const collection = new Collection(new CollectionData(r as CollectionDetailsResponse));\n            collections.push(collection);\n          });\n        }\n      })\n    );\n\n    promises.push(\n      this.apiService.getCiphersOrganization(organizationId).then((c) => {\n        if (c != null && c.data != null && c.data.length > 0) {\n          c.data\n            .filter((item) => item.deletedDate === null)\n            .forEach((item) => {\n              const cipher = new Cipher(new CipherData(item));\n              ciphers.push(cipher);\n            });\n        }\n      })\n    );\n\n    await Promise.all(promises);\n\n    const orgKey = await this.cryptoService.getOrgKey(organizationId);\n    const encKeyValidation = await this.cryptoService.encrypt(Utils.newGuid(), orgKey);\n\n    const jsonDoc: BitwardenEncryptedOrgJsonExport = {\n      encrypted: true,\n      encKeyValidation_DO_NOT_EDIT: encKeyValidation.encryptedString,\n      collections: [],\n      items: [],\n    };\n\n    collections.forEach((c) => {\n      const collection = new CollectionWithIdExport();\n      collection.build(c);\n      jsonDoc.collections.push(collection);\n    });\n\n    ciphers.forEach((c) => {\n      const cipher = new CipherWithIdExport();\n      cipher.build(c);\n      jsonDoc.items.push(cipher);\n    });\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n\n  private buildCommonCipher(cipher: BitwardenCsvExportType, c: CipherView): BitwardenCsvExportType {\n    cipher.type = null;\n    cipher.name = c.name;\n    cipher.notes = c.notes;\n    cipher.fields = null;\n    cipher.reprompt = c.reprompt;\n    // Login props\n    cipher.login_uri = null;\n    cipher.login_username = null;\n    cipher.login_password = null;\n    cipher.login_totp = null;\n\n    if (c.fields) {\n      c.fields.forEach((f) => {\n        if (!cipher.fields) {\n          cipher.fields = \"\";\n        } else {\n          cipher.fields += \"\\n\";\n        }\n\n        cipher.fields += (f.name || \"\") + \": \" + f.value;\n      });\n    }\n\n    switch (c.type) {\n      case CipherType.Login:\n        cipher.type = \"login\";\n        cipher.login_username = c.login.username;\n        cipher.login_password = c.login.password;\n        cipher.login_totp = c.login.totp;\n\n        if (c.login.uris) {\n          cipher.login_uri = [];\n          c.login.uris.forEach((u) => {\n            cipher.login_uri.push(u.uri);\n          });\n        }\n        break;\n      case CipherType.SecureNote:\n        cipher.type = \"note\";\n        break;\n      default:\n        return;\n    }\n\n    return cipher;\n  }\n}\n","import { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\n\nimport { ImportApiServiceAbstraction } from \"./import-api.service.abstraction\";\n\nexport class ImportApiService implements ImportApiServiceAbstraction {\n  constructor(private apiService: ApiService) {}\n\n  async postImportCiphers(request: ImportCiphersRequest): Promise<any> {\n    return await this.apiService.send(\"POST\", \"/ciphers/import\", request, true, false);\n  }\n\n  async postImportOrganizationCiphers(\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ): Promise<any> {\n    return await this.apiService.send(\n      \"POST\",\n      \"/ciphers/import-organization?organizationId=\" + organizationId,\n      request,\n      true,\n      false\n    );\n  }\n}\n","import { CipherRequest } from \"../../vault/models/request/cipher.request\";\nimport { FolderWithIdRequest } from \"../../vault/models/request/folder-with-id.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  folders: FolderWithIdRequest[] = [];\n  folderRelationships: KvpRequest<number, number>[] = [];\n}\n","import { CipherRequest } from \"../../vault/models/request/cipher.request\";\nimport { CollectionWithIdRequest } from \"../../vault/models/request/collection-with-id.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportOrganizationCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  collections: CollectionWithIdRequest[] = [];\n  collectionRelationships: KvpRequest<number, number>[] = [];\n}\n","export class KvpRequest<TK, TV> {\n  key: TK;\n  value: TV;\n\n  constructor(key: TK, value: TV) {\n    this.key = key;\n    this.value = value;\n  }\n}\n","import { SelectionReadOnlyRequest } from \"../../../admin-console/models/request/selection-read-only.request\";\nimport { Collection } from \"../domain/collection\";\n\nexport class CollectionRequest {\n  name: string;\n  externalId: string;\n  groups: SelectionReadOnlyRequest[] = [];\n  users: SelectionReadOnlyRequest[] = [];\n\n  constructor(collection?: Collection) {\n    if (collection == null) {\n      return;\n    }\n    this.name = collection.name ? collection.name.encryptedString : null;\n    this.externalId = collection.externalId;\n  }\n}\n","import { Collection } from \"../domain/collection\";\n\nimport { CollectionRequest } from \"./collection.request\";\n\nexport class CollectionWithIdRequest extends CollectionRequest {\n  id: string;\n\n  constructor(collection?: Collection) {\n    if (collection == null) {\n      return;\n    }\n    super(collection);\n    this.id = collection.id;\n  }\n}\n","import { Folder } from \"../domain/folder\";\n\nimport { FolderRequest } from \"./folder.request\";\n\nexport class FolderWithIdRequest extends FolderRequest {\n  id: string;\n\n  constructor(folder: Folder) {\n    super(folder);\n    this.id = folder.id;\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nexport class ImportResult {\n  success = false;\n  errorMessage: string;\n  ciphers: CipherView[] = [];\n  folders: FolderView[] = [];\n  folderRelationships: [number, number][] = [];\n  collections: CollectionView[] = [];\n  collectionRelationships: [number, number][] = [];\n}\n","import * as papa from \"papaparse\";\n\nimport { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { ConsoleLogService } from \"@bitwarden/common/platform/services/console-log.service\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { LoginUriView } from \"@bitwarden/common/vault/models/view/login-uri.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nexport abstract class BaseImporter {\n  organizationId: string = null;\n\n  protected logService: LogService = new ConsoleLogService(false);\n\n  protected newLineRegex = /(?:\\r\\n|\\r|\\n)/;\n\n  protected passwordFieldNames = [\n    \"password\",\n    \"pass word\",\n    \"passphrase\",\n    \"pass phrase\",\n    \"pass\",\n    \"code\",\n    \"code word\",\n    \"codeword\",\n    \"secret\",\n    \"secret word\",\n    \"personpwd\",\n    \"key\",\n    \"keyword\",\n    \"key word\",\n    \"keyphrase\",\n    \"key phrase\",\n    \"form_pw\",\n    \"wppassword\",\n    \"pin\",\n    \"pwd\",\n    \"pw\",\n    \"pword\",\n    \"passwd\",\n    \"p\",\n    \"serial\",\n    \"serial#\",\n    \"license key\",\n    \"reg #\",\n\n    // Non-English names\n    \"passwort\",\n  ];\n\n  protected usernameFieldNames = [\n    \"user\",\n    \"name\",\n    \"user name\",\n    \"username\",\n    \"login name\",\n    \"email\",\n    \"e-mail\",\n    \"id\",\n    \"userid\",\n    \"user id\",\n    \"login\",\n    \"form_loginname\",\n    \"wpname\",\n    \"mail\",\n    \"loginid\",\n    \"login id\",\n    \"log\",\n    \"personlogin\",\n    \"first name\",\n    \"last name\",\n    \"card#\",\n    \"account #\",\n    \"member\",\n    \"member #\",\n\n    // Non-English names\n    \"nom\",\n    \"benutzername\",\n  ];\n\n  protected notesFieldNames = [\n    \"note\",\n    \"notes\",\n    \"comment\",\n    \"comments\",\n    \"memo\",\n    \"description\",\n    \"free form\",\n    \"freeform\",\n    \"free text\",\n    \"freetext\",\n    \"free\",\n\n    // Non-English names\n    \"kommentar\",\n  ];\n\n  protected uriFieldNames: string[] = [\n    \"url\",\n    \"hyper link\",\n    \"hyperlink\",\n    \"link\",\n    \"host\",\n    \"hostname\",\n    \"host name\",\n    \"server\",\n    \"address\",\n    \"hyper ref\",\n    \"href\",\n    \"web\",\n    \"website\",\n    \"web site\",\n    \"site\",\n    \"web-site\",\n    \"uri\",\n\n    // Non-English names\n    \"ort\",\n    \"adresse\",\n  ];\n\n  protected parseCsvOptions = {\n    encoding: \"UTF-8\",\n    skipEmptyLines: false,\n  };\n\n  protected get organization() {\n    return this.organizationId != null;\n  }\n\n  protected parseXml(data: string): Document {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(data, \"application/xml\");\n    return doc != null && doc.querySelector(\"parsererror\") == null ? doc : null;\n  }\n\n  protected parseCsv(data: string, header: boolean, options: any = {}): any[] {\n    const parseOptions: papa.ParseConfig<string> = Object.assign(\n      { header: header },\n      this.parseCsvOptions,\n      options\n    );\n    data = this.splitNewLine(data).join(\"\\n\").trim();\n    const result = papa.parse(data, parseOptions);\n    if (result.errors != null && result.errors.length > 0) {\n      result.errors.forEach((e) => {\n        if (e.row != null) {\n          this.logService.warning(\"Error parsing row \" + e.row + \": \" + e.message);\n        }\n      });\n    }\n    return result.data && result.data.length > 0 ? result.data : null;\n  }\n\n  protected parseSingleRowCsv(rowData: string) {\n    if (this.isNullOrWhitespace(rowData)) {\n      return null;\n    }\n    const parsedRow = this.parseCsv(rowData, false);\n    if (parsedRow != null && parsedRow.length > 0 && parsedRow[0].length > 0) {\n      return parsedRow[0];\n    }\n    return null;\n  }\n\n  protected makeUriArray(uri: string | string[]): LoginUriView[] {\n    if (uri == null) {\n      return null;\n    }\n\n    if (typeof uri === \"string\") {\n      const loginUri = new LoginUriView();\n      loginUri.uri = this.fixUri(uri);\n      if (this.isNullOrWhitespace(loginUri.uri)) {\n        return null;\n      }\n      loginUri.match = null;\n      return [loginUri];\n    }\n\n    if (uri.length > 0) {\n      const returnArr: LoginUriView[] = [];\n      uri.forEach((u) => {\n        const loginUri = new LoginUriView();\n        loginUri.uri = this.fixUri(u);\n        if (this.isNullOrWhitespace(loginUri.uri)) {\n          return;\n        }\n        loginUri.match = null;\n        returnArr.push(loginUri);\n      });\n      return returnArr.length === 0 ? null : returnArr;\n    }\n\n    return null;\n  }\n\n  protected fixUri(uri: string) {\n    if (uri == null) {\n      return null;\n    }\n    uri = uri.trim();\n    if (uri.indexOf(\"://\") === -1 && uri.indexOf(\".\") >= 0) {\n      uri = \"http://\" + uri;\n    }\n    if (uri.length > 1000) {\n      return uri.substring(0, 1000);\n    }\n    return uri;\n  }\n\n  protected nameFromUrl(url: string) {\n    const hostname = Utils.getHostname(url);\n    if (this.isNullOrWhitespace(hostname)) {\n      return null;\n    }\n    return hostname.startsWith(\"www.\") ? hostname.replace(\"www.\", \"\") : hostname;\n  }\n\n  protected isNullOrWhitespace(str: string): boolean {\n    return Utils.isNullOrWhitespace(str);\n  }\n\n  protected getValueOrDefault(str: string, defaultValue: string = null): string {\n    if (this.isNullOrWhitespace(str)) {\n      return defaultValue;\n    }\n    return str;\n  }\n\n  protected splitNewLine(str: string): string[] {\n    return str.split(this.newLineRegex);\n  }\n\n  protected setCardExpiration(cipher: CipherView, expiration: string): boolean {\n    if (this.isNullOrWhitespace(expiration)) {\n      return false;\n    }\n\n    expiration = expiration.replace(/\\s/g, \"\");\n\n    const monthRegex = \"0?(?<month>[1-9]|1[0-2])\";\n    const yearRegex = \"(?<year>(?:[1-2][0-9])?[0-9]{2})\";\n    const expiryRegex = new RegExp(`^${monthRegex}/${yearRegex}$`);\n\n    const expiryMatch = expiration.match(expiryRegex);\n\n    if (!expiryMatch) {\n      return false;\n    }\n\n    cipher.card.expMonth = expiryMatch.groups.month;\n    const year: string = expiryMatch.groups.year;\n    cipher.card.expYear = year.length === 2 ? \"20\" + year : year;\n    return true;\n  }\n\n  protected moveFoldersToCollections(result: ImportResult) {\n    result.folderRelationships.forEach((r) => result.collectionRelationships.push(r));\n    result.collections = result.folders.map((f) => {\n      const collection = new CollectionView();\n      collection.name = f.name;\n      collection.id = f.id;\n      return collection;\n    });\n    result.folderRelationships = [];\n    result.folders = [];\n  }\n\n  protected querySelectorDirectChild(parentEl: Element, query: string) {\n    const els = this.querySelectorAllDirectChild(parentEl, query);\n    return els.length === 0 ? null : els[0];\n  }\n\n  protected querySelectorAllDirectChild(parentEl: Element, query: string) {\n    return Array.from(parentEl.querySelectorAll(query)).filter((el) => el.parentNode === parentEl);\n  }\n\n  protected initLoginCipher() {\n    const cipher = new CipherView();\n    cipher.favorite = false;\n    cipher.notes = \"\";\n    cipher.fields = [];\n    cipher.login = new LoginView();\n    cipher.type = CipherType.Login;\n    return cipher;\n  }\n\n  protected cleanupCipher(cipher: CipherView) {\n    if (cipher == null) {\n      return;\n    }\n    if (cipher.type !== CipherType.Login) {\n      cipher.login = null;\n    }\n    if (this.isNullOrWhitespace(cipher.name)) {\n      cipher.name = \"--\";\n    }\n    if (this.isNullOrWhitespace(cipher.notes)) {\n      cipher.notes = null;\n    } else {\n      cipher.notes = cipher.notes.trim();\n    }\n    if (cipher.fields != null && cipher.fields.length === 0) {\n      cipher.fields = null;\n    }\n    if (cipher.passwordHistory != null && cipher.passwordHistory.length === 0) {\n      cipher.passwordHistory = null;\n    }\n  }\n\n  protected processKvp(\n    cipher: CipherView,\n    key: string,\n    value: string,\n    type: FieldType = FieldType.Text\n  ) {\n    if (this.isNullOrWhitespace(value)) {\n      return;\n    }\n    if (this.isNullOrWhitespace(key)) {\n      key = \"\";\n    }\n    if (value.length > 200 || value.trim().search(this.newLineRegex) > -1) {\n      if (cipher.notes == null) {\n        cipher.notes = \"\";\n      }\n      cipher.notes += key + \": \" + this.splitNewLine(value).join(\"\\n\") + \"\\n\";\n    } else {\n      if (cipher.fields == null) {\n        cipher.fields = [];\n      }\n      const field = new FieldView();\n      field.type = type;\n      field.name = key;\n      field.value = value;\n      cipher.fields.push(field);\n    }\n  }\n\n  protected processFolder(result: ImportResult, folderName: string) {\n    if (this.isNullOrWhitespace(folderName)) {\n      return;\n    }\n\n    let folderIndex = result.folders.length;\n    // Replace backslashes with forward slashes, ensuring we create sub-folders\n    folderName = folderName.replace(\"\\\\\", \"/\");\n    let addFolder = true;\n\n    for (let i = 0; i < result.folders.length; i++) {\n      if (result.folders[i].name === folderName) {\n        addFolder = false;\n        folderIndex = i;\n        break;\n      }\n    }\n\n    if (addFolder) {\n      const f = new FolderView();\n      f.name = folderName;\n      result.folders.push(f);\n    }\n\n    result.folderRelationships.push([result.ciphers.length, folderIndex]);\n  }\n\n  protected convertToNoteIfNeeded(cipher: CipherView) {\n    if (\n      cipher.type === CipherType.Login &&\n      this.isNullOrWhitespace(cipher.login.username) &&\n      this.isNullOrWhitespace(cipher.login.password) &&\n      (cipher.login.uris == null || cipher.login.uris.length === 0)\n    ) {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    }\n  }\n\n  protected processFullName(cipher: CipherView, fullName: string) {\n    if (this.isNullOrWhitespace(fullName)) {\n      return;\n    }\n\n    const nameParts = fullName.split(\" \");\n    if (nameParts.length > 0) {\n      cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n    }\n    if (nameParts.length === 2) {\n      cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n    } else if (nameParts.length >= 3) {\n      cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n      cipher.identity.lastName = nameParts.slice(2, nameParts.length).join(\" \");\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AscendoCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 2) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const val: string = value[i + 2];\n          const field: string = value[i + 1];\n          if (this.isNullOrWhitespace(val) || this.isNullOrWhitespace(field)) {\n            continue;\n          }\n\n          const fieldLower = field.toLowerCase();\n          if (cipher.login.password == null && this.passwordFieldNames.indexOf(fieldLower) > -1) {\n            cipher.login.password = this.getValueOrDefault(val);\n          } else if (\n            cipher.login.username == null &&\n            this.usernameFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.username = this.getValueOrDefault(val);\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n          } else {\n            this.processKvp(cipher, field, val);\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class AvastCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.login.uris = this.makeUriArray(value.web);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.username = this.getValueOrDefault(value.login);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class AvastJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results.logins != null) {\n      results.logins.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.pwd);\n        cipher.login.username = this.getValueOrDefault(value.loginName);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.notes != null) {\n      results.notes.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.name = this.getValueOrDefault(value.label);\n        cipher.notes = this.getValueOrDefault(value.text);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.cards != null) {\n      results.cards.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Card;\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.card.cardholderName = this.getValueOrDefault(value.holderName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        if (value.expirationDate != null) {\n          if (value.expirationDate.month != null) {\n            cipher.card.expMonth = value.expirationDate.month + \"\";\n          }\n          if (value.expirationDate.year != null) {\n            cipher.card.expYear = value.expirationDate.year + \"\";\n          }\n        }\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AviraCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.name,\n        this.getValueOrDefault(this.nameFromUrl(value.website), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.website);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (\n        this.isNullOrWhitespace(value.username) &&\n        !this.isNullOrWhitespace(value.secondary_username)\n      ) {\n        cipher.login.username = value.secondary_username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.notes = this.getValueOrDefault(value.secondary_username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlackBerryCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.grouping === \"list\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.favorite = value.fav === \"1\";\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.extra);\n      if (value.grouping !== \"note\") {\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ChromeCsvImporter extends BaseImporter implements Importer {\n  private androidPatternRegex = new RegExp(\"^android:\\\\/\\\\/.*(?<=@)(.*)(?=\\\\/)\");\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      let name = value.name;\n      if (!name && this.androidPatternRegex.test(value.url)) {\n        name = value.url.match(this.androidPatternRegex)[1];\n      }\n      cipher.name = this.getValueOrDefault(name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class BitwardenCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.organization && !this.isNullOrWhitespace(value.collections)) {\n        const collections = (value.collections as string).split(\",\");\n        collections.forEach((col) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === col) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = col;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization) {\n        this.processFolder(result, value.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.favorite =\n        !this.organization && this.getValueOrDefault(value.favorite, \"0\") !== \"0\" ? true : false;\n      cipher.type = CipherType.Login;\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      try {\n        cipher.reprompt = parseInt(\n          this.getValueOrDefault(value.reprompt, CipherRepromptType.None.toString()),\n          10\n        );\n      } catch (e) {\n        // eslint-disable-next-line\n        console.error(\"Unable to parse reprompt value\", e);\n        cipher.reprompt = CipherRepromptType.None;\n      }\n\n      if (!this.isNullOrWhitespace(value.fields)) {\n        const fields = this.splitNewLine(value.fields);\n        for (let i = 0; i < fields.length; i++) {\n          if (this.isNullOrWhitespace(fields[i])) {\n            continue;\n          }\n\n          const delimPosition = fields[i].lastIndexOf(\": \");\n          if (delimPosition === -1) {\n            continue;\n          }\n\n          if (cipher.fields == null) {\n            cipher.fields = [];\n          }\n\n          const field = new FieldView();\n          field.name = fields[i].substr(0, delimPosition);\n          field.value = null;\n          field.type = FieldType.Text;\n          if (fields[i].length > delimPosition + 2) {\n            field.value = fields[i].substr(delimPosition + 2);\n          }\n          cipher.fields.push(field);\n        }\n      }\n\n      const valueType = value.type != null ? value.type.toLowerCase() : null;\n      switch (valueType) {\n        case \"note\":\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote = new SecureNoteView();\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default: {\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.totp = this.getValueOrDefault(value.login_totp || value.totp);\n          cipher.login.username = this.getValueOrDefault(value.login_username || value.username);\n          cipher.login.password = this.getValueOrDefault(value.login_password || value.password);\n          const uris = this.parseSingleRowCsv(value.login_uri || value.uri);\n          cipher.login.uris = this.makeUriArray(uris);\n          break;\n        }\n      }\n\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import {\n  CipherWithIdExport,\n  CollectionWithIdExport,\n  FolderWithIdExport,\n} from \"@bitwarden/common/models/export\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport {\n  BitwardenEncryptedIndividualJsonExport,\n  BitwardenEncryptedOrgJsonExport,\n  BitwardenJsonExport,\n  BitwardenUnEncryptedIndividualJsonExport,\n  BitwardenUnEncryptedOrgJsonExport,\n} from \"@bitwarden/exporter/vault-export/bitwarden-json-export-types\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class BitwardenJsonImporter extends BaseImporter implements Importer {\n  private result: ImportResult;\n\n  protected constructor(\n    protected cryptoService: CryptoService,\n    protected i18nService: I18nService,\n    protected cipherService: CipherService\n  ) {\n    super();\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    const results: BitwardenJsonExport = JSON.parse(data);\n    if (results == null || results.items == null) {\n      this.result.success = false;\n      return this.result;\n    }\n\n    if (results.encrypted) {\n      await this.parseEncrypted(results as any);\n    } else {\n      await this.parseDecrypted(results as any);\n    }\n\n    return this.result;\n  }\n\n  private async parseEncrypted(\n    results: BitwardenEncryptedIndividualJsonExport | BitwardenEncryptedOrgJsonExport\n  ) {\n    if (results.encKeyValidation_DO_NOT_EDIT != null) {\n      const orgKey = await this.cryptoService.getOrgKey(this.organizationId);\n      const encKeyValidation = new EncString(results.encKeyValidation_DO_NOT_EDIT);\n      const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n        encKeyValidation,\n        orgKey\n      );\n      if (encKeyValidationDecrypt === null) {\n        this.result.success = false;\n        this.result.errorMessage = this.i18nService.t(\"importEncKeyError\");\n        return;\n      }\n    }\n\n    const groupingsMap = this.organization\n      ? await this.parseCollections(results as BitwardenEncryptedOrgJsonExport)\n      : await this.parseFolders(results as BitwardenEncryptedIndividualJsonExport);\n\n    for (const c of results.items) {\n      const cipher = CipherWithIdExport.toDomain(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.organizationId = this.organizationId;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      const view = await cipher.decrypt(\n        await this.cipherService.getKeyForCipherKeyDecryption(cipher)\n      );\n      this.cleanupCipher(view);\n      this.result.ciphers.push(view);\n    }\n\n    this.result.success = true;\n  }\n\n  private async parseDecrypted(\n    results: BitwardenUnEncryptedIndividualJsonExport | BitwardenUnEncryptedOrgJsonExport\n  ) {\n    const groupingsMap = this.organization\n      ? await this.parseCollections(results as BitwardenUnEncryptedOrgJsonExport)\n      : await this.parseFolders(results as BitwardenUnEncryptedIndividualJsonExport);\n\n    results.items.forEach((c) => {\n      const cipher = CipherWithIdExport.toView(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.organizationId = null;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n  }\n\n  private async parseFolders(\n    data: BitwardenUnEncryptedIndividualJsonExport | BitwardenEncryptedIndividualJsonExport\n  ): Promise<Map<string, number>> | null {\n    if (data.folders == null) {\n      return null;\n    }\n\n    const groupingsMap = new Map<string, number>();\n\n    for (const f of data.folders) {\n      let folderView: FolderView;\n      if (data.encrypted) {\n        const folder = FolderWithIdExport.toDomain(f);\n        if (folder != null) {\n          folderView = await folder.decrypt();\n        }\n      } else {\n        folderView = FolderWithIdExport.toView(f);\n      }\n\n      if (folderView != null) {\n        groupingsMap.set(f.id, this.result.folders.length);\n        this.result.folders.push(folderView);\n      }\n    }\n    return groupingsMap;\n  }\n\n  private async parseCollections(\n    data: BitwardenUnEncryptedOrgJsonExport | BitwardenEncryptedOrgJsonExport\n  ): Promise<Map<string, number>> | null {\n    if (data.collections == null) {\n      return null;\n    }\n\n    const groupingsMap = new Map<string, number>();\n\n    for (const c of data.collections) {\n      let collectionView: CollectionView;\n      if (data.encrypted) {\n        const collection = CollectionWithIdExport.toDomain(c);\n        collection.organizationId = this.organizationId;\n        collectionView = await collection.decrypt();\n      } else {\n        collectionView = CollectionWithIdExport.toView(c);\n        collectionView.organizationId = null;\n      }\n\n      if (collectionView != null) {\n        groupingsMap.set(c.id, this.result.collections.length);\n        this.result.collections.push(collectionView);\n      }\n    }\n    return groupingsMap;\n  }\n}\n","import { KdfConfig } from \"@bitwarden/common/auth/models/domain/kdf-config\";\nimport { KdfType } from \"@bitwarden/common/enums\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { BitwardenPasswordProtectedFileFormat } from \"@bitwarden/exporter/vault-export/bitwarden-json-export-types\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { Importer } from \"../importer\";\n\nimport { BitwardenJsonImporter } from \"./bitwarden-json-importer\";\n\nexport class BitwardenPasswordProtectedImporter extends BitwardenJsonImporter implements Importer {\n  private key: SymmetricCryptoKey;\n\n  constructor(\n    cryptoService: CryptoService,\n    i18nService: I18nService,\n    cipherService: CipherService,\n    private promptForPassword_callback: () => Promise<string>\n  ) {\n    super(cryptoService, i18nService, cipherService);\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const parsedData: BitwardenPasswordProtectedFileFormat = JSON.parse(data);\n\n    if (!parsedData) {\n      result.success = false;\n      return result;\n    }\n\n    // File is unencrypted\n    if (!parsedData?.encrypted) {\n      return await super.parse(data);\n    }\n\n    // File is account-encrypted\n    if (!parsedData?.passwordProtected) {\n      return await super.parse(data);\n    }\n\n    if (this.cannotParseFile(parsedData)) {\n      result.success = false;\n      return result;\n    }\n\n    // File is password-protected\n    const password = await this.promptForPassword_callback();\n    if (!(await this.checkPassword(parsedData, password))) {\n      result.success = false;\n      result.errorMessage = this.i18nService.t(\"invalidFilePassword\");\n      return result;\n    }\n\n    const encData = new EncString(parsedData.data);\n    const clearTextData = await this.cryptoService.decryptToUtf8(encData, this.key);\n    return await super.parse(clearTextData);\n  }\n\n  private async checkPassword(\n    jdoc: BitwardenPasswordProtectedFileFormat,\n    password: string\n  ): Promise<boolean> {\n    if (this.isNullOrWhitespace(password)) {\n      return false;\n    }\n\n    this.key = await this.cryptoService.makePinKey(\n      password,\n      jdoc.salt,\n      jdoc.kdfType,\n      new KdfConfig(jdoc.kdfIterations, jdoc.kdfMemory, jdoc.kdfParallelism)\n    );\n\n    const encKeyValidation = new EncString(jdoc.encKeyValidation_DO_NOT_EDIT);\n\n    const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n      encKeyValidation,\n      this.key\n    );\n    if (encKeyValidationDecrypt === null) {\n      return false;\n    }\n    return true;\n  }\n\n  private cannotParseFile(jdoc: BitwardenPasswordProtectedFileFormat): boolean {\n    return (\n      !jdoc ||\n      !jdoc.encrypted ||\n      !jdoc.passwordProtected ||\n      !jdoc.salt ||\n      !jdoc.kdfIterations ||\n      typeof jdoc.kdfIterations !== \"number\" ||\n      jdoc.kdfType == null ||\n      KdfType[jdoc.kdfType] == null ||\n      !jdoc.encKeyValidation_DO_NOT_EDIT ||\n      !jdoc.data\n    );\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlurCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.label === \"null\") {\n        value.label = null;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.label,\n        this.getValueOrDefault(this.nameFromUrl(value.domain), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.domain);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (this.isNullOrWhitespace(value.email) && !this.isNullOrWhitespace(value.username)) {\n        cipher.login.username = value.username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.email);\n        cipher.notes = this.getValueOrDefault(value.username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst OfficialProps = [\"!group_id\", \"!group_name\", \"title\", \"username\", \"password\", \"URL\", \"id\"];\n\nexport class ButtercupCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value[\"!group_name\"]));\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      let processingCustomFields = false;\n      for (const prop in value) {\n        // eslint-disable-next-line\n        if (value.hasOwnProperty(prop)) {\n          if (!processingCustomFields && OfficialProps.indexOf(prop) === -1) {\n            processingCustomFields = true;\n          }\n          if (processingCustomFields) {\n            this.processKvp(cipher, prop, value[prop]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ClipperzHtmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const textarea = doc.querySelector(\"textarea\");\n    if (textarea == null || this.isNullOrWhitespace(textarea.textContent)) {\n      result.errorMessage = \"Missing textarea.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const entries = JSON.parse(textarea.textContent);\n    entries.forEach((entry: any) => {\n      const cipher = this.initLoginCipher();\n      if (!this.isNullOrWhitespace(entry.label)) {\n        cipher.name = entry.label.split(\" \")[0];\n      }\n      if (entry.data != null && !this.isNullOrWhitespace(entry.data.notes)) {\n        cipher.notes = entry.data.notes.split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (entry.currentVersion != null && entry.currentVersion.fields != null) {\n        for (const property in entry.currentVersion.fields) {\n          // eslint-disable-next-line\n          if (!entry.currentVersion.fields.hasOwnProperty(property)) {\n            continue;\n          }\n\n          const field = entry.currentVersion.fields[property];\n          const actionType = field.actionType != null ? field.actionType.toLowerCase() : null;\n          switch (actionType) {\n            case \"password\":\n              cipher.login.password = this.getValueOrDefault(field.value);\n              break;\n            case \"email\":\n            case \"username\":\n            case \"user\":\n            case \"name\":\n              cipher.login.username = this.getValueOrDefault(field.value);\n              break;\n            case \"url\":\n              cipher.login.uris = this.makeUriArray(field.value);\n              break;\n            default: {\n              const labelLower = field.label != null ? field.label.toLowerCase() : null;\n              if (\n                cipher.login.password == null &&\n                this.passwordFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.password = this.getValueOrDefault(field.value);\n              } else if (\n                cipher.login.username == null &&\n                this.usernameFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.username = this.getValueOrDefault(field.value);\n              } else if (\n                (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n                this.uriFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.uris = this.makeUriArray(field.value);\n              } else {\n                this.processKvp(cipher, field.label, field.value);\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class CodebookCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value.Category));\n\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite) === \"True\";\n      cipher.name = this.getValueOrDefault(value.Entry, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.login.username = this.getValueOrDefault(value.Username, value.Email);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.totp = this.getValueOrDefault(value.TOTP);\n      cipher.login.uris = this.makeUriArray(value.Website);\n\n      if (!this.isNullOrWhitespace(value.Username)) {\n        this.processKvp(cipher, \"Email\", value.Email);\n      }\n      this.processKvp(cipher, \"Phone\", value.Phone);\n      this.processKvp(cipher, \"PIN\", value.PIN);\n      this.processKvp(cipher, \"Account\", value.Account);\n      this.processKvp(cipher, \"Date\", value.Date);\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CredentialsRecord,\n  IdRecord,\n  PaymentsRecord,\n  PersonalInformationRecord,\n  SecureNoteRecord,\n} from \"./types/dashlane-csv-types\";\n\nconst _mappedCredentialsColumns = new Set([\n  \"title\",\n  \"note\",\n  \"username\",\n  \"password\",\n  \"url\",\n  \"otpSecret\",\n  \"category\",\n]);\n\nconst _mappedPersonalInfoAsIdentityColumns = new Set([\n  \"type\",\n  \"title\",\n  \"first_name\",\n  \"middle_name\",\n  \"last_name\",\n  \"login\",\n  \"email\",\n  \"phone_number\",\n  \"address\",\n  \"country\",\n  \"state\",\n  \"city\",\n  \"zip\",\n  // Skip item_name as we already have set a combined name\n  \"item_name\",\n]);\n\nconst _mappedSecureNoteColumns = new Set([\"title\", \"note\"]);\n\nexport class DashlaneCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results[0].type != null && results[0].title != null) {\n      const personalRecords = results as PersonalInformationRecord[];\n\n      // If personalRecords has only one \"name\" then create an Identity-Cipher\n      if (personalRecords.filter((x) => x.type === \"name\").length === 1) {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        results.forEach((row) => {\n          this.parsePersonalInformationRecordAsIdentity(cipher, row);\n        });\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n        result.success = true;\n        return Promise.resolve(result);\n      }\n    }\n\n    results.forEach((row) => {\n      const cipher = this.initLoginCipher();\n\n      const rowKeys = Object.keys(row);\n      if (rowKeys[0] === \"username\") {\n        this.processFolder(result, row.category);\n        this.parseCredentialsRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"account_name\") {\n        this.parsePaymentRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"number\") {\n        this.parseIdRecord(cipher, row);\n      }\n\n      if ((rowKeys[0] === \"type\") != null && rowKeys[1] === \"title\") {\n        this.parsePersonalInformationRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"title\" && rowKeys[1] === \"note\") {\n        this.parseSecureNoteRecords(cipher, row);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  parseCredentialsRecord(cipher: CipherView, row: CredentialsRecord) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    cipher.name = row.title;\n    cipher.notes = row.note;\n    cipher.login.username = row.username;\n    cipher.login.password = row.password;\n    cipher.login.totp = row.otpSecret;\n    cipher.login.uris = this.makeUriArray(row.url);\n\n    this.importUnmappedFields(cipher, row, _mappedCredentialsColumns);\n  }\n\n  parsePaymentRecord(cipher: CipherView, row: PaymentsRecord) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n\n    cipher.name = row.account_name;\n    let mappedValues: string[] = [];\n    switch (row.type) {\n      case \"credit_card\":\n        cipher.card.cardholderName = row.account_name;\n        cipher.card.number = row.cc_number;\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.code = row.code;\n        this.setCardExpiration(cipher, `${row.expiration_month}/${row.expiration_year}`);\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\n          \"account_name\",\n          \"account_holder\",\n          \"cc_number\",\n          \"code\",\n          \"expiration_month\",\n          \"expiration_year\",\n        ];\n        break;\n      case \"bank\":\n        cipher.card.cardholderName = row.account_holder;\n        cipher.card.number = row.account_number;\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\"account_name\", \"account_holder\", \"account_number\"];\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parseIdRecord(cipher: CipherView, row: IdRecord) {\n    cipher.type = CipherType.Identity;\n    cipher.identity = new IdentityView();\n\n    const mappedValues: string[] = [\"name\", \"number\"];\n    switch (row.type) {\n      case \"card\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        break;\n      case \"passport\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.passportNumber = row.number;\n        break;\n      case \"license\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        cipher.identity.state = row.state;\n\n        mappedValues.push(\"state\");\n        break;\n      case \"social_security\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.ssn = row.number;\n        break;\n      case \"tax_number\":\n        cipher.name = row.type;\n        cipher.identity.licenseNumber = row.number;\n        break;\n\n      default:\n        break;\n    }\n\n    // If you add more mapped fields please extend this\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parsePersonalInformationRecord(cipher: CipherView, row: PersonalInformationRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    if (row.type === \"name\") {\n      cipher.name = `${row.title} ${row.first_name} ${row.middle_name} ${row.last_name}`\n        .replace(\"  \", \" \")\n        .trim();\n    } else {\n      cipher.name = row.item_name;\n    }\n\n    const dataRow = row as any;\n    Object.keys(row).forEach((key) => {\n      this.processKvp(cipher, key, dataRow[key]);\n    });\n  }\n\n  parsePersonalInformationRecordAsIdentity(cipher: CipherView, row: PersonalInformationRecord) {\n    switch (row.type) {\n      case \"name\":\n        this.processFullName(cipher, `${row.first_name} ${row.middle_name} ${row.last_name}`);\n        cipher.identity.title = row.title;\n        cipher.name = cipher.identity.fullName;\n\n        cipher.identity.username = row.login;\n        break;\n      case \"email\":\n        cipher.identity.email = row.email;\n        break;\n      case \"number\":\n        cipher.identity.phone = row.phone_number;\n        break;\n      case \"address\":\n        cipher.identity.address1 = row.address;\n        cipher.identity.city = row.city;\n        cipher.identity.postalCode = row.zip;\n        cipher.identity.state = row.state;\n        cipher.identity.country = row.country;\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, _mappedPersonalInfoAsIdentityColumns);\n  }\n\n  parseSecureNoteRecords(cipher: CipherView, row: SecureNoteRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = row.title;\n    cipher.notes = row.note;\n\n    this.importUnmappedFields(cipher, row, _mappedSecureNoteColumns);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nconst HandledResults = new Set([\n  \"ADDRESS\",\n  \"AUTHENTIFIANT\",\n  \"BANKSTATEMENT\",\n  \"IDCARD\",\n  \"IDENTITY\",\n  \"PAYMENTMEANS_CREDITCARD\",\n  \"PAYMENTMEAN_PAYPAL\",\n  \"EMAIL\",\n]);\n\nexport class DashlaneJsonImporter extends BaseImporter implements Importer {\n  private result: ImportResult;\n\n  parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    if (results.ADDRESS != null) {\n      this.processAddress(results.ADDRESS);\n    }\n    if (results.AUTHENTIFIANT != null) {\n      this.processAuth(results.AUTHENTIFIANT);\n    }\n    if (results.BANKSTATEMENT != null) {\n      this.processNote(results.BANKSTATEMENT, \"BankAccountName\");\n    }\n    if (results.IDCARD != null) {\n      this.processNote(results.IDCARD, \"Fullname\");\n    }\n    if (results.PAYMENTMEANS_CREDITCARD != null) {\n      this.processCard(results.PAYMENTMEANS_CREDITCARD);\n    }\n    if (results.IDENTITY != null) {\n      this.processIdentity(results.IDENTITY);\n    }\n\n    for (const key in results) {\n      // eslint-disable-next-line\n      if (results.hasOwnProperty(key) && !HandledResults.has(key)) {\n        this.processNote(results[key], null, \"Generic Note\");\n      }\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processAuth(results: any[]) {\n    results.forEach((credential: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(credential.title);\n\n      cipher.login.username = this.getValueOrDefault(\n        credential.login,\n        this.getValueOrDefault(credential.secondaryLogin)\n      );\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.domain);\n      cipher.notes += this.getValueOrDefault(credential.note, \"\");\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processIdentity(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.fullName, \"\");\n      const nameParts = cipher.name.split(\" \");\n      if (nameParts.length > 0) {\n        cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n      }\n      if (nameParts.length === 2) {\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n      } else if (nameParts.length === 3) {\n        cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[2]);\n      }\n      cipher.identity.username = this.getValueOrDefault(obj.pseudo);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processAddress(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.addressName);\n      cipher.identity.address1 = this.getValueOrDefault(obj.addressFull);\n      cipher.identity.city = this.getValueOrDefault(obj.city);\n      cipher.identity.state = this.getValueOrDefault(obj.state);\n      cipher.identity.postalCode = this.getValueOrDefault(obj.zipcode);\n      cipher.identity.country = this.getValueOrDefault(obj.country);\n      if (cipher.identity.country != null) {\n        cipher.identity.country = cipher.identity.country.toUpperCase();\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processCard(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.card = new CardView();\n      cipher.type = CipherType.Card;\n      cipher.name = this.getValueOrDefault(obj.bank);\n      cipher.card.number = this.getValueOrDefault(obj.cardNumber);\n      cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n      cipher.card.cardholderName = this.getValueOrDefault(obj.owner);\n      if (!this.isNullOrWhitespace(cipher.card.brand)) {\n        if (this.isNullOrWhitespace(cipher.name)) {\n          cipher.name = cipher.card.brand;\n        } else {\n          cipher.name += \" - \" + cipher.card.brand;\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processNote(results: any[], nameProperty: string, name: string = null) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.secureNote = new SecureNoteView();\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote.type = SecureNoteType.Generic;\n      if (name != null) {\n        cipher.name = name;\n      } else {\n        cipher.name = this.getValueOrDefault(obj[nameProperty]);\n      }\n      for (const key in obj) {\n        // eslint-disable-next-line\n        if (obj.hasOwnProperty(key) && key !== nameProperty) {\n          this.processKvp(cipher, key, obj[key].toString());\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class EncryptrCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Label, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      const text = this.getValueOrDefault(value.Text);\n      if (!this.isNullOrWhitespace(text)) {\n        if (this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = text;\n        } else {\n          cipher.notes += \"\\n\\n\" + text;\n        }\n      }\n\n      const type = value[\"Entry Type\"];\n      if (type === \"Password\") {\n        cipher.login.username = this.getValueOrDefault(value.Username);\n        cipher.login.password = this.getValueOrDefault(value.Password);\n        cipher.login.uris = this.makeUriArray(value[\"Site URL\"]);\n      } else if (type === \"Credit Card\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value[\"Name on card\"]);\n        cipher.card.number = this.getValueOrDefault(value[\"Card Number\"]);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.CVV);\n        const expiry = this.getValueOrDefault(value.Expiry);\n        if (!this.isNullOrWhitespace(expiry)) {\n          const expParts = expiry.split(\"/\");\n          if (expParts.length > 1) {\n            cipher.card.expMonth = parseInt(expParts[0], null).toString();\n            cipher.card.expYear = (2000 + parseInt(expParts[1], null)).toString();\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class EnpassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let firstRow = true;\n    results.forEach((value) => {\n      if (value.length < 2 || (firstRow && (value[0] === \"Title\" || value[0] === \"title\"))) {\n        firstRow = false;\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (\n        value.length === 2 ||\n        (!this.containsField(value, \"username\") &&\n          !this.containsField(value, \"password\") &&\n          !this.containsField(value, \"email\") &&\n          !this.containsField(value, \"url\"))\n      ) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      }\n\n      if (\n        this.containsField(value, \"cardholder\") &&\n        this.containsField(value, \"number\") &&\n        this.containsField(value, \"expiry date\")\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      }\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const fieldValue: string = value[i + 2];\n          if (this.isNullOrWhitespace(fieldValue)) {\n            continue;\n          }\n\n          const fieldName: string = value[i + 1];\n          const fieldNameLower = fieldName.toLowerCase();\n\n          if (cipher.type === CipherType.Login) {\n            if (\n              fieldNameLower === \"url\" &&\n              (cipher.login.uris == null || cipher.login.uris.length === 0)\n            ) {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              continue;\n            } else if (\n              (fieldNameLower === \"username\" || fieldNameLower === \"email\") &&\n              this.isNullOrWhitespace(cipher.login.username)\n            ) {\n              cipher.login.username = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"password\" &&\n              this.isNullOrWhitespace(cipher.login.password)\n            ) {\n              cipher.login.password = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n              cipher.login.totp = fieldValue;\n              continue;\n            }\n          } else if (cipher.type === CipherType.Card) {\n            if (\n              fieldNameLower === \"cardholder\" &&\n              this.isNullOrWhitespace(cipher.card.cardholderName)\n            ) {\n              cipher.card.cardholderName = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"number\" && this.isNullOrWhitespace(cipher.card.number)) {\n              cipher.card.number = fieldValue;\n              cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n              continue;\n            } else if (fieldNameLower === \"cvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n              cipher.card.code = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"expiry date\" &&\n              this.isNullOrWhitespace(cipher.card.expMonth) &&\n              this.isNullOrWhitespace(cipher.card.expYear)\n            ) {\n              if (this.setCardExpiration(cipher, fieldValue)) {\n                continue;\n              }\n            } else if (fieldNameLower === \"type\") {\n              // Skip since brand was determined from number above\n              continue;\n            }\n          }\n\n          this.processKvp(cipher, fieldName, fieldValue);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private containsField(fields: any[], name: string) {\n    if (fields == null || name == null) {\n      return false;\n    }\n    return (\n      fields.filter((f) => !this.isNullOrWhitespace(f) && f.toLowerCase() === name.toLowerCase())\n        .length > 0\n    );\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { EnpassJsonFile, EnpassFolder, EnpassField } from \"./types/enpass-json-type\";\n\ntype EnpassFolderTreeItem = EnpassFolder & { children: EnpassFolderTreeItem[] };\nconst androidUrlRegex = new RegExp(\"androidapp://.*==@\", \"g\");\n\nexport class EnpassJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: EnpassJsonFile = JSON.parse(data);\n    if (results == null || results.items == null || results.items.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    const foldersIndexMap = new Map<string, number>();\n    const folderTree = this.buildFolderTree(results.folders);\n    this.flattenFolderTree(null, folderTree, foldersMap);\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((item) => {\n      if (item.folders != null && item.folders.length > 0 && foldersIndexMap.has(item.folders[0])) {\n        result.folderRelationships.push([\n          result.ciphers.length,\n          foldersIndexMap.get(item.folders[0]),\n        ]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(item.title);\n      cipher.favorite = item.favorite > 0;\n\n      if (item.template_type != null && item.fields != null && item.fields.length > 0) {\n        if (\n          item.template_type.indexOf(\"login.\") === 0 ||\n          item.template_type.indexOf(\"password.\") === 0\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else if (item.template_type.indexOf(\"creditcard.\") === 0) {\n          this.processCard(cipher, item.fields);\n        } else if (\n          item.template_type.indexOf(\"identity.\") < 0 &&\n          item.fields.some((f) => f.type === \"password\" && !this.isNullOrWhitespace(f.value))\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else {\n          this.processNote(cipher, item.fields);\n        }\n      }\n\n      cipher.notes += \"\\n\" + this.getValueOrDefault(item.note, \"\");\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private processLogin(cipher: CipherView, fields: EnpassField[]) {\n    const urls: string[] = [];\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n\n      if (\n        (field.type === \"username\" || field.type === \"email\") &&\n        this.isNullOrWhitespace(cipher.login.username)\n      ) {\n        cipher.login.username = field.value;\n      } else if (field.type === \"password\" && this.isNullOrWhitespace(cipher.login.password)) {\n        cipher.login.password = field.value;\n      } else if (field.type === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n        cipher.login.totp = field.value;\n      } else if (field.type === \"url\") {\n        urls.push(field.value);\n      } else if (field.type === \".Android#\") {\n        let cleanedValue = field.value.startsWith(\"androidapp://\")\n          ? field.value\n          : \"androidapp://\" + field.value;\n        cleanedValue = cleanedValue.replace(\"android://\", \"\");\n        cleanedValue = cleanedValue.replace(androidUrlRegex, \"androidapp://\");\n        urls.push(cleanedValue);\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n    cipher.login.uris = this.makeUriArray(urls);\n  }\n\n  private processCard(cipher: CipherView, fields: EnpassField[]) {\n    cipher.card = new CardView();\n    cipher.type = CipherType.Card;\n    fields.forEach((field) => {\n      if (\n        this.isNullOrWhitespace(field.value) ||\n        field.type === \"section\" ||\n        field.type === \"ccType\"\n      ) {\n        return;\n      }\n\n      if (field.type === \"ccName\" && this.isNullOrWhitespace(cipher.card.cardholderName)) {\n        cipher.card.cardholderName = field.value;\n      } else if (field.type === \"ccNumber\" && this.isNullOrWhitespace(cipher.card.number)) {\n        cipher.card.number = field.value;\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n      } else if (field.type === \"ccCvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n        cipher.card.code = field.value;\n      } else if (field.type === \"ccExpiry\" && this.isNullOrWhitespace(cipher.card.expYear)) {\n        if (!this.setCardExpiration(cipher, field.value)) {\n          this.processKvp(\n            cipher,\n            field.label,\n            field.value,\n            field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n          );\n        }\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n  }\n\n  private processNote(cipher: CipherView, fields: EnpassField[]) {\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n      this.processKvp(\n        cipher,\n        field.label,\n        field.value,\n        field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n      );\n    });\n  }\n\n  private buildFolderTree(folders: EnpassFolder[]): EnpassFolderTreeItem[] {\n    if (folders == null) {\n      return [];\n    }\n    const folderTree: EnpassFolderTreeItem[] = [];\n    const map = new Map<string, EnpassFolderTreeItem>([]);\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      map.set(obj.uuid, obj);\n      obj.children = [];\n    });\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      if (obj.parent_uuid != null && obj.parent_uuid !== \"\" && map.has(obj.parent_uuid)) {\n        map.get(obj.parent_uuid).children.push(obj);\n      } else {\n        folderTree.push(obj);\n      }\n    });\n    return folderTree;\n  }\n\n  private flattenFolderTree(\n    titlePrefix: string,\n    tree: EnpassFolderTreeItem[],\n    map: Map<string, string>\n  ) {\n    if (tree == null) {\n      return;\n    }\n    tree.forEach((f) => {\n      if (f.title != null && f.title.trim() !== \"\") {\n        let title = f.title.trim();\n        if (titlePrefix != null && titlePrefix.trim() !== \"\") {\n          title = titlePrefix + \"/\" + title;\n        }\n        map.set(f.uuid, title);\n        if (f.children != null && f.children.length !== 0) {\n          this.flattenFolderTree(title, f.children, map);\n        }\n      }\n    });\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class FirefoxCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results\n      .filter((value) => {\n        return value.url !== \"chrome://FirefoxAccounts\";\n      })\n      .forEach((value) => {\n        const cipher = this.initLoginCipher();\n        const url = this.getValueOrDefault(value.url, this.getValueOrDefault(value.hostname));\n        cipher.name = this.getValueOrDefault(this.nameFromUrl(url), \"--\");\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.uris = this.makeUriArray(url);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","export interface FskFile {\n  data: Data;\n}\n\nexport interface Data {\n  [key: string]: FskEntry;\n}\n\nexport enum FskEntryTypesEnum {\n  Login = 1,\n  CreditCard = 2,\n}\n\nexport interface FskEntry {\n  color: string;\n  creditCvv: string;\n  creditExpiry: string;\n  creditNumber: string;\n  favorite: number; // UNIX timestamp\n  notes: string;\n  password: string;\n  passwordList: PasswordList[];\n  passwordModifiedDate: number; // UNIX timestamp\n  rev: string | number;\n  service: string;\n  style: string;\n  type: FskEntryTypesEnum;\n  url: string;\n  username: string;\n  createdDate: number; // UNIX timestamp\n  modifiedDate: number; // UNIX timestamp\n}\n\nexport interface PasswordList {\n  changedate: string;\n  password: string;\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { FskEntry, FskEntryTypesEnum, FskFile } from \"./fsecure-fsk-types\";\n\nexport class FSecureFskImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: FskFile = JSON.parse(data);\n    if (results == null || results.data == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const key in results.data) {\n      // eslint-disable-next-line\n      if (!results.data.hasOwnProperty(key)) {\n        continue;\n      }\n\n      const value = results.data[key];\n      const cipher = this.parseEntry(value);\n      result.ciphers.push(cipher);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseEntry(entry: FskEntry): CipherView {\n    const cipher = this.initLoginCipher();\n    cipher.name = this.getValueOrDefault(entry.service);\n    cipher.notes = this.getValueOrDefault(entry.notes);\n    cipher.favorite = entry.favorite > 0;\n\n    switch (entry.type) {\n      case FskEntryTypesEnum.Login:\n        this.handleLoginEntry(entry, cipher);\n        break;\n      case FskEntryTypesEnum.CreditCard:\n        this.handleCreditCardEntry(entry, cipher);\n        break;\n      default:\n        return;\n        break;\n    }\n\n    this.convertToNoteIfNeeded(cipher);\n    this.cleanupCipher(cipher);\n    return cipher;\n  }\n\n  private handleLoginEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.login.username = this.getValueOrDefault(entry.username);\n    cipher.login.password = this.getValueOrDefault(entry.password);\n    cipher.login.uris = this.makeUriArray(entry.url);\n  }\n\n  private handleCreditCardEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n    cipher.card.cardholderName = this.getValueOrDefault(entry.username);\n    cipher.card.number = this.getValueOrDefault(entry.creditNumber);\n    cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n    cipher.card.code = this.getValueOrDefault(entry.creditCvv);\n    if (!this.isNullOrWhitespace(entry.creditExpiry)) {\n      if (!this.setCardExpiration(cipher, entry.creditExpiry)) {\n        this.processKvp(cipher, \"Expiration\", entry.creditExpiry);\n      }\n    }\n    if (!this.isNullOrWhitespace(entry.password)) {\n      this.processKvp(cipher, \"PIN\", entry.password);\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class GnomeJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || Object.keys(results).length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const keyRing in results) {\n      if (\n        !results.hasOwnProperty(keyRing) || // eslint-disable-line\n        this.isNullOrWhitespace(keyRing) ||\n        results[keyRing].length === 0\n      ) {\n        continue;\n      }\n\n      results[keyRing].forEach((value: any) => {\n        if (\n          this.isNullOrWhitespace(value.display_name) ||\n          value.display_name.indexOf(\"http\") !== 0\n        ) {\n          return;\n        }\n\n        this.processFolder(result, keyRing);\n        const cipher = this.initLoginCipher();\n        cipher.name = value.display_name.replace(\"http://\", \"\").replace(\"https://\", \"\");\n        if (cipher.name.length > 30) {\n          cipher.name = cipher.name.substring(0, 30);\n        }\n        cipher.login.password = this.getValueOrDefault(value.secret);\n        cipher.login.uris = this.makeUriArray(value.display_name);\n\n        if (value.attributes != null) {\n          cipher.login.username =\n            value.attributes != null\n              ? this.getValueOrDefault(value.attributes.username_value)\n              : null;\n          for (const attr in value.attributes) {\n            if (\n              !value.attributes.hasOwnProperty(attr) || // eslint-disable-line\n              attr === \"username_value\" ||\n              attr === \"xdg:schema\"\n            ) {\n              continue;\n            }\n            this.processKvp(cipher, attr, value.attributes[attr]);\n          }\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst NotesHeader = \"Notes\\n\\n\";\nconst ApplicationsHeader = \"Applications\\n\\n\";\nconst WebsitesHeader = \"Websites\\n\\n\";\nconst Delimiter = \"\\n---\\n\";\n\nexport class KasperskyTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n\n    let notesData: string;\n    let applicationsData: string;\n    let websitesData: string;\n    let workingData = this.splitNewLine(data).join(\"\\n\");\n\n    if (workingData.indexOf(NotesHeader) !== -1) {\n      const parts = workingData.split(NotesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        notesData = parts[1];\n      }\n    }\n    if (workingData.indexOf(ApplicationsHeader) !== -1) {\n      const parts = workingData.split(ApplicationsHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        applicationsData = parts[1];\n      }\n    }\n    if (workingData.indexOf(WebsitesHeader) === 0) {\n      const parts = workingData.split(WebsitesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        websitesData = parts[1];\n      }\n    }\n\n    const notes = this.parseDataCategory(notesData);\n    const applications = this.parseDataCategory(applicationsData);\n    const websites = this.parseDataCategory(websitesData);\n\n    notes.forEach((n) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(n.get(\"Name\"));\n      cipher.notes = this.getValueOrDefault(n.get(\"Text\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    websites.concat(applications).forEach((w) => {\n      const cipher = this.initLoginCipher();\n      const nameKey = w.has(\"Website name\") ? \"Website name\" : \"Application\";\n      cipher.name = this.getValueOrDefault(w.get(nameKey), \"\");\n      if (!this.isNullOrWhitespace(w.get(\"Login name\"))) {\n        if (!this.isNullOrWhitespace(cipher.name)) {\n          cipher.name += \": \";\n        }\n        cipher.name += w.get(\"Login name\");\n      }\n      cipher.notes = this.getValueOrDefault(w.get(\"Comment\"));\n      if (w.has(\"Website URL\")) {\n        cipher.login.uris = this.makeUriArray(w.get(\"Website URL\"));\n      }\n      cipher.login.username = this.getValueOrDefault(w.get(\"Login\"));\n      cipher.login.password = this.getValueOrDefault(w.get(\"Password\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseDataCategory(data: string): Map<string, string>[] {\n    if (this.isNullOrWhitespace(data) || data.indexOf(Delimiter) === -1) {\n      return [];\n    }\n    const items: Map<string, string>[] = [];\n    data.split(Delimiter).forEach((p) => {\n      if (p.indexOf(\"\\n\") === -1) {\n        return;\n      }\n      const item = new Map<string, string>();\n      let itemComment: string;\n      let itemCommentKey: string;\n      p.split(\"\\n\").forEach((l) => {\n        if (itemComment != null) {\n          itemComment += \"\\n\" + l;\n          return;\n        }\n        const colonIndex = l.indexOf(\":\");\n        let key: string;\n        let val: string;\n        if (colonIndex === -1) {\n          return;\n        } else {\n          key = l.substring(0, colonIndex);\n          if (l.length > colonIndex + 1) {\n            val = l.substring(colonIndex + 2);\n          }\n        }\n        if (key != null) {\n          item.set(key, val);\n        }\n        if (key === \"Comment\" || key === \"Text\") {\n          itemComment = val;\n          itemCommentKey = key;\n        }\n      });\n      if (itemComment != null && itemCommentKey != null) {\n        item.set(itemCommentKey, itemComment);\n      }\n      if (item.size === 0) {\n        return;\n      }\n      items.push(item);\n    });\n    return items;\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePass2XmlImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    //Note: The doc.querySelector(\"KeePassFile > Root > Group\") no longers works on node and we have to breakdown the query by nodes\n    const KeePassFileNode = doc.querySelector(\"KeePassFile\");\n\n    if (KeePassFileNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const RootNode = KeePassFileNode.querySelector(\"Root\");\n    if (RootNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const rootGroup = RootNode.querySelector(\"Group\");\n    if (rootGroup == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root > Group` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    this.traverse(rootGroup, true, \"\");\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  traverse(node: Element, isRootNode: boolean, groupPrefixName: string) {\n    const folderIndex = this.result.folders.length;\n    let groupName = groupPrefixName;\n\n    if (!isRootNode) {\n      if (groupName !== \"\") {\n        groupName += \"/\";\n      }\n      const nameEl = this.querySelectorDirectChild(node, \"Name\");\n      groupName += nameEl == null ? \"-\" : nameEl.textContent;\n      const folder = new FolderView();\n      folder.name = groupName;\n      this.result.folders.push(folder);\n    }\n\n    this.querySelectorAllDirectChild(node, \"Entry\").forEach((entry) => {\n      const cipherIndex = this.result.ciphers.length;\n\n      const cipher = this.initLoginCipher();\n      this.querySelectorAllDirectChild(entry, \"String\").forEach((entryString) => {\n        const valueEl = this.querySelectorDirectChild(entryString, \"Value\");\n        const value = valueEl != null ? valueEl.textContent : null;\n        if (this.isNullOrWhitespace(value)) {\n          return;\n        }\n        const keyEl = this.querySelectorDirectChild(entryString, \"Key\");\n        const key = keyEl != null ? keyEl.textContent : null;\n\n        if (key === \"URL\") {\n          cipher.login.uris = this.makeUriArray(value);\n        } else if (key === \"UserName\") {\n          cipher.login.username = value;\n        } else if (key === \"Password\") {\n          cipher.login.password = value;\n        } else if (key === \"otp\") {\n          cipher.login.totp = value.replace(\"key=\", \"\");\n        } else if (key === \"Title\") {\n          cipher.name = value;\n        } else if (key === \"Notes\") {\n          cipher.notes += value + \"\\n\";\n        } else {\n          let type = FieldType.Text;\n          const attrs = valueEl.attributes as any;\n          if (\n            attrs.length > 0 &&\n            attrs.ProtectInMemory != null &&\n            attrs.ProtectInMemory.value === \"True\"\n          ) {\n            type = FieldType.Hidden;\n          }\n          this.processKvp(cipher, key, value, type);\n        }\n      });\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n\n      if (!isRootNode) {\n        this.result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    this.querySelectorAllDirectChild(node, \"Group\").forEach((group) => {\n      this.traverse(group, false, groupName);\n    });\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePassXCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(value.Title)) {\n        return;\n      }\n\n      value.Group =\n        !this.isNullOrWhitespace(value.Group) && value.Group.startsWith(\"Root/\")\n          ? value.Group.replace(\"Root/\", \"\")\n          : value.Group;\n      const groupName = !this.isNullOrWhitespace(value.Group) ? value.Group : null;\n      this.processFolder(result, groupName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class KeeperCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 6) {\n        return;\n      }\n\n      this.processFolder(result, value[0]);\n      const cipher = this.initLoginCipher();\n\n      const notes = this.getValueOrDefault(value[5]);\n      if (notes) {\n        cipher.notes = `${notes}\\n`;\n      }\n\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[4]);\n\n      if (value.length > 7) {\n        // we have some custom fields.\n        for (let i = 7; i < value.length; i = i + 2) {\n          if (value[i] == \"TFC:Keeper\") {\n            cipher.login.totp = value[i + 1];\n          } else {\n            this.processKvp(cipher, value[i], value[i + 1]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LastPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipherIndex = result.ciphers.length;\n      let folderIndex = result.folders.length;\n      let grouping = value.grouping;\n      if (grouping != null) {\n        // eslint-disable-next-line\n        grouping = grouping.replace(/\\\\/g, \"/\").replace(/[\\x00-\\x1F\\x7F-\\x9F]/g, \"\");\n      }\n      const hasFolder = this.getValueOrDefault(grouping, \"(none)\") !== \"(none)\";\n      let addFolder = hasFolder;\n\n      if (hasFolder) {\n        for (let i = 0; i < result.folders.length; i++) {\n          if (result.folders[i].name === grouping) {\n            addFolder = false;\n            folderIndex = i;\n            break;\n          }\n        }\n      }\n\n      const cipher = this.buildBaseCipher(value);\n      if (cipher.type === CipherType.Login) {\n        cipher.notes = this.getValueOrDefault(value.extra);\n        cipher.login = new LoginView();\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.totp);\n      } else if (cipher.type === CipherType.SecureNote) {\n        this.parseSecureNote(value, cipher);\n      } else if (cipher.type === CipherType.Card) {\n        cipher.card = this.parseCard(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n      } else if (cipher.type === CipherType.Identity) {\n        cipher.identity = this.parseIdentity(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n        if (!this.isNullOrWhitespace(value.ccnum)) {\n          // there is a card on this identity too\n          const cardCipher = this.buildBaseCipher(value);\n          cardCipher.identity = null;\n          cardCipher.type = CipherType.Card;\n          cardCipher.card = this.parseCard(value);\n          result.ciphers.push(cardCipher);\n        }\n      }\n\n      result.ciphers.push(cipher);\n\n      if (addFolder) {\n        const f = new FolderView();\n        f.name = grouping;\n        result.folders.push(f);\n      }\n      if (hasFolder) {\n        result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private buildBaseCipher(value: any) {\n    const cipher = new CipherView();\n    // eslint-disable-next-line\n    if (value.hasOwnProperty(\"profilename\") && value.hasOwnProperty(\"profilelanguage\")) {\n      // form fill\n      cipher.favorite = false;\n      cipher.name = this.getValueOrDefault(value.profilename, \"--\");\n      cipher.type = CipherType.Card;\n\n      if (\n        !this.isNullOrWhitespace(value.title) ||\n        !this.isNullOrWhitespace(value.firstname) ||\n        !this.isNullOrWhitespace(value.lastname) ||\n        !this.isNullOrWhitespace(value.address1) ||\n        !this.isNullOrWhitespace(value.phone) ||\n        !this.isNullOrWhitespace(value.username) ||\n        !this.isNullOrWhitespace(value.email)\n      ) {\n        cipher.type = CipherType.Identity;\n      }\n    } else {\n      // site or secure note\n      cipher.favorite = !this.organization && this.getValueOrDefault(value.fav, \"0\") === \"1\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.type = value.url === \"http://sn\" ? CipherType.SecureNote : CipherType.Login;\n    }\n    return cipher;\n  }\n\n  private parseCard(value: any): CardView {\n    const card = new CardView();\n    card.cardholderName = this.getValueOrDefault(value.ccname);\n    card.number = this.getValueOrDefault(value.ccnum);\n    card.code = this.getValueOrDefault(value.cccsc);\n    card.brand = CardView.getCardBrandByPatterns(card.number);\n\n    if (!this.isNullOrWhitespace(value.ccexp) && value.ccexp.indexOf(\"-\") > -1) {\n      const ccexpParts = (value.ccexp as string).split(\"-\");\n      if (ccexpParts.length > 1) {\n        card.expYear = ccexpParts[0];\n        card.expMonth = ccexpParts[1];\n        if (card.expMonth.length === 2 && card.expMonth[0] === \"0\") {\n          card.expMonth = card.expMonth[1];\n        }\n      }\n    }\n\n    return card;\n  }\n\n  private parseIdentity(value: any): IdentityView {\n    const identity = new IdentityView();\n    identity.title = this.getValueOrDefault(value.title);\n    identity.firstName = this.getValueOrDefault(value.firstname);\n    identity.middleName = this.getValueOrDefault(value.middlename);\n    identity.lastName = this.getValueOrDefault(value.lastname);\n    identity.username = this.getValueOrDefault(value.username);\n    identity.company = this.getValueOrDefault(value.company);\n    identity.ssn = this.getValueOrDefault(value.ssn);\n    identity.address1 = this.getValueOrDefault(value.address1);\n    identity.address2 = this.getValueOrDefault(value.address2);\n    identity.address3 = this.getValueOrDefault(value.address3);\n    identity.city = this.getValueOrDefault(value.city);\n    identity.state = this.getValueOrDefault(value.state);\n    identity.postalCode = this.getValueOrDefault(value.zip);\n    identity.country = this.getValueOrDefault(value.country);\n    identity.email = this.getValueOrDefault(value.email);\n    identity.phone = this.getValueOrDefault(value.phone);\n\n    if (!this.isNullOrWhitespace(identity.title)) {\n      identity.title = identity.title.charAt(0).toUpperCase() + identity.title.slice(1);\n    }\n\n    return identity;\n  }\n\n  private parseSecureNote(value: any, cipher: CipherView) {\n    const extraParts = this.splitNewLine(value.extra);\n    let processedNote = false;\n\n    if (extraParts.length) {\n      const typeParts = extraParts[0].split(\":\");\n      if (\n        typeParts.length > 1 &&\n        typeParts[0] === \"NoteType\" &&\n        (typeParts[1] === \"Credit Card\" || typeParts[1] === \"Address\")\n      ) {\n        if (typeParts[1] === \"Credit Card\") {\n          const mappedData = this.parseSecureNoteMapping<CardView>(cipher, extraParts, {\n            Number: \"number\",\n            \"Name on Card\": \"cardholderName\",\n            \"Security Code\": \"code\",\n            // LP provides date in a format like 'June,2020'\n            // Store in expMonth, then parse and modify\n            \"Expiration Date\": \"expMonth\",\n          });\n\n          if (this.isNullOrWhitespace(mappedData.expMonth) || mappedData.expMonth === \",\") {\n            // No expiration data\n            mappedData.expMonth = undefined;\n          } else {\n            const [monthString, year] = mappedData.expMonth.split(\",\");\n            // Parse month name into number\n            if (!this.isNullOrWhitespace(monthString)) {\n              const month = new Date(Date.parse(monthString.trim() + \" 1, 2012\")).getMonth() + 1;\n              if (isNaN(month)) {\n                mappedData.expMonth = undefined;\n              } else {\n                mappedData.expMonth = month.toString();\n              }\n            } else {\n              mappedData.expMonth = undefined;\n            }\n            if (!this.isNullOrWhitespace(year)) {\n              mappedData.expYear = year;\n            }\n          }\n\n          cipher.type = CipherType.Card;\n          cipher.card = mappedData;\n        } else if (typeParts[1] === \"Address\") {\n          const mappedData = this.parseSecureNoteMapping<IdentityView>(cipher, extraParts, {\n            Title: \"title\",\n            \"First Name\": \"firstName\",\n            \"Last Name\": \"lastName\",\n            \"Middle Name\": \"middleName\",\n            Company: \"company\",\n            \"Address 1\": \"address1\",\n            \"Address 2\": \"address2\",\n            \"Address 3\": \"address3\",\n            \"City / Town\": \"city\",\n            State: \"state\",\n            \"Zip / Postal Code\": \"postalCode\",\n            Country: \"country\",\n            \"Email Address\": \"email\",\n            Username: \"username\",\n          });\n          cipher.type = CipherType.Identity;\n          cipher.identity = mappedData;\n        }\n        processedNote = true;\n      }\n    }\n\n    if (!processedNote) {\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n      cipher.notes = this.getValueOrDefault(value.extra);\n    }\n  }\n\n  private parseSecureNoteMapping<T>(cipher: CipherView, extraParts: string[], map: any): T {\n    const dataObj: any = {};\n\n    let processingNotes = false;\n    extraParts.forEach((extraPart) => {\n      let key: string = null;\n      let val: string = null;\n      if (!processingNotes) {\n        if (this.isNullOrWhitespace(extraPart)) {\n          return;\n        }\n        const colonIndex = extraPart.indexOf(\":\");\n        if (colonIndex === -1) {\n          key = extraPart;\n        } else {\n          key = extraPart.substring(0, colonIndex);\n          if (extraPart.length > colonIndex) {\n            val = extraPart.substring(colonIndex + 1);\n          }\n        }\n        if (this.isNullOrWhitespace(key) || this.isNullOrWhitespace(val) || key === \"NoteType\") {\n          return;\n        }\n      }\n\n      if (processingNotes) {\n        cipher.notes += \"\\n\" + extraPart;\n      } else if (key === \"Notes\") {\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes += \"\\n\" + val;\n        } else {\n          cipher.notes = val;\n        }\n        processingNotes = true;\n        // eslint-disable-next-line\n      } else if (map.hasOwnProperty(key)) {\n        dataObj[map[key]] = val;\n      } else {\n        this.processKvp(cipher, key, val);\n      }\n    });\n\n    return dataObj;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LogMeOnceCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 4) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[1]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MeldiumCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.DisplayName, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.login.username = this.getValueOrDefault(value.UserName);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MSecureCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      const folderName =\n        this.getValueOrDefault(value[0], \"Unassigned\") !== \"Unassigned\" ? value[0] : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[2], \"--\");\n\n      if (value[1] === \"Web Logins\" || value[1] === \"Login\") {\n        cipher.login.uris = this.makeUriArray(value[4]);\n        cipher.login.username = this.getValueOrDefault(value[5]);\n        cipher.login.password = this.getValueOrDefault(value[6]);\n        cipher.notes = !this.isNullOrWhitespace(value[3]) ? value[3].split(\"\\\\n\").join(\"\\n\") : null;\n      } else if (value.length > 3) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        for (let i = 3; i < value.length; i++) {\n          if (!this.isNullOrWhitespace(value[i])) {\n            cipher.notes += value[i] + \"\\n\";\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(value[1]) && cipher.type !== CipherType.Login) {\n        cipher.name = value[1] + \": \" + cipher.name;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst mappedBaseColumns = [\"nickname\", \"additionalInfo\"];\nconst _mappedUserAccountColumns = new Set(\n  mappedBaseColumns.concat([\"url\", \"username\", \"password\", \"twofaSecret\"])\n);\nconst _mappedCreditCardColumns = new Set(\n  mappedBaseColumns.concat([\"cardNumber\", \"cardName\", \"exp_month\", \"exp_year\", \"cvv\"])\n);\n\nconst _mappedIdentityColumns = new Set(\n  mappedBaseColumns.concat([\n    \"title\",\n    \"firstName\",\n    \"middleName\",\n    \"lastName\",\n    \"email\",\n    \"firstAddressLine\",\n    \"secondAddressLine\",\n    \"city\",\n    \"country\",\n    \"zipCode\",\n  ])\n);\n\nconst _mappedIdCardColumns = new Set(mappedBaseColumns.concat([\"idName\", \"idNumber\", \"idCountry\"]));\n\nconst _mappedTwoFaColumns = new Set(mappedBaseColumns.concat([\"authToken\"]));\n\nconst _mappedUserNoteColumns = new Set(mappedBaseColumns.concat([\"content\"]));\n\nexport class MykiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.nickname, \"--\");\n      cipher.notes = this.getValueOrDefault(value.additionalInfo);\n\n      if (value.url !== undefined) {\n        // Accounts\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.twofaSecret);\n\n        this.importUnmappedFields(cipher, value, _mappedUserAccountColumns);\n      } else if (value.authToken !== undefined) {\n        // TwoFA\n        cipher.login.totp = this.getValueOrDefault(value.authToken);\n\n        this.importUnmappedFields(cipher, value, _mappedTwoFaColumns);\n      } else if (value.cardNumber !== undefined) {\n        // Cards\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.expMonth = this.getValueOrDefault(value.exp_month);\n        cipher.card.expYear = this.getValueOrDefault(value.exp_year);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n\n        this.importUnmappedFields(cipher, value, _mappedCreditCardColumns);\n      } else if (value.firstName !== undefined) {\n        // Identities\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        cipher.identity.title = this.getValueOrDefault(value.title);\n        cipher.identity.firstName = this.getValueOrDefault(value.firstName);\n        cipher.identity.middleName = this.getValueOrDefault(value.middleName);\n        cipher.identity.lastName = this.getValueOrDefault(value.lastName);\n        cipher.identity.phone = this.getValueOrDefault(value.number);\n        cipher.identity.email = this.getValueOrDefault(value.email);\n        cipher.identity.address1 = this.getValueOrDefault(value.firstAddressLine);\n        cipher.identity.address2 = this.getValueOrDefault(value.secondAddressLine);\n        cipher.identity.city = this.getValueOrDefault(value.city);\n        cipher.identity.country = this.getValueOrDefault(value.country);\n        cipher.identity.postalCode = this.getValueOrDefault(value.zipCode);\n\n        this.importUnmappedFields(cipher, value, _mappedIdentityColumns);\n      } else if (value.idType !== undefined) {\n        // IdCards\n\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        this.processFullName(cipher, value.idName);\n        cipher.identity.country = this.getValueOrDefault(value.idCountry);\n\n        switch (value.idType) {\n          // case \"Driver's License\":\n          // case \"ID Card\":\n          // case \"Outdoor License\":\n          // case \"Software License\":\n          // case \"Tax Number\":\n          // case \"Bank Account\":\n          // case \"Insurance Card\":\n          // case \"Health Card\":\n          // case \"Membership\":\n          // case \"Database\":\n          // case \"Reward Program\":\n          // case \"Tour Visa\":\n          case \"Passport\":\n            cipher.identity.passportNumber = value.idNumber;\n            break;\n          case \"Social Security\":\n            cipher.identity.ssn = value.idNumber;\n            break;\n          default:\n            cipher.identity.licenseNumber = value.idNumber;\n            break;\n        }\n\n        this.importUnmappedFields(cipher, value, _mappedIdCardColumns);\n      } else if (value.content !== undefined) {\n        // Notes\n        cipher.secureNote = new SecureNoteView();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.notes = this.getValueOrDefault(value.content);\n\n        this.importUnmappedFields(cipher, value, _mappedUserNoteColumns);\n      } else {\n        return;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\ntype nodePassCsvParsed = {\n  name: string;\n  url: string;\n  username: string;\n  password: string;\n  note: string;\n  cardholdername: string;\n  cardnumber: string;\n  cvc: string;\n  expirydate: string;\n  zipcode: string;\n  folder: string;\n  full_name: string;\n  phone_number: string;\n  email: string;\n  address1: string;\n  address2: string;\n  city: string;\n  country: string;\n  state: string;\n};\n\nexport class NordPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: nodePassCsvParsed[] = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((record) => {\n      const recordType = this.evaluateType(record);\n      if (recordType === undefined) {\n        return;\n      }\n\n      if (!this.organization) {\n        this.processFolder(result, record.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.name = this.getValueOrDefault(record.name, \"--\");\n      cipher.notes = this.getValueOrDefault(record.note);\n\n      switch (recordType) {\n        case CipherType.Login:\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.username = this.getValueOrDefault(record.username);\n          cipher.login.password = this.getValueOrDefault(record.password);\n          cipher.login.uris = this.makeUriArray(record.url);\n          break;\n        case CipherType.Card:\n          cipher.type = CipherType.Card;\n          cipher.card.cardholderName = this.getValueOrDefault(record.cardholdername);\n          cipher.card.number = this.getValueOrDefault(record.cardnumber);\n          cipher.card.code = this.getValueOrDefault(record.cvc);\n          cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n          this.setCardExpiration(cipher, record.expirydate);\n          break;\n\n        case CipherType.Identity:\n          cipher.type = CipherType.Identity;\n\n          this.processFullName(cipher, this.getValueOrDefault(record.full_name));\n          cipher.identity.address1 = this.getValueOrDefault(record.address1);\n          cipher.identity.address2 = this.getValueOrDefault(record.address2);\n          cipher.identity.city = this.getValueOrDefault(record.city);\n          cipher.identity.state = this.getValueOrDefault(record.state);\n          cipher.identity.postalCode = this.getValueOrDefault(record.zipcode);\n          cipher.identity.country = this.getValueOrDefault(record.country);\n          if (cipher.identity.country != null) {\n            cipher.identity.country = cipher.identity.country.toUpperCase();\n          }\n          cipher.identity.email = this.getValueOrDefault(record.email);\n          cipher.identity.phone = this.getValueOrDefault(record.phone_number);\n          break;\n        case CipherType.SecureNote:\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default:\n          break;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private evaluateType(record: nodePassCsvParsed): CipherType {\n    if (!this.isNullOrWhitespace(record.username)) {\n      return CipherType.Login;\n    }\n\n    if (!this.isNullOrWhitespace(record.cardnumber)) {\n      return CipherType.Card;\n    }\n\n    if (!this.isNullOrWhitespace(record.full_name)) {\n      return CipherType.Identity;\n    }\n\n    if (!this.isNullOrWhitespace(record.note)) {\n      return CipherType.SecureNote;\n    }\n\n    return undefined;\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { PasswordHistoryView } from \"@bitwarden/common/vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class OnePassword1PifImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    data.split(this.newLineRegex).forEach((line) => {\n      if (this.isNullOrWhitespace(line) || line[0] !== \"{\") {\n        return;\n      }\n      const item = JSON.parse(line);\n      if (item.trashed === true) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n\n      if (this.isNullOrWhitespace(item.hmac)) {\n        this.processStandardItem(item, cipher);\n      } else {\n        this.processWinOpVaultItem(item, cipher);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processWinOpVaultItem(item: any, cipher: CipherView) {\n    if (item.overview != null) {\n      cipher.name = this.getValueOrDefault(item.overview.title);\n      if (item.overview.URLs != null) {\n        const urls: string[] = [];\n        item.overview.URLs.forEach((url: any) => {\n          if (!this.isNullOrWhitespace(url.u)) {\n            urls.push(url.u);\n          }\n        });\n        cipher.login.uris = this.makeUriArray(urls);\n      }\n    }\n\n    if (item.details != null) {\n      if (item.details.passwordHistory != null) {\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n      }\n      if (\n        !this.isNullOrWhitespace(item.details.ccnum) ||\n        !this.isNullOrWhitespace(item.details.cvv)\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      } else if (\n        !this.isNullOrWhitespace(item.details.firstname) ||\n        !this.isNullOrWhitespace(item.details.address1)\n      ) {\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n      }\n      if (cipher.type === CipherType.Login && !this.isNullOrWhitespace(item.details.password)) {\n        cipher.login.password = item.details.password;\n      }\n      if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n        cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (item.details.fields != null) {\n        this.parseFields(item.details.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.details.sections != null) {\n        item.details.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private processStandardItem(item: any, cipher: CipherView) {\n    cipher.favorite = item.openContents && item.openContents.faveIndex ? true : false;\n    cipher.name = this.getValueOrDefault(item.title);\n\n    if (item.typeName === \"securenotes.SecureNote\") {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    } else if (item.typeName === \"wallet.financial.CreditCard\") {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    } else if (item.typeName === \"identities.Identity\") {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    } else {\n      cipher.login.uris = this.makeUriArray(item.location);\n    }\n\n    if (item.secureContents != null) {\n      if (item.secureContents.passwordHistory != null) {\n        this.parsePasswordHistory(item.secureContents.passwordHistory, cipher);\n      }\n      if (!this.isNullOrWhitespace(item.secureContents.notesPlain)) {\n        cipher.notes = item.secureContents.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (cipher.type === CipherType.Login) {\n        if (!this.isNullOrWhitespace(item.secureContents.password)) {\n          cipher.login.password = item.secureContents.password;\n        }\n        if (item.secureContents.URLs != null) {\n          const urls: string[] = [];\n          item.secureContents.URLs.forEach((u: any) => {\n            if (!this.isNullOrWhitespace(u.url)) {\n              urls.push(u.url);\n            }\n          });\n          if (urls.length > 0) {\n            cipher.login.uris = this.makeUriArray(urls);\n          }\n        }\n      }\n      if (item.secureContents.fields != null) {\n        this.parseFields(item.secureContents.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.secureContents.sections != null) {\n        item.secureContents.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private parsePasswordHistory(items: any[], cipher: CipherView) {\n    const maxSize = items.length > 5 ? 5 : items.length;\n    cipher.passwordHistory = items\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n\n  private parseFields(\n    fields: any[],\n    cipher: CipherView,\n    designationKey: string,\n    valueKey: string,\n    nameKey: string\n  ) {\n    fields.forEach((field: any) => {\n      if (field[valueKey] == null || field[valueKey].toString().trim() === \"\") {\n        return;\n      }\n\n      // TODO: when date FieldType exists, store this as a date field type instead of formatted Text if k is 'date'\n      const fieldValue =\n        field.k === \"date\"\n          ? new Date(field[valueKey] * 1000).toUTCString()\n          : field[valueKey].toString();\n      const fieldDesignation =\n        field[designationKey] != null ? field[designationKey].toString() : null;\n\n      if (cipher.type === CipherType.Login) {\n        if (this.isNullOrWhitespace(cipher.login.username) && fieldDesignation === \"username\") {\n          cipher.login.username = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.password) &&\n          fieldDesignation === \"password\"\n        ) {\n          cipher.login.password = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.totp) &&\n          fieldDesignation != null &&\n          fieldDesignation.startsWith(\"TOTP_\")\n        ) {\n          cipher.login.totp = fieldValue;\n          return;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.isNullOrWhitespace(cipher.card.number) && fieldDesignation === \"ccnum\") {\n          cipher.card.number = fieldValue;\n          cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n          return;\n        } else if (this.isNullOrWhitespace(cipher.card.code) && fieldDesignation === \"cvv\") {\n          cipher.card.code = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.cardholderName) &&\n          fieldDesignation === \"cardholder\"\n        ) {\n          cipher.card.cardholderName = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.expiration) &&\n          fieldDesignation === \"expiry\" &&\n          fieldValue.length === 6\n        ) {\n          cipher.card.expMonth = (fieldValue as string).substr(4, 2);\n          if (cipher.card.expMonth[0] === \"0\") {\n            cipher.card.expMonth = cipher.card.expMonth.substr(1, 1);\n          }\n          cipher.card.expYear = (fieldValue as string).substr(0, 4);\n          return;\n        } else if (fieldDesignation === \"type\") {\n          // Skip since brand was determined from number above\n          return;\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        const identity = cipher.identity;\n        if (this.isNullOrWhitespace(identity.firstName) && fieldDesignation === \"firstname\") {\n          identity.firstName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.lastName) && fieldDesignation === \"lastname\") {\n          identity.lastName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.middleName) && fieldDesignation === \"initial\") {\n          identity.middleName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.phone) && fieldDesignation === \"defphone\") {\n          identity.phone = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.company) && fieldDesignation === \"company\") {\n          identity.company = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.email) && fieldDesignation === \"email\") {\n          identity.email = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.username) && fieldDesignation === \"username\") {\n          identity.username = fieldValue;\n          return;\n        } else if (fieldDesignation === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip } = field[valueKey];\n          identity.address1 = this.getValueOrDefault(street);\n          identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            identity.country = country.toUpperCase();\n          }\n          identity.postalCode = this.getValueOrDefault(zip);\n          return;\n        }\n      }\n\n      const fieldName = this.isNullOrWhitespace(field[nameKey]) ? \"no_name\" : field[nameKey];\n      if (\n        fieldName === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      const fieldType = field.k === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n}\n","export interface ExportData {\n  accounts?: AccountsEntity[] | null;\n}\nexport interface AccountsEntity {\n  attrs: AccountAttributes;\n  vaults?: VaultsEntity[] | null;\n}\nexport interface AccountAttributes {\n  accountName: string;\n  name: string;\n  avatar: string;\n  email: string;\n  uuid: string;\n  domain: string;\n}\nexport interface VaultsEntity {\n  attrs: VaultAttributes;\n  items?: Item[] | null;\n}\nexport interface VaultAttributes {\n  uuid: string;\n  desc: string;\n  avatar: string;\n  name: string;\n  type: string;\n}\n\nexport enum CategoryEnum {\n  Login = \"001\",\n  CreditCard = \"002\",\n  SecureNote = \"003\",\n  Identity = \"004\",\n  Password = \"005\",\n  Document = \"006\",\n  SoftwareLicense = \"100\",\n  BankAccount = \"101\",\n  Database = \"102\",\n  DriversLicense = \"103\",\n  OutdoorLicense = \"104\",\n  Membership = \"105\",\n  Passport = \"106\",\n  RewardsProgram = \"107\",\n  SocialSecurityNumber = \"108\",\n  WirelessRouter = \"109\",\n  Server = \"110\",\n  EmailAccount = \"111\",\n  API_Credential = \"112\",\n  MedicalRecord = \"113\",\n}\n\nexport interface Item {\n  uuid: string;\n  favIndex: number;\n  createdAt: number;\n  updatedAt: number;\n  trashed?: boolean;\n  categoryUuid: string;\n  details: Details;\n  overview: Overview;\n}\nexport interface Details {\n  loginFields?: (LoginFieldsEntity | null)[] | null;\n  notesPlain?: string | null;\n  sections?: (SectionsEntity | null)[] | null;\n  passwordHistory?: (PasswordHistoryEntity | null)[] | null;\n  documentAttributes?: DocumentAttributes | null;\n  password?: string | null;\n}\n\nexport enum LoginFieldTypeEnum {\n  TextOrHtml = \"T\",\n  EmailAddress = \"E\",\n  URL = \"U\",\n  Number = \"N\",\n  Password = \"P\",\n  TextArea = \"A\",\n  PhoneNumber = \"T\",\n  CheckBox = \"C\",\n}\nexport interface LoginFieldsEntity {\n  value: string;\n  id: string;\n  name: string;\n  fieldType: LoginFieldTypeEnum | string;\n  designation?: string | null;\n}\nexport interface SectionsEntity {\n  title: string;\n  name?: string | null;\n  fields?: FieldsEntity[] | null;\n}\nexport interface FieldsEntity {\n  title: string;\n  id: string;\n  value: Value;\n  indexAtSource: number;\n  guarded: boolean;\n  multiline: boolean;\n  dontGenerate: boolean;\n  placeholder?: string;\n  inputTraits: InputTraits;\n  clipboardFilter?: string | null;\n}\nexport interface Value {\n  totp?: string | null;\n  date?: number | null;\n  string?: string | null;\n  concealed?: string | null;\n  email?: Email | null;\n  phone?: string | null;\n  menu?: string | null;\n  gender?: string | null;\n  monthYear?: number | null;\n  url?: string | null;\n  address?: Address | null;\n  creditCardType?: string | null;\n  creditCardNumber?: string | null;\n  reference?: string | null;\n}\n\nexport interface Email {\n  email_address: string;\n  provider: string;\n}\n\nexport interface Address {\n  street: string;\n  city: string;\n  country: string;\n  zip: string;\n  state: string;\n}\nexport interface InputTraits {\n  keyboard: string;\n  correction: string;\n  capitalization: string;\n}\nexport interface PasswordHistoryEntity {\n  value: string;\n  time: number;\n}\nexport interface DocumentAttributes {\n  fileName: string;\n  documentId: string;\n  decryptedSize: number;\n}\nexport interface Overview {\n  subtitle: string;\n  title: string;\n  url: string;\n  urls?: UrlsEntity[] | null;\n  ps?: number | null;\n  pbe?: number | null;\n  pgrng?: boolean | null;\n  tags?: string[] | null;\n}\nexport interface UrlsEntity {\n  label: string;\n  url: string;\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { PasswordHistoryView } from \"@bitwarden/common/vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CategoryEnum,\n  Details,\n  ExportData,\n  FieldsEntity,\n  Item,\n  LoginFieldTypeEnum,\n  Overview,\n  PasswordHistoryEntity,\n  SectionsEntity,\n  UrlsEntity,\n  Value,\n  VaultsEntity,\n} from \"./types/onepassword-1pux-importer-types\";\n\nexport class OnePassword1PuxImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const exportData: ExportData = JSON.parse(data);\n\n    const account = exportData.accounts[0];\n    // TODO Add handling of multiple vaults\n    // const personalVaults = account.vaults[0].filter((v) => v.attrs.type === VaultAttributeTypeEnum.Personal);\n    account.vaults.forEach((vault: VaultsEntity) => {\n      vault.items.forEach((item: Item) => {\n        if (item.trashed === true) {\n          return;\n        }\n\n        const cipher = this.initLoginCipher();\n\n        const category = item.categoryUuid as CategoryEnum;\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.Password:\n          case CategoryEnum.WirelessRouter:\n          case CategoryEnum.Server:\n          case CategoryEnum.API_Credential:\n            cipher.type = CipherType.Login;\n            cipher.login = new LoginView();\n            break;\n          case CategoryEnum.CreditCard:\n          case CategoryEnum.BankAccount:\n            cipher.type = CipherType.Card;\n            cipher.card = new CardView();\n            break;\n          case CategoryEnum.SecureNote:\n          case CategoryEnum.SoftwareLicense:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.MedicalRecord:\n            // case CategoryEnum.Document:\n            cipher.type = CipherType.SecureNote;\n            cipher.secureNote = new SecureNoteView();\n            cipher.secureNote.type = SecureNoteType.Generic;\n            break;\n          case CategoryEnum.Identity:\n          case CategoryEnum.DriversLicense:\n          case CategoryEnum.OutdoorLicense:\n          case CategoryEnum.Membership:\n          case CategoryEnum.Passport:\n          case CategoryEnum.RewardsProgram:\n          case CategoryEnum.SocialSecurityNumber:\n            cipher.type = CipherType.Identity;\n            cipher.identity = new IdentityView();\n            break;\n          default:\n            break;\n        }\n\n        cipher.favorite = item.favIndex === 1 ? true : false;\n\n        this.processOverview(item.overview, cipher);\n\n        this.processLoginFields(item, cipher);\n\n        this.processDetails(category, item.details, cipher);\n\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n\n        this.processSections(category, item.details.sections, cipher);\n\n        if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n          cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        this.result.ciphers.push(cipher);\n      });\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processOverview(overview: Overview, cipher: CipherView) {\n    if (overview == null) {\n      return;\n    }\n\n    cipher.name = this.getValueOrDefault(overview.title);\n\n    if (overview.urls != null) {\n      const urls: string[] = [];\n      overview.urls.forEach((url: UrlsEntity) => {\n        if (!this.isNullOrWhitespace(url.url)) {\n          urls.push(url.url);\n        }\n      });\n      cipher.login.uris = this.makeUriArray(urls);\n    }\n\n    if (overview.tags != null && overview.tags.length > 0) {\n      const folderName = this.capitalize(overview.tags[0]);\n      this.processFolder(this.result, folderName);\n    }\n  }\n\n  private capitalize(inputString: string): string {\n    return inputString.trim().replace(/\\w\\S*/g, (w) => w.replace(/^\\w/, (c) => c.toUpperCase()));\n  }\n\n  private processLoginFields(item: Item, cipher: CipherView) {\n    if (item.details == null) {\n      return;\n    }\n\n    if (item.details.loginFields == null || item.details.loginFields.length === 0) {\n      return;\n    }\n\n    item.details.loginFields.forEach((loginField) => {\n      if (loginField.designation === \"username\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.username = loginField.value;\n        return;\n      }\n\n      if (loginField.designation === \"password\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.password = loginField.value;\n        return;\n      }\n\n      let fieldValue = loginField.value;\n      let fieldType: FieldType = FieldType.Text;\n      switch (loginField.fieldType) {\n        case LoginFieldTypeEnum.Password:\n          fieldType = FieldType.Hidden;\n          break;\n        case LoginFieldTypeEnum.CheckBox:\n          fieldValue = loginField.value !== \"\" ? \"true\" : \"false\";\n          fieldType = FieldType.Boolean;\n          break;\n        default:\n          break;\n      }\n      this.processKvp(cipher, loginField.name, fieldValue, fieldType);\n    });\n  }\n\n  private processDetails(category: CategoryEnum, details: Details, cipher: CipherView) {\n    if (category !== CategoryEnum.Password) {\n      return;\n    }\n\n    if (details == null) {\n      return;\n    }\n    cipher.login.password = details.password;\n  }\n\n  private processSections(category: CategoryEnum, sections: SectionsEntity[], cipher: CipherView) {\n    if (sections == null || sections.length === 0) {\n      return;\n    }\n\n    sections.forEach((section: SectionsEntity) => {\n      if (section.fields == null) {\n        return;\n      }\n\n      this.parseSectionFields(category, section.fields, cipher);\n    });\n  }\n\n  private parseSectionFields(category: CategoryEnum, fields: FieldsEntity[], cipher: CipherView) {\n    fields.forEach((field: FieldsEntity) => {\n      const valueKey = Object.keys(field.value)[0];\n      const anyField = field as any;\n\n      if (\n        anyField.value == null ||\n        anyField.value[valueKey] == null ||\n        anyField.value[valueKey] === \"\"\n      ) {\n        return;\n      }\n\n      const fieldName = this.getFieldName(field.id, field.title);\n      const fieldValue = this.extractValue(field.value, valueKey);\n\n      if (cipher.type === CipherType.Login) {\n        if (this.fillLogin(field, fieldValue, cipher)) {\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.WirelessRouter:\n            break;\n\n          case CategoryEnum.Server:\n            if (this.isNullOrWhitespace(cipher.login.uri) && field.id === \"url\") {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              return;\n            }\n            break;\n\n          case CategoryEnum.API_Credential:\n            if (this.fillApiCredentials(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.fillCreditCard(field, fieldValue, cipher)) {\n          return;\n        }\n\n        if (category === CategoryEnum.BankAccount) {\n          if (this.fillBankAccount(field, fieldValue, cipher)) {\n            return;\n          }\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        if (this.fillIdentity(field, fieldValue, cipher, valueKey)) {\n          return;\n        }\n        if (valueKey === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip, state } = field.value.address;\n          cipher.identity.address1 = this.getValueOrDefault(street);\n          cipher.identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            cipher.identity.country = country.toUpperCase();\n          }\n          cipher.identity.postalCode = this.getValueOrDefault(zip);\n          cipher.identity.state = this.getValueOrDefault(state);\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Identity:\n            break;\n          case CategoryEnum.DriversLicense:\n            if (this.fillDriversLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.OutdoorLicense:\n            if (this.fillOutdoorLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Membership:\n            if (this.fillMembership(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Passport:\n            if (this.fillPassport(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.RewardsProgram:\n            if (this.fillRewardsProgram(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.SocialSecurityNumber:\n            if (this.fillSSN(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      }\n\n      if (valueKey === \"email\") {\n        // fieldValue is an object casted into a string, so access the plain value instead\n        const { email_address, provider } = field.value.email;\n        this.processKvp(cipher, fieldName, email_address, FieldType.Text);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return;\n      }\n\n      // Do not include a password field if it's already in the history\n      if (\n        field.title === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      // TODO ?? If one of the fields is marked as guarded, then activate Password-Reprompt for the entire item\n      if (field.guarded && cipher.reprompt === CipherRepromptType.None) {\n        cipher.reprompt = CipherRepromptType.Password;\n      }\n\n      const fieldType = valueKey === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n\n  private getFieldName(id: string, title: string): string {\n    if (this.isNullOrWhitespace(title)) {\n      return id;\n    }\n\n    // Naive approach of checking if the fields id is usable\n    if (id.length > 25 && RegExp(/[0-9]{2}[A-Z]{2}/, \"i\").test(id)) {\n      return title;\n    }\n    return id;\n  }\n\n  private extractValue(value: Value, valueKey: string): string {\n    if (valueKey === \"date\") {\n      return new Date(value.date * 1000).toUTCString();\n    }\n\n    if (valueKey === \"monthYear\") {\n      return value.monthYear.toString();\n    }\n\n    return (value as any)[valueKey];\n  }\n\n  private fillLogin(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.username) && fieldName === \"username\") {\n      cipher.login.username = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"password\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (\n      this.isNullOrWhitespace(cipher.login.totp) &&\n      field.id != null &&\n      field.id.startsWith(\"TOTP_\")\n    ) {\n      cipher.login.totp = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillApiCredentials(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"credential\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.uri) && fieldName === \"hostname\") {\n      cipher.login.uris = this.makeUriArray(fieldValue);\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillCreditCard(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.number) && field.id === \"ccnum\") {\n      cipher.card.number = fieldValue;\n      cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.code) && field.id === \"cvv\") {\n      cipher.card.code = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"cardholder\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.expiration) && field.id === \"expiry\") {\n      const monthYear: string = fieldValue.toString().trim();\n      cipher.card.expMonth = monthYear.substring(4, 6);\n      if (cipher.card.expMonth[0] === \"0\") {\n        cipher.card.expMonth = cipher.card.expMonth.substring(1, 2);\n      }\n      cipher.card.expYear = monthYear.substring(0, 4);\n      return true;\n    }\n\n    if (field.id === \"type\") {\n      // Skip since brand was determined from number above\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillBankAccount(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"owner\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillIdentity(\n    field: FieldsEntity,\n    fieldValue: string,\n    cipher: CipherView,\n    valueKey: string\n  ): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"firstname\") {\n      cipher.identity.firstName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.lastName) && field.id === \"lastname\") {\n      cipher.identity.lastName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.middleName) && field.id === \"initial\") {\n      cipher.identity.middleName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"defphone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.email)) {\n      if (valueKey === \"email\") {\n        const { email_address, provider } = field.value.email;\n        cipher.identity.email = this.getValueOrDefault(email_address);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return true;\n      }\n\n      if (field.id === \"email\") {\n        cipher.identity.email = fieldValue;\n        return true;\n      }\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.username) && field.id === \"username\") {\n      cipher.identity.username = fieldValue;\n      return true;\n    }\n    return false;\n  }\n\n  private fillDriversLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.address1) && field.id === \"address\") {\n      cipher.identity.address1 = fieldValue;\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.licenseNumber) && field.id === \"number\") {\n      cipher.identity.licenseNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillOutdoorLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillMembership(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"org_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"phone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillPassport(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO Iso\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"issuing_country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.passportNumber) && field.id === \"number\") {\n      cipher.identity.passportNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillRewardsProgram(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillSSN(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.ssn) && field.id === \"number\") {\n      cipher.identity.ssn = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private parsePasswordHistory(historyItems: PasswordHistoryEntity[], cipher: CipherView) {\n    if (historyItems == null || historyItems.length === 0) {\n      return;\n    }\n\n    const maxSize = historyItems.length > 5 ? 5 : historyItems.length;\n    cipher.passwordHistory = historyItems\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nexport class CipherImportContext {\n  lowerProperty: string;\n  constructor(public importRecord: any, public property: string, public cipher: CipherView) {\n    this.lowerProperty = property.toLowerCase();\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\n\nexport const IgnoredProperties = [\n  \"ainfo\",\n  \"autosubmit\",\n  \"notesplain\",\n  \"ps\",\n  \"scope\",\n  \"tags\",\n  \"title\",\n  \"uuid\",\n  \"notes\",\n];\n\nexport abstract class OnePasswordCsvImporter extends BaseImporter implements Importer {\n  protected loginPropertyParsers = [\n    this.setLoginUsername,\n    this.setLoginPassword,\n    this.setLoginUris,\n  ];\n  protected creditCardPropertyParsers = [\n    this.setCreditCardNumber,\n    this.setCreditCardVerification,\n    this.setCreditCardCardholderName,\n    this.setCreditCardExpiry,\n  ];\n  protected identityPropertyParsers = [\n    this.setIdentityFirstName,\n    this.setIdentityInitial,\n    this.setIdentityLastName,\n    this.setIdentityUserName,\n    this.setIdentityEmail,\n    this.setIdentityPhone,\n    this.setIdentityCompany,\n  ];\n\n  abstract setCipherType(value: any, cipher: CipherView): void;\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true, {\n      quoteChar: '\"',\n      escapeChar: \"\\\\\",\n    });\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(this.getProp(value, \"title\"))) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.getProp(value, \"title\"), \"--\");\n\n      this.setNotes(value, cipher);\n\n      this.setCipherType(value, cipher);\n\n      let altUsername: string = null;\n      for (const property in value) {\n        // eslint-disable-next-line\n        if (!value.hasOwnProperty(property) || this.isNullOrWhitespace(value[property])) {\n          continue;\n        }\n\n        const context = new CipherImportContext(value, property, cipher);\n        if (cipher.type === CipherType.Login && this.setKnownLoginValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Card && this.setKnownCreditCardValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Identity && this.setKnownIdentityValue(context)) {\n          continue;\n        }\n\n        altUsername = this.setUnknownValue(context, altUsername);\n      }\n\n      if (\n        cipher.type === CipherType.Login &&\n        !this.isNullOrWhitespace(altUsername) &&\n        this.isNullOrWhitespace(cipher.login.username) &&\n        altUsername.indexOf(\"://\") === -1\n      ) {\n        cipher.login.username = altUsername;\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  protected getProp(obj: any, name: string): any {\n    const lowerObj = Object.entries(obj).reduce((agg: any, entry: [string, any]) => {\n      agg[entry[0].toLowerCase()] = entry[1];\n      return agg;\n    }, {});\n    return lowerObj[name.toLowerCase()];\n  }\n\n  protected getPropByRegexp(obj: any, regexp: RegExp): any {\n    const matchingKeys = Object.keys(obj).reduce((agg: string[], key: string) => {\n      if (key.match(regexp)) {\n        agg.push(key);\n      }\n      return agg;\n    }, []);\n    if (matchingKeys.length === 0) {\n      return null;\n    } else {\n      return obj[matchingKeys[0]];\n    }\n  }\n\n  protected getPropIncluding(obj: any, name: string): any {\n    const includesMap = Object.keys(obj).reduce((agg: string[], entry: string) => {\n      if (entry.toLowerCase().includes(name.toLowerCase())) {\n        agg.push(entry);\n      }\n      return agg;\n    }, []);\n    if (includesMap.length === 0) {\n      return null;\n    } else {\n      return obj[includesMap[0]];\n    }\n  }\n\n  protected setNotes(importRecord: any, cipher: CipherView) {\n    cipher.notes =\n      this.getValueOrDefault(this.getProp(importRecord, \"notesPlain\"), \"\") +\n      \"\\n\" +\n      this.getValueOrDefault(this.getProp(importRecord, \"notes\"), \"\") +\n      \"\\n\";\n    cipher.notes.trim();\n  }\n\n  protected setKnownLoginValue(context: CipherImportContext): boolean {\n    return this.loginPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownCreditCardValue(context: CipherImportContext): boolean {\n    return this.creditCardPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownIdentityValue(context: CipherImportContext): boolean {\n    return this.identityPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setUnknownValue(context: CipherImportContext, altUsername: string): string {\n    if (\n      IgnoredProperties.indexOf(context.lowerProperty) === -1 &&\n      !context.lowerProperty.startsWith(\"section:\") &&\n      !context.lowerProperty.startsWith(\"section \")\n    ) {\n      if (altUsername == null && context.lowerProperty === \"email\") {\n        return context.importRecord[context.property];\n      } else if (\n        context.lowerProperty === \"created date\" ||\n        context.lowerProperty === \"modified date\"\n      ) {\n        const readableDate = new Date(\n          parseInt(context.importRecord[context.property], 10) * 1000\n        ).toUTCString();\n        this.processKvp(context.cipher, \"1Password \" + context.property, readableDate);\n        return null;\n      }\n      if (\n        context.lowerProperty.includes(\"password\") ||\n        context.lowerProperty.includes(\"key\") ||\n        context.lowerProperty.includes(\"secret\")\n      ) {\n        this.processKvp(\n          context.cipher,\n          context.property,\n          context.importRecord[context.property],\n          FieldType.Hidden\n        );\n      } else {\n        this.processKvp(context.cipher, context.property, context.importRecord[context.property]);\n      }\n    }\n    return null;\n  }\n\n  protected setIdentityFirstName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.firstName) &&\n      context.lowerProperty.includes(\"first name\")\n    ) {\n      context.cipher.identity.firstName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityInitial(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.middleName) &&\n      context.lowerProperty.includes(\"initial\")\n    ) {\n      context.cipher.identity.middleName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityLastName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.lastName) &&\n      context.lowerProperty.includes(\"last name\")\n    ) {\n      context.cipher.identity.lastName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityUserName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.username) &&\n      context.lowerProperty.includes(\"username\")\n    ) {\n      context.cipher.identity.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityCompany(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.company) &&\n      context.lowerProperty.includes(\"company\")\n    ) {\n      context.cipher.identity.company = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityPhone(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.phone) &&\n      context.lowerProperty.includes(\"default phone\")\n    ) {\n      context.cipher.identity.phone = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityEmail(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.email) &&\n      context.lowerProperty.includes(\"email\")\n    ) {\n      context.cipher.identity.email = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardNumber(context: CipherImportContext): boolean {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.number) &&\n      context.lowerProperty.includes(\"number\")\n    ) {\n      context.cipher.card.number = context.importRecord[context.property];\n      context.cipher.card.brand = CardView.getCardBrandByPatterns(context.cipher.card.number);\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardVerification(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.code) &&\n      context.lowerProperty.includes(\"verification number\")\n    ) {\n      context.cipher.card.code = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardCardholderName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.cardholderName) &&\n      context.lowerProperty.includes(\"cardholder name\")\n    ) {\n      context.cipher.card.cardholderName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\") &&\n      context.importRecord[context.property].length === 7\n    ) {\n      context.cipher.card.expMonth = (context.importRecord[context.property] as string).substr(\n        0,\n        2\n      );\n      if (context.cipher.card.expMonth[0] === \"0\") {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = (context.importRecord[context.property] as string).substr(3, 4);\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginPassword(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.password) &&\n      context.lowerProperty === \"password\"\n    ) {\n      context.cipher.login.password = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUsername(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.username) &&\n      context.lowerProperty === \"username\"\n    ) {\n      context.cipher.login.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUris(context: CipherImportContext) {\n    if (\n      (context.cipher.login.uris == null || context.cipher.login.uris.length === 0) &&\n      context.lowerProperty === \"urls\"\n    ) {\n      const urls = context.importRecord[context.property].split(this.newLineRegex);\n      context.cipher.login.uris = this.makeUriArray(urls);\n      return true;\n    } else if (context.lowerProperty === \"url\") {\n      if (context.cipher.login.uris == null) {\n        context.cipher.login.uris = [];\n      }\n      context.cipher.login.uris.concat(this.makeUriArray(context.importRecord[context.property]));\n      return true;\n    }\n    return false;\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\n\nimport { Importer } from \"../importer\";\n\nimport { IgnoredProperties, OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordMacCsvImporter extends OnePasswordCsvImporter implements Importer {\n  setCipherType(value: any, cipher: CipherView) {\n    const onePassType = this.getValueOrDefault(this.getProp(value, \"type\"), \"Login\");\n    switch (onePassType) {\n      case \"Credit Card\":\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Identity\":\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Login\":\n      case \"Secure Note\":\n        IgnoredProperties.push(\"type\");\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\nimport { OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordWinCsvImporter extends OnePasswordCsvImporter implements Importer {\n  constructor() {\n    super();\n    this.identityPropertyParsers.push(this.setIdentityAddress);\n  }\n\n  setCipherType(value: any, cipher: CipherView) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: number/i)) &&\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: expiry date/i))\n    ) {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    }\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: first name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: initial/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: last name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /internet \\d+: email/i))\n    ) {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    }\n  }\n\n  setIdentityAddress(context: CipherImportContext) {\n    if (context.lowerProperty.match(/address \\d+: address/i)) {\n      this.processKvp(context.cipher, \"address\", context.importRecord[context.property]);\n      return true;\n    }\n    return false;\n  }\n\n  setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\")\n    ) {\n      const expSplit = (context.importRecord[context.property] as string).split(\"/\");\n      context.cipher.card.expMonth = expSplit[0];\n      if (context.cipher.card.expMonth[0] === \"0\" && context.cipher.card.expMonth.length === 2) {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = expSplit[2].length > 4 ? expSplit[2].substr(0, 4) : expSplit[2];\n      return true;\n    }\n    return false;\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PadlockCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let headers: string[] = null;\n    results.forEach((value) => {\n      if (headers == null) {\n        headers = value.map((v: string) => v);\n        return;\n      }\n\n      if (value.length < 2 || value.length !== headers.length) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value[1])) {\n        if (this.organization) {\n          const tags = (value[1] as string).split(\",\");\n          tags.forEach((tag) => {\n            tag = tag.trim();\n            let addCollection = true;\n            let collectionIndex = result.collections.length;\n\n            for (let i = 0; i < result.collections.length; i++) {\n              if (result.collections[i].name === tag) {\n                addCollection = false;\n                collectionIndex = i;\n                break;\n              }\n            }\n\n            if (addCollection) {\n              const collection = new CollectionView();\n              collection.name = tag;\n              result.collections.push(collection);\n            }\n\n            result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n          });\n        } else {\n          const tags = (value[1] as string).split(\",\");\n          const tag = tags.length > 0 ? tags[0].trim() : null;\n          this.processFolder(result, tag);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      for (let i = 2; i < value.length; i++) {\n        const header = headers[i].trim().toLowerCase();\n        if (this.isNullOrWhitespace(value[i]) || this.isNullOrWhitespace(header)) {\n          continue;\n        }\n\n        if (this.usernameFieldNames.indexOf(header) > -1) {\n          cipher.login.username = value[i];\n        } else if (this.passwordFieldNames.indexOf(header) > -1) {\n          cipher.login.password = value[i];\n        } else if (this.uriFieldNames.indexOf(header) > -1) {\n          cipher.login.uris = this.makeUriArray(value[i]);\n        } else {\n          this.processKvp(cipher, headers[i], value[i]);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassKeepCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValue(\"category\", value));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValue(\"description\", value);\n      cipher.name = this.getValueOrDefault(this.getValue(\"title\", value), \"--\");\n      cipher.login.username = this.getValue(\"username\", value);\n      cipher.login.password = this.getValue(\"password\", value);\n      cipher.login.uris = this.makeUriArray(this.getValue(\"site\", value));\n      this.processKvp(cipher, \"Password 2\", this.getValue(\"password2\", value));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private getValue(key: string, value: any) {\n    return this.getValueOrDefault(value[key], this.getValueOrDefault(value[\" \" + key]));\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { PasskyJsonExport } from \"./passky-json-types\";\n\nexport class PasskyJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const passkyExport: PasskyJsonExport = JSON.parse(data);\n    if (\n      passkyExport == null ||\n      passkyExport.passwords == null ||\n      passkyExport.passwords.length === 0\n    ) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (passkyExport.encrypted == true) {\n      result.success = false;\n      result.errorMessage = \"Unable to import an encrypted passky backup.\";\n      return Promise.resolve(result);\n    }\n\n    passkyExport.passwords.forEach((record) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = record.website;\n      cipher.login.username = record.username;\n      cipher.login.password = record.password;\n\n      cipher.login.uris = this.makeUriArray(record.website);\n      cipher.notes = record.message;\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassmanJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((credential: any) => {\n      if (credential.tags != null && credential.tags.length > 0) {\n        const folderName = credential.tags[0].text;\n        this.processFolder(result, folderName);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = credential.label;\n\n      cipher.login.username = this.getValueOrDefault(credential.username);\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.url);\n      cipher.notes += this.getValueOrDefault(credential.description, \"\");\n      if (credential.otp != null) {\n        cipher.login.totp = this.getValueOrDefault(credential.otp.secret);\n      }\n\n      if (credential.custom_fields != null) {\n        credential.custom_fields.forEach((customField: any) => {\n          switch (customField.field_type) {\n            case \"text\":\n            case \"password\":\n              this.processKvp(cipher, customField.label, customField.value);\n              break;\n          }\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasspackCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const tagsJson = !this.isNullOrWhitespace(value.Tags) ? JSON.parse(value.Tags) : null;\n      const tags: string[] =\n        tagsJson != null && tagsJson.tags != null && tagsJson.tags.length > 0\n          ? tagsJson.tags\n              .map((tagJson: string) => {\n                try {\n                  const t = JSON.parse(tagJson);\n                  return this.getValueOrDefault(t.tag);\n                } catch {\n                  // Ignore error\n                }\n                return null;\n              })\n              .filter((t: string) => !this.isNullOrWhitespace(t))\n          : null;\n\n      if (this.organization && tags != null && tags.length > 0) {\n        tags.forEach((tag) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === tag) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = tag;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization && tags != null && tags.length > 0) {\n        this.processFolder(result, tags[0]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes, \"\");\n      cipher.notes += \"\\n\\n\" + this.getValueOrDefault(value[\"Shared Notes\"], \"\") + \"\\n\";\n      cipher.name = this.getValueOrDefault(value[\"Entry Name\"], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User ID\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n        value.__parsed_extra.forEach((extra: string) => {\n          if (!this.isNullOrWhitespace(extra)) {\n            cipher.notes += \"\\n\" + extra;\n          }\n        });\n      }\n\n      const fieldsJson = !this.isNullOrWhitespace(value[\"Extra Fields\"])\n        ? JSON.parse(value[\"Extra Fields\"])\n        : null;\n      const fields =\n        fieldsJson != null && fieldsJson.extraFields != null && fieldsJson.extraFields.length > 0\n          ? fieldsJson.extraFields.map((fieldJson: string) => {\n              try {\n                return JSON.parse(fieldJson);\n              } catch {\n                // Ignore error\n              }\n              return null;\n            })\n          : null;\n      if (fields != null) {\n        fields.forEach((f: any) => {\n          if (f != null) {\n            this.processKvp(cipher, f.name, f.data);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordAgentCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let newVersion = true;\n    results.forEach((value) => {\n      if (value.length !== 5 && value.length < 9) {\n        return;\n      }\n      const altFormat = value.length === 10 && value[0] === \"0\";\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[altFormat ? 1 : 0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[altFormat ? 2 : 1]);\n      cipher.login.password = this.getValueOrDefault(value[altFormat ? 3 : 2]);\n      if (value.length === 5) {\n        newVersion = false;\n        cipher.notes = this.getValueOrDefault(value[4]);\n        cipher.login.uris = this.makeUriArray(value[3]);\n      } else {\n        const folder = this.getValueOrDefault(value[altFormat ? 9 : 8], \"(None)\");\n        let folderName = folder !== \"(None)\" ? folder.split(\"\\\\\").join(\"/\") : null;\n        if (folderName != null) {\n          folderName = folder.split(\" > \").join(\"/\");\n          folderName = folder.split(\">\").join(\"/\");\n        }\n        this.processFolder(result, folderName);\n        cipher.notes = this.getValueOrDefault(value[altFormat ? 5 : 3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (newVersion && this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordBossJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.items == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    results.folders.forEach((value: any) => {\n      foldersMap.set(value.id, value.name);\n    });\n    const foldersIndexMap = new Map<string, number>();\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((value: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.login.uris = this.makeUriArray(value.login_url);\n\n      if (value.folder != null && foldersIndexMap.has(value.folder)) {\n        result.folderRelationships.push([result.ciphers.length, foldersIndexMap.get(value.folder)]);\n      }\n\n      if (value.identifiers == null) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value.identifiers.notes)) {\n        cipher.notes = value.identifiers.notes.split(\"\\\\r\\\\n\").join(\"\\n\").split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (value.type === \"CreditCard\") {\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n      }\n\n      for (const property in value.identifiers) {\n        // eslint-disable-next-line\n        if (!value.identifiers.hasOwnProperty(property)) {\n          continue;\n        }\n        const valObj = value.identifiers[property];\n        const val = valObj != null ? valObj.toString() : null;\n        if (\n          this.isNullOrWhitespace(val) ||\n          property === \"notes\" ||\n          property === \"ignoreItemInSecurityScore\"\n        ) {\n          continue;\n        }\n\n        if (property === \"custom_fields\") {\n          valObj.forEach((cf: any) => {\n            this.processKvp(cipher, cf.name, cf.value);\n          });\n          continue;\n        }\n\n        if (cipher.type === CipherType.Card) {\n          if (property === \"cardNumber\") {\n            cipher.card.number = val;\n            cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n            continue;\n          } else if (property === \"nameOnCard\") {\n            cipher.card.cardholderName = val;\n            continue;\n          } else if (property === \"security_code\") {\n            cipher.card.code = val;\n            continue;\n          } else if (property === \"expires\") {\n            try {\n              const expDate = new Date(val);\n              cipher.card.expYear = expDate.getFullYear().toString();\n              cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n            } catch {\n              // Ignore error\n            }\n            continue;\n          } else if (property === \"cardType\") {\n            continue;\n          }\n        } else {\n          if (\n            (property === \"username\" || property === \"email\") &&\n            this.isNullOrWhitespace(cipher.login.username)\n          ) {\n            cipher.login.username = val;\n            continue;\n          } else if (property === \"password\") {\n            cipher.login.password = val;\n            continue;\n          } else if (property === \"totp\") {\n            cipher.login.totp = val;\n            continue;\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(property) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n            continue;\n          }\n        }\n\n        this.processKvp(cipher, property, val);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordDragonXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const records = doc.querySelectorAll(\"PasswordManager > record\");\n    Array.from(records).forEach((record) => {\n      const category = this.querySelectorDirectChild(record, \"Category\");\n      const categoryText =\n        category != null &&\n        !this.isNullOrWhitespace(category.textContent) &&\n        category.textContent !== \"Unfiled\"\n          ? category.textContent\n          : null;\n      this.processFolder(result, categoryText);\n\n      const accountName = this.querySelectorDirectChild(record, \"Account-Name\");\n      const userId = this.querySelectorDirectChild(record, \"User-Id\");\n      const password = this.querySelectorDirectChild(record, \"Password\");\n      const url = this.querySelectorDirectChild(record, \"URL\");\n      const notes = this.querySelectorDirectChild(record, \"Notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name =\n        accountName != null ? this.getValueOrDefault(accountName.textContent, \"--\") : \"--\";\n      cipher.notes = notes != null ? this.getValueOrDefault(notes.textContent) : \"\";\n      cipher.login.username = userId != null ? this.getValueOrDefault(userId.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      const attributes: string[] = [];\n      for (let i = 1; i <= 10; i++) {\n        attributes.push(\"Attribute-\" + i);\n      }\n\n      this.querySelectorAllDirectChild(record, attributes.join(\",\")).forEach((attr) => {\n        if (this.isNullOrWhitespace(attr.textContent) || attr.textContent === \"null\") {\n          return;\n        }\n        this.processKvp(cipher, attr.tagName, attr.textContent);\n      });\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordSafeXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const passwordSafe = doc.querySelector(\"passwordsafe\");\n    if (passwordSafe == null) {\n      result.errorMessage = \"Missing `passwordsafe` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const notesDelimiter = passwordSafe.getAttribute(\"delimiter\");\n    const entries = doc.querySelectorAll(\"passwordsafe > entry\");\n    Array.from(entries).forEach((entry) => {\n      const group = this.querySelectorDirectChild(entry, \"group\");\n      const groupText =\n        group != null && !this.isNullOrWhitespace(group.textContent)\n          ? group.textContent.split(\".\").join(\"/\")\n          : null;\n      this.processFolder(result, groupText);\n\n      const title = this.querySelectorDirectChild(entry, \"title\");\n      const username = this.querySelectorDirectChild(entry, \"username\");\n      const email = this.querySelectorDirectChild(entry, \"email\");\n      const password = this.querySelectorDirectChild(entry, \"password\");\n      const url = this.querySelectorDirectChild(entry, \"url\");\n      const notes = this.querySelectorDirectChild(entry, \"notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name = title != null ? this.getValueOrDefault(title.textContent, \"--\") : \"--\";\n      cipher.notes =\n        notes != null\n          ? this.getValueOrDefault(notes.textContent, \"\").split(notesDelimiter).join(\"\\n\")\n          : null;\n      cipher.login.username =\n        username != null ? this.getValueOrDefault(username.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      if (this.isNullOrWhitespace(cipher.login.username) && email != null) {\n        cipher.login.username = this.getValueOrDefault(email.textContent);\n      } else if (email != null && !this.isNullOrWhitespace(email.textContent)) {\n        cipher.notes = this.isNullOrWhitespace(cipher.notes)\n          ? \"Email: \" + email.textContent\n          : cipher.notes + \"\\n\" + \"Email: \" + email.textContent;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordWalletTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 1) {\n        return;\n      }\n      if (value.length > 5) {\n        this.processFolder(result, value[5]);\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      if (value.length > 4) {\n        cipher.notes = this.getValueOrDefault(value[4], \"\").split(\"¬\").join(\"\\n\");\n      }\n      if (value.length > 2) {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n      }\n      if (value.length > 3) {\n        cipher.login.password = this.getValueOrDefault(value[3]);\n      }\n      if (value.length > 1) {\n        cipher.login.uris = this.makeUriArray(value[1]);\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","export type ProtonPassJsonFile = {\n  version: string;\n  userId: string;\n  encrypted: boolean;\n  vaults: Record<string, ProtonPassVault>;\n};\n\nexport type ProtonPassVault = {\n  name: string;\n  description: string;\n  display: {\n    color: number;\n    icon: number;\n  };\n  items: ProtonPassItem[];\n};\n\nexport type ProtonPassItem = {\n  itemId: string;\n  shareId: string;\n  data: ProtonPassItemData;\n  state: ProtonPassItemState;\n  aliasEmail: string | null;\n  contentFormatVersion: number;\n  createTime: number;\n  modifyTime: number;\n};\n\nexport enum ProtonPassItemState {\n  ACTIVE = 1,\n  TRASHED = 2,\n}\n\nexport type ProtonPassItemData = {\n  metadata: ProtonPassItemMetadata;\n  extraFields: ProtonPassItemExtraField[];\n  type: \"login\" | \"alias\" | \"creditCard\" | \"note\";\n  content: ProtonPassLoginItemContent | ProtonPassCreditCardItemContent;\n};\n\nexport type ProtonPassItemMetadata = {\n  name: string;\n  note: string;\n  itemUuid: string;\n};\n\nexport type ProtonPassItemExtraField = {\n  fieldName: string;\n  type: string;\n  data: ProtonPassItemExtraFieldData;\n};\n\nexport type ProtonPassItemExtraFieldData = {\n  content?: string;\n  totpUri?: string;\n};\n\nexport type ProtonPassLoginItemContent = {\n  username?: string;\n  password?: string;\n  urls?: string[];\n  totpUri?: string;\n};\n\nexport type ProtonPassCreditCardItemContent = {\n  cardholderName?: string;\n  cardType?: number;\n  number?: string;\n  verificationNumber?: string;\n  expirationDate?: string;\n  pin?: string;\n};\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  ProtonPassCreditCardItemContent,\n  ProtonPassItemState,\n  ProtonPassJsonFile,\n  ProtonPassLoginItemContent,\n} from \"./types/protonpass-json-type\";\n\nexport class ProtonPassJsonImporter extends BaseImporter implements Importer {\n  constructor(private i18nService: I18nService) {\n    super();\n  }\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: ProtonPassJsonFile = JSON.parse(data);\n    if (results == null || results.vaults == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results.encrypted) {\n      result.success = false;\n      result.errorMessage = this.i18nService.t(\"unsupportedEncryptedImport\");\n      return Promise.resolve(result);\n    }\n\n    for (const [, vault] of Object.entries(results.vaults)) {\n      for (const item of vault.items) {\n        if (item.state == ProtonPassItemState.TRASHED) {\n          continue;\n        }\n        this.processFolder(result, vault.name);\n\n        const cipher = this.initLoginCipher();\n        cipher.name = item.data.metadata.name;\n        cipher.notes = item.data.metadata.note;\n\n        switch (item.data.type) {\n          case \"login\": {\n            const loginContent = item.data.content as ProtonPassLoginItemContent;\n            cipher.login.uris = this.makeUriArray(loginContent.urls);\n            cipher.login.username = loginContent.username;\n            cipher.login.password = loginContent.password;\n            if (loginContent.totpUri != \"\") {\n              cipher.login.totp = new URL(loginContent.totpUri).searchParams.get(\"secret\");\n            }\n            for (const extraField of item.data.extraFields) {\n              this.processKvp(\n                cipher,\n                extraField.fieldName,\n                extraField.type == \"totp\" ? extraField.data.totpUri : extraField.data.content,\n                extraField.type == \"text\" ? FieldType.Text : FieldType.Hidden\n              );\n            }\n            break;\n          }\n          case \"note\":\n            cipher.type = CipherType.SecureNote;\n            cipher.secureNote = new SecureNoteView();\n            cipher.secureNote.type = SecureNoteType.Generic;\n            break;\n          case \"creditCard\": {\n            const creditCardContent = item.data.content as ProtonPassCreditCardItemContent;\n            cipher.type = CipherType.Card;\n            cipher.card = new CardView();\n            cipher.card.cardholderName = creditCardContent.cardholderName;\n            cipher.card.number = creditCardContent.number;\n            cipher.card.brand = CardView.getCardBrandByPatterns(creditCardContent.number);\n            cipher.card.code = creditCardContent.verificationNumber;\n\n            if (!this.isNullOrWhitespace(creditCardContent.expirationDate)) {\n              cipher.card.expMonth = creditCardContent.expirationDate.substring(0, 2);\n              cipher.card.expMonth = cipher.card.expMonth.replace(/^0+/, \"\");\n              cipher.card.expYear = creditCardContent.expirationDate.substring(2, 6);\n            }\n\n            if (!this.isNullOrWhitespace(creditCardContent.pin)) {\n              this.processKvp(cipher, \"PIN\", creditCardContent.pin, FieldType.Hidden);\n            }\n\n            break;\n          }\n        }\n\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      }\n    }\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  AppPasswordEntry,\n  BookmarkEntry,\n  EnvironmentVariablesEntry,\n  FoldersEntity,\n  GPGEntry,\n  NotesEntry,\n  PsonoItemTypes,\n  PsonoJsonExport,\n  TOTPEntry,\n  WebsitePasswordEntry,\n} from \"./psono-json-types\";\n\nexport class PsonoJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const psonoExport: PsonoJsonExport = JSON.parse(data);\n    if (psonoExport == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    this.parseFolders(result, psonoExport.folders);\n    this.handleItemParsing(result, psonoExport.items);\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFolders(result: ImportResult, folders: FoldersEntity[]) {\n    if (folders == null || folders.length === 0) {\n      return;\n    }\n\n    folders.forEach((folder) => {\n      if (folder.items == null || folder.items.length == 0) {\n        return;\n      }\n\n      this.processFolder(result, folder.name);\n\n      this.handleItemParsing(result, folder.items);\n    });\n  }\n\n  private handleItemParsing(result: ImportResult, items?: PsonoItemTypes[]) {\n    if (items == null || items.length === 0) {\n      return;\n    }\n\n    items.forEach((record) => {\n      const cipher = this.parsePsonoItem(record);\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n  }\n\n  private parsePsonoItem(item: PsonoItemTypes): CipherView {\n    const cipher = this.initLoginCipher();\n\n    switch (item.type) {\n      case \"website_password\":\n        this.parseWebsiteLogins(item, cipher);\n        break;\n      case \"application_password\":\n        this.parseApplicationPasswords(item, cipher);\n        break;\n      case \"environment_variables\":\n        this.parseEnvironmentVariables(item, cipher);\n        break;\n      case \"totp\":\n        this.parseTOTP(item, cipher);\n        break;\n      case \"bookmark\":\n        this.parseBookmarks(item, cipher);\n        break;\n      // Skipping this until we can save GPG into notes/custom fields\n      // case \"mail_gpg_own_key\":\n      //   this.parseGPG(item, cipher);\n      //   break;\n      case \"note\":\n        this.parseNotes(item, cipher);\n        break;\n      default:\n        break;\n    }\n\n    return cipher;\n  }\n\n  readonly WEBSITE_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"website_password_title\",\n    \"website_password_notes\",\n    \"website_password_username\",\n    \"website_password_password\",\n    \"website_password_url\",\n    \"autosubmit\",\n    \"website_password_auto_submit\",\n    \"urlfilter\",\n    \"website_password_url_filter\",\n  ]);\n  private parseWebsiteLogins(entry: WebsitePasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"website_password\") {\n      return;\n    }\n\n    cipher.name = entry.website_password_title;\n    cipher.notes = entry.website_password_notes;\n\n    cipher.login.username = entry.website_password_username;\n    cipher.login.password = entry.website_password_password;\n\n    cipher.login.uris = this.makeUriArray(entry.website_password_url);\n\n    this.processKvp(\n      cipher,\n      \"website_password_auto_submit\",\n      entry.website_password_auto_submit?.toString(),\n      FieldType.Boolean\n    );\n\n    this.processKvp(cipher, \"website_password_url_filter\", entry.website_password_url_filter);\n\n    this.importUnmappedFields(cipher, entry, this.WEBSITE_mappedValues);\n  }\n\n  readonly APP_PWD_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"application_password_title\",\n    \"application_password_notes\",\n    \"application_password_username\",\n    \"application_password_password\",\n  ]);\n  private parseApplicationPasswords(entry: AppPasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"application_password\") {\n      return;\n    }\n\n    cipher.name = entry.application_password_title;\n    cipher.notes = entry.application_password_notes;\n\n    cipher.login.username = entry.application_password_username;\n    cipher.login.password = entry.application_password_password;\n\n    this.importUnmappedFields(cipher, entry, this.APP_PWD_mappedValues);\n  }\n\n  readonly BOOKMARK_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"bookmark_title\",\n    \"bookmark_notes\",\n    \"bookmark_url\",\n  ]);\n  private parseBookmarks(entry: BookmarkEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"bookmark\") {\n      return;\n    }\n\n    cipher.name = entry.bookmark_title;\n    cipher.notes = entry.bookmark_notes;\n\n    cipher.login.uris = this.makeUriArray(entry.bookmark_url);\n\n    this.importUnmappedFields(cipher, entry, this.BOOKMARK_mappedValues);\n  }\n\n  readonly NOTES_mappedValues = new Set([\"type\", \"name\", \"note_title\", \"note_notes\"]);\n  private parseNotes(entry: NotesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"note\") {\n      return;\n    }\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.note_title;\n    cipher.notes = entry.note_notes;\n\n    this.importUnmappedFields(cipher, entry, this.NOTES_mappedValues);\n  }\n\n  readonly TOTP_mappedValues = new Set([\"type\", \"name\", \"totp_title\", \"totp_notes\", \"totp_code\"]);\n  private parseTOTP(entry: TOTPEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"totp\") {\n      return;\n    }\n\n    cipher.name = entry.totp_title;\n    cipher.notes = entry.totp_notes;\n\n    cipher.login.totp = entry.totp_code;\n\n    this.importUnmappedFields(cipher, entry, this.TOTP_mappedValues);\n  }\n\n  readonly ENV_VARIABLES_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"environment_variables_title\",\n    \"environment_variables_notes\",\n    \"environment_variables_variables\",\n  ]);\n  private parseEnvironmentVariables(entry: EnvironmentVariablesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"environment_variables\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.environment_variables_title;\n    cipher.notes = entry.environment_variables_notes;\n\n    entry.environment_variables_variables.forEach((KvPair) => {\n      this.processKvp(cipher, KvPair.key, KvPair.value);\n    });\n\n    this.importUnmappedFields(cipher, entry, this.ENV_VARIABLES_mappedValues);\n  }\n\n  readonly GPG_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"mail_gpg_own_key_title\",\n    \"mail_gpg_own_key_public\",\n    \"mail_gpg_own_key_name\",\n    \"mail_gpg_own_key_email\",\n    \"mail_gpg_own_key_private\",\n  ]);\n  private parseGPG(entry: GPGEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"mail_gpg_own_key\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.mail_gpg_own_key_title;\n    cipher.notes = entry.mail_gpg_own_key_public;\n\n    this.processKvp(cipher, \"mail_gpg_own_key_name\", entry.mail_gpg_own_key_name);\n    this.processKvp(cipher, \"mail_gpg_own_key_email\", entry.mail_gpg_own_key_email);\n    this.processKvp(\n      cipher,\n      \"mail_gpg_own_key_private\",\n      entry.mail_gpg_own_key_private,\n      FieldType.Hidden\n    );\n\n    this.importUnmappedFields(cipher, entry, this.GPG_mappedValues);\n  }\n\n  private importUnmappedFields(\n    cipher: CipherView,\n    entry: PsonoItemTypes,\n    mappedValues: Set<string>\n  ) {\n    const unmappedFields = Object.keys(entry).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = entry as any;\n      this.processKvp(cipher, key, item[key].toString());\n    });\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RememBearCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.trash === \"true\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.notes);\n      if (value.type === \"LoginItem\") {\n        cipher.login.uris = this.makeUriArray(value.website);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      } else if (value.type === \"CreditCardItem\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.verification);\n\n        try {\n          const expMonth = this.getValueOrDefault(value.expiryMonth);\n          if (expMonth != null) {\n            const expMonthNumber = parseInt(expMonth, null);\n            if (expMonthNumber != null && expMonthNumber >= 1 && expMonthNumber <= 12) {\n              cipher.card.expMonth = expMonthNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n        try {\n          const expYear = this.getValueOrDefault(value.expiryYear);\n          if (expYear != null) {\n            const expYearNumber = parseInt(expYear, null);\n            if (expYearNumber != null) {\n              cipher.card.expYear = expYearNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n\n        const pin = this.getValueOrDefault(value.pin);\n        if (pin != null) {\n          this.processKvp(cipher, \"PIN\", pin);\n        }\n        const zip = this.getValueOrDefault(value.zipCode);\n        if (zip != null) {\n          this.processKvp(cipher, \"Zip Code\", zip);\n        }\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RoboFormCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let i = 1;\n    results.forEach((value) => {\n      const folder =\n        !this.isNullOrWhitespace(value.Folder) && value.Folder.startsWith(\"/\")\n          ? value.Folder.replace(\"/\", \"\")\n          : value.Folder;\n      const folderName = !this.isNullOrWhitespace(folder) ? folder : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Login);\n      cipher.login.password = this.getValueOrDefault(value.Pwd);\n      cipher.login.uris = this.makeUriArray(value.Url);\n\n      if (!this.isNullOrWhitespace(value.Rf_fields)) {\n        let fields: string[] = [value.Rf_fields];\n        if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n          fields = fields.concat(value.__parsed_extra);\n        }\n        fields.forEach((field: string) => {\n          const parts = field.split(\":\");\n          if (parts.length < 3) {\n            return;\n          }\n          const key = parts[0] === \"-no-name-\" ? null : parts[0];\n          const val = parts.length === 4 && parts[2] === \"rck\" ? parts[1] : parts[2];\n          this.processKvp(cipher, key, val);\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n\n      if (\n        i === results.length &&\n        cipher.name === \"--\" &&\n        this.isNullOrWhitespace(cipher.login.password)\n      ) {\n        return;\n      }\n\n      result.ciphers.push(cipher);\n      i++;\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafariCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url ?? value.URL);\n      cipher.login.totp = this.getValueOrDefault(value.OTPAuth);\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafeInCloudXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const db = doc.querySelector(\"database\");\n    if (db == null) {\n      result.errorMessage = \"Missing `database` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, number>();\n\n    Array.from(doc.querySelectorAll(\"database > label\")).forEach((labelEl) => {\n      const name = labelEl.getAttribute(\"name\");\n      const id = labelEl.getAttribute(\"id\");\n      if (!this.isNullOrWhitespace(name) && !this.isNullOrWhitespace(id)) {\n        foldersMap.set(id, result.folders.length);\n        const folder = new FolderView();\n        folder.name = name;\n        result.folders.push(folder);\n      }\n    });\n\n    Array.from(doc.querySelectorAll(\"database > card\")).forEach((cardEl) => {\n      if (cardEl.getAttribute(\"template\") === \"true\" || cardEl.getAttribute(\"deleted\") === \"true\") {\n        return;\n      }\n\n      const labelIdEl = this.querySelectorDirectChild(cardEl, \"label_id\");\n      if (labelIdEl != null) {\n        const labelId = labelIdEl.textContent;\n        if (!this.isNullOrWhitespace(labelId) && foldersMap.has(labelId)) {\n          result.folderRelationships.push([result.ciphers.length, foldersMap.get(labelId)]);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(cardEl.getAttribute(\"title\"), \"--\");\n\n      if (cardEl.getAttribute(\"star\") === \"true\") {\n        cipher.favorite = true;\n      }\n\n      const cardType = cardEl.getAttribute(\"type\");\n      if (cardType === \"note\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      } else {\n        Array.from(this.querySelectorAllDirectChild(cardEl, \"field\")).forEach((fieldEl) => {\n          const text = fieldEl.textContent;\n          if (this.isNullOrWhitespace(text)) {\n            return;\n          }\n          const name = fieldEl.getAttribute(\"name\");\n          const fieldType = this.getValueOrDefault(fieldEl.getAttribute(\"type\"), \"\").toLowerCase();\n          if (fieldType === \"login\") {\n            cipher.login.username = text;\n          } else if (fieldType === \"password\" || fieldType === \"secret\") {\n            // safeInCloud allows for more than one password. we just insert them here and find the one used as password later\n            this.processKvp(cipher, name, text, FieldType.Hidden);\n          } else if (fieldType === \"one_time_password\") {\n            cipher.login.totp = text;\n          } else if (fieldType === \"notes\") {\n            cipher.notes += text + \"\\n\";\n          } else if (fieldType === \"weblogin\" || fieldType === \"website\") {\n            cipher.login.uris = this.makeUriArray(text);\n          } else {\n            this.processKvp(cipher, name, text);\n          }\n        });\n      }\n\n      Array.from(this.querySelectorAllDirectChild(cardEl, \"notes\")).forEach((notesEl) => {\n        cipher.notes += notesEl.textContent + \"\\n\";\n      });\n\n      this.setPassword(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  // Choose a password from all passwords. Take one that has password in its name, or the first one if there is no such entry\n  // if its name is password, we can safely remove it form the fields. otherwise, it would maybe be best to keep it as a hidden field\n  setPassword(cipher: CipherView) {\n    const candidates = cipher.fields.filter((field) => field.type === FieldType.Hidden);\n    if (!candidates.length) {\n      return;\n    }\n\n    let choice: FieldView;\n    for (const field of candidates) {\n      if (this.passwordFieldNames.includes(field.name.toLowerCase())) {\n        choice = field;\n        cipher.fields = cipher.fields.filter((f) => f !== choice);\n        break;\n      }\n    }\n\n    if (!choice) {\n      choice = candidates[0];\n    }\n\n    cipher.login.password = choice.value;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SaferPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.nameFromUrl(value.url), \"--\");\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SecureSafeCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title);\n      cipher.notes = this.getValueOrDefault(value.Comment);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SplashIdCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      this.processFolder(result, this.getValueOrDefault(value[value.length - 1]));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 2], \"\");\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n\n      if (value[0] === \"Web Logins\" || value[0] === \"Servers\" || value[0] === \"Email Accounts\") {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n        cipher.login.password = this.getValueOrDefault(value[3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n        this.parseFieldsToNotes(cipher, 5, value);\n      } else {\n        this.parseFieldsToNotes(cipher, 2, value);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFieldsToNotes(cipher: CipherView, startIndex: number, value: any) {\n    // last 3 rows do not get parsed\n    for (let i = startIndex; i < value.length - 3; i++) {\n      if (this.isNullOrWhitespace(value[i])) {\n        continue;\n      }\n      cipher.notes += value[i] + \"\\n\";\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class StickyPasswordXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const loginNodes = doc.querySelectorAll(\"root > Database > Logins > Login\");\n    Array.from(loginNodes).forEach((loginNode) => {\n      const accountId = loginNode.getAttribute(\"ID\");\n      if (this.isNullOrWhitespace(accountId)) {\n        return;\n      }\n\n      const usernameText = loginNode.getAttribute(\"Name\");\n      const passwordText = loginNode.getAttribute(\"Password\");\n      let titleText: string = null;\n      let linkText: string = null;\n      let notesText: string = null;\n      let groupId: string = null;\n      let groupText: string = null;\n\n      const accountLogin = doc.querySelector(\n        \"root > Database > Accounts > Account > \" +\n          'LoginLinks > Login[SourceLoginID=\"' +\n          accountId +\n          '\"]'\n      );\n      if (accountLogin != null) {\n        const account = accountLogin.parentElement.parentElement;\n        if (account != null) {\n          titleText = account.getAttribute(\"Name\");\n          linkText = account.getAttribute(\"Link\");\n          groupId = account.getAttribute(\"ParentID\");\n          notesText = account.getAttribute(\"Comments\");\n          if (!this.isNullOrWhitespace(notesText)) {\n            notesText = notesText.split(\"/n\").join(\"\\n\");\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(groupId)) {\n        groupText = this.buildGroupText(doc, groupId, \"\");\n        this.processFolder(result, groupText);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(titleText, \"--\");\n      cipher.notes = this.getValueOrDefault(notesText);\n      cipher.login.username = this.getValueOrDefault(usernameText);\n      cipher.login.password = this.getValueOrDefault(passwordText);\n      cipher.login.uris = this.makeUriArray(linkText);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  buildGroupText(doc: Document, groupId: string, groupText: string): string {\n    const group = doc.querySelector('root > Database > Groups > Group[ID=\"' + groupId + '\"]');\n    if (group == null) {\n      return groupText;\n    }\n    if (!this.isNullOrWhitespace(groupText)) {\n      groupText = \"/\" + groupText;\n    }\n    groupText = group.getAttribute(\"Name\") + groupText;\n    return this.buildGroupText(doc, group.getAttribute(\"ParentID\"), groupText);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst PropertiesToIgnore = [\n  \"kind\",\n  \"autologin\",\n  \"favorite\",\n  \"hexcolor\",\n  \"protectedwithpassword\",\n  \"subdomainonly\",\n  \"type\",\n  \"tk_export_version\",\n  \"note\",\n  \"title\",\n  \"document_content\",\n];\n\nexport class TrueKeyCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.favorite, \"\").toLowerCase() === \"true\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.notes = this.getValueOrDefault(value.memo, \"\");\n      cipher.login.username = this.getValueOrDefault(value.login);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n\n      if (value.kind !== \"login\") {\n        cipher.name = this.getValueOrDefault(value.title, \"--\");\n        cipher.notes = this.getValueOrDefault(value.note, \"\");\n      }\n\n      if (value.kind === \"cc\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        if (!this.isNullOrWhitespace(value.expiryDate)) {\n          try {\n            const expDate = new Date(value.expiryDate);\n            cipher.card.expYear = expDate.getFullYear().toString();\n            cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n          } catch {\n            // Ignore error\n          }\n        }\n      } else if (value.kind !== \"login\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = this.getValueOrDefault(value.document_content, \"\");\n        }\n        for (const property in value) {\n          if (\n            value.hasOwnProperty(property) && // eslint-disable-line\n            PropertiesToIgnore.indexOf(property.toLowerCase()) < 0 &&\n            !this.isNullOrWhitespace(value[property])\n          ) {\n            this.processKvp(cipher, property, value[property]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class UpmCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length !== 5) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.notes = this.getValueOrDefault(value[4]);\n      cipher.login.username = this.getValueOrDefault(value[1]);\n      cipher.login.password = this.getValueOrDefault(value[2]);\n      cipher.login.uris = this.makeUriArray(value[3]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class YotiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User name\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ZohoVaultCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (\n        this.isNullOrWhitespace(value[\"Password Name\"]) &&\n        this.isNullOrWhitespace(value[\"Secret Name\"])\n      ) {\n        return;\n      }\n      this.processFolder(result, this.getValueOrDefault(value.ChamberName));\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite, \"0\") === \"1\";\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(\n        value[\"Password Name\"],\n        this.getValueOrDefault(value[\"Secret Name\"], \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(\n        this.getValueOrDefault(value[\"Password URL\"], this.getValueOrDefault(value[\"Secret URL\"]))\n      );\n      this.parseData(cipher, value.SecretData);\n      this.parseData(cipher, value.CustomData);\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseData(cipher: CipherView, data: string) {\n    if (this.isNullOrWhitespace(data)) {\n      return;\n    }\n    const dataLines = this.splitNewLine(data);\n    dataLines.forEach((line) => {\n      const delimPosition = line.indexOf(\":\");\n      if (delimPosition < 0) {\n        return;\n      }\n      const field = line.substring(0, delimPosition);\n      const value = line.length > delimPosition ? line.substring(delimPosition + 1) : null;\n      if (\n        this.isNullOrWhitespace(field) ||\n        this.isNullOrWhitespace(value) ||\n        field === \"SecretType\"\n      ) {\n        return;\n      }\n      const fieldLower = field.toLowerCase();\n      if (cipher.login.username == null && this.usernameFieldNames.indexOf(fieldLower) > -1) {\n        cipher.login.username = value;\n      } else if (\n        cipher.login.password == null &&\n        this.passwordFieldNames.indexOf(fieldLower) > -1\n      ) {\n        cipher.login.password = value;\n      } else {\n        this.processKvp(cipher, field, value);\n      }\n    });\n  }\n}\n","export interface ImportOption {\n  id: string;\n  name: string;\n}\n\nexport const featuredImportOptions = [\n  { id: \"bitwardenjson\", name: \"Bitwarden (json)\" },\n  { id: \"bitwardencsv\", name: \"Bitwarden (csv)\" },\n  { id: \"chromecsv\", name: \"Chrome (csv)\" },\n  { id: \"dashlanecsv\", name: \"Dashlane (csv)\" },\n  { id: \"firefoxcsv\", name: \"Firefox (csv)\" },\n  { id: \"keepass2xml\", name: \"KeePass 2 (xml)\" },\n  { id: \"lastpasscsv\", name: \"LastPass\" },\n  { id: \"safaricsv\", name: \"Safari and macOS (csv)\" },\n  { id: \"1password1pux\", name: \"1Password (1pux/json)\" },\n] as const;\n\nexport const regularImportOptions = [\n  { id: \"keepassxcsv\", name: \"KeePassX (csv)\" },\n  { id: \"1password1pif\", name: \"1Password (1pif)\" },\n  { id: \"1passwordwincsv\", name: \"1Password 6 and 7 Windows (csv)\" },\n  { id: \"1passwordmaccsv\", name: \"1Password 6 and 7 Mac (csv)\" },\n  { id: \"dashlanejson\", name: \"Dashlane (json)\" },\n  { id: \"roboformcsv\", name: \"RoboForm (csv)\" },\n  { id: \"keepercsv\", name: \"Keeper (csv)\" },\n  // Temporarily remove this option for the Feb release\n  // { id: \"keeperjson\", name: \"Keeper (json)\" },\n  { id: \"enpasscsv\", name: \"Enpass (csv)\" },\n  { id: \"enpassjson\", name: \"Enpass (json)\" },\n  { id: \"protonpass\", name: \"ProtonPass (zip/json)\" },\n  { id: \"safeincloudxml\", name: \"SafeInCloud (xml)\" },\n  { id: \"pwsafexml\", name: \"Password Safe (xml)\" },\n  { id: \"stickypasswordxml\", name: \"Sticky Password (xml)\" },\n  { id: \"msecurecsv\", name: \"mSecure (csv)\" },\n  { id: \"truekeycsv\", name: \"True Key (csv)\" },\n  { id: \"passwordbossjson\", name: \"Password Boss (json)\" },\n  { id: \"zohovaultcsv\", name: \"Zoho Vault (csv)\" },\n  { id: \"splashidcsv\", name: \"SplashID (csv)\" },\n  { id: \"passworddragonxml\", name: \"Password Dragon (xml)\" },\n  { id: \"padlockcsv\", name: \"Padlock (csv)\" },\n  { id: \"passboltcsv\", name: \"Passbolt (csv)\" },\n  { id: \"clipperzhtml\", name: \"Clipperz (html)\" },\n  { id: \"aviracsv\", name: \"Avira (csv)\" },\n  { id: \"saferpasscsv\", name: \"SaferPass (csv)\" },\n  { id: \"upmcsv\", name: \"Universal Password Manager (csv)\" },\n  { id: \"ascendocsv\", name: \"Ascendo DataVault (csv)\" },\n  { id: \"meldiumcsv\", name: \"Meldium (csv)\" },\n  { id: \"passkeepcsv\", name: \"PassKeep (csv)\" },\n  { id: \"operacsv\", name: \"Opera (csv)\" },\n  { id: \"vivaldicsv\", name: \"Vivaldi (csv)\" },\n  { id: \"gnomejson\", name: \"GNOME Passwords and Keys/Seahorse (json)\" },\n  { id: \"blurcsv\", name: \"Blur (csv)\" },\n  { id: \"passwordagentcsv\", name: \"Password Agent (csv)\" },\n  { id: \"passpackcsv\", name: \"Passpack (csv)\" },\n  { id: \"passmanjson\", name: \"Passman (json)\" },\n  { id: \"avastcsv\", name: \"Avast Passwords (csv)\" },\n  { id: \"avastjson\", name: \"Avast Passwords (json)\" },\n  { id: \"fsecurefsk\", name: \"F-Secure KEY (fsk)\" },\n  { id: \"kasperskytxt\", name: \"Kaspersky Password Manager (txt)\" },\n  { id: \"remembearcsv\", name: \"RememBear (csv)\" },\n  { id: \"passwordwallettxt\", name: \"PasswordWallet (txt)\" },\n  { id: \"mykicsv\", name: \"Myki (csv)\" },\n  { id: \"securesafecsv\", name: \"SecureSafe (csv)\" },\n  { id: \"logmeoncecsv\", name: \"LogMeOnce (csv)\" },\n  { id: \"blackberrycsv\", name: \"BlackBerry Password Keeper (csv)\" },\n  { id: \"buttercupcsv\", name: \"Buttercup (csv)\" },\n  { id: \"codebookcsv\", name: \"Codebook (csv)\" },\n  { id: \"encryptrcsv\", name: \"Encryptr (csv)\" },\n  { id: \"yoticsv\", name: \"Yoti (csv)\" },\n  { id: \"nordpasscsv\", name: \"Nordpass (csv)\" },\n  { id: \"psonojson\", name: \"Psono (json)\" },\n  { id: \"passkyjson\", name: \"Passky (json)\" },\n] as const;\n\nexport type ImportType =\n  | (typeof featuredImportOptions)[number][\"id\"]\n  | (typeof regularImportOptions)[number][\"id\"];\n","import { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\nimport { KvpRequest } from \"@bitwarden/common/models/request/kvp.request\";\nimport { ErrorResponse } from \"@bitwarden/common/models/response/error.response\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherRequest } from \"@bitwarden/common/vault/models/request/cipher.request\";\nimport { CollectionWithIdRequest } from \"@bitwarden/common/vault/models/request/collection-with-id.request\";\nimport { FolderWithIdRequest } from \"@bitwarden/common/vault/models/request/folder-with-id.request\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport {\n  AscendoCsvImporter,\n  AvastCsvImporter,\n  AvastJsonImporter,\n  AviraCsvImporter,\n  BitwardenCsvImporter,\n  BitwardenPasswordProtectedImporter,\n  BlackBerryCsvImporter,\n  BlurCsvImporter,\n  ButtercupCsvImporter,\n  ChromeCsvImporter,\n  ClipperzHtmlImporter,\n  CodebookCsvImporter,\n  DashlaneCsvImporter,\n  DashlaneJsonImporter,\n  EncryptrCsvImporter,\n  EnpassCsvImporter,\n  EnpassJsonImporter,\n  FirefoxCsvImporter,\n  FSecureFskImporter,\n  GnomeJsonImporter,\n  KasperskyTxtImporter,\n  KeePass2XmlImporter,\n  KeePassXCsvImporter,\n  KeeperCsvImporter,\n  // KeeperJsonImporter,\n  LastPassCsvImporter,\n  LogMeOnceCsvImporter,\n  MSecureCsvImporter,\n  MeldiumCsvImporter,\n  MykiCsvImporter,\n  NordPassCsvImporter,\n  OnePassword1PifImporter,\n  OnePassword1PuxImporter,\n  OnePasswordMacCsvImporter,\n  OnePasswordWinCsvImporter,\n  PadlockCsvImporter,\n  PassKeepCsvImporter,\n  PasskyJsonImporter,\n  PassmanJsonImporter,\n  PasspackCsvImporter,\n  PasswordAgentCsvImporter,\n  PasswordBossJsonImporter,\n  PasswordDragonXmlImporter,\n  PasswordSafeXmlImporter,\n  PasswordWalletTxtImporter,\n  ProtonPassJsonImporter,\n  PsonoJsonImporter,\n  RememBearCsvImporter,\n  RoboFormCsvImporter,\n  SafariCsvImporter,\n  SafeInCloudXmlImporter,\n  SaferPassCsvImporter,\n  SecureSafeCsvImporter,\n  SplashIdCsvImporter,\n  StickyPasswordXmlImporter,\n  TrueKeyCsvImporter,\n  UpmCsvImporter,\n  YotiCsvImporter,\n  ZohoVaultCsvImporter,\n} from \"../importers\";\nimport { Importer } from \"../importers/importer\";\nimport {\n  featuredImportOptions,\n  ImportOption,\n  ImportType,\n  regularImportOptions,\n} from \"../models/import-options\";\nimport { ImportResult } from \"../models/import-result\";\nimport { ImportApiServiceAbstraction } from \"../services/import-api.service.abstraction\";\nimport { ImportServiceAbstraction } from \"../services/import.service.abstraction\";\n\nexport class ImportService implements ImportServiceAbstraction {\n  featuredImportOptions = featuredImportOptions as readonly ImportOption[];\n\n  regularImportOptions = regularImportOptions as readonly ImportOption[];\n\n  constructor(\n    private cipherService: CipherService,\n    private folderService: FolderService,\n    private importApiService: ImportApiServiceAbstraction,\n    private i18nService: I18nService,\n    private collectionService: CollectionService,\n    private cryptoService: CryptoService\n  ) {}\n\n  getImportOptions(): ImportOption[] {\n    return this.featuredImportOptions.concat(this.regularImportOptions);\n  }\n\n  async import(\n    importer: Importer,\n    fileContents: string,\n    organizationId: string = null,\n    selectedImportTarget: string = null,\n    isUserAdmin: boolean\n  ): Promise<ImportResult> {\n    let importResult: ImportResult;\n    try {\n      importResult = await importer.parse(fileContents);\n    } catch (error) {\n      if (error instanceof SyntaxError) {\n        throw new Error(this.i18nService.t(\"importFormatError\"));\n      }\n      throw error;\n    }\n\n    if (!importResult.success) {\n      if (!Utils.isNullOrWhitespace(importResult.errorMessage)) {\n        throw new Error(importResult.errorMessage);\n      }\n      throw new Error(this.i18nService.t(\"importFormatError\"));\n    }\n\n    if (importResult.folders.length === 0 && importResult.ciphers.length === 0) {\n      throw new Error(this.i18nService.t(\"importNothingError\"));\n    }\n\n    if (importResult.ciphers.length > 0) {\n      const halfway = Math.floor(importResult.ciphers.length / 2);\n      const last = importResult.ciphers.length - 1;\n\n      if (\n        this.badData(importResult.ciphers[0]) &&\n        this.badData(importResult.ciphers[halfway]) &&\n        this.badData(importResult.ciphers[last])\n      ) {\n        throw new Error(this.i18nService.t(\"importFormatError\"));\n      }\n    }\n\n    if (organizationId && Utils.isNullOrWhitespace(selectedImportTarget) && !isUserAdmin) {\n      const hasUnassignedCollections = importResult.ciphers.some(\n        (c) => !Array.isArray(c.collectionIds) || c.collectionIds.length == 0\n      );\n      if (hasUnassignedCollections) {\n        throw new Error(this.i18nService.t(\"importUnassignedItemsError\"));\n      }\n    }\n\n    try {\n      await this.setImportTarget(importResult, organizationId, selectedImportTarget);\n      if (organizationId != null) {\n        await this.handleOrganizationalImport(importResult, organizationId);\n      } else {\n        await this.handleIndividualImport(importResult);\n      }\n    } catch (error) {\n      const errorResponse = new ErrorResponse(error, 400);\n      throw this.handleServerError(errorResponse, importResult);\n    }\n    return importResult;\n  }\n\n  getImporter(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>,\n    organizationId: string = null\n  ): Importer {\n    if (promptForPassword_callback == null) {\n      return null;\n    }\n\n    const importer = this.getImporterInstance(format, promptForPassword_callback);\n    if (importer == null) {\n      return null;\n    }\n    importer.organizationId = organizationId;\n    return importer;\n  }\n\n  private getImporterInstance(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>\n  ) {\n    if (format == null) {\n      return null;\n    }\n\n    switch (format) {\n      case \"bitwardencsv\":\n        return new BitwardenCsvImporter();\n      case \"bitwardenjson\":\n      case \"bitwardenpasswordprotected\":\n        return new BitwardenPasswordProtectedImporter(\n          this.cryptoService,\n          this.i18nService,\n          this.cipherService,\n          promptForPassword_callback\n        );\n      case \"lastpasscsv\":\n      case \"passboltcsv\":\n        return new LastPassCsvImporter();\n      case \"keepassxcsv\":\n        return new KeePassXCsvImporter();\n      case \"aviracsv\":\n        return new AviraCsvImporter();\n      case \"blurcsv\":\n        return new BlurCsvImporter();\n      case \"safeincloudxml\":\n        return new SafeInCloudXmlImporter();\n      case \"padlockcsv\":\n        return new PadlockCsvImporter();\n      case \"keepass2xml\":\n        return new KeePass2XmlImporter();\n      case \"chromecsv\":\n      case \"operacsv\":\n      case \"vivaldicsv\":\n        return new ChromeCsvImporter();\n      case \"firefoxcsv\":\n        return new FirefoxCsvImporter();\n      case \"upmcsv\":\n        return new UpmCsvImporter();\n      case \"saferpasscsv\":\n        return new SaferPassCsvImporter();\n      case \"safaricsv\":\n        return new SafariCsvImporter();\n      case \"meldiumcsv\":\n        return new MeldiumCsvImporter();\n      case \"1password1pif\":\n        return new OnePassword1PifImporter();\n      case \"1password1pux\":\n        return new OnePassword1PuxImporter();\n      case \"1passwordwincsv\":\n        return new OnePasswordWinCsvImporter();\n      case \"1passwordmaccsv\":\n        return new OnePasswordMacCsvImporter();\n      case \"keepercsv\":\n        return new KeeperCsvImporter();\n      // case \"keeperjson\":\n      //   return new KeeperJsonImporter();\n      case \"passworddragonxml\":\n        return new PasswordDragonXmlImporter();\n      case \"enpasscsv\":\n        return new EnpassCsvImporter();\n      case \"enpassjson\":\n        return new EnpassJsonImporter();\n      case \"pwsafexml\":\n        return new PasswordSafeXmlImporter();\n      case \"dashlanecsv\":\n        return new DashlaneCsvImporter();\n      case \"dashlanejson\":\n        return new DashlaneJsonImporter();\n      case \"msecurecsv\":\n        return new MSecureCsvImporter();\n      case \"stickypasswordxml\":\n        return new StickyPasswordXmlImporter();\n      case \"truekeycsv\":\n        return new TrueKeyCsvImporter();\n      case \"clipperzhtml\":\n        return new ClipperzHtmlImporter();\n      case \"roboformcsv\":\n        return new RoboFormCsvImporter();\n      case \"ascendocsv\":\n        return new AscendoCsvImporter();\n      case \"passwordbossjson\":\n        return new PasswordBossJsonImporter();\n      case \"zohovaultcsv\":\n        return new ZohoVaultCsvImporter();\n      case \"splashidcsv\":\n        return new SplashIdCsvImporter();\n      case \"passkeepcsv\":\n        return new PassKeepCsvImporter();\n      case \"gnomejson\":\n        return new GnomeJsonImporter();\n      case \"passwordagentcsv\":\n        return new PasswordAgentCsvImporter();\n      case \"passpackcsv\":\n        return new PasspackCsvImporter();\n      case \"passmanjson\":\n        return new PassmanJsonImporter();\n      case \"avastcsv\":\n        return new AvastCsvImporter();\n      case \"avastjson\":\n        return new AvastJsonImporter();\n      case \"fsecurefsk\":\n        return new FSecureFskImporter();\n      case \"kasperskytxt\":\n        return new KasperskyTxtImporter();\n      case \"remembearcsv\":\n        return new RememBearCsvImporter();\n      case \"passwordwallettxt\":\n        return new PasswordWalletTxtImporter();\n      case \"mykicsv\":\n        return new MykiCsvImporter();\n      case \"securesafecsv\":\n        return new SecureSafeCsvImporter();\n      case \"logmeoncecsv\":\n        return new LogMeOnceCsvImporter();\n      case \"blackberrycsv\":\n        return new BlackBerryCsvImporter();\n      case \"buttercupcsv\":\n        return new ButtercupCsvImporter();\n      case \"codebookcsv\":\n        return new CodebookCsvImporter();\n      case \"encryptrcsv\":\n        return new EncryptrCsvImporter();\n      case \"yoticsv\":\n        return new YotiCsvImporter();\n      case \"nordpasscsv\":\n        return new NordPassCsvImporter();\n      case \"psonojson\":\n        return new PsonoJsonImporter();\n      case \"passkyjson\":\n        return new PasskyJsonImporter();\n      case \"protonpass\":\n        return new ProtonPassJsonImporter(this.i18nService);\n      default:\n        return null;\n    }\n  }\n\n  private async handleIndividualImport(importResult: ImportResult) {\n    const request = new ImportCiphersRequest();\n    for (let i = 0; i < importResult.ciphers.length; i++) {\n      const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n      request.ciphers.push(new CipherRequest(c));\n    }\n    if (importResult.folders != null) {\n      for (let i = 0; i < importResult.folders.length; i++) {\n        const f = await this.folderService.encrypt(importResult.folders[i]);\n        request.folders.push(new FolderWithIdRequest(f));\n      }\n    }\n    if (importResult.folderRelationships != null) {\n      importResult.folderRelationships.forEach((r) =>\n        request.folderRelationships.push(new KvpRequest(r[0], r[1]))\n      );\n    }\n    return await this.importApiService.postImportCiphers(request);\n  }\n\n  private async handleOrganizationalImport(importResult: ImportResult, organizationId: string) {\n    const request = new ImportOrganizationCiphersRequest();\n    for (let i = 0; i < importResult.ciphers.length; i++) {\n      importResult.ciphers[i].organizationId = organizationId;\n      const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n      request.ciphers.push(new CipherRequest(c));\n    }\n    if (importResult.collections != null) {\n      for (let i = 0; i < importResult.collections.length; i++) {\n        importResult.collections[i].organizationId = organizationId;\n        const c = await this.collectionService.encrypt(importResult.collections[i]);\n        request.collections.push(new CollectionWithIdRequest(c));\n      }\n    }\n    if (importResult.collectionRelationships != null) {\n      importResult.collectionRelationships.forEach((r) =>\n        request.collectionRelationships.push(new KvpRequest(r[0], r[1]))\n      );\n    }\n    return await this.importApiService.postImportOrganizationCiphers(organizationId, request);\n  }\n\n  private badData(c: CipherView) {\n    return (\n      (c.name == null || c.name === \"--\") &&\n      c.type === CipherType.Login &&\n      c.login != null &&\n      Utils.isNullOrWhitespace(c.login.password)\n    );\n  }\n\n  private handleServerError(errorResponse: ErrorResponse, importResult: ImportResult): Error {\n    if (errorResponse.validationErrors == null) {\n      return new Error(errorResponse.message);\n    }\n\n    let errorMessage = \"\";\n\n    Object.entries(errorResponse.validationErrors).forEach(([key, value], index) => {\n      let item;\n      let itemType;\n      const i = Number(key.match(/[0-9]+/)[0]);\n\n      switch (key.match(/^\\w+/)[0]) {\n        case \"Ciphers\":\n          item = importResult.ciphers[i];\n          itemType = CipherType[item.type];\n          break;\n        case \"Folders\":\n          item = importResult.folders[i];\n          itemType = \"Folder\";\n          break;\n        case \"Collections\":\n          item = importResult.collections[i];\n          itemType = \"Collection\";\n          break;\n        default:\n          return;\n      }\n\n      if (index > 0) {\n        errorMessage += \"\\n\\n\";\n      }\n\n      if (itemType !== \"Folder\" && itemType !== \"Collection\") {\n        errorMessage += \"[\" + (i + 1) + \"] \";\n      }\n\n      errorMessage += \"[\" + itemType + '] \"' + item.name + '\": ' + value;\n    });\n\n    return new Error(errorMessage);\n  }\n\n  private async setImportTarget(\n    importResult: ImportResult,\n    organizationId: string,\n    importTarget: string\n  ) {\n    if (Utils.isNullOrWhitespace(importTarget)) {\n      return;\n    }\n\n    if (organizationId) {\n      const collectionViews: CollectionView[] = await this.collectionService.getAllDecrypted();\n      const targetCollection = collectionViews.find((c) => c.id === importTarget);\n\n      const noCollectionRelationShips: [number, number][] = [];\n      importResult.ciphers.forEach((c, index) => {\n        if (!Array.isArray(c.collectionIds) || c.collectionIds.length == 0) {\n          c.collectionIds = [targetCollection.id];\n          noCollectionRelationShips.push([index, 0]);\n        }\n      });\n\n      const collections: CollectionView[] = [...importResult.collections];\n      importResult.collections = [targetCollection];\n      collections.map((x) => {\n        const f = new CollectionView();\n        f.name = `${targetCollection.name}/${x.name}`;\n        importResult.collections.push(f);\n      });\n\n      const relationships: [number, number][] = [...importResult.collectionRelationships];\n      importResult.collectionRelationships = [...noCollectionRelationShips];\n      relationships.map((x) => {\n        importResult.collectionRelationships.push([x[0], x[1] + 1]);\n      });\n\n      return;\n    }\n\n    const folderViews = await this.folderService.getAllDecryptedFromState();\n    const targetFolder = folderViews.find((f) => f.id === importTarget);\n\n    const noFolderRelationShips: [number, number][] = [];\n    importResult.ciphers.forEach((c, index) => {\n      if (Utils.isNullOrEmpty(c.folderId)) {\n        c.folderId = targetFolder.id;\n        noFolderRelationShips.push([index, 0]);\n      }\n    });\n\n    const folders: FolderView[] = [...importResult.folders];\n    importResult.folders = [targetFolder];\n    folders.map((x) => {\n      const newFolderName = `${targetFolder.name}/${x.name}`;\n      const f = new FolderView();\n      f.name = newFolderName;\n      importResult.folders.push(f);\n    });\n\n    const relationships: [number, number][] = [...importResult.folderRelationships];\n    importResult.folderRelationships = [...noFolderRelationShips];\n    relationships.map((x) => {\n      importResult.folderRelationships.push([x[0], x[1] + 1]);\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { ProductType, ProviderType } from \"../../../enums\";\nimport { OrganizationUserStatusType, OrganizationUserType } from \"../../enums\";\nimport { PermissionsApi } from \"../api/permissions.api\";\nimport { OrganizationData } from \"../data/organization.data\";\n\nexport class Organization {\n  id: string;\n  name: string;\n  status: OrganizationUserStatusType;\n\n  /**\n   * The member's role in the organization.\n   * Avoid using this for permission checks - use the getters instead (e.g. isOwner, isAdmin, canManageX), because they\n   * properly handle permission inheritance and relationships.\n   */\n  type: OrganizationUserType;\n\n  enabled: boolean;\n  usePolicies: boolean;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useSso: boolean;\n  useKeyConnector: boolean;\n  useScim: boolean;\n  useCustomPermissions: boolean;\n  useResetPassword: boolean;\n  useSecretsManager: boolean;\n  usePasswordManager: boolean;\n  useActivateAutofillPolicy: boolean;\n  selfHost: boolean;\n  usersGetPremium: boolean;\n  seats: number;\n  maxCollections: number;\n  maxStorageGb?: number;\n  ssoBound: boolean;\n  identifier: string;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  userId: string;\n  hasPublicAndPrivateKeys: boolean;\n  providerId: string;\n  providerName: string;\n  providerType?: ProviderType;\n  /**\n   * Indicates that a user is a ProviderUser for the organization\n   */\n  isProviderUser: boolean;\n  /**\n   * Indicates that a user is a member for the organization (may be `false` if they have access via a Provider only)\n   */\n  isMember: boolean;\n  familySponsorshipFriendlyName: string;\n  familySponsorshipAvailable: boolean;\n  planProductType: ProductType;\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n  familySponsorshipLastSyncDate?: Date;\n  familySponsorshipValidUntil?: Date;\n  familySponsorshipToDelete?: boolean;\n  accessSecretsManager: boolean;\n\n  constructor(obj?: OrganizationData) {\n    if (obj == null) {\n      return;\n    }\n\n    this.id = obj.id;\n    this.name = obj.name;\n    this.status = obj.status;\n    this.type = obj.type;\n    this.enabled = obj.enabled;\n    this.usePolicies = obj.usePolicies;\n    this.useGroups = obj.useGroups;\n    this.useDirectory = obj.useDirectory;\n    this.useEvents = obj.useEvents;\n    this.useTotp = obj.useTotp;\n    this.use2fa = obj.use2fa;\n    this.useApi = obj.useApi;\n    this.useSso = obj.useSso;\n    this.useKeyConnector = obj.useKeyConnector;\n    this.useScim = obj.useScim;\n    this.useCustomPermissions = obj.useCustomPermissions;\n    this.useResetPassword = obj.useResetPassword;\n    this.useSecretsManager = obj.useSecretsManager;\n    this.usePasswordManager = obj.usePasswordManager;\n    this.useActivateAutofillPolicy = obj.useActivateAutofillPolicy;\n    this.selfHost = obj.selfHost;\n    this.usersGetPremium = obj.usersGetPremium;\n    this.seats = obj.seats;\n    this.maxCollections = obj.maxCollections;\n    this.maxStorageGb = obj.maxStorageGb;\n    this.ssoBound = obj.ssoBound;\n    this.identifier = obj.identifier;\n    this.permissions = obj.permissions;\n    this.resetPasswordEnrolled = obj.resetPasswordEnrolled;\n    this.userId = obj.userId;\n    this.hasPublicAndPrivateKeys = obj.hasPublicAndPrivateKeys;\n    this.providerId = obj.providerId;\n    this.providerName = obj.providerName;\n    this.providerType = obj.providerType;\n    this.isProviderUser = obj.isProviderUser;\n    this.isMember = obj.isMember;\n    this.familySponsorshipFriendlyName = obj.familySponsorshipFriendlyName;\n    this.familySponsorshipAvailable = obj.familySponsorshipAvailable;\n    this.planProductType = obj.planProductType;\n    this.keyConnectorEnabled = obj.keyConnectorEnabled;\n    this.keyConnectorUrl = obj.keyConnectorUrl;\n    this.familySponsorshipLastSyncDate = obj.familySponsorshipLastSyncDate;\n    this.familySponsorshipValidUntil = obj.familySponsorshipValidUntil;\n    this.familySponsorshipToDelete = obj.familySponsorshipToDelete;\n    this.accessSecretsManager = obj.accessSecretsManager;\n  }\n\n  get canAccess() {\n    if (this.isOwner) {\n      return true;\n    }\n    return this.enabled && this.status === OrganizationUserStatusType.Confirmed;\n  }\n\n  /**\n   * Whether a user has Manager permissions or greater\n   */\n  get isManager() {\n    return this.type === OrganizationUserType.Manager || this.isAdmin;\n  }\n\n  /**\n   * Whether a user has Admin permissions or greater\n   */\n  get isAdmin() {\n    return this.type === OrganizationUserType.Admin || this.isOwner;\n  }\n\n  /**\n   * Whether a user has Owner permissions (including ProviderUsers)\n   */\n  get isOwner() {\n    return this.type === OrganizationUserType.Owner || this.isProviderUser;\n  }\n\n  get canAccessEventLogs() {\n    return (this.isAdmin || this.permissions.accessEventLogs) && this.useEvents;\n  }\n\n  get canAccessImportExport() {\n    return this.isAdmin || this.permissions.accessImportExport;\n  }\n\n  get canAccessReports() {\n    return this.isAdmin || this.permissions.accessReports;\n  }\n\n  get canCreateNewCollections() {\n    return this.isManager || this.permissions.createNewCollections;\n  }\n\n  get canEditAnyCollection() {\n    return this.isAdmin || this.permissions.editAnyCollection;\n  }\n\n  get canUseAdminCollections() {\n    return this.canEditAnyCollection;\n  }\n\n  get canDeleteAnyCollection() {\n    return this.isAdmin || this.permissions.deleteAnyCollection;\n  }\n\n  get canViewAllCollections() {\n    return this.canEditAnyCollection || this.canDeleteAnyCollection;\n  }\n\n  get canEditAssignedCollections() {\n    return this.isManager || this.permissions.editAssignedCollections;\n  }\n\n  get canDeleteAssignedCollections() {\n    return this.isManager || this.permissions.deleteAssignedCollections;\n  }\n\n  get canViewAssignedCollections() {\n    return this.canDeleteAssignedCollections || this.canEditAssignedCollections;\n  }\n\n  get canManageGroups() {\n    return (this.isAdmin || this.permissions.manageGroups) && this.useGroups;\n  }\n\n  get canManageSso() {\n    return (this.isAdmin || this.permissions.manageSso) && this.useSso;\n  }\n\n  get canManageDomainVerification() {\n    return (this.isAdmin || this.permissions.manageSso) && this.useSso;\n  }\n\n  get canManageScim() {\n    return (this.isAdmin || this.permissions.manageScim) && this.useScim;\n  }\n\n  get canManagePolicies() {\n    return (this.isAdmin || this.permissions.managePolicies) && this.usePolicies;\n  }\n\n  get canManageUsers() {\n    return this.isAdmin || this.permissions.manageUsers;\n  }\n\n  get canManageUsersPassword() {\n    return this.isAdmin || this.permissions.manageResetPassword;\n  }\n\n  get canManageDeviceApprovals() {\n    return (this.isAdmin || this.permissions.manageResetPassword) && this.useSso;\n  }\n\n  get isExemptFromPolicies() {\n    return this.canManagePolicies;\n  }\n\n  get canViewSubscription() {\n    if (this.canEditSubscription) {\n      return true;\n    }\n\n    return this.hasProvider && this.providerType === ProviderType.Msp\n      ? this.isProviderUser\n      : this.isOwner;\n  }\n\n  get canEditSubscription() {\n    return this.hasProvider ? this.isProviderUser : this.isOwner;\n  }\n\n  get canEditPaymentMethods() {\n    return this.canEditSubscription;\n  }\n\n  get canViewBillingHistory() {\n    return this.canEditSubscription;\n  }\n\n  get hasProvider() {\n    return this.providerId != null || this.providerName != null;\n  }\n\n  get canAccessSecretsManager() {\n    return this.useSecretsManager && this.accessSecretsManager;\n  }\n\n  get isFreeOrg() {\n    // return true if organization needs to be upgraded from a free org\n    return !this.useTotp;\n  }\n\n  static fromJSON(json: Jsonify<Organization>) {\n    if (json == null) {\n      return null;\n    }\n\n    return Object.assign(new Organization(), json, {\n      familySponsorshipLastSyncDate: new Date(json.familySponsorshipLastSyncDate),\n      familySponsorshipValidUntil: new Date(json.familySponsorshipValidUntil),\n    });\n  }\n}\n","import { map, Observable } from \"rxjs\";\n\nimport { I18nService } from \"../../../platform/abstractions/i18n.service\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { OrganizationData } from \"../../models/data/organization.data\";\nimport { Organization } from \"../../models/domain/organization\";\n\nexport function canAccessVaultTab(org: Organization): boolean {\n  return org.canViewAssignedCollections || org.canViewAllCollections;\n}\n\nexport function canAccessSettingsTab(org: Organization): boolean {\n  return (\n    org.isOwner ||\n    org.canManagePolicies ||\n    org.canManageSso ||\n    org.canManageScim ||\n    org.canAccessImportExport ||\n    org.canManageDeviceApprovals\n  );\n}\n\nexport function canAccessMembersTab(org: Organization): boolean {\n  return org.canManageUsers || org.canManageUsersPassword;\n}\n\nexport function canAccessGroupsTab(org: Organization): boolean {\n  return org.canManageGroups;\n}\n\nexport function canAccessReportingTab(org: Organization): boolean {\n  return org.canAccessReports || org.canAccessEventLogs;\n}\n\nexport function canAccessBillingTab(org: Organization): boolean {\n  return org.isOwner;\n}\n\nexport function canAccessOrgAdmin(org: Organization): boolean {\n  return (\n    canAccessMembersTab(org) ||\n    canAccessGroupsTab(org) ||\n    canAccessReportingTab(org) ||\n    canAccessBillingTab(org) ||\n    canAccessSettingsTab(org) ||\n    canAccessVaultTab(org)\n  );\n}\n\nexport function getOrganizationById(id: string) {\n  return map<Organization[], Organization | undefined>((orgs) => orgs.find((o) => o.id === id));\n}\n\nexport function canAccessAdmin(i18nService: I18nService) {\n  return map<Organization[], Organization[]>((orgs) =>\n    orgs.filter(canAccessOrgAdmin).sort(Utils.getSortFunction(i18nService, \"name\"))\n  );\n}\n\nexport function canAccessImportExport(i18nService: I18nService) {\n  return map<Organization[], Organization[]>((orgs) =>\n    orgs.filter((org) => org.canAccessImportExport).sort(Utils.getSortFunction(i18nService, \"name\"))\n  );\n}\n\n/**\n * Returns `true` if a user is a member of an organization (rather than only being a ProviderUser)\n * @deprecated Use organizationService.memberOrganizations$ instead\n */\nexport function isMember(org: Organization): boolean {\n  return org.isMember;\n}\n\nexport abstract class OrganizationService {\n  organizations$: Observable<Organization[]>;\n\n  /**\n   * Organizations that the user is a member of (excludes organizations that they only have access to via a provider)\n   */\n  memberOrganizations$: Observable<Organization[]>;\n\n  get$: (id: string) => Observable<Organization | undefined>;\n  get: (id: string) => Organization;\n  getByIdentifier: (identifier: string) => Organization;\n  getAll: (userId?: string) => Promise<Organization[]>;\n  /**\n   * @deprecated For the CLI only\n   * @param id id of the organization\n   */\n  getFromState: (id: string) => Promise<Organization>;\n  canManageSponsorships: () => Promise<boolean>;\n  hasOrganizations: () => boolean;\n}\n\nexport abstract class InternalOrganizationServiceAbstraction extends OrganizationService {\n  replace: (organizations: { [id: string]: OrganizationData }) => Promise<void>;\n  upsert: (OrganizationData: OrganizationData | OrganizationData[]) => Promise<void>;\n}\n","import { BehaviorSubject, concatMap, map, Observable } from \"rxjs\";\n\nimport { StateService } from \"../../../platform/abstractions/state.service\";\nimport {\n  InternalOrganizationServiceAbstraction,\n  isMember,\n} from \"../../abstractions/organization/organization.service.abstraction\";\nimport { OrganizationData } from \"../../models/data/organization.data\";\nimport { Organization } from \"../../models/domain/organization\";\n\nexport class OrganizationService implements InternalOrganizationServiceAbstraction {\n  protected _organizations = new BehaviorSubject<Organization[]>([]);\n\n  organizations$ = this._organizations.asObservable();\n  memberOrganizations$ = this.organizations$.pipe(map((orgs) => orgs.filter(isMember)));\n\n  constructor(private stateService: StateService) {\n    this.stateService.activeAccountUnlocked$\n      .pipe(\n        concatMap(async (unlocked) => {\n          if (!unlocked) {\n            this._organizations.next([]);\n            return;\n          }\n\n          const data = await this.stateService.getOrganizations();\n          this.updateObservables(data);\n        })\n      )\n      .subscribe();\n  }\n\n  get$(id: string): Observable<Organization | undefined> {\n    return this.organizations$.pipe(map((orgs) => orgs.find((o) => o.id === id)));\n  }\n\n  async getAll(userId?: string): Promise<Organization[]> {\n    const organizationsMap = await this.stateService.getOrganizations({ userId: userId });\n    return Object.values(organizationsMap || {}).map((o) => new Organization(o));\n  }\n\n  async canManageSponsorships(): Promise<boolean> {\n    const organizations = this._organizations.getValue();\n    return organizations.some(\n      (o) => o.familySponsorshipAvailable || o.familySponsorshipFriendlyName !== null\n    );\n  }\n\n  hasOrganizations(): boolean {\n    const organizations = this._organizations.getValue();\n    return organizations.length > 0;\n  }\n\n  async upsert(organization: OrganizationData): Promise<void> {\n    let organizations = await this.stateService.getOrganizations();\n    if (organizations == null) {\n      organizations = {};\n    }\n\n    organizations[organization.id] = organization;\n\n    await this.replace(organizations);\n  }\n\n  async delete(id: string): Promise<void> {\n    const organizations = await this.stateService.getOrganizations();\n    if (organizations == null) {\n      return;\n    }\n\n    if (organizations[id] == null) {\n      return;\n    }\n\n    delete organizations[id];\n    await this.replace(organizations);\n  }\n\n  get(id: string): Organization {\n    const organizations = this._organizations.getValue();\n\n    return organizations.find((organization) => organization.id === id);\n  }\n\n  /**\n   * @deprecated For the CLI only\n   * @param id id of the organization\n   */\n  async getFromState(id: string): Promise<Organization> {\n    const organizationsMap = await this.stateService.getOrganizations();\n    const organization = organizationsMap[id];\n    if (organization == null) {\n      return null;\n    }\n\n    return new Organization(organization);\n  }\n\n  getByIdentifier(identifier: string): Organization {\n    const organizations = this._organizations.getValue();\n\n    return organizations.find((organization) => organization.identifier === identifier);\n  }\n\n  async replace(organizations: { [id: string]: OrganizationData }) {\n    await this.stateService.setOrganizations(organizations);\n    this.updateObservables(organizations);\n  }\n\n  private updateObservables(organizationsMap: { [id: string]: OrganizationData }) {\n    const organizations = Object.values(organizationsMap || {}).map((o) => new Organization(o));\n    this._organizations.next(organizations);\n  }\n}\n","import { BrowserApi } from \"../platform/browser/browser-api\";\n\nexport class SafariApp {\n  static sendMessageToApp(command: string, data: any = null, resolveNow = false): Promise<any> {\n    if (!BrowserApi.isSafariApi) {\n      return Promise.resolve(null);\n    }\n    return new Promise((resolve) => {\n      const now = new Date();\n      const messageId =\n        now.getTime().toString() + \"_\" + Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n      (browser as any).runtime.sendNativeMessage(\n        \"com.bitwarden.desktop\",\n        {\n          id: messageId,\n          command: command,\n          data: data,\n          responseData: null,\n        },\n        (response: any) => {\n          resolve(response);\n        }\n      );\n    });\n  }\n}\n","import { ClientType, DeviceType } from \"@bitwarden/common/enums\";\nimport { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { SafariApp } from \"../../browser/safariApp\";\nimport { BrowserApi } from \"../browser/browser-api\";\n\nexport default class BrowserPlatformUtilsService implements PlatformUtilsService {\n  private static deviceCache: DeviceType = null;\n\n  constructor(\n    private messagingService: MessagingService,\n    private clipboardWriteCallback: (clipboardValue: string, clearMs: number) => void,\n    private biometricCallback: () => Promise<boolean>,\n    private win: Window & typeof globalThis\n  ) {}\n\n  static getDevice(win: Window & typeof globalThis): DeviceType {\n    if (this.deviceCache) {\n      return this.deviceCache;\n    }\n\n    if (BrowserPlatformUtilsService.isFirefox()) {\n      this.deviceCache = DeviceType.FirefoxExtension;\n    } else if (BrowserPlatformUtilsService.isOpera(win)) {\n      this.deviceCache = DeviceType.OperaExtension;\n    } else if (BrowserPlatformUtilsService.isEdge()) {\n      this.deviceCache = DeviceType.EdgeExtension;\n    } else if (BrowserPlatformUtilsService.isVivaldi()) {\n      this.deviceCache = DeviceType.VivaldiExtension;\n    } else if (BrowserPlatformUtilsService.isChrome(win)) {\n      this.deviceCache = DeviceType.ChromeExtension;\n    } else if (BrowserPlatformUtilsService.isSafari(win)) {\n      this.deviceCache = DeviceType.SafariExtension;\n    }\n\n    return this.deviceCache;\n  }\n\n  getDevice(): DeviceType {\n    return BrowserPlatformUtilsService.getDevice(this.win);\n  }\n\n  getDeviceString(): string {\n    const device = DeviceType[this.getDevice()].toLowerCase();\n    return device.replace(\"extension\", \"\");\n  }\n\n  getClientType(): ClientType {\n    return ClientType.Browser;\n  }\n\n  /**\n   * @deprecated Do not call this directly, use getDevice() instead\n   */\n  static isFirefox(): boolean {\n    return (\n      navigator.userAgent.indexOf(\" Firefox/\") !== -1 ||\n      navigator.userAgent.indexOf(\" Gecko/\") !== -1\n    );\n  }\n\n  isFirefox(): boolean {\n    return this.getDevice() === DeviceType.FirefoxExtension;\n  }\n\n  /**\n   * @deprecated Do not call this directly, use getDevice() instead\n   */\n  private static isChrome(win: Window & typeof globalThis): boolean {\n    return win.chrome && navigator.userAgent.indexOf(\" Chrome/\") !== -1;\n  }\n\n  isChrome(): boolean {\n    return this.getDevice() === DeviceType.ChromeExtension;\n  }\n\n  /**\n   * @deprecated Do not call this directly, use getDevice() instead\n   */\n  private static isEdge(): boolean {\n    return navigator.userAgent.indexOf(\" Edg/\") !== -1;\n  }\n\n  isEdge(): boolean {\n    return this.getDevice() === DeviceType.EdgeExtension;\n  }\n\n  /**\n   * @deprecated Do not call this directly, use getDevice() instead\n   */\n  private static isOpera(win: Window & typeof globalThis): boolean {\n    return (\n      (!!win.opr && !!win.opr.addons) || !!win.opera || navigator.userAgent.indexOf(\" OPR/\") >= 0\n    );\n  }\n\n  isOpera(): boolean {\n    return this.getDevice() === DeviceType.OperaExtension;\n  }\n\n  /**\n   * @deprecated Do not call this directly, use getDevice() instead\n   */\n  private static isVivaldi(): boolean {\n    return navigator.userAgent.indexOf(\" Vivaldi/\") !== -1;\n  }\n\n  isVivaldi(): boolean {\n    return this.getDevice() === DeviceType.VivaldiExtension;\n  }\n\n  /**\n   * @deprecated Do not call this directly, use getDevice() instead\n   */\n  static isSafari(win: Window & typeof globalThis): boolean {\n    // Opera masquerades as Safari, so make sure we're not there first\n    return (\n      !BrowserPlatformUtilsService.isOpera(win) && navigator.userAgent.indexOf(\" Safari/\") !== -1\n    );\n  }\n\n  private static safariVersion(): string {\n    return navigator.userAgent.match(\"Version/([0-9.]*)\")?.[1];\n  }\n\n  /**\n   * Safari previous to version 16.1 had a bug which caused artifacts on hover in large extension popups.\n   * https://bugs.webkit.org/show_bug.cgi?id=218704\n   */\n  static shouldApplySafariHeightFix(win: Window & typeof globalThis): boolean {\n    if (BrowserPlatformUtilsService.getDevice(win) !== DeviceType.SafariExtension) {\n      return false;\n    }\n\n    const version = BrowserPlatformUtilsService.safariVersion();\n    const parts = version?.split(\".\")?.map((v) => Number(v));\n    return parts?.[0] < 16 || (parts?.[0] === 16 && parts?.[1] === 0);\n  }\n\n  isSafari(): boolean {\n    return this.getDevice() === DeviceType.SafariExtension;\n  }\n\n  isIE(): boolean {\n    return false;\n  }\n\n  isMacAppStore(): boolean {\n    return false;\n  }\n\n  async isViewOpen(): Promise<boolean> {\n    if (await BrowserApi.isPopupOpen()) {\n      return true;\n    }\n\n    if (this.isSafari()) {\n      return false;\n    }\n\n    // Opera has \"sidebar_panel\" as a ViewType but doesn't currently work\n    if (this.isFirefox() && chrome.extension.getViews({ type: \"sidebar\" }).length > 0) {\n      return true;\n    }\n\n    // Opera sidebar has type of \"tab\" (will stick around for a while after closing sidebar)\n    const tabOpen = chrome.extension.getViews({ type: \"tab\" }).length > 0;\n    return tabOpen;\n  }\n\n  lockTimeout(): number {\n    return null;\n  }\n\n  launchUri(uri: string, options?: any): void {\n    BrowserApi.createNewTab(uri, options && options.extensionPage === true);\n  }\n\n  getApplicationVersion(): Promise<string> {\n    return Promise.resolve(BrowserApi.getApplicationVersion());\n  }\n\n  async getApplicationVersionNumber(): Promise<string> {\n    return (await this.getApplicationVersion()).split(RegExp(\"[+|-]\"))[0].trim();\n  }\n\n  supportsWebAuthn(win: Window): boolean {\n    return typeof PublicKeyCredential !== \"undefined\";\n  }\n\n  supportsDuo(): boolean {\n    return true;\n  }\n\n  showToast(\n    type: \"error\" | \"success\" | \"warning\" | \"info\",\n    title: string,\n    text: string | string[],\n    options?: any\n  ): void {\n    this.messagingService.send(\"showToast\", {\n      text: text,\n      title: title,\n      type: type,\n      options: options,\n    });\n  }\n\n  isDev(): boolean {\n    return process.env.ENV === \"development\";\n  }\n\n  isSelfHost(): boolean {\n    return false;\n  }\n\n  copyToClipboard(text: string, options?: any): void {\n    let win = this.win;\n    let doc = this.win.document;\n    if (options && (options.window || options.win)) {\n      win = options.window || options.win;\n      doc = win.document;\n    } else if (options && options.doc) {\n      doc = options.doc;\n    }\n    const clearing = options ? !!options.clearing : false;\n    const clearMs: number = options && options.clearMs ? options.clearMs : null;\n\n    if (this.isSafari()) {\n      SafariApp.sendMessageToApp(\"copyToClipboard\", text).then(() => {\n        if (!clearing && this.clipboardWriteCallback != null) {\n          this.clipboardWriteCallback(text, clearMs);\n        }\n      });\n    } else if (\n      this.isFirefox() &&\n      (win as any).navigator.clipboard &&\n      (win as any).navigator.clipboard.writeText\n    ) {\n      (win as any).navigator.clipboard.writeText(text).then(() => {\n        if (!clearing && this.clipboardWriteCallback != null) {\n          this.clipboardWriteCallback(text, clearMs);\n        }\n      });\n    } else if (doc.queryCommandSupported && doc.queryCommandSupported(\"copy\")) {\n      if (this.isChrome() && text === \"\") {\n        text = \"\\u0000\";\n      }\n\n      const textarea = doc.createElement(\"textarea\");\n      textarea.textContent = text == null || text === \"\" ? \" \" : text;\n      // Prevent scrolling to bottom of page in MS Edge.\n      textarea.style.position = \"fixed\";\n      doc.body.appendChild(textarea);\n      textarea.select();\n\n      try {\n        // Security exception may be thrown by some browsers.\n        if (doc.execCommand(\"copy\") && !clearing && this.clipboardWriteCallback != null) {\n          this.clipboardWriteCallback(text, clearMs);\n        }\n      } catch (e) {\n        // eslint-disable-next-line\n        console.warn(\"Copy to clipboard failed.\", e);\n      } finally {\n        doc.body.removeChild(textarea);\n      }\n    }\n  }\n\n  async readFromClipboard(options?: any): Promise<string> {\n    let win = this.win;\n    let doc = this.win.document;\n    if (options && (options.window || options.win)) {\n      win = options.window || options.win;\n      doc = win.document;\n    } else if (options && options.doc) {\n      doc = options.doc;\n    }\n\n    if (this.isSafari()) {\n      return await SafariApp.sendMessageToApp(\"readFromClipboard\");\n    } else if (\n      this.isFirefox() &&\n      (win as any).navigator.clipboard &&\n      (win as any).navigator.clipboard.readText\n    ) {\n      return await (win as any).navigator.clipboard.readText();\n    } else if (doc.queryCommandSupported && doc.queryCommandSupported(\"paste\")) {\n      const textarea = doc.createElement(\"textarea\");\n      // Prevent scrolling to bottom of page in MS Edge.\n      textarea.style.position = \"fixed\";\n      doc.body.appendChild(textarea);\n      textarea.focus();\n      try {\n        // Security exception may be thrown by some browsers.\n        if (doc.execCommand(\"paste\")) {\n          return textarea.value;\n        }\n      } catch (e) {\n        // eslint-disable-next-line\n        console.warn(\"Read from clipboard failed.\", e);\n      } finally {\n        doc.body.removeChild(textarea);\n      }\n    }\n    return null;\n  }\n\n  async supportsBiometric() {\n    const platformInfo = await BrowserApi.getPlatformInfo();\n    if (platformInfo.os === \"android\") {\n      return false;\n    }\n\n    return true;\n  }\n\n  authenticateBiometric() {\n    return this.biometricCallback();\n  }\n\n  supportsSecureStorage(): boolean {\n    return false;\n  }\n\n  async getAutofillKeyboardShortcut(): Promise<string> {\n    let autofillCommand: string;\n    // You can not change the command in Safari or obtain it programmatically\n    if (this.isSafari()) {\n      autofillCommand = \"Cmd+Shift+L\";\n    } else if (this.isFirefox()) {\n      autofillCommand = (await browser.commands.getAll()).find(\n        (c) => c.name === \"autofill_login\"\n      ).shortcut;\n      // Firefox is returning Ctrl instead of Cmd for the modifier key on macOS if\n      // the command is the default one set on installation.\n      if (\n        (await browser.runtime.getPlatformInfo()).os === \"mac\" &&\n        autofillCommand === \"Ctrl+Shift+L\"\n      ) {\n        autofillCommand = \"Cmd+Shift+L\";\n      }\n    } else {\n      await new Promise((resolve) =>\n        chrome.commands.getAll((c) =>\n          resolve((autofillCommand = c.find((c) => c.name === \"autofill_login\").shortcut))\n        )\n      );\n    }\n    return autofillCommand;\n  }\n}\n","import { Observable } from \"rxjs\";\n\nimport { DeviceType } from \"@bitwarden/common/enums\";\n\nimport { TabMessage } from \"../../types/tab-messages\";\nimport BrowserPlatformUtilsService from \"../services/browser-platform-utils.service\";\n\nexport class BrowserApi {\n  static isWebExtensionsApi: boolean = typeof browser !== \"undefined\";\n  static isSafariApi: boolean =\n    navigator.userAgent.indexOf(\" Safari/\") !== -1 &&\n    navigator.userAgent.indexOf(\" Chrome/\") === -1 &&\n    navigator.userAgent.indexOf(\" Chromium/\") === -1;\n  static isChromeApi: boolean = !BrowserApi.isSafariApi && typeof chrome !== \"undefined\";\n  static isFirefoxOnAndroid: boolean =\n    navigator.userAgent.indexOf(\"Firefox/\") !== -1 && navigator.userAgent.indexOf(\"Android\") !== -1;\n\n  static get manifestVersion() {\n    return chrome.runtime.getManifest().manifest_version;\n  }\n\n  static getWindow(windowId?: number): Promise<chrome.windows.Window> | void {\n    if (!windowId) {\n      return;\n    }\n\n    return new Promise((resolve) =>\n      chrome.windows.get(windowId, { populate: true }, (window) => resolve(window))\n    );\n  }\n\n  static async createWindow(options: chrome.windows.CreateData): Promise<chrome.windows.Window> {\n    return new Promise((resolve) =>\n      chrome.windows.create(options, (window) => {\n        resolve(window);\n      })\n    );\n  }\n\n  static async removeWindow(windowId: number) {\n    await chrome.windows.remove(windowId);\n  }\n\n  static async getTabFromCurrentWindowId(): Promise<chrome.tabs.Tab> | null {\n    return await BrowserApi.tabsQueryFirst({\n      active: true,\n      windowId: chrome.windows.WINDOW_ID_CURRENT,\n    });\n  }\n\n  static async getTab(tabId: number): Promise<chrome.tabs.Tab> | null {\n    if (!tabId) {\n      return null;\n    }\n\n    if (BrowserApi.manifestVersion === 3) {\n      return await chrome.tabs.get(tabId);\n    }\n\n    return new Promise((resolve) =>\n      chrome.tabs.get(tabId, (tab) => {\n        resolve(tab);\n      })\n    );\n  }\n\n  static async getTabFromCurrentWindow(): Promise<chrome.tabs.Tab> | null {\n    return await BrowserApi.tabsQueryFirst({\n      active: true,\n      currentWindow: true,\n    });\n  }\n\n  static async getActiveTabs(): Promise<chrome.tabs.Tab[]> {\n    return await BrowserApi.tabsQuery({\n      active: true,\n    });\n  }\n\n  static async tabsQuery(options: chrome.tabs.QueryInfo): Promise<chrome.tabs.Tab[]> {\n    return new Promise((resolve) => {\n      chrome.tabs.query(options, (tabs) => {\n        resolve(tabs);\n      });\n    });\n  }\n\n  static async tabsQueryFirst(options: chrome.tabs.QueryInfo): Promise<chrome.tabs.Tab> | null {\n    const tabs = await BrowserApi.tabsQuery(options);\n    if (tabs.length > 0) {\n      return tabs[0];\n    }\n\n    return null;\n  }\n\n  static tabSendMessageData(\n    tab: chrome.tabs.Tab,\n    command: string,\n    data: any = null\n  ): Promise<void> {\n    const obj: any = {\n      command: command,\n    };\n\n    if (data != null) {\n      obj.data = data;\n    }\n\n    return BrowserApi.tabSendMessage(tab, obj);\n  }\n\n  static async tabSendMessage<T>(\n    tab: chrome.tabs.Tab,\n    obj: T,\n    options: chrome.tabs.MessageSendOptions = null\n  ): Promise<void> {\n    if (!tab || !tab.id) {\n      return;\n    }\n\n    return new Promise<void>((resolve) => {\n      chrome.tabs.sendMessage(tab.id, obj, options, () => {\n        if (chrome.runtime.lastError) {\n          // Some error happened\n        }\n        resolve();\n      });\n    });\n  }\n\n  static sendTabsMessage<T>(\n    tabId: number,\n    message: TabMessage,\n    options?: chrome.tabs.MessageSendOptions,\n    responseCallback?: (response: T) => void\n  ) {\n    chrome.tabs.sendMessage<TabMessage, T>(tabId, message, options, responseCallback);\n  }\n\n  static async removeTab(tabId: number) {\n    await chrome.tabs.remove(tabId);\n  }\n\n  static async getPrivateModeWindows(): Promise<browser.windows.Window[]> {\n    return (await browser.windows.getAll()).filter((win) => win.incognito);\n  }\n\n  static async onWindowCreated(callback: (win: chrome.windows.Window) => any) {\n    return chrome.windows.onCreated.addListener(callback);\n  }\n\n  static getBackgroundPage(): any {\n    return chrome.extension.getBackgroundPage();\n  }\n\n  static isBackgroundPage(window: Window & typeof globalThis): boolean {\n    return window === chrome.extension.getBackgroundPage();\n  }\n\n  static getApplicationVersion(): string {\n    return chrome.runtime.getManifest().version;\n  }\n\n  static async isPopupOpen(): Promise<boolean> {\n    return Promise.resolve(chrome.extension.getViews({ type: \"popup\" }).length > 0);\n  }\n\n  static createNewTab(url: string, active = true): Promise<chrome.tabs.Tab> {\n    return new Promise((resolve) =>\n      chrome.tabs.create({ url: url, active: active }, (tab) => resolve(tab))\n    );\n  }\n\n  static async focusWindow(windowId: number) {\n    await chrome.windows.update(windowId, { focused: true });\n  }\n\n  static async openBitwardenExtensionTab(relativeUrl: string, active = true) {\n    let url = relativeUrl;\n    if (!relativeUrl.includes(\"uilocation=tab\")) {\n      const fullUrl = chrome.extension.getURL(relativeUrl);\n      const parsedUrl = new URL(fullUrl);\n      parsedUrl.searchParams.set(\"uilocation\", \"tab\");\n      url = parsedUrl.toString();\n    }\n\n    const createdTab = await this.createNewTab(url, active);\n    this.focusWindow(createdTab.windowId);\n  }\n\n  static async closeBitwardenExtensionTab() {\n    const tabs = await BrowserApi.tabsQuery({\n      active: true,\n      title: \"Bitwarden\",\n      windowType: \"normal\",\n      currentWindow: true,\n    });\n\n    if (tabs.length === 0) {\n      return;\n    }\n\n    const tabToClose = tabs[tabs.length - 1];\n    BrowserApi.removeTab(tabToClose.id);\n  }\n\n  static createNewWindow(\n    url: string,\n    focused = true,\n    type: chrome.windows.createTypeEnum = \"normal\"\n  ) {\n    chrome.windows.create({ url, focused, type });\n  }\n\n  // Keep track of all the events registered in a Safari popup so we can remove\n  // them when the popup gets unloaded, otherwise we cause a memory leak\n  private static registeredMessageListeners: any[] = [];\n  private static registeredStorageChangeListeners: any[] = [];\n\n  static messageListener(\n    name: string,\n    callback: (\n      message: any,\n      sender: chrome.runtime.MessageSender,\n      sendResponse: any\n    ) => boolean | void\n  ) {\n    // eslint-disable-next-line no-restricted-syntax\n    chrome.runtime.onMessage.addListener(callback);\n\n    if (BrowserApi.isSafariApi && !BrowserApi.isBackgroundPage(window)) {\n      BrowserApi.registeredMessageListeners.push(callback);\n      BrowserApi.setupUnloadListeners();\n    }\n  }\n\n  static messageListener$() {\n    return new Observable<unknown>((subscriber) => {\n      const handler = (message: unknown) => {\n        subscriber.next(message);\n      };\n\n      BrowserApi.messageListener(\"message\", handler);\n\n      return () => {\n        chrome.runtime.onMessage.removeListener(handler);\n\n        if (BrowserApi.isSafariApi) {\n          const index = BrowserApi.registeredMessageListeners.indexOf(handler);\n          if (index !== -1) {\n            BrowserApi.registeredMessageListeners.splice(index, 1);\n          }\n        }\n      };\n    });\n  }\n\n  static storageChangeListener(\n    callback: Parameters<typeof chrome.storage.onChanged.addListener>[0]\n  ) {\n    // eslint-disable-next-line no-restricted-syntax\n    chrome.storage.onChanged.addListener(callback);\n\n    if (BrowserApi.isSafariApi && !BrowserApi.isBackgroundPage(window)) {\n      BrowserApi.registeredStorageChangeListeners.push(callback);\n      BrowserApi.setupUnloadListeners();\n    }\n  }\n\n  // Setup the event to destroy all the listeners when the popup gets unloaded in Safari, otherwise we get a memory leak\n  private static setupUnloadListeners() {\n    // The MDN recommend using 'visibilitychange' but that event is fired any time the popup window is obscured as well\n    // 'pagehide' works just like 'unload' but is compatible with the back/forward cache, so we prefer using that one\n    window.onpagehide = () => {\n      for (const callback of BrowserApi.registeredMessageListeners) {\n        chrome.runtime.onMessage.removeListener(callback);\n      }\n\n      for (const callback of BrowserApi.registeredStorageChangeListeners) {\n        chrome.storage.onChanged.removeListener(callback);\n      }\n    };\n  }\n\n  static sendMessage(subscriber: string, arg: any = {}) {\n    const message = Object.assign({}, { command: subscriber }, arg);\n    return chrome.runtime.sendMessage(message);\n  }\n\n  static async focusTab(tabId: number) {\n    chrome.tabs.update(tabId, { active: true, highlighted: true });\n  }\n\n  static closePopup(win: Window) {\n    if (BrowserApi.isWebExtensionsApi && BrowserApi.isFirefoxOnAndroid) {\n      // Reactivating the active tab dismisses the popup tab. The promise final\n      // condition is only called if the popup wasn't already dismissed (future proofing).\n      // ref: https://bugzilla.mozilla.org/show_bug.cgi?id=1433604\n      browser.tabs.update({ active: true }).finally(win.close);\n    } else {\n      win.close();\n    }\n  }\n\n  static gaFilter() {\n    return process.env.ENV !== \"production\";\n  }\n\n  static getUILanguage(win: Window) {\n    return chrome.i18n.getUILanguage();\n  }\n\n  static reloadExtension(win: Window) {\n    if (win != null) {\n      return (win.location as any).reload(true);\n    } else {\n      return chrome.runtime.reload();\n    }\n  }\n\n  static reloadOpenWindows(exemptCurrentHref = false) {\n    const currentHref = window.location.href;\n    const views = chrome.extension.getViews() as Window[];\n    views\n      .filter((w) => w.location.href != null && !w.location.href.includes(\"background.html\"))\n      .filter((w) => !exemptCurrentHref || w.location.href !== currentHref)\n      .forEach((w) => {\n        w.location.reload();\n      });\n  }\n\n  static connectNative(application: string): browser.runtime.Port | chrome.runtime.Port {\n    if (BrowserApi.isWebExtensionsApi) {\n      return browser.runtime.connectNative(application);\n    } else if (BrowserApi.isChromeApi) {\n      return chrome.runtime.connectNative(application);\n    }\n  }\n\n  static requestPermission(permission: any) {\n    if (BrowserApi.isWebExtensionsApi) {\n      return browser.permissions.request(permission);\n    }\n    return new Promise((resolve, reject) => {\n      chrome.permissions.request(permission, resolve);\n    });\n  }\n\n  static getPlatformInfo(): Promise<browser.runtime.PlatformInfo | chrome.runtime.PlatformInfo> {\n    if (BrowserApi.isWebExtensionsApi) {\n      return browser.runtime.getPlatformInfo();\n    }\n    return new Promise((resolve) => {\n      chrome.runtime.getPlatformInfo(resolve);\n    });\n  }\n\n  static getBrowserAction() {\n    return BrowserApi.manifestVersion === 3 ? chrome.action : chrome.browserAction;\n  }\n\n  static getSidebarAction(\n    win: Window & typeof globalThis\n  ): OperaSidebarAction | FirefoxSidebarAction | null {\n    const deviceType = BrowserPlatformUtilsService.getDevice(win);\n    if (deviceType !== DeviceType.FirefoxExtension && deviceType !== DeviceType.OperaExtension) {\n      return null;\n    }\n    return win.opr?.sidebarAction || browser.sidebarAction;\n  }\n\n  /**\n   * Extension API helper method used to execute a script in a tab.\n   * @see https://developer.chrome.com/docs/extensions/reference/tabs/#method-executeScript\n   * @param {number} tabId\n   * @param {chrome.tabs.InjectDetails} details\n   * @returns {Promise<unknown>}\n   */\n  static executeScriptInTab(tabId: number, details: chrome.tabs.InjectDetails) {\n    if (BrowserApi.manifestVersion === 3) {\n      return chrome.scripting.executeScript({\n        target: {\n          tabId: tabId,\n          allFrames: details.allFrames,\n          frameIds: details.frameId ? [details.frameId] : null,\n        },\n        files: details.file ? [details.file] : null,\n        injectImmediately: details.runAt === \"document_start\",\n      });\n    }\n\n    return new Promise((resolve) => {\n      chrome.tabs.executeScript(tabId, details, (result) => {\n        resolve(result);\n      });\n    });\n  }\n}\n","export type InitializeOptions = \"array\" | \"record\" | \"object\";\n\nexport class SyncedItemMetadata {\n  propertyKey: string;\n  sessionKey: string;\n  initializer: (keyValuePair: any) => any;\n  initializeAs: InitializeOptions;\n\n  static builder(metadata: SyncedItemMetadata): (o: any) => any {\n    const itemBuilder = metadata.initializer;\n    if (metadata.initializeAs === \"array\") {\n      return (keyValuePair: any) => keyValuePair.map((o: any) => itemBuilder(o));\n    } else if (metadata.initializeAs === \"record\") {\n      return (keyValuePair: any) => {\n        const record: Record<any, any> = {};\n        for (const key in keyValuePair) {\n          record[key] = itemBuilder(keyValuePair[key]);\n        }\n        return record;\n      };\n    } else {\n      return (keyValuePair: any) => itemBuilder(keyValuePair);\n    }\n  }\n}\n","import { BehaviorSubject, concatMap, ReplaySubject, skip, Subject, Subscription } from \"rxjs\";\n\nimport { AbstractMemoryStorageService } from \"@bitwarden/common/platform/abstractions/storage.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\n\nimport { BrowserApi } from \"../../browser/browser-api\";\n\nimport { SyncedItemMetadata } from \"./sync-item-metadata\";\n\nexport class SessionSyncer {\n  subscription: Subscription;\n  id = Utils.newGuid();\n\n  // ignore initial values\n  private ignoreNUpdates = 0;\n\n  constructor(\n    private subject: Subject<any>,\n    private memoryStorageService: AbstractMemoryStorageService,\n    private metaData: SyncedItemMetadata\n  ) {\n    if (!(subject instanceof Subject)) {\n      throw new Error(\"subject must inherit from Subject\");\n    }\n\n    if (metaData.initializer == null) {\n      throw new Error(\"initializer must be provided\");\n    }\n  }\n\n  async init() {\n    switch (this.subject.constructor) {\n      case ReplaySubject:\n        // ignore all updates currently in the buffer\n        this.ignoreNUpdates = (this.subject as any)._buffer.length;\n        break;\n      case BehaviorSubject:\n        this.ignoreNUpdates = 1;\n        break;\n      default:\n        break;\n    }\n\n    await this.observe();\n    // must be synchronous\n    const hasInSessionMemory = await this.memoryStorageService.has(this.metaData.sessionKey);\n    if (hasInSessionMemory) {\n      await this.updateFromMemory();\n    }\n\n    this.listenForUpdates();\n  }\n\n  private async observe() {\n    const stream = this.subject.pipe(skip(this.ignoreNUpdates));\n    this.ignoreNUpdates = 0;\n\n    // This may be a memory leak.\n    // There is no good time to unsubscribe from this observable. Hopefully Manifest V3 clears memory from temporary\n    // contexts. If so, this is handled by destruction of the context.\n    this.subscription = stream\n      .pipe(\n        concatMap(async (next) => {\n          if (this.ignoreNUpdates > 0) {\n            this.ignoreNUpdates -= 1;\n            return;\n          }\n          await this.updateSession(next);\n        })\n      )\n      .subscribe();\n  }\n\n  private listenForUpdates() {\n    // This is an unawaited promise, but it will be executed asynchronously in the background.\n    BrowserApi.messageListener(this.updateMessageCommand, (message) => {\n      this.updateFromMessage(message);\n    });\n  }\n\n  async updateFromMessage(message: any) {\n    if (message.command != this.updateMessageCommand || message.id === this.id) {\n      return;\n    }\n    await this.update(message.serializedValue);\n  }\n\n  async updateFromMemory() {\n    const value = await this.memoryStorageService.getBypassCache(this.metaData.sessionKey);\n    await this.update(value);\n  }\n\n  async update(serializedValue: any) {\n    const unBuiltValue = JSON.parse(serializedValue);\n    if (BrowserApi.manifestVersion !== 3 && BrowserApi.isBackgroundPage(self)) {\n      await this.memoryStorageService.save(this.metaData.sessionKey, serializedValue);\n    }\n    const builder = SyncedItemMetadata.builder(this.metaData);\n    const value = builder(unBuiltValue);\n    this.ignoreNUpdates = 1;\n    this.subject.next(value);\n  }\n\n  private async updateSession(value: any) {\n    const serializedValue = JSON.stringify(value);\n    if (BrowserApi.manifestVersion === 3 || BrowserApi.isBackgroundPage(self)) {\n      await this.memoryStorageService.save(this.metaData.sessionKey, serializedValue);\n    }\n    await BrowserApi.sendMessage(this.updateMessageCommand, { id: this.id, serializedValue });\n  }\n\n  private get updateMessageCommand() {\n    return `${this.metaData.sessionKey}_update`;\n  }\n}\n","import { Constructor } from \"type-fest\";\n\nimport { AbstractMemoryStorageService } from \"@bitwarden/common/platform/abstractions/storage.service\";\n\nimport { SessionStorable } from \"./session-storable\";\nimport { SessionSyncer } from \"./session-syncer\";\nimport { SyncedItemMetadata } from \"./sync-item-metadata\";\n\n/**\n * Mark the class as syncing state across the browser session. This decorator finds rxjs BehaviorSubject properties\n * marked with @sessionSync and syncs these values across the browser session.\n *\n * @param constructor\n * @returns A new constructor that extends the original one to add session syncing.\n */\nexport function browserSession<TCtor extends Constructor<any>>(constructor: TCtor) {\n  return class extends constructor implements SessionStorable {\n    __syncedItemMetadata: SyncedItemMetadata[];\n    __sessionSyncers: SessionSyncer[];\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Require state service to be injected\n      const storageService: AbstractMemoryStorageService = this.findStorageService(\n        [this as any].concat(args)\n      );\n\n      if (this.__syncedItemMetadata == null || !(this.__syncedItemMetadata instanceof Array)) {\n        return;\n      }\n\n      this.__sessionSyncers = this.__syncedItemMetadata.map((metadata) =>\n        this.buildSyncer(metadata, storageService)\n      );\n    }\n\n    buildSyncer(metadata: SyncedItemMetadata, storageSerice: AbstractMemoryStorageService) {\n      const syncer = new SessionSyncer(\n        (this as any)[metadata.propertyKey],\n        storageSerice,\n        metadata\n      );\n      syncer.init();\n      return syncer;\n    }\n\n    findStorageService(args: any[]): AbstractMemoryStorageService {\n      const storageService = args.find(this.isMemoryStorageService);\n\n      if (storageService) {\n        return storageService;\n      }\n\n      const stateService = args.find(\n        (arg) =>\n          arg?.memoryStorageService != null && this.isMemoryStorageService(arg.memoryStorageService)\n      );\n      if (stateService) {\n        return stateService.memoryStorageService;\n      }\n\n      throw new Error(\n        `Cannot decorate ${constructor.name} with browserSession, Browser's AbstractMemoryStorageService must be accessible through the observed classes parameters`\n      );\n    }\n\n    isMemoryStorageService(arg: any): arg is AbstractMemoryStorageService {\n      return arg.type != null && arg.type === AbstractMemoryStorageService.TYPE;\n    }\n  };\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { SessionStorable } from \"./session-storable\";\nimport { InitializeOptions } from \"./sync-item-metadata\";\n\nclass BuildOptions<T, TJson = Jsonify<T>> {\n  initializer?: (keyValuePair: TJson) => T;\n  initializeAs?: InitializeOptions;\n}\n\n// Used to ensure uniqueness for each synced observable\nlet index = 0;\n\n/**\n * A decorator used to indicate the BehaviorSubject should be synced for this browser session across all contexts.\n *\n * >**Note** This decorator does nothing if the enclosing class is not decorated with @browserSession.\n *\n * >**Note** The Behavior subject must be initialized with a default or in the constructor of the class. If it is not, an error will be thrown.\n *\n * >**!!Warning!!** If the property is overwritten at any time, the new value will not be synced across the browser session.\n *\n * @param buildOptions\n * Builders for the value, requires either a constructor (ctor) for your BehaviorSubject type or an\n * initializer function that takes a key value pair representation of the BehaviorSubject data\n * and returns your instantiated BehaviorSubject value. `initializeAs can optionally be used to indicate\n * the provided initializer function should be used to build an array of values. For example,\n * ```ts\n * \\@sessionSync({ initializer: Foo.fromJSON, initializeAs: 'array' })\n * ```\n * is equivalent to\n * ```\n * \\@sessionSync({ initializer: (obj: any[]) => obj.map((f) => Foo.fromJSON })\n * ```\n *\n * @returns decorator function\n */\nexport function sessionSync<T>(buildOptions: BuildOptions<T>) {\n  return (prototype: unknown, propertyKey: string) => {\n    // Force prototype into SessionStorable and implement it.\n    const p = prototype as SessionStorable;\n\n    if (p.__syncedItemMetadata == null) {\n      p.__syncedItemMetadata = [];\n    }\n\n    p.__syncedItemMetadata.push({\n      propertyKey,\n      sessionKey: `${propertyKey}_${index++}`,\n      initializer: buildOptions.initializer,\n      initializeAs: buildOptions.initializeAs ?? \"object\",\n    });\n  };\n}\n","import { BehaviorSubject } from \"rxjs\";\n\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/services/organization/organization.service\";\n\nimport { browserSession, sessionSync } from \"../../platform/decorators/session-sync-observable\";\n\n@browserSession\nexport class BrowserOrganizationService extends OrganizationService {\n  @sessionSync({ initializer: Organization.fromJSON, initializeAs: \"array\" })\n  protected _organizations: BehaviorSubject<Organization[]>;\n}\n","import Domain from \"../../../platform/models/domain/domain-base\";\nimport { PolicyType } from \"../../enums\";\nimport { PolicyData } from \"../data/policy.data\";\n\nexport class Policy extends Domain {\n  id: string;\n  organizationId: string;\n  type: PolicyType;\n  data: any;\n  enabled: boolean;\n\n  constructor(obj?: PolicyData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.id = obj.id;\n    this.organizationId = obj.organizationId;\n    this.type = obj.type;\n    this.data = obj.data;\n    this.enabled = obj.enabled;\n  }\n}\n","import Domain from \"../../../platform/models/domain/domain-base\";\n\nexport class ResetPasswordPolicyOptions extends Domain {\n  autoEnrollEnabled = false;\n}\n","import { BehaviorSubject, concatMap, map, Observable, of } from \"rxjs\";\n\nimport { ListResponse } from \"../../../models/response/list.response\";\nimport { StateService } from \"../../../platform/abstractions/state.service\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { OrganizationService } from \"../../abstractions/organization/organization.service.abstraction\";\nimport { InternalPolicyService as InternalPolicyServiceAbstraction } from \"../../abstractions/policy/policy.service.abstraction\";\nimport { OrganizationUserStatusType, OrganizationUserType, PolicyType } from \"../../enums\";\nimport { PolicyData } from \"../../models/data/policy.data\";\nimport { MasterPasswordPolicyOptions } from \"../../models/domain/master-password-policy-options\";\nimport { Organization } from \"../../models/domain/organization\";\nimport { Policy } from \"../../models/domain/policy\";\nimport { ResetPasswordPolicyOptions } from \"../../models/domain/reset-password-policy-options\";\nimport { PolicyResponse } from \"../../models/response/policy.response\";\n\nexport class PolicyService implements InternalPolicyServiceAbstraction {\n  protected _policies: BehaviorSubject<Policy[]> = new BehaviorSubject([]);\n\n  policies$ = this._policies.asObservable();\n\n  constructor(\n    protected stateService: StateService,\n    private organizationService: OrganizationService\n  ) {\n    this.stateService.activeAccountUnlocked$\n      .pipe(\n        concatMap(async (unlocked) => {\n          if (Utils.global.bitwardenContainerService == null) {\n            return;\n          }\n\n          if (!unlocked) {\n            this._policies.next([]);\n            return;\n          }\n\n          const data = await this.stateService.getEncryptedPolicies();\n\n          await this.updateObservables(data);\n        })\n      )\n      .subscribe();\n  }\n\n  /**\n   * Returns the first policy found that applies to the active user\n   * @param policyType Policy type to search for\n   * @param policyFilter Additional filter to apply to the policy\n   */\n  get$(policyType: PolicyType, policyFilter?: (policy: Policy) => boolean): Observable<Policy> {\n    return this.policies$.pipe(\n      concatMap(async (policies) => {\n        const userId = await this.stateService.getUserId();\n        const appliesToCurrentUser = await this.checkPoliciesThatApplyToUser(\n          policies,\n          policyType,\n          policyFilter,\n          userId\n        );\n        if (appliesToCurrentUser) {\n          return policies.find((policy) => policy.type === policyType && policy.enabled);\n        }\n      })\n    );\n  }\n\n  /**\n   * @deprecated Do not call this, use the policies$ observable collection\n   */\n  async getAll(type?: PolicyType, userId?: string): Promise<Policy[]> {\n    let response: Policy[] = [];\n    const decryptedPolicies = await this.stateService.getDecryptedPolicies({ userId: userId });\n    if (decryptedPolicies != null) {\n      response = decryptedPolicies;\n    } else {\n      const diskPolicies = await this.stateService.getEncryptedPolicies({ userId: userId });\n      for (const id in diskPolicies) {\n        if (Object.prototype.hasOwnProperty.call(diskPolicies, id)) {\n          response.push(new Policy(diskPolicies[id]));\n        }\n      }\n      await this.stateService.setDecryptedPolicies(response, { userId: userId });\n    }\n    if (type != null) {\n      return response.filter((policy) => policy.type === type);\n    } else {\n      return response;\n    }\n  }\n\n  masterPasswordPolicyOptions$(policies?: Policy[]): Observable<MasterPasswordPolicyOptions> {\n    const observable = policies ? of(policies) : this.policies$;\n    return observable.pipe(\n      map((obsPolicies) => {\n        let enforcedOptions: MasterPasswordPolicyOptions = null;\n        const filteredPolicies = obsPolicies.filter((p) => p.type === PolicyType.MasterPassword);\n\n        if (filteredPolicies == null || filteredPolicies.length === 0) {\n          return enforcedOptions;\n        }\n\n        filteredPolicies.forEach((currentPolicy) => {\n          if (!currentPolicy.enabled || currentPolicy.data == null) {\n            return;\n          }\n\n          if (enforcedOptions == null) {\n            enforcedOptions = new MasterPasswordPolicyOptions();\n          }\n\n          if (\n            currentPolicy.data.minComplexity != null &&\n            currentPolicy.data.minComplexity > enforcedOptions.minComplexity\n          ) {\n            enforcedOptions.minComplexity = currentPolicy.data.minComplexity;\n          }\n\n          if (\n            currentPolicy.data.minLength != null &&\n            currentPolicy.data.minLength > enforcedOptions.minLength\n          ) {\n            enforcedOptions.minLength = currentPolicy.data.minLength;\n          }\n\n          if (currentPolicy.data.requireUpper) {\n            enforcedOptions.requireUpper = true;\n          }\n\n          if (currentPolicy.data.requireLower) {\n            enforcedOptions.requireLower = true;\n          }\n\n          if (currentPolicy.data.requireNumbers) {\n            enforcedOptions.requireNumbers = true;\n          }\n\n          if (currentPolicy.data.requireSpecial) {\n            enforcedOptions.requireSpecial = true;\n          }\n\n          if (currentPolicy.data.enforceOnLogin) {\n            enforcedOptions.enforceOnLogin = true;\n          }\n        });\n\n        return enforcedOptions;\n      })\n    );\n  }\n\n  policyAppliesToActiveUser$(policyType: PolicyType, policyFilter?: (policy: Policy) => boolean) {\n    return this.policies$.pipe(\n      concatMap(async (policies) => {\n        const userId = await this.stateService.getUserId();\n        return await this.checkPoliciesThatApplyToUser(policies, policyType, policyFilter, userId);\n      })\n    );\n  }\n\n  evaluateMasterPassword(\n    passwordStrength: number,\n    newPassword: string,\n    enforcedPolicyOptions: MasterPasswordPolicyOptions\n  ): boolean {\n    if (enforcedPolicyOptions == null) {\n      return true;\n    }\n\n    if (\n      enforcedPolicyOptions.minComplexity > 0 &&\n      enforcedPolicyOptions.minComplexity > passwordStrength\n    ) {\n      return false;\n    }\n\n    if (\n      enforcedPolicyOptions.minLength > 0 &&\n      enforcedPolicyOptions.minLength > newPassword.length\n    ) {\n      return false;\n    }\n\n    if (enforcedPolicyOptions.requireUpper && newPassword.toLocaleLowerCase() === newPassword) {\n      return false;\n    }\n\n    if (enforcedPolicyOptions.requireLower && newPassword.toLocaleUpperCase() === newPassword) {\n      return false;\n    }\n\n    if (enforcedPolicyOptions.requireNumbers && !/[0-9]/.test(newPassword)) {\n      return false;\n    }\n\n    // eslint-disable-next-line\n    if (enforcedPolicyOptions.requireSpecial && !/[!@#$%\\^&*]/g.test(newPassword)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getResetPasswordPolicyOptions(\n    policies: Policy[],\n    orgId: string\n  ): [ResetPasswordPolicyOptions, boolean] {\n    const resetPasswordPolicyOptions = new ResetPasswordPolicyOptions();\n\n    if (policies == null || orgId == null) {\n      return [resetPasswordPolicyOptions, false];\n    }\n\n    const policy = policies.find(\n      (p) => p.organizationId === orgId && p.type === PolicyType.ResetPassword && p.enabled\n    );\n    resetPasswordPolicyOptions.autoEnrollEnabled = policy?.data?.autoEnrollEnabled ?? false;\n\n    return [resetPasswordPolicyOptions, policy?.enabled ?? false];\n  }\n\n  mapPoliciesFromToken(policiesResponse: ListResponse<PolicyResponse>): Policy[] {\n    if (policiesResponse == null || policiesResponse.data == null) {\n      return null;\n    }\n\n    const policiesData = policiesResponse.data.map((p) => new PolicyData(p));\n    return policiesData.map((p) => new Policy(p));\n  }\n\n  async policyAppliesToUser(\n    policyType: PolicyType,\n    policyFilter?: (policy: Policy) => boolean,\n    userId?: string\n  ) {\n    const policies = await this.getAll(policyType, userId);\n\n    return this.checkPoliciesThatApplyToUser(policies, policyType, policyFilter, userId);\n  }\n\n  async upsert(policy: PolicyData): Promise<any> {\n    let policies = await this.stateService.getEncryptedPolicies();\n    if (policies == null) {\n      policies = {};\n    }\n\n    policies[policy.id] = policy;\n\n    await this.updateObservables(policies);\n    await this.stateService.setDecryptedPolicies(null);\n    await this.stateService.setEncryptedPolicies(policies);\n  }\n\n  async replace(policies: { [id: string]: PolicyData }): Promise<void> {\n    await this.updateObservables(policies);\n    await this.stateService.setDecryptedPolicies(null);\n    await this.stateService.setEncryptedPolicies(policies);\n  }\n\n  async clear(userId?: string): Promise<void> {\n    if (userId == null || userId == (await this.stateService.getUserId())) {\n      this._policies.next([]);\n    }\n    await this.stateService.setDecryptedPolicies(null, { userId: userId });\n    await this.stateService.setEncryptedPolicies(null, { userId: userId });\n  }\n\n  private isExemptFromPolicies(organization: Organization, policyType: PolicyType) {\n    if (policyType === PolicyType.MaximumVaultTimeout) {\n      return organization.type === OrganizationUserType.Owner;\n    }\n\n    return organization.isExemptFromPolicies;\n  }\n\n  private async updateObservables(policiesMap: { [id: string]: PolicyData }) {\n    const policies = Object.values(policiesMap || {}).map((f) => new Policy(f));\n\n    this._policies.next(policies);\n  }\n\n  private async checkPoliciesThatApplyToUser(\n    policies: Policy[],\n    policyType: PolicyType,\n    policyFilter?: (policy: Policy) => boolean,\n    userId?: string\n  ) {\n    const organizations = await this.organizationService.getAll(userId);\n    const filteredPolicies = policies.filter(\n      (p) => p.type === policyType && p.enabled && (policyFilter == null || policyFilter(p))\n    );\n    const policySet = new Set(filteredPolicies.map((p) => p.organizationId));\n\n    return organizations.some(\n      (o) =>\n        o.status >= OrganizationUserStatusType.Accepted &&\n        o.usePolicies &&\n        policySet.has(o.id) &&\n        !this.isExemptFromPolicies(o, policyType)\n    );\n  }\n}\n","import { Observable } from \"rxjs\";\n\nimport { EncryptedOrganizationKeyData } from \"../../admin-console/models/data/encrypted-organization-key.data\";\nimport { OrganizationData } from \"../../admin-console/models/data/organization.data\";\nimport { PolicyData } from \"../../admin-console/models/data/policy.data\";\nimport { ProviderData } from \"../../admin-console/models/data/provider.data\";\nimport { Policy } from \"../../admin-console/models/domain/policy\";\nimport { AdminAuthRequestStorable } from \"../../auth/models/domain/admin-auth-req-storable\";\nimport { EnvironmentUrls } from \"../../auth/models/domain/environment-urls\";\nimport { ForceResetPasswordReason } from \"../../auth/models/domain/force-reset-password-reason\";\nimport { KdfConfig } from \"../../auth/models/domain/kdf-config\";\nimport { BiometricKey } from \"../../auth/types/biometric-key\";\nimport { KdfType, ThemeType, UriMatchType } from \"../../enums\";\nimport { EventData } from \"../../models/data/event.data\";\nimport { WindowState } from \"../../models/domain/window-state\";\nimport { GeneratorOptions } from \"../../tools/generator/generator-options\";\nimport { GeneratedPasswordHistory, PasswordGeneratorOptions } from \"../../tools/generator/password\";\nimport { UsernameGeneratorOptions } from \"../../tools/generator/username\";\nimport { SendData } from \"../../tools/send/models/data/send.data\";\nimport { SendView } from \"../../tools/send/models/view/send.view\";\nimport { CipherData } from \"../../vault/models/data/cipher.data\";\nimport { CollectionData } from \"../../vault/models/data/collection.data\";\nimport { FolderData } from \"../../vault/models/data/folder.data\";\nimport { LocalData } from \"../../vault/models/data/local.data\";\nimport { CipherView } from \"../../vault/models/view/cipher.view\";\nimport { CollectionView } from \"../../vault/models/view/collection.view\";\nimport { AddEditCipherInfo } from \"../../vault/types/add-edit-cipher-info\";\nimport { ServerConfigData } from \"../models/data/server-config.data\";\nimport {\n  Account,\n  AccountDecryptionOptions,\n  AccountSettingsSettings,\n} from \"../models/domain/account\";\nimport { EncString } from \"../models/domain/enc-string\";\nimport { StorageOptions } from \"../models/domain/storage-options\";\nimport {\n  DeviceKey,\n  MasterKey,\n  SymmetricCryptoKey,\n  UserKey,\n} from \"../models/domain/symmetric-crypto-key\";\n\nexport abstract class StateService<T extends Account = Account> {\n  accounts$: Observable<{ [userId: string]: T }>;\n  activeAccount$: Observable<string>;\n  activeAccountUnlocked$: Observable<boolean>;\n\n  addAccount: (account: T) => Promise<void>;\n  setActiveUser: (userId: string) => Promise<void>;\n  clean: (options?: StorageOptions) => Promise<void>;\n  init: () => Promise<void>;\n\n  getAccessToken: (options?: StorageOptions) => Promise<string>;\n  setAccessToken: (value: string, options?: StorageOptions) => Promise<void>;\n  getAddEditCipherInfo: (options?: StorageOptions) => Promise<AddEditCipherInfo>;\n  setAddEditCipherInfo: (value: AddEditCipherInfo, options?: StorageOptions) => Promise<void>;\n  getAlwaysShowDock: (options?: StorageOptions) => Promise<boolean>;\n  setAlwaysShowDock: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getApiKeyClientId: (options?: StorageOptions) => Promise<string>;\n  setApiKeyClientId: (value: string, options?: StorageOptions) => Promise<void>;\n  getApiKeyClientSecret: (options?: StorageOptions) => Promise<string>;\n  setApiKeyClientSecret: (value: string, options?: StorageOptions) => Promise<void>;\n  getAutoConfirmFingerPrints: (options?: StorageOptions) => Promise<boolean>;\n  setAutoConfirmFingerprints: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getAutoFillOnPageLoadDefault: (options?: StorageOptions) => Promise<boolean>;\n  setAutoFillOnPageLoadDefault: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getBiometricAwaitingAcceptance: (options?: StorageOptions) => Promise<boolean>;\n  setBiometricAwaitingAcceptance: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getBiometricFingerprintValidated: (options?: StorageOptions) => Promise<boolean>;\n  setBiometricFingerprintValidated: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getBiometricText: (options?: StorageOptions) => Promise<string>;\n  setBiometricText: (value: string, options?: StorageOptions) => Promise<void>;\n  getBiometricUnlock: (options?: StorageOptions) => Promise<boolean>;\n  setBiometricUnlock: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getCanAccessPremium: (options?: StorageOptions) => Promise<boolean>;\n  getHasPremiumPersonally: (options?: StorageOptions) => Promise<boolean>;\n  setHasPremiumPersonally: (value: boolean, options?: StorageOptions) => Promise<void>;\n  setHasPremiumFromOrganization: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getHasPremiumFromOrganization: (options?: StorageOptions) => Promise<boolean>;\n  getClearClipboard: (options?: StorageOptions) => Promise<number>;\n  setClearClipboard: (value: number, options?: StorageOptions) => Promise<void>;\n  getCollapsedGroupings: (options?: StorageOptions) => Promise<string[]>;\n  setCollapsedGroupings: (value: string[], options?: StorageOptions) => Promise<void>;\n  getConvertAccountToKeyConnector: (options?: StorageOptions) => Promise<boolean>;\n  setConvertAccountToKeyConnector: (value: boolean, options?: StorageOptions) => Promise<void>;\n  /**\n   * gets the user key\n   */\n  getUserKey: (options?: StorageOptions) => Promise<UserKey>;\n  /**\n   * Sets the user key\n   */\n  setUserKey: (value: UserKey, options?: StorageOptions) => Promise<void>;\n  /**\n   * Gets the user's master key\n   */\n  getMasterKey: (options?: StorageOptions) => Promise<MasterKey>;\n  /**\n   * Sets the user's master key\n   */\n  setMasterKey: (value: MasterKey, options?: StorageOptions) => Promise<void>;\n  /**\n   * Gets the user key encrypted by the master key\n   */\n  getMasterKeyEncryptedUserKey: (options?: StorageOptions) => Promise<string>;\n  /**\n   * Sets the user key encrypted by the master key\n   */\n  setMasterKeyEncryptedUserKey: (value: string, options?: StorageOptions) => Promise<void>;\n  /**\n   * Gets the user's auto key\n   */\n  getUserKeyAutoUnlock: (options?: StorageOptions) => Promise<string>;\n  /**\n   * Sets the user's auto key\n   */\n  setUserKeyAutoUnlock: (value: string, options?: StorageOptions) => Promise<void>;\n  /**\n   * Gets the user's biometric key\n   */\n  getUserKeyBiometric: (options?: StorageOptions) => Promise<string>;\n  /**\n   * Checks if the user has a biometric key available\n   */\n  hasUserKeyBiometric: (options?: StorageOptions) => Promise<boolean>;\n  /**\n   * Sets the user's biometric key\n   */\n  setUserKeyBiometric: (value: BiometricKey, options?: StorageOptions) => Promise<void>;\n  /**\n   * Gets the user key encrypted by the Pin key.\n   * Used when Lock with MP on Restart is disabled\n   */\n  getPinKeyEncryptedUserKey: (options?: StorageOptions) => Promise<EncString>;\n  /**\n   * Sets the user key encrypted by the Pin key.\n   * Used when Lock with MP on Restart is disabled\n   */\n  setPinKeyEncryptedUserKey: (value: EncString, options?: StorageOptions) => Promise<void>;\n  /**\n   * Gets the ephemeral version of the user key encrypted by the Pin key.\n   * Used when Lock with MP on Restart is enabled\n   */\n  getPinKeyEncryptedUserKeyEphemeral: (options?: StorageOptions) => Promise<EncString>;\n  /**\n   * Sets the ephemeral version of the user key encrypted by the Pin key.\n   * Used when Lock with MP on Restart is enabled\n   */\n  setPinKeyEncryptedUserKeyEphemeral: (value: EncString, options?: StorageOptions) => Promise<void>;\n  /**\n   * @deprecated For migration purposes only, use getUserKeyMasterKey instead\n   */\n  getEncryptedCryptoSymmetricKey: (options?: StorageOptions) => Promise<string>;\n  /**\n   * @deprecated For migration purposes only, use setUserKeyMasterKey instead\n   */\n  setEncryptedCryptoSymmetricKey: (value: string, options?: StorageOptions) => Promise<void>;\n  /**\n   * @deprecated For legacy purposes only, use getMasterKey instead\n   */\n  getCryptoMasterKey: (options?: StorageOptions) => Promise<SymmetricCryptoKey>;\n  /**\n   * @deprecated For migration purposes only, use getUserKeyAuto instead\n   */\n  getCryptoMasterKeyAuto: (options?: StorageOptions) => Promise<string>;\n  /**\n   * @deprecated For migration purposes only, use setUserKeyAuto instead\n   */\n  setCryptoMasterKeyAuto: (value: string, options?: StorageOptions) => Promise<void>;\n  /**\n   * @deprecated For migration purposes only, use getUserKeyBiometric instead\n   */\n  getCryptoMasterKeyBiometric: (options?: StorageOptions) => Promise<string>;\n  /**\n   * @deprecated For migration purposes only, use hasUserKeyBiometric instead\n   */\n  hasCryptoMasterKeyBiometric: (options?: StorageOptions) => Promise<boolean>;\n  /**\n   * @deprecated For migration purposes only, use setUserKeyBiometric instead\n   */\n  setCryptoMasterKeyBiometric: (value: BiometricKey, options?: StorageOptions) => Promise<void>;\n  getDecryptedCiphers: (options?: StorageOptions) => Promise<CipherView[]>;\n  setDecryptedCiphers: (value: CipherView[], options?: StorageOptions) => Promise<void>;\n  getDecryptedCollections: (options?: StorageOptions) => Promise<CollectionView[]>;\n  setDecryptedCollections: (value: CollectionView[], options?: StorageOptions) => Promise<void>;\n  getDecryptedOrganizationKeys: (\n    options?: StorageOptions\n  ) => Promise<Map<string, SymmetricCryptoKey>>;\n  setDecryptedOrganizationKeys: (\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getDecryptedPasswordGenerationHistory: (\n    options?: StorageOptions\n  ) => Promise<GeneratedPasswordHistory[]>;\n  setDecryptedPasswordGenerationHistory: (\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions\n  ) => Promise<void>;\n  /**\n   * @deprecated For migration purposes only, use getDecryptedUserKeyPin instead\n   */\n  getDecryptedPinProtected: (options?: StorageOptions) => Promise<EncString>;\n  /**\n   * @deprecated For migration purposes only, use setDecryptedUserKeyPin instead\n   */\n  setDecryptedPinProtected: (value: EncString, options?: StorageOptions) => Promise<void>;\n  /**\n   * @deprecated Do not call this, use PolicyService\n   */\n  getDecryptedPolicies: (options?: StorageOptions) => Promise<Policy[]>;\n  /**\n   * @deprecated Do not call this, use PolicyService\n   */\n  setDecryptedPolicies: (value: Policy[], options?: StorageOptions) => Promise<void>;\n  getDecryptedPrivateKey: (options?: StorageOptions) => Promise<Uint8Array>;\n  setDecryptedPrivateKey: (value: Uint8Array, options?: StorageOptions) => Promise<void>;\n  getDecryptedProviderKeys: (options?: StorageOptions) => Promise<Map<string, SymmetricCryptoKey>>;\n  setDecryptedProviderKeys: (\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ) => Promise<void>;\n  /**\n   * @deprecated Do not call this directly, use SendService\n   */\n  getDecryptedSends: (options?: StorageOptions) => Promise<SendView[]>;\n  /**\n   * @deprecated Do not call this directly, use SendService\n   */\n  setDecryptedSends: (value: SendView[], options?: StorageOptions) => Promise<void>;\n  getDefaultUriMatch: (options?: StorageOptions) => Promise<UriMatchType>;\n  setDefaultUriMatch: (value: UriMatchType, options?: StorageOptions) => Promise<void>;\n  getDisableAddLoginNotification: (options?: StorageOptions) => Promise<boolean>;\n  setDisableAddLoginNotification: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableAutoBiometricsPrompt: (options?: StorageOptions) => Promise<boolean>;\n  setDisableAutoBiometricsPrompt: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableAutoTotpCopy: (options?: StorageOptions) => Promise<boolean>;\n  setDisableAutoTotpCopy: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableBadgeCounter: (options?: StorageOptions) => Promise<boolean>;\n  setDisableBadgeCounter: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableChangedPasswordNotification: (options?: StorageOptions) => Promise<boolean>;\n  setDisableChangedPasswordNotification: (\n    value: boolean,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getDisableContextMenuItem: (options?: StorageOptions) => Promise<boolean>;\n  setDisableContextMenuItem: (value: boolean, options?: StorageOptions) => Promise<void>;\n  /**\n   * @deprecated Do not call this, use SettingsService\n   */\n  getDisableFavicon: (options?: StorageOptions) => Promise<boolean>;\n  /**\n   * @deprecated Do not call this, use SettingsService\n   */\n  setDisableFavicon: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableGa: (options?: StorageOptions) => Promise<boolean>;\n  setDisableGa: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDismissedAutofillCallout: (options?: StorageOptions) => Promise<boolean>;\n  setDismissedAutofillCallout: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDontShowCardsCurrentTab: (options?: StorageOptions) => Promise<boolean>;\n  setDontShowCardsCurrentTab: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDontShowIdentitiesCurrentTab: (options?: StorageOptions) => Promise<boolean>;\n  setDontShowIdentitiesCurrentTab: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDuckDuckGoSharedKey: (options?: StorageOptions) => Promise<string>;\n  setDuckDuckGoSharedKey: (value: string, options?: StorageOptions) => Promise<void>;\n  getDeviceKey: (options?: StorageOptions) => Promise<DeviceKey | null>;\n  setDeviceKey: (value: DeviceKey | null, options?: StorageOptions) => Promise<void>;\n  getAdminAuthRequest: (options?: StorageOptions) => Promise<AdminAuthRequestStorable | null>;\n  setAdminAuthRequest: (\n    adminAuthRequest: AdminAuthRequestStorable,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getShouldTrustDevice: (options?: StorageOptions) => Promise<boolean | null>;\n  setShouldTrustDevice: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getAccountDecryptionOptions: (\n    options?: StorageOptions\n  ) => Promise<AccountDecryptionOptions | null>;\n  setAccountDecryptionOptions: (\n    value: AccountDecryptionOptions,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEmail: (options?: StorageOptions) => Promise<string>;\n  setEmail: (value: string, options?: StorageOptions) => Promise<void>;\n  getEmailVerified: (options?: StorageOptions) => Promise<boolean>;\n  setEmailVerified: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableAlwaysOnTop: (options?: StorageOptions) => Promise<boolean>;\n  setEnableAlwaysOnTop: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableAutoFillOnPageLoad: (options?: StorageOptions) => Promise<boolean>;\n  setEnableAutoFillOnPageLoad: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableBrowserIntegration: (options?: StorageOptions) => Promise<boolean>;\n  setEnableBrowserIntegration: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableBrowserIntegrationFingerprint: (options?: StorageOptions) => Promise<boolean>;\n  setEnableBrowserIntegrationFingerprint: (\n    value: boolean,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEnableCloseToTray: (options?: StorageOptions) => Promise<boolean>;\n  setEnableCloseToTray: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableDuckDuckGoBrowserIntegration: (options?: StorageOptions) => Promise<boolean>;\n  setEnableDuckDuckGoBrowserIntegration: (\n    value: boolean,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEnableFullWidth: (options?: StorageOptions) => Promise<boolean>;\n  setEnableFullWidth: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableMinimizeToTray: (options?: StorageOptions) => Promise<boolean>;\n  setEnableMinimizeToTray: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableStartToTray: (options?: StorageOptions) => Promise<boolean>;\n  setEnableStartToTray: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableTray: (options?: StorageOptions) => Promise<boolean>;\n  setEnableTray: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEncryptedCiphers: (options?: StorageOptions) => Promise<{ [id: string]: CipherData }>;\n  setEncryptedCiphers: (\n    value: { [id: string]: CipherData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedCollections: (options?: StorageOptions) => Promise<{ [id: string]: CollectionData }>;\n  setEncryptedCollections: (\n    value: { [id: string]: CollectionData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  /**\n   * @deprecated Do not call this directly, use FolderService\n   */\n  getEncryptedFolders: (options?: StorageOptions) => Promise<{ [id: string]: FolderData }>;\n  /**\n   * @deprecated Do not call this directly, use FolderService\n   */\n  setEncryptedFolders: (\n    value: { [id: string]: FolderData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedOrganizationKeys: (\n    options?: StorageOptions\n  ) => Promise<{ [orgId: string]: EncryptedOrganizationKeyData }>;\n  setEncryptedOrganizationKeys: (\n    value: { [orgId: string]: EncryptedOrganizationKeyData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedPasswordGenerationHistory: (\n    options?: StorageOptions\n  ) => Promise<GeneratedPasswordHistory[]>;\n  setEncryptedPasswordGenerationHistory: (\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions\n  ) => Promise<void>;\n  /**\n   * @deprecated For migration purposes only, use getEncryptedUserKeyPin instead\n   */\n  getEncryptedPinProtected: (options?: StorageOptions) => Promise<string>;\n  /**\n   * @deprecated For migration purposes only, use setEncryptedUserKeyPin instead\n   */\n  setEncryptedPinProtected: (value: string, options?: StorageOptions) => Promise<void>;\n  /**\n   * @deprecated Do not call this directly, use PolicyService\n   */\n  getEncryptedPolicies: (options?: StorageOptions) => Promise<{ [id: string]: PolicyData }>;\n  /**\n   * @deprecated Do not call this directly, use PolicyService\n   */\n  setEncryptedPolicies: (\n    value: { [id: string]: PolicyData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedPrivateKey: (options?: StorageOptions) => Promise<string>;\n  setEncryptedPrivateKey: (value: string, options?: StorageOptions) => Promise<void>;\n  getEncryptedProviderKeys: (options?: StorageOptions) => Promise<any>;\n  setEncryptedProviderKeys: (value: any, options?: StorageOptions) => Promise<void>;\n  /**\n   * @deprecated Do not call this directly, use SendService\n   */\n  getEncryptedSends: (options?: StorageOptions) => Promise<{ [id: string]: SendData }>;\n  /**\n   * @deprecated Do not call this directly, use SendService\n   */\n  setEncryptedSends: (value: { [id: string]: SendData }, options?: StorageOptions) => Promise<void>;\n  getEntityId: (options?: StorageOptions) => Promise<string>;\n  setEntityId: (value: string, options?: StorageOptions) => Promise<void>;\n  getEntityType: (options?: StorageOptions) => Promise<any>;\n  setEntityType: (value: string, options?: StorageOptions) => Promise<void>;\n  getEnvironmentUrls: (options?: StorageOptions) => Promise<EnvironmentUrls>;\n  setEnvironmentUrls: (value: EnvironmentUrls, options?: StorageOptions) => Promise<void>;\n  getRegion: (options?: StorageOptions) => Promise<string>;\n  setRegion: (value: string, options?: StorageOptions) => Promise<void>;\n  getEquivalentDomains: (options?: StorageOptions) => Promise<string[][]>;\n  setEquivalentDomains: (value: string, options?: StorageOptions) => Promise<void>;\n  getEventCollection: (options?: StorageOptions) => Promise<EventData[]>;\n  setEventCollection: (value: EventData[], options?: StorageOptions) => Promise<void>;\n  getEverHadUserKey: (options?: StorageOptions) => Promise<boolean>;\n  setEverHadUserKey: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEverBeenUnlocked: (options?: StorageOptions) => Promise<boolean>;\n  setEverBeenUnlocked: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getForcePasswordResetReason: (options?: StorageOptions) => Promise<ForceResetPasswordReason>;\n  setForcePasswordResetReason: (\n    value: ForceResetPasswordReason,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getInstalledVersion: (options?: StorageOptions) => Promise<string>;\n  setInstalledVersion: (value: string, options?: StorageOptions) => Promise<void>;\n  getIsAuthenticated: (options?: StorageOptions) => Promise<boolean>;\n  getKdfConfig: (options?: StorageOptions) => Promise<KdfConfig>;\n  setKdfConfig: (kdfConfig: KdfConfig, options?: StorageOptions) => Promise<void>;\n  getKdfType: (options?: StorageOptions) => Promise<KdfType>;\n  setKdfType: (value: KdfType, options?: StorageOptions) => Promise<void>;\n  getKeyHash: (options?: StorageOptions) => Promise<string>;\n  setKeyHash: (value: string, options?: StorageOptions) => Promise<void>;\n  getLastActive: (options?: StorageOptions) => Promise<number>;\n  setLastActive: (value: number, options?: StorageOptions) => Promise<void>;\n  getLastSync: (options?: StorageOptions) => Promise<string>;\n  setLastSync: (value: string, options?: StorageOptions) => Promise<void>;\n  getLocalData: (options?: StorageOptions) => Promise<{ [cipherId: string]: LocalData }>;\n  setLocalData: (\n    value: { [cipherId: string]: LocalData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getLocale: (options?: StorageOptions) => Promise<string>;\n  setLocale: (value: string, options?: StorageOptions) => Promise<void>;\n  getMainWindowSize: (options?: StorageOptions) => Promise<number>;\n  setMainWindowSize: (value: number, options?: StorageOptions) => Promise<void>;\n  getMinimizeOnCopyToClipboard: (options?: StorageOptions) => Promise<boolean>;\n  setMinimizeOnCopyToClipboard: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getNeverDomains: (options?: StorageOptions) => Promise<{ [id: string]: any }>;\n  setNeverDomains: (value: { [id: string]: any }, options?: StorageOptions) => Promise<void>;\n  getNoAutoPromptBiometricsText: (options?: StorageOptions) => Promise<string>;\n  setNoAutoPromptBiometricsText: (value: string, options?: StorageOptions) => Promise<void>;\n  getOpenAtLogin: (options?: StorageOptions) => Promise<boolean>;\n  setOpenAtLogin: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getOrganizationInvitation: (options?: StorageOptions) => Promise<any>;\n  setOrganizationInvitation: (value: any, options?: StorageOptions) => Promise<void>;\n  getEmergencyAccessInvitation: (options?: StorageOptions) => Promise<any>;\n  setEmergencyAccessInvitation: (value: any, options?: StorageOptions) => Promise<void>;\n  /**\n   * @deprecated Do not call this directly, use OrganizationService\n   */\n  getOrganizations: (options?: StorageOptions) => Promise<{ [id: string]: OrganizationData }>;\n  /**\n   * @deprecated Do not call this directly, use OrganizationService\n   */\n  setOrganizations: (\n    value: { [id: string]: OrganizationData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getPasswordGenerationOptions: (options?: StorageOptions) => Promise<PasswordGeneratorOptions>;\n  setPasswordGenerationOptions: (\n    value: PasswordGeneratorOptions,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getUsernameGenerationOptions: (options?: StorageOptions) => Promise<UsernameGeneratorOptions>;\n  setUsernameGenerationOptions: (\n    value: UsernameGeneratorOptions,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getGeneratorOptions: (options?: StorageOptions) => Promise<GeneratorOptions>;\n  setGeneratorOptions: (value: GeneratorOptions, options?: StorageOptions) => Promise<void>;\n  /**\n   * Gets the user's Pin, encrypted by the user key\n   */\n  getProtectedPin: (options?: StorageOptions) => Promise<string>;\n  /**\n   * Sets the user's Pin, encrypted by the user key\n   */\n  setProtectedPin: (value: string, options?: StorageOptions) => Promise<void>;\n  getProviders: (options?: StorageOptions) => Promise<{ [id: string]: ProviderData }>;\n  setProviders: (value: { [id: string]: ProviderData }, options?: StorageOptions) => Promise<void>;\n  getPublicKey: (options?: StorageOptions) => Promise<Uint8Array>;\n  setPublicKey: (value: Uint8Array, options?: StorageOptions) => Promise<void>;\n  getRefreshToken: (options?: StorageOptions) => Promise<string>;\n  setRefreshToken: (value: string, options?: StorageOptions) => Promise<void>;\n  getRememberedEmail: (options?: StorageOptions) => Promise<string>;\n  setRememberedEmail: (value: string, options?: StorageOptions) => Promise<void>;\n  getSecurityStamp: (options?: StorageOptions) => Promise<string>;\n  setSecurityStamp: (value: string, options?: StorageOptions) => Promise<void>;\n  /**\n   * @deprecated Do not call this directly, use SettingsService\n   */\n  getSettings: (options?: StorageOptions) => Promise<AccountSettingsSettings>;\n  /**\n   * @deprecated Do not call this directly, use SettingsService\n   */\n  setSettings: (value: AccountSettingsSettings, options?: StorageOptions) => Promise<void>;\n  getSsoCodeVerifier: (options?: StorageOptions) => Promise<string>;\n  setSsoCodeVerifier: (value: string, options?: StorageOptions) => Promise<void>;\n  getSsoOrgIdentifier: (options?: StorageOptions) => Promise<string>;\n  setSsoOrganizationIdentifier: (value: string, options?: StorageOptions) => Promise<void>;\n  getSsoState: (options?: StorageOptions) => Promise<string>;\n  setSsoState: (value: string, options?: StorageOptions) => Promise<void>;\n  getUserSsoOrganizationIdentifier: (options?: StorageOptions) => Promise<string>;\n  setUserSsoOrganizationIdentifier: (\n    value: string | null,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getTheme: (options?: StorageOptions) => Promise<ThemeType>;\n  setTheme: (value: ThemeType, options?: StorageOptions) => Promise<void>;\n  getTwoFactorToken: (options?: StorageOptions) => Promise<string>;\n  setTwoFactorToken: (value: string, options?: StorageOptions) => Promise<void>;\n  getUserId: (options?: StorageOptions) => Promise<string>;\n  getUsesKeyConnector: (options?: StorageOptions) => Promise<boolean>;\n  setUsesKeyConnector: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getVaultTimeout: (options?: StorageOptions) => Promise<number>;\n  setVaultTimeout: (value: number, options?: StorageOptions) => Promise<void>;\n  getVaultTimeoutAction: (options?: StorageOptions) => Promise<string>;\n  setVaultTimeoutAction: (value: string, options?: StorageOptions) => Promise<void>;\n  getApproveLoginRequests: (options?: StorageOptions) => Promise<boolean>;\n  setApproveLoginRequests: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getWindow: () => Promise<WindowState>;\n  setWindow: (value: WindowState) => Promise<void>;\n  /**\n   * @deprecated Do not call this directly, use ConfigService\n   */\n  getServerConfig: (options?: StorageOptions) => Promise<ServerConfigData>;\n  /**\n   * @deprecated Do not call this directly, use ConfigService\n   */\n  setServerConfig: (value: ServerConfigData, options?: StorageOptions) => Promise<void>;\n\n  getAvatarColor: (options?: StorageOptions) => Promise<string | null | undefined>;\n  setAvatarColor: (value: string, options?: StorageOptions) => Promise<void>;\n  getActivateAutoFillOnPageLoadFromPolicy: (\n    options?: StorageOptions\n  ) => Promise<boolean | undefined>;\n  setActivateAutoFillOnPageLoadFromPolicy: (\n    value: boolean,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getSMOnboardingTasks: (\n    options?: StorageOptions\n  ) => Promise<Record<string, Record<string, boolean>>>;\n  setSMOnboardingTasks: (\n    value: Record<string, Record<string, boolean>>,\n    options?: StorageOptions\n  ) => Promise<void>;\n}\n","import { BehaviorSubject, filter, map, Observable, switchMap, tap } from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { Policy } from \"@bitwarden/common/admin-console/models/domain/policy\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/services/policy/policy.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\n\nimport { browserSession, sessionSync } from \"../../platform/decorators/session-sync-observable\";\n\n@browserSession\nexport class BrowserPolicyService extends PolicyService {\n  @sessionSync({\n    initializer: (obj: Jsonify<Policy>) => Object.assign(new Policy(), obj),\n    initializeAs: \"array\",\n  })\n  protected _policies: BehaviorSubject<Policy[]>;\n\n  constructor(stateService: StateService, organizationService: OrganizationService) {\n    super(stateService, organizationService);\n    this._policies.pipe(this.handleActivateAutofillPolicy.bind(this)).subscribe();\n  }\n\n  /**\n   * If the ActivateAutofill policy is enabled, save a flag indicating if we need to\n   * enable Autofill on page load.\n   */\n  private handleActivateAutofillPolicy(policies$: Observable<Policy[]>) {\n    return policies$.pipe(\n      map((policies) => policies.find((p) => p.type == PolicyType.ActivateAutofill && p.enabled)),\n      filter((p) => p != null),\n      switchMap(async (_) => [\n        await this.stateService.getActivateAutoFillOnPageLoadFromPolicy(),\n        await this.stateService.getEnableAutoFillOnPageLoad(),\n      ]),\n      tap(([activated, autofillEnabled]) => {\n        if (activated === undefined) {\n          this.stateService.setActivateAutoFillOnPageLoadFromPolicy(!autofillEnabled);\n        }\n      })\n    );\n  }\n}\n","import LockedVaultPendingNotificationsItem from \"../../background/models/lockedVaultPendingNotificationsItem\";\nimport { BrowserApi } from \"../../platform/browser/browser-api\";\nimport { ContextMenuClickedHandler } from \"../browser/context-menu-clicked-handler\";\n\nexport default class ContextMenusBackground {\n  private contextMenus: typeof chrome.contextMenus;\n\n  constructor(private contextMenuClickedHandler: ContextMenuClickedHandler) {\n    this.contextMenus = chrome.contextMenus;\n  }\n\n  init() {\n    if (!this.contextMenus) {\n      return;\n    }\n\n    this.contextMenus.onClicked.addListener((info, tab) =>\n      this.contextMenuClickedHandler.run(info, tab)\n    );\n\n    BrowserApi.messageListener(\n      \"contextmenus.background\",\n      (\n        msg: { command: string; data: LockedVaultPendingNotificationsItem },\n        sender: chrome.runtime.MessageSender\n      ) => {\n        if (msg.command === \"unlockCompleted\" && msg.data.target === \"contextmenus.background\") {\n          this.contextMenuClickedHandler\n            .cipherAction(msg.data.commandToRetry.msg.data, msg.data.commandToRetry.sender.tab)\n            .then(() => {\n              BrowserApi.tabSendMessageData(sender.tab, \"closeNotificationBar\");\n            });\n        }\n      }\n    );\n  }\n}\n","import { NotificationQueueMessageType } from \"./notificationQueueMessageType\";\n\nexport default class NotificationQueueMessage {\n  type: NotificationQueueMessageType;\n  domain: string;\n  tabId: number;\n  expires: Date;\n  wasVaultLocked: boolean;\n}\n","import { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { LoginUriView } from \"@bitwarden/common/vault/models/view/login-uri.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport NotificationQueueMessage from \"./notificationQueueMessage\";\nimport { NotificationQueueMessageType } from \"./notificationQueueMessageType\";\n\nexport default class AddLoginQueueMessage extends NotificationQueueMessage {\n  type: NotificationQueueMessageType.AddLogin;\n  username: string;\n  password: string;\n  uri: string;\n\n  static toCipherView(message: AddLoginQueueMessage, folderId?: string): CipherView {\n    const uriView = new LoginUriView();\n    uriView.uri = message.uri;\n\n    const loginView = new LoginView();\n    loginView.uris = [uriView];\n    loginView.username = message.username;\n    loginView.password = message.password;\n\n    const cipherView = new CipherView();\n    cipherView.name = (Utils.getHostname(message.uri) || message.domain).replace(/^www\\./, \"\");\n    cipherView.folderId = folderId;\n    cipherView.type = CipherType.Login;\n    cipherView.login = loginView;\n\n    return cipherView;\n  }\n}\n","export enum NotificationQueueMessageType {\n  AddLogin = 0,\n  ChangePassword = 1,\n  UnlockVault = 2,\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { ThemeType } from \"@bitwarden/common/enums\";\nimport { EnvironmentService } from \"@bitwarden/common/platform/abstractions/environment.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport AddUnlockVaultQueueMessage from \"../../background/models/add-unlock-vault-queue-message\";\nimport AddChangePasswordQueueMessage from \"../../background/models/addChangePasswordQueueMessage\";\nimport AddLoginQueueMessage from \"../../background/models/addLoginQueueMessage\";\nimport AddLoginRuntimeMessage from \"../../background/models/addLoginRuntimeMessage\";\nimport ChangePasswordRuntimeMessage from \"../../background/models/changePasswordRuntimeMessage\";\nimport LockedVaultPendingNotificationsItem from \"../../background/models/lockedVaultPendingNotificationsItem\";\nimport { NotificationQueueMessageType } from \"../../background/models/notificationQueueMessageType\";\nimport { BrowserApi } from \"../../platform/browser/browser-api\";\nimport { BrowserStateService } from \"../../platform/services/abstractions/browser-state.service\";\nimport { AutofillService } from \"../services/abstractions/autofill.service\";\n\nexport default class NotificationBackground {\n  private notificationQueue: (\n    | AddLoginQueueMessage\n    | AddChangePasswordQueueMessage\n    | AddUnlockVaultQueueMessage\n  )[] = [];\n\n  constructor(\n    private autofillService: AutofillService,\n    private cipherService: CipherService,\n    private authService: AuthService,\n    private policyService: PolicyService,\n    private folderService: FolderService,\n    private stateService: BrowserStateService,\n    private environmentService: EnvironmentService\n  ) {}\n\n  async init() {\n    if (chrome.runtime == null) {\n      return;\n    }\n\n    BrowserApi.messageListener(\n      \"notification.background\",\n      (msg: any, sender: chrome.runtime.MessageSender) => {\n        this.processMessage(msg, sender);\n      }\n    );\n\n    this.cleanupNotificationQueue();\n  }\n\n  async processMessage(msg: any, sender: chrome.runtime.MessageSender) {\n    switch (msg.command) {\n      case \"unlockCompleted\":\n        await this.handleUnlockCompleted(msg.data, sender);\n        break;\n      case \"bgGetDataForTab\":\n        await this.getDataForTab(sender.tab, msg.responseCommand);\n        break;\n      case \"bgCloseNotificationBar\":\n        await BrowserApi.tabSendMessageData(sender.tab, \"closeNotificationBar\");\n        break;\n      case \"bgAdjustNotificationBar\":\n        await BrowserApi.tabSendMessageData(sender.tab, \"adjustNotificationBar\", msg.data);\n        break;\n      case \"bgAddLogin\":\n        await this.addLogin(msg.login, sender.tab);\n        break;\n      case \"bgChangedPassword\":\n        await this.changedPassword(msg.data, sender.tab);\n        break;\n      case \"bgAddClose\":\n      case \"bgChangeClose\":\n        this.removeTabFromNotificationQueue(sender.tab);\n        break;\n      case \"bgAddSave\":\n      case \"bgChangeSave\":\n        if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n          const retryMessage: LockedVaultPendingNotificationsItem = {\n            commandToRetry: {\n              msg: {\n                command: msg,\n              },\n              sender: sender,\n            },\n            target: \"notification.background\",\n          };\n          await BrowserApi.tabSendMessageData(\n            sender.tab,\n            \"addToLockedVaultPendingNotifications\",\n            retryMessage\n          );\n          await BrowserApi.tabSendMessageData(sender.tab, \"promptForLogin\");\n          return;\n        }\n        await this.saveOrUpdateCredentials(sender.tab, msg.edit, msg.folder);\n        break;\n      case \"bgNeverSave\":\n        await this.saveNever(sender.tab);\n        break;\n      case \"collectPageDetailsResponse\":\n        switch (msg.sender) {\n          case \"notificationBar\": {\n            const forms = this.autofillService.getFormsWithPasswordFields(msg.details);\n            await BrowserApi.tabSendMessageData(msg.tab, \"notificationBarPageDetails\", {\n              details: msg.details,\n              forms: forms,\n            });\n            break;\n          }\n          default:\n            break;\n        }\n        break;\n      case \"promptForLogin\":\n        await this.unlockVault(sender.tab);\n        break;\n      default:\n        break;\n    }\n  }\n\n  async checkNotificationQueue(tab: chrome.tabs.Tab = null): Promise<void> {\n    if (this.notificationQueue.length === 0) {\n      return;\n    }\n\n    if (tab != null) {\n      await this.doNotificationQueueCheck(tab);\n      return;\n    }\n\n    const currentTab = await BrowserApi.getTabFromCurrentWindow();\n    if (currentTab != null) {\n      await this.doNotificationQueueCheck(currentTab);\n    }\n  }\n\n  private cleanupNotificationQueue() {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      if (this.notificationQueue[i].expires < new Date()) {\n        this.notificationQueue.splice(i, 1);\n      }\n    }\n    setTimeout(() => this.cleanupNotificationQueue(), 2 * 60 * 1000); // check every 2 minutes\n  }\n\n  private async doNotificationQueueCheck(tab: chrome.tabs.Tab): Promise<void> {\n    if (tab == null) {\n      return;\n    }\n\n    const tabDomain = Utils.getDomain(tab.url);\n    if (tabDomain == null) {\n      return;\n    }\n\n    for (let i = 0; i < this.notificationQueue.length; i++) {\n      if (\n        this.notificationQueue[i].tabId !== tab.id ||\n        this.notificationQueue[i].domain !== tabDomain\n      ) {\n        continue;\n      }\n\n      if (this.notificationQueue[i].type === NotificationQueueMessageType.AddLogin) {\n        BrowserApi.tabSendMessageData(tab, \"openNotificationBar\", {\n          type: \"add\",\n          typeData: {\n            isVaultLocked: this.notificationQueue[i].wasVaultLocked,\n            theme: await this.getCurrentTheme(),\n            removeIndividualVault: await this.removeIndividualVault(),\n            webVaultURL: await this.environmentService.getWebVaultUrl(),\n          },\n        });\n      } else if (this.notificationQueue[i].type === NotificationQueueMessageType.ChangePassword) {\n        BrowserApi.tabSendMessageData(tab, \"openNotificationBar\", {\n          type: \"change\",\n          typeData: {\n            isVaultLocked: this.notificationQueue[i].wasVaultLocked,\n            theme: await this.getCurrentTheme(),\n            webVaultURL: await this.environmentService.getWebVaultUrl(),\n          },\n        });\n      } else if (this.notificationQueue[i].type === NotificationQueueMessageType.UnlockVault) {\n        BrowserApi.tabSendMessageData(tab, \"openNotificationBar\", {\n          type: \"unlock\",\n          typeData: {\n            isVaultLocked: this.notificationQueue[i].wasVaultLocked,\n            theme: await this.getCurrentTheme(),\n          },\n        });\n      }\n      break;\n    }\n  }\n\n  private async getCurrentTheme() {\n    const theme = await this.stateService.getTheme();\n\n    if (theme !== ThemeType.System) {\n      return theme;\n    }\n\n    return window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n      ? ThemeType.Dark\n      : ThemeType.Light;\n  }\n\n  private removeTabFromNotificationQueue(tab: chrome.tabs.Tab) {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      if (this.notificationQueue[i].tabId === tab.id) {\n        this.notificationQueue.splice(i, 1);\n      }\n    }\n  }\n\n  private async addLogin(loginInfo: AddLoginRuntimeMessage, tab: chrome.tabs.Tab) {\n    const authStatus = await this.authService.getAuthStatus();\n    if (authStatus === AuthenticationStatus.LoggedOut) {\n      return;\n    }\n\n    const loginDomain = Utils.getDomain(loginInfo.url);\n    if (loginDomain == null) {\n      return;\n    }\n\n    let normalizedUsername = loginInfo.username;\n    if (normalizedUsername != null) {\n      normalizedUsername = normalizedUsername.toLowerCase();\n    }\n\n    const disabledAddLogin = await this.stateService.getDisableAddLoginNotification();\n    if (authStatus === AuthenticationStatus.Locked) {\n      if (disabledAddLogin) {\n        return;\n      }\n\n      this.pushAddLoginToQueue(loginDomain, loginInfo, tab, true);\n      return;\n    }\n\n    const ciphers = await this.cipherService.getAllDecryptedForUrl(loginInfo.url);\n    const usernameMatches = ciphers.filter(\n      (c) => c.login.username != null && c.login.username.toLowerCase() === normalizedUsername\n    );\n    if (usernameMatches.length === 0) {\n      if (disabledAddLogin) {\n        return;\n      }\n\n      this.pushAddLoginToQueue(loginDomain, loginInfo, tab);\n    } else if (\n      usernameMatches.length === 1 &&\n      usernameMatches[0].login.password !== loginInfo.password\n    ) {\n      const disabledChangePassword =\n        await this.stateService.getDisableChangedPasswordNotification();\n      if (disabledChangePassword) {\n        return;\n      }\n      this.pushChangePasswordToQueue(usernameMatches[0].id, loginDomain, loginInfo.password, tab);\n    }\n  }\n\n  private async pushAddLoginToQueue(\n    loginDomain: string,\n    loginInfo: AddLoginRuntimeMessage,\n    tab: chrome.tabs.Tab,\n    isVaultLocked = false\n  ) {\n    // remove any old messages for this tab\n    this.removeTabFromNotificationQueue(tab);\n    const message: AddLoginQueueMessage = {\n      type: NotificationQueueMessageType.AddLogin,\n      username: loginInfo.username,\n      password: loginInfo.password,\n      domain: loginDomain,\n      uri: loginInfo.url,\n      tabId: tab.id,\n      expires: new Date(new Date().getTime() + 5 * 60000), // 5 minutes\n      wasVaultLocked: isVaultLocked,\n    };\n    this.notificationQueue.push(message);\n    await this.checkNotificationQueue(tab);\n  }\n\n  private async changedPassword(changeData: ChangePasswordRuntimeMessage, tab: chrome.tabs.Tab) {\n    const loginDomain = Utils.getDomain(changeData.url);\n    if (loginDomain == null) {\n      return;\n    }\n\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      this.pushChangePasswordToQueue(null, loginDomain, changeData.newPassword, tab, true);\n      return;\n    }\n\n    let id: string = null;\n    const ciphers = await this.cipherService.getAllDecryptedForUrl(changeData.url);\n    if (changeData.currentPassword != null) {\n      const passwordMatches = ciphers.filter(\n        (c) => c.login.password === changeData.currentPassword\n      );\n      if (passwordMatches.length === 1) {\n        id = passwordMatches[0].id;\n      }\n    } else if (ciphers.length === 1) {\n      id = ciphers[0].id;\n    }\n    if (id != null) {\n      this.pushChangePasswordToQueue(id, loginDomain, changeData.newPassword, tab);\n    }\n  }\n\n  private async unlockVault(tab: chrome.tabs.Tab) {\n    const currentAuthStatus = await this.authService.getAuthStatus();\n    if (currentAuthStatus !== AuthenticationStatus.Locked || this.notificationQueue.length) {\n      return;\n    }\n\n    const loginDomain = Utils.getDomain(tab.url);\n    if (!loginDomain) {\n      return;\n    }\n\n    this.pushUnlockVaultToQueue(loginDomain, tab);\n  }\n\n  private async pushChangePasswordToQueue(\n    cipherId: string,\n    loginDomain: string,\n    newPassword: string,\n    tab: chrome.tabs.Tab,\n    isVaultLocked = false\n  ) {\n    // remove any old messages for this tab\n    this.removeTabFromNotificationQueue(tab);\n    const message: AddChangePasswordQueueMessage = {\n      type: NotificationQueueMessageType.ChangePassword,\n      cipherId: cipherId,\n      newPassword: newPassword,\n      domain: loginDomain,\n      tabId: tab.id,\n      expires: new Date(new Date().getTime() + 5 * 60000), // 5 minutes\n      wasVaultLocked: isVaultLocked,\n    };\n    this.notificationQueue.push(message);\n    await this.checkNotificationQueue(tab);\n  }\n\n  private async pushUnlockVaultToQueue(loginDomain: string, tab: chrome.tabs.Tab) {\n    this.removeTabFromNotificationQueue(tab);\n    const message: AddUnlockVaultQueueMessage = {\n      type: NotificationQueueMessageType.UnlockVault,\n      domain: loginDomain,\n      tabId: tab.id,\n      expires: new Date(new Date().getTime() + 0.5 * 60000), // 30 seconds\n      wasVaultLocked: true,\n    };\n    this.notificationQueue.push(message);\n    await this.checkNotificationQueue(tab);\n    this.removeTabFromNotificationQueue(tab);\n  }\n\n  private async saveOrUpdateCredentials(tab: chrome.tabs.Tab, edit: boolean, folderId?: string) {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      const queueMessage = this.notificationQueue[i];\n      if (queueMessage.tabId !== tab.id || !(queueMessage.type in NotificationQueueMessageType)) {\n        continue;\n      }\n\n      const tabDomain = Utils.getDomain(tab.url);\n      if (tabDomain != null && tabDomain !== queueMessage.domain) {\n        continue;\n      }\n\n      this.notificationQueue.splice(i, 1);\n      BrowserApi.tabSendMessageData(tab, \"closeNotificationBar\");\n\n      if (queueMessage.type === NotificationQueueMessageType.ChangePassword) {\n        const cipherView = await this.getDecryptedCipherById(queueMessage.cipherId);\n        await this.updatePassword(cipherView, queueMessage.newPassword, edit, tab);\n        return;\n      }\n\n      if (queueMessage.type === NotificationQueueMessageType.AddLogin) {\n        // If the vault was locked, check if a cipher needs updating instead of creating a new one\n        if (queueMessage.wasVaultLocked) {\n          const allCiphers = await this.cipherService.getAllDecryptedForUrl(queueMessage.uri);\n          const existingCipher = allCiphers.find(\n            (c) =>\n              c.login.username != null && c.login.username.toLowerCase() === queueMessage.username\n          );\n\n          if (existingCipher != null) {\n            await this.updatePassword(existingCipher, queueMessage.password, edit, tab);\n            return;\n          }\n        }\n\n        folderId = (await this.folderExists(folderId)) ? folderId : null;\n        const newCipher = AddLoginQueueMessage.toCipherView(queueMessage, folderId);\n\n        if (edit) {\n          await this.editItem(newCipher, tab);\n          return;\n        }\n\n        const cipher = await this.cipherService.encrypt(newCipher);\n        await this.cipherService.createWithServer(cipher);\n        BrowserApi.tabSendMessageData(tab, \"addedCipher\");\n      }\n    }\n  }\n\n  private async updatePassword(\n    cipherView: CipherView,\n    newPassword: string,\n    edit: boolean,\n    tab: chrome.tabs.Tab\n  ) {\n    cipherView.login.password = newPassword;\n\n    if (edit) {\n      await this.editItem(cipherView, tab);\n      BrowserApi.tabSendMessage(tab, \"editedCipher\");\n      return;\n    }\n\n    const cipher = await this.cipherService.encrypt(cipherView);\n    await this.cipherService.updateWithServer(cipher);\n    // We've only updated the password, no need to broadcast editedCipher message\n    return;\n  }\n\n  private async editItem(cipherView: CipherView, senderTab: chrome.tabs.Tab) {\n    await this.stateService.setAddEditCipherInfo({\n      cipher: cipherView,\n      collectionIds: cipherView.collectionIds,\n    });\n\n    await BrowserApi.tabSendMessageData(senderTab, \"openAddEditCipher\", {\n      cipherId: cipherView.id,\n    });\n  }\n\n  private async folderExists(folderId: string) {\n    if (Utils.isNullOrWhitespace(folderId) || folderId === \"null\") {\n      return false;\n    }\n\n    const folders = await firstValueFrom(this.folderService.folderViews$);\n    return folders.some((x) => x.id === folderId);\n  }\n\n  private async getDecryptedCipherById(cipherId: string) {\n    const cipher = await this.cipherService.get(cipherId);\n    if (cipher != null && cipher.type === CipherType.Login) {\n      return await cipher.decrypt(await this.cipherService.getKeyForCipherKeyDecryption(cipher));\n    }\n    return null;\n  }\n\n  private async saveNever(tab: chrome.tabs.Tab) {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      const queueMessage = this.notificationQueue[i];\n      if (\n        queueMessage.tabId !== tab.id ||\n        queueMessage.type !== NotificationQueueMessageType.AddLogin\n      ) {\n        continue;\n      }\n\n      const tabDomain = Utils.getDomain(tab.url);\n      if (tabDomain != null && tabDomain !== queueMessage.domain) {\n        continue;\n      }\n\n      this.notificationQueue.splice(i, 1);\n      BrowserApi.tabSendMessageData(tab, \"closeNotificationBar\");\n\n      const hostname = Utils.getHostname(tab.url);\n      await this.cipherService.saveNeverDomain(hostname);\n    }\n  }\n\n  private async getDataForTab(tab: chrome.tabs.Tab, responseCommand: string) {\n    const responseData: any = {};\n    if (responseCommand === \"notificationBarGetFoldersList\") {\n      responseData.folders = await firstValueFrom(this.folderService.folderViews$);\n    }\n\n    await BrowserApi.tabSendMessageData(tab, responseCommand, responseData);\n  }\n\n  private async removeIndividualVault(): Promise<boolean> {\n    return await firstValueFrom(\n      this.policyService.policyAppliesToActiveUser$(PolicyType.PersonalOwnership)\n    );\n  }\n\n  private async handleUnlockCompleted(\n    messageData: LockedVaultPendingNotificationsItem,\n    sender: chrome.runtime.MessageSender\n  ): Promise<void> {\n    if (messageData.commandToRetry.msg.command === \"autofill_login\") {\n      await BrowserApi.tabSendMessageData(sender.tab, \"closeNotificationBar\");\n    }\n\n    if (messageData.target !== \"notification.background\") {\n      return;\n    }\n\n    await this.processMessage(\n      messageData.commandToRetry.msg.command,\n      messageData.commandToRetry.sender\n    );\n  }\n}\n","import MainBackground from \"../../background/main.background\";\n\nimport NotificationBackground from \"./notification.background\";\n\nexport default class TabsBackground {\n  constructor(\n    private main: MainBackground,\n    private notificationBackground: NotificationBackground\n  ) {}\n\n  private focusedWindowId: number;\n\n  async init() {\n    if (!chrome.tabs || !chrome.windows) {\n      return;\n    }\n\n    chrome.windows.onFocusChanged.addListener(async (windowId: number) => {\n      if (windowId === null || windowId < 0) {\n        return;\n      }\n\n      this.focusedWindowId = windowId;\n      await this.main.refreshBadge();\n      await this.main.refreshMenu();\n      this.main.messagingService.send(\"windowChanged\");\n    });\n\n    chrome.tabs.onActivated.addListener(async (activeInfo: chrome.tabs.TabActiveInfo) => {\n      await this.main.refreshBadge();\n      await this.main.refreshMenu();\n      this.main.messagingService.send(\"tabChanged\");\n    });\n\n    chrome.tabs.onReplaced.addListener(async (addedTabId: number, removedTabId: number) => {\n      if (this.main.onReplacedRan) {\n        return;\n      }\n      this.main.onReplacedRan = true;\n\n      await this.notificationBackground.checkNotificationQueue();\n      await this.main.refreshBadge();\n      await this.main.refreshMenu();\n      this.main.messagingService.send(\"tabChanged\");\n    });\n\n    chrome.tabs.onUpdated.addListener(\n      async (tabId: number, changeInfo: chrome.tabs.TabChangeInfo, tab: chrome.tabs.Tab) => {\n        if (this.focusedWindowId > 0 && tab.windowId != this.focusedWindowId) {\n          return;\n        }\n\n        if (!tab.active) {\n          return;\n        }\n\n        if (this.main.onUpdatedRan) {\n          return;\n        }\n        this.main.onUpdatedRan = true;\n\n        await this.notificationBackground.checkNotificationQueue(tab);\n        await this.main.refreshBadge();\n        await this.main.refreshMenu();\n        this.main.messagingService.send(\"tabChanged\");\n      }\n    );\n  }\n}\n","export type CachedServices = Record<string, unknown>;\n\nexport type FactoryOptions = {\n  alwaysInitializeNewService?: boolean;\n  doNotStoreInitializedService?: boolean;\n  [optionsKey: string]: unknown;\n};\n\nexport async function factory<\n  TCache extends CachedServices,\n  TName extends keyof TCache,\n  TOpts extends FactoryOptions\n>(\n  cachedServices: TCache,\n  name: TName,\n  opts: TOpts,\n  factory: () => TCache[TName] | Promise<TCache[TName]>\n): Promise<TCache[TName]> {\n  let instance = cachedServices[name];\n  if (opts.alwaysInitializeNewService || !instance) {\n    const instanceOrPromise = factory();\n    instance = instanceOrPromise instanceof Promise ? await instanceOrPromise : instanceOrPromise;\n  }\n\n  if (!opts.doNotStoreInitializedService) {\n    cachedServices[name] = instance;\n  }\n\n  return instance as TCache[TName];\n}\n","import { LogLevelType } from \"@bitwarden/common/enums\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { ConsoleLogService } from \"@bitwarden/common/platform/services/console-log.service\";\n\nimport { FactoryOptions, CachedServices, factory } from \"./factory-options\";\n\ntype LogServiceFactoryOptions = FactoryOptions & {\n  logServiceOptions: {\n    isDev: boolean;\n    filter?: (level: LogLevelType) => boolean;\n  };\n};\n\nexport type LogServiceInitOptions = LogServiceFactoryOptions;\n\nexport function logServiceFactory(\n  cache: { logService?: LogService } & CachedServices,\n  opts: LogServiceInitOptions\n): Promise<LogService> {\n  return factory(\n    cache,\n    \"logService\",\n    opts,\n    () => new ConsoleLogService(opts.logServiceOptions.isDev, opts.logServiceOptions.filter)\n  );\n}\n","import { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\n\nimport { BrowserApi } from \"../browser/browser-api\";\n\nexport default class BrowserMessagingService implements MessagingService {\n  send(subscriber: string, arg: any = {}) {\n    return BrowserApi.sendMessage(subscriber, arg);\n  }\n}\n","import { MessagingService as AbstractMessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\n\nimport {\n  CachedServices,\n  factory,\n  FactoryOptions,\n} from \"../../background/service-factories/factory-options\";\nimport BrowserMessagingService from \"../../services/browser-messaging.service\";\n\ntype MessagingServiceFactoryOptions = FactoryOptions;\n\nexport type MessagingServiceInitOptions = MessagingServiceFactoryOptions;\n\nexport function messagingServiceFactory(\n  cache: { messagingService?: AbstractMessagingService } & CachedServices,\n  opts: MessagingServiceInitOptions\n): Promise<AbstractMessagingService> {\n  return factory(cache, \"messagingService\", opts, () => new BrowserMessagingService());\n}\n","import { Observable } from \"rxjs\";\n\nimport { UserId } from \"../../types/guid\";\nimport { AuthenticationStatus } from \"../enums/authentication-status\";\n\nexport type AccountInfo = {\n  status: AuthenticationStatus;\n  email: string;\n  name: string | undefined;\n};\n\nexport abstract class AccountService {\n  accounts$: Observable<Record<UserId, AccountInfo>>;\n  activeAccount$: Observable<{ id: UserId | undefined } & AccountInfo>;\n  accountLock$: Observable<UserId>;\n  accountLogout$: Observable<UserId>;\n  /**\n   * Updates the `accounts$` observable with the new account data.\n   * @param userId\n   * @param accountData\n   */\n  abstract addAccount(userId: UserId, accountData: AccountInfo): void;\n  /**\n   * updates the `accounts$` observable with the new preferred name for the account.\n   * @param userId\n   * @param name\n   */\n  abstract setAccountName(userId: UserId, name: string): void;\n  /**\n   * updates the `accounts$` observable with the new email for the account.\n   * @param userId\n   * @param email\n   */\n  abstract setAccountEmail(userId: UserId, email: string): void;\n  /**\n   * Updates the `accounts$` observable with the new account status.\n   * Also emits the `accountLock$` or `accountLogout$` observable if the status is `Locked` or `LoggedOut` respectively.\n   * @param userId\n   * @param status\n   */\n  abstract setAccountStatus(userId: UserId, status: AuthenticationStatus): void;\n  /**\n   * Updates the `activeAccount$` observable with the new active account.\n   * @param userId\n   */\n  abstract switchAccount(userId: UserId): void;\n}\n\nexport abstract class InternalAccountService extends AccountService {\n  abstract delete(): void;\n}\n","import { LogLevelType } from \"../../enums\";\n\nexport abstract class LogService {\n  debug: (message: string) => void;\n  info: (message: string) => void;\n  warning: (message: string) => void;\n  error: (message: string) => void;\n  write: (level: LogLevelType, message: string) => void;\n}\n","import { MigrationHelper } from \"./migration-helper\";\nimport { Direction, Migrator, VersionFrom, VersionTo } from \"./migrator\";\n\nexport class MigrationBuilder<TCurrent extends number = 0> {\n  /** Create a new MigrationBuilder with an empty buffer of migrations to perform.\n   *\n   * Add migrations to the buffer with {@link with} and {@link rollback}.\n   * @returns A new MigrationBuilder.\n   */\n  static create(): MigrationBuilder<0> {\n    return new MigrationBuilder([]);\n  }\n\n  private constructor(\n    private migrations: readonly { migrator: Migrator<number, number>; direction: Direction }[]\n  ) {}\n\n  /** Add a migrator to the MigrationBuilder. Types are updated such that the chained MigrationBuilder must currently be\n   * at state version equal to the from version of the migrator. Return as MigrationBuilder<TTo> where TTo is the to\n   * version of the migrator, so that the next migrator can be chained.\n   *\n   * @param migrate A migrator class or a tuple of a migrator class, the from version, and the to version. A tuple is\n   * required to instantiate version numbers unless a default constructor is defined.\n   * @returns A new MigrationBuilder with the to version of the migrator as the current version.\n   */\n  with<\n    TMigrator extends Migrator<number, number>,\n    TFrom extends VersionFrom<TMigrator> & TCurrent,\n    TTo extends VersionTo<TMigrator>\n  >(\n    ...migrate: [new () => TMigrator] | [new (from: TFrom, to: TTo) => TMigrator, TFrom, TTo]\n  ): MigrationBuilder<TTo> {\n    return this.addMigrator(migrate, \"up\");\n  }\n\n  /** Add a migrator to rollback on the MigrationBuilder's list of migrations. As with {@link with}, types of\n   * MigrationBuilder and Migrator must align. However, this time the migration is reversed so TCurrent of the\n   * MigrationBuilder must be equal to the to version of the migrator. Return as MigrationBuilder<TFrom> where TFrom\n   * is the from version of the migrator, so that the next migrator can be chained.\n   *\n   * @param migrate A migrator class or a tuple of a migrator class, the from version, and the to version. A tuple is\n   * required to instantiate version numbers unless a default constructor is defined.\n   * @returns A new MigrationBuilder with the from version of the migrator as the current version.\n   */\n  rollback<\n    TMigrator extends Migrator<number, number>,\n    TFrom extends VersionFrom<TMigrator>,\n    TTo extends VersionTo<TMigrator> & TCurrent\n  >(\n    ...migrate: [new () => TMigrator] | [new (from: TFrom, to: TTo) => TMigrator, TTo, TFrom]\n  ): MigrationBuilder<TFrom> {\n    if (migrate.length === 3) {\n      migrate = [migrate[0], migrate[2], migrate[1]];\n    }\n    return this.addMigrator(migrate, \"down\");\n  }\n\n  /** Execute the migrations as defined in the MigrationBuilder's migrator buffer */\n  migrate(helper: MigrationHelper): Promise<void> {\n    return this.migrations.reduce(\n      (promise, migrator) =>\n        promise.then(async () => {\n          await this.runMigrator(migrator.migrator, helper, migrator.direction);\n        }),\n      Promise.resolve()\n    );\n  }\n\n  private addMigrator<\n    TMigrator extends Migrator<number, number>,\n    TFrom extends VersionFrom<TMigrator> & TCurrent,\n    TTo extends VersionTo<TMigrator>\n  >(\n    migrate: [new () => TMigrator] | [new (from: TFrom, to: TTo) => TMigrator, TFrom, TTo],\n    direction: Direction = \"up\"\n  ) {\n    const newMigration =\n      migrate.length === 1\n        ? { migrator: new migrate[0](), direction }\n        : { migrator: new migrate[0](migrate[1], migrate[2]), direction };\n\n    return new MigrationBuilder<TTo>([...this.migrations, newMigration]);\n  }\n\n  private async runMigrator(\n    migrator: Migrator<number, number>,\n    helper: MigrationHelper,\n    direction: Direction\n  ): Promise<void> {\n    const shouldMigrate = await migrator.shouldMigrate(helper, direction);\n    helper.info(\n      `Migrator ${migrator.constructor.name} (to version ${migrator.toVersion}) should migrate: ${shouldMigrate} - ${direction}`\n    );\n    if (shouldMigrate) {\n      const method = direction === \"up\" ? migrator.migrate : migrator.rollback;\n      await method(helper);\n      helper.info(\n        `Migrator ${migrator.constructor.name} (to version ${migrator.toVersion}) migrated - ${direction}`\n      );\n      await migrator.updateVersion(helper, direction);\n      helper.info(\n        `Migrator ${migrator.constructor.name} (to version ${migrator.toVersion}) updated version - ${direction}`\n      );\n    }\n  }\n}\n","// eslint-disable-next-line import/no-restricted-paths -- Needed to print log messages\nimport { LogService } from \"../platform/abstractions/log.service\";\n// eslint-disable-next-line import/no-restricted-paths -- Needed to interface with storage locations\nimport { AbstractStorageService } from \"../platform/abstractions/storage.service\";\n\nexport class MigrationHelper {\n  constructor(\n    public currentVersion: number,\n    private storageService: AbstractStorageService,\n    public logService: LogService\n  ) {}\n\n  get<T>(key: string): Promise<T> {\n    return this.storageService.get<T>(key);\n  }\n\n  set<T>(key: string, value: T): Promise<void> {\n    this.logService.info(`Setting ${key}`);\n    return this.storageService.save(key, value);\n  }\n\n  info(message: string): void {\n    this.logService.info(message);\n  }\n\n  async getAccounts<ExpectedAccountType>(): Promise<\n    { userId: string; account: ExpectedAccountType }[]\n  > {\n    const userIds = (await this.get<string[]>(\"authenticatedAccounts\")) ?? [];\n    return Promise.all(\n      userIds.map(async (userId) => ({\n        userId,\n        account: await this.get<ExpectedAccountType>(userId),\n      }))\n    );\n  }\n}\n","import { NonNegativeInteger } from \"type-fest\";\n\nimport { MigrationHelper } from \"./migration-helper\";\n\nexport const IRREVERSIBLE = new Error(\"Irreversible migration\");\n\nexport type VersionFrom<T> = T extends Migrator<infer TFrom, number>\n  ? TFrom extends NonNegativeInteger<TFrom>\n    ? TFrom\n    : never\n  : never;\nexport type VersionTo<T> = T extends Migrator<number, infer TTo>\n  ? TTo extends NonNegativeInteger<TTo>\n    ? TTo\n    : never\n  : never;\nexport type Direction = \"up\" | \"down\";\n\nexport abstract class Migrator<TFrom extends number, TTo extends number> {\n  constructor(public fromVersion: TFrom, public toVersion: TTo) {\n    if (fromVersion == null || toVersion == null) {\n      throw new Error(\"Invalid migration\");\n    }\n    if (fromVersion > toVersion) {\n      throw new Error(\"Invalid migration\");\n    }\n  }\n\n  shouldMigrate(helper: MigrationHelper, direction: Direction): Promise<boolean> {\n    const startVersion = direction === \"up\" ? this.fromVersion : this.toVersion;\n    return Promise.resolve(helper.currentVersion === startVersion);\n  }\n  abstract migrate(helper: MigrationHelper): Promise<void>;\n  abstract rollback(helper: MigrationHelper): Promise<void>;\n  async updateVersion(helper: MigrationHelper, direction: Direction): Promise<void> {\n    const endVersion = direction === \"up\" ? this.toVersion : this.fromVersion;\n    helper.currentVersion = endVersion;\n    await helper.set(\"stateVersion\", endVersion);\n  }\n}\n","// eslint-disable-next-line import/no-restricted-paths -- Used for token decoding, which are valid for days. We want the latest\nimport { TokenService } from \"../../auth/services/token.service\";\nimport { MigrationHelper } from \"../migration-helper\";\nimport { Migrator, IRREVERSIBLE, Direction } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  profile?: { hasPremiumPersonally?: boolean };\n  tokens?: { accessToken?: string };\n};\n\nexport class FixPremiumMigrator extends Migrator<2, 3> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    async function fixPremium(userId: string, account: ExpectedAccountType) {\n      if (account?.profile?.hasPremiumPersonally === null && account.tokens?.accessToken != null) {\n        let decodedToken: { premium: boolean };\n        try {\n          decodedToken = await TokenService.decodeToken(account.tokens.accessToken);\n        } catch {\n          return;\n        }\n\n        if (decodedToken?.premium == null) {\n          return;\n        }\n\n        account.profile.hasPremiumPersonally = decodedToken?.premium;\n        return helper.set(userId, account);\n      }\n    }\n\n    await Promise.all(accounts.map(({ userId, account }) => fixPremium(userId, account)));\n  }\n\n  rollback(helper: MigrationHelper): Promise<void> {\n    throw IRREVERSIBLE;\n  }\n\n  // Override is necessary because default implementation assumes `stateVersion` at the root, but for this version\n  // it is nested inside a global object.\n  override async updateVersion(helper: MigrationHelper, direction: Direction): Promise<void> {\n    const endVersion = direction === \"up\" ? this.toVersion : this.fromVersion;\n    helper.currentVersion = endVersion;\n    const global: Record<string, unknown> = (await helper.get(\"global\")) || {};\n    await helper.set(\"global\", { ...global, stateVersion: endVersion });\n  }\n}\n","import { MigrationHelper } from \"../migration-helper\";\nimport { Direction, IRREVERSIBLE, Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = { profile?: { everBeenUnlocked?: boolean } };\n\nexport class RemoveEverBeenUnlockedMigrator extends Migrator<3, 4> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    async function removeEverBeenUnlocked(userId: string, account: ExpectedAccountType) {\n      if (account?.profile?.everBeenUnlocked != null) {\n        delete account.profile.everBeenUnlocked;\n        return helper.set(userId, account);\n      }\n    }\n\n    Promise.all(accounts.map(({ userId, account }) => removeEverBeenUnlocked(userId, account)));\n  }\n\n  rollback(helper: MigrationHelper): Promise<void> {\n    throw IRREVERSIBLE;\n  }\n\n  // Override is necessary because default implementation assumes `stateVersion` at the root, but for this version\n  // it is nested inside a global object.\n  override async updateVersion(helper: MigrationHelper, direction: Direction): Promise<void> {\n    const endVersion = direction === \"up\" ? this.toVersion : this.fromVersion;\n    helper.currentVersion = endVersion;\n    const global: { stateVersion: number } = (await helper.get(\"global\")) || ({} as any);\n    await helper.set(\"global\", { ...global, stateVersion: endVersion });\n  }\n}\n","import { MigrationHelper } from \"../migration-helper\";\nimport { Direction, Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = { keys?: { organizationKeys?: { encrypted: Record<string, string> } } };\ntype NewAccountType = {\n  keys?: {\n    organizationKeys?: { encrypted: Record<string, { type: \"organization\"; key: string }> };\n  };\n};\n\nexport class AddKeyTypeToOrgKeysMigrator extends Migrator<4, 5> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts();\n\n    async function updateOrgKey(userId: string, account: ExpectedAccountType) {\n      const encryptedOrgKeys = account?.keys?.organizationKeys?.encrypted;\n      if (encryptedOrgKeys == null) {\n        return;\n      }\n\n      const newOrgKeys: Record<string, { type: \"organization\"; key: string }> = {};\n\n      Object.entries(encryptedOrgKeys).forEach(([orgId, encKey]) => {\n        newOrgKeys[orgId] = {\n          type: \"organization\",\n          key: encKey,\n        };\n      });\n      (account as any).keys.organizationKeys.encrypted = newOrgKeys;\n\n      await helper.set(userId, account);\n    }\n\n    Promise.all(accounts.map(({ userId, account }) => updateOrgKey(userId, account)));\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts();\n\n    async function updateOrgKey(userId: string, account: NewAccountType) {\n      const encryptedOrgKeys = account?.keys?.organizationKeys?.encrypted;\n      if (encryptedOrgKeys == null) {\n        return;\n      }\n\n      const newOrgKeys: Record<string, string> = {};\n\n      Object.entries(encryptedOrgKeys).forEach(([orgId, encKey]) => {\n        newOrgKeys[orgId] = encKey.key;\n      });\n      (account as any).keys.organizationKeys.encrypted = newOrgKeys;\n\n      await helper.set(userId, account);\n    }\n\n    Promise.all(accounts.map(async ({ userId, account }) => updateOrgKey(userId, account)));\n  }\n\n  // Override is necessary because default implementation assumes `stateVersion` at the root, but for this version\n  // it is nested inside a global object.\n  override async updateVersion(helper: MigrationHelper, direction: Direction): Promise<void> {\n    const endVersion = direction === \"up\" ? this.toVersion : this.fromVersion;\n    helper.currentVersion = endVersion;\n    const global: { stateVersion: number } = (await helper.get(\"global\")) || ({} as any);\n    await helper.set(\"global\", { ...global, stateVersion: endVersion });\n  }\n}\n","import { MigrationHelper } from \"../migration-helper\";\nimport { Direction, IRREVERSIBLE, Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = { keys?: { legacyEtmKey?: string } };\n\nexport class RemoveLegacyEtmKeyMigrator extends Migrator<5, 6> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    async function updateAccount(userId: string, account: ExpectedAccountType) {\n      if (account?.keys?.legacyEtmKey) {\n        delete account.keys.legacyEtmKey;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all(accounts.map(({ userId, account }) => updateAccount(userId, account)));\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    throw IRREVERSIBLE;\n  }\n\n  // Override is necessary because default implementation assumes `stateVersion` at the root, but for this version\n  // it is nested inside a global object.\n  override async updateVersion(helper: MigrationHelper, direction: Direction): Promise<void> {\n    const endVersion = direction === \"up\" ? this.toVersion : this.fromVersion;\n    helper.currentVersion = endVersion;\n    const global: { stateVersion: number } = (await helper.get(\"global\")) || ({} as any);\n    await helper.set(\"global\", { ...global, stateVersion: endVersion });\n  }\n}\n","import { MigrationHelper } from \"../migration-helper\";\nimport { Direction, IRREVERSIBLE, Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = { settings?: { disableAutoBiometricsPrompt?: boolean } };\n\nexport class MoveBiometricAutoPromptToAccount extends Migrator<6, 7> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const global = await helper.get<{ noAutoPromptBiometrics?: boolean }>(\"global\");\n    const noAutoPromptBiometrics = global?.noAutoPromptBiometrics ?? false;\n\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function updateAccount(userId: string, account: ExpectedAccountType) {\n      if (account == null) {\n        return;\n      }\n\n      if (noAutoPromptBiometrics) {\n        account.settings = Object.assign(account?.settings ?? {}, {\n          disableAutoBiometricsPrompt: true,\n        });\n        await helper.set(userId, account);\n      }\n    }\n\n    delete global.noAutoPromptBiometrics;\n\n    await Promise.all([\n      ...accounts.map(({ userId, account }) => updateAccount(userId, account)),\n      helper.set(\"global\", global),\n    ]);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    throw IRREVERSIBLE;\n  }\n\n  // Override is necessary because default implementation assumes `stateVersion` at the root, but for this version\n  // it is nested inside a global object.\n  override async updateVersion(helper: MigrationHelper, direction: Direction): Promise<void> {\n    const endVersion = direction === \"up\" ? this.toVersion : this.fromVersion;\n    helper.currentVersion = endVersion;\n    const global: { stateVersion: number } = (await helper.get(\"global\")) || ({} as any);\n    await helper.set(\"global\", { ...global, stateVersion: endVersion });\n  }\n}\n","import { JsonObject } from \"type-fest\";\n\nimport { MigrationHelper } from \"../migration-helper\";\nimport { Direction, Migrator } from \"../migrator\";\n\nexport class MoveStateVersionMigrator extends Migrator<7, 8> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const global = await helper.get<{ stateVersion: number }>(\"global\");\n    if (global.stateVersion) {\n      await helper.set(\"stateVersion\", global.stateVersion);\n      delete global.stateVersion;\n      await helper.set(\"global\", global);\n    } else {\n      throw new Error(\"Migration failed, state version not found\");\n    }\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const version = await helper.get<number>(\"stateVersion\");\n    const global = await helper.get<JsonObject>(\"global\");\n    await helper.set(\"global\", { ...global, stateVersion: version });\n    await helper.set(\"stateVersion\", undefined);\n  }\n\n  // Override is necessary because default implementation assumes `stateVersion` at the root, but this migration moves\n  // it from a `global` object to root.This makes for unique rollback versioning.\n  override async updateVersion(helper: MigrationHelper, direction: Direction): Promise<void> {\n    const endVersion = direction === \"up\" ? this.toVersion : this.fromVersion;\n    helper.currentVersion = endVersion;\n    if (direction === \"up\") {\n      await helper.set(\"stateVersion\", endVersion);\n    } else {\n      const global: { stateVersion: number } = (await helper.get(\"global\")) || ({} as any);\n      await helper.set(\"global\", { ...global, stateVersion: endVersion });\n    }\n  }\n}\n","import { MinVersion, MIN_VERSION } from \"../migrate\";\nimport { MigrationHelper } from \"../migration-helper\";\nimport { IRREVERSIBLE, Migrator } from \"../migrator\";\n\nexport function minVersionError(current: number) {\n  return `Your local data is too old to be migrated. Your current state version is ${current}, but minimum version is ${MIN_VERSION}.`;\n}\n\nexport class MinVersionMigrator extends Migrator<0, MinVersion> {\n  constructor() {\n    super(0, MIN_VERSION);\n  }\n\n  // Overrides the default implementation to catch any version that may be passed in.\n  override shouldMigrate(helper: MigrationHelper): Promise<boolean> {\n    return Promise.resolve(helper.currentVersion < MIN_VERSION);\n  }\n  async migrate(helper: MigrationHelper): Promise<void> {\n    if (helper.currentVersion < MIN_VERSION) {\n      throw new Error(minVersionError(helper.currentVersion));\n    }\n  }\n  async rollback(helper: MigrationHelper): Promise<void> {\n    throw IRREVERSIBLE;\n  }\n}\n","// eslint-disable-next-line import/no-restricted-paths -- Needed to print log messages\nimport { LogService } from \"../platform/abstractions/log.service\";\n// eslint-disable-next-line import/no-restricted-paths -- Needed to interface with storage locations\nimport { AbstractStorageService } from \"../platform/abstractions/storage.service\";\n\nimport { MigrationBuilder } from \"./migration-builder\";\nimport { MigrationHelper } from \"./migration-helper\";\nimport { FixPremiumMigrator } from \"./migrations/3-fix-premium\";\nimport { RemoveEverBeenUnlockedMigrator } from \"./migrations/4-remove-ever-been-unlocked\";\nimport { AddKeyTypeToOrgKeysMigrator } from \"./migrations/5-add-key-type-to-org-keys\";\nimport { RemoveLegacyEtmKeyMigrator } from \"./migrations/6-remove-legacy-etm-key\";\nimport { MoveBiometricAutoPromptToAccount } from \"./migrations/7-move-biometric-auto-prompt-to-account\";\nimport { MoveStateVersionMigrator } from \"./migrations/8-move-state-version\";\nimport { MinVersionMigrator } from \"./migrations/min-version\";\n\nexport const MIN_VERSION = 2;\nexport const CURRENT_VERSION = 8;\nexport type MinVersion = typeof MIN_VERSION;\n\nexport async function migrate(\n  storageService: AbstractStorageService,\n  logService: LogService\n): Promise<void> {\n  const migrationHelper = new MigrationHelper(\n    await currentVersion(storageService, logService),\n    storageService,\n    logService\n  );\n  if (migrationHelper.currentVersion < 0) {\n    // Cannot determine state, assuming empty so we don't repeatedly apply a migration.\n    await storageService.save(\"stateVersion\", CURRENT_VERSION);\n    return;\n  }\n  MigrationBuilder.create()\n    .with(MinVersionMigrator)\n    .with(FixPremiumMigrator, 2, 3)\n    .with(RemoveEverBeenUnlockedMigrator, 3, 4)\n    .with(AddKeyTypeToOrgKeysMigrator, 4, 5)\n    .with(RemoveLegacyEtmKeyMigrator, 5, 6)\n    .with(MoveBiometricAutoPromptToAccount, 6, 7)\n    .with(MoveStateVersionMigrator, 7, CURRENT_VERSION)\n    .migrate(migrationHelper);\n}\n\nexport async function currentVersion(\n  storageService: AbstractStorageService,\n  logService: LogService\n) {\n  let state = await storageService.get<number>(\"stateVersion\");\n  if (state == null) {\n    // Pre v8\n    state = (await storageService.get<{ stateVersion: number }>(\"global\"))?.stateVersion;\n  }\n  if (state == null) {\n    logService.info(\"No state version found, assuming empty state.\");\n    return -1;\n  }\n  logService.info(`State version: ${state}`);\n  return state;\n}\n","import { View } from \"../../../../models/view/view\";\nimport { DeepJsonify } from \"../../../../types/deep-jsonify\";\nimport { SendFile } from \"../domain/send-file\";\n\nexport class SendFileView implements View {\n  id: string = null;\n  size: string = null;\n  sizeName: string = null;\n  fileName: string = null;\n\n  constructor(f?: SendFile) {\n    if (!f) {\n      return;\n    }\n\n    this.id = f.id;\n    this.size = f.size;\n    this.sizeName = f.sizeName;\n  }\n\n  get fileSize(): number {\n    try {\n      if (this.size != null) {\n        return parseInt(this.size, null);\n      }\n    } catch {\n      // Invalid file size.\n    }\n    return 0;\n  }\n\n  static fromJSON(json: DeepJsonify<SendFileView>) {\n    if (json == null) {\n      return null;\n    }\n\n    return Object.assign(new SendFileView(), json);\n  }\n}\n","import { View } from \"../../../../models/view/view\";\nimport { DeepJsonify } from \"../../../../types/deep-jsonify\";\nimport { SendText } from \"../domain/send-text\";\n\nexport class SendTextView implements View {\n  text: string = null;\n  hidden: boolean;\n\n  constructor(t?: SendText) {\n    if (!t) {\n      return;\n    }\n\n    this.hidden = t.hidden;\n  }\n\n  get maskedText(): string {\n    return this.text != null ? \"••••••••\" : null;\n  }\n\n  static fromJSON(json: DeepJsonify<SendTextView>) {\n    if (json == null) {\n      return null;\n    }\n\n    return Object.assign(new SendTextView(), json);\n  }\n}\n","import { View } from \"../../../../models/view/view\";\nimport { Utils } from \"../../../../platform/misc/utils\";\nimport { SymmetricCryptoKey } from \"../../../../platform/models/domain/symmetric-crypto-key\";\nimport { DeepJsonify } from \"../../../../types/deep-jsonify\";\nimport { SendType } from \"../../enums/send-type\";\nimport { Send } from \"../domain/send\";\n\nimport { SendFileView } from \"./send-file.view\";\nimport { SendTextView } from \"./send-text.view\";\n\nexport class SendView implements View {\n  id: string = null;\n  accessId: string = null;\n  name: string = null;\n  notes: string = null;\n  key: Uint8Array;\n  cryptoKey: SymmetricCryptoKey;\n  type: SendType = null;\n  text = new SendTextView();\n  file = new SendFileView();\n  maxAccessCount?: number = null;\n  accessCount = 0;\n  revisionDate: Date = null;\n  deletionDate: Date = null;\n  expirationDate: Date = null;\n  password: string = null;\n  disabled = false;\n  hideEmail = false;\n\n  constructor(s?: Send) {\n    if (!s) {\n      return;\n    }\n\n    this.id = s.id;\n    this.accessId = s.accessId;\n    this.type = s.type;\n    this.maxAccessCount = s.maxAccessCount;\n    this.accessCount = s.accessCount;\n    this.revisionDate = s.revisionDate;\n    this.deletionDate = s.deletionDate;\n    this.expirationDate = s.expirationDate;\n    this.disabled = s.disabled;\n    this.password = s.password;\n    this.hideEmail = s.hideEmail;\n  }\n\n  get urlB64Key(): string {\n    return Utils.fromBufferToUrlB64(this.key);\n  }\n\n  get maxAccessCountReached(): boolean {\n    if (this.maxAccessCount == null) {\n      return false;\n    }\n    return this.accessCount >= this.maxAccessCount;\n  }\n\n  get expired(): boolean {\n    if (this.expirationDate == null) {\n      return false;\n    }\n    return this.expirationDate <= new Date();\n  }\n\n  get pendingDelete(): boolean {\n    return this.deletionDate <= new Date();\n  }\n\n  toJSON() {\n    return Utils.merge(\n      { ...this },\n      {\n        key: Utils.fromBufferToB64(this.key),\n      }\n    );\n  }\n\n  static fromJSON(json: DeepJsonify<SendView>) {\n    if (json == null) {\n      return null;\n    }\n\n    return Object.assign(new SendView(), json, {\n      key: Utils.fromB64ToArray(json.key),\n      cryptoKey: SymmetricCryptoKey.fromJSON(json.cryptoKey),\n      text: SendTextView.fromJSON(json.text),\n      file: SendFileView.fromJSON(json.file),\n      revisionDate: json.revisionDate == null ? null : new Date(json.revisionDate),\n      deletionDate: json.deletionDate == null ? null : new Date(json.deletionDate),\n      expirationDate: json.expirationDate == null ? null : new Date(json.expirationDate),\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Account } from \"./account\";\nimport { GlobalState } from \"./global-state\";\n\nexport class State<\n  TGlobalState extends GlobalState = GlobalState,\n  TAccount extends Account = Account\n> {\n  accounts: { [userId: string]: TAccount } = {};\n  globals: TGlobalState;\n  activeUserId: string;\n  authenticatedAccounts: string[] = [];\n  accountActivity: { [userId: string]: number } = {};\n\n  constructor(globals: TGlobalState) {\n    this.globals = globals;\n  }\n\n  // TODO, make Jsonify<State,TGlobalState,TAccount> work. It currently doesn't because Globals doesn't implement Jsonify.\n  static fromJSON<TGlobalState extends GlobalState, TAccount extends Account>(\n    obj: any,\n    accountDeserializer: (json: Jsonify<TAccount>) => TAccount\n  ): State<TGlobalState, TAccount> {\n    if (obj == null) {\n      return null;\n    }\n\n    return Object.assign(new State(null), obj, {\n      accounts: State.buildAccountMapFromJSON(obj?.accounts, accountDeserializer),\n    });\n  }\n\n  private static buildAccountMapFromJSON<TAccount extends Account>(\n    jsonAccounts: { [userId: string]: Jsonify<TAccount> },\n    accountDeserializer: (json: Jsonify<TAccount>) => TAccount\n  ) {\n    if (!jsonAccounts) {\n      return {};\n    }\n    const accounts: { [userId: string]: TAccount } = {};\n    for (const userId in jsonAccounts) {\n      accounts[userId] = accountDeserializer(jsonAccounts[userId]);\n    }\n    return accounts;\n  }\n}\n","import { BehaviorSubject, concatMap } from \"rxjs\";\nimport { Jsonify, JsonValue } from \"type-fest\";\n\nimport { EncryptedOrganizationKeyData } from \"../../admin-console/models/data/encrypted-organization-key.data\";\nimport { OrganizationData } from \"../../admin-console/models/data/organization.data\";\nimport { PolicyData } from \"../../admin-console/models/data/policy.data\";\nimport { ProviderData } from \"../../admin-console/models/data/provider.data\";\nimport { Policy } from \"../../admin-console/models/domain/policy\";\nimport { AccountService } from \"../../auth/abstractions/account.service\";\nimport { AuthenticationStatus } from \"../../auth/enums/authentication-status\";\nimport { AdminAuthRequestStorable } from \"../../auth/models/domain/admin-auth-req-storable\";\nimport { EnvironmentUrls } from \"../../auth/models/domain/environment-urls\";\nimport { ForceResetPasswordReason } from \"../../auth/models/domain/force-reset-password-reason\";\nimport { KdfConfig } from \"../../auth/models/domain/kdf-config\";\nimport { BiometricKey } from \"../../auth/types/biometric-key\";\nimport {\n  HtmlStorageLocation,\n  KdfType,\n  StorageLocation,\n  ThemeType,\n  UriMatchType,\n} from \"../../enums\";\nimport { VaultTimeoutAction } from \"../../enums/vault-timeout-action.enum\";\nimport { EventData } from \"../../models/data/event.data\";\nimport { WindowState } from \"../../models/domain/window-state\";\nimport { migrate } from \"../../state-migrations\";\nimport { GeneratorOptions } from \"../../tools/generator/generator-options\";\nimport { GeneratedPasswordHistory, PasswordGeneratorOptions } from \"../../tools/generator/password\";\nimport { UsernameGeneratorOptions } from \"../../tools/generator/username\";\nimport { SendData } from \"../../tools/send/models/data/send.data\";\nimport { SendView } from \"../../tools/send/models/view/send.view\";\nimport { UserId } from \"../../types/guid\";\nimport { CipherData } from \"../../vault/models/data/cipher.data\";\nimport { CollectionData } from \"../../vault/models/data/collection.data\";\nimport { FolderData } from \"../../vault/models/data/folder.data\";\nimport { LocalData } from \"../../vault/models/data/local.data\";\nimport { CipherView } from \"../../vault/models/view/cipher.view\";\nimport { CollectionView } from \"../../vault/models/view/collection.view\";\nimport { AddEditCipherInfo } from \"../../vault/types/add-edit-cipher-info\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { StateService as StateServiceAbstraction } from \"../abstractions/state.service\";\nimport {\n  AbstractMemoryStorageService,\n  AbstractStorageService,\n} from \"../abstractions/storage.service\";\nimport { StateFactory } from \"../factories/state-factory\";\nimport { Utils } from \"../misc/utils\";\nimport { ServerConfigData } from \"../models/data/server-config.data\";\nimport {\n  Account,\n  AccountData,\n  AccountDecryptionOptions,\n  AccountSettings,\n  AccountSettingsSettings,\n} from \"../models/domain/account\";\nimport { EncString } from \"../models/domain/enc-string\";\nimport { GlobalState } from \"../models/domain/global-state\";\nimport { State } from \"../models/domain/state\";\nimport { StorageOptions } from \"../models/domain/storage-options\";\nimport {\n  DeviceKey,\n  MasterKey,\n  SymmetricCryptoKey,\n  UserKey,\n} from \"../models/domain/symmetric-crypto-key\";\n\nconst keys = {\n  state: \"state\",\n  stateVersion: \"stateVersion\",\n  global: \"global\",\n  authenticatedAccounts: \"authenticatedAccounts\",\n  activeUserId: \"activeUserId\",\n  tempAccountSettings: \"tempAccountSettings\", // used to hold account specific settings (i.e clear clipboard) between initial migration and first account authentication\n  accountActivity: \"accountActivity\",\n};\n\nconst partialKeys = {\n  userAutoKey: \"_user_auto\",\n  userBiometricKey: \"_user_biometric\",\n\n  autoKey: \"_masterkey_auto\",\n  biometricKey: \"_masterkey_biometric\",\n  masterKey: \"_masterkey\",\n};\n\nconst DDG_SHARED_KEY = \"DuckDuckGoSharedKey\";\n\nexport class StateService<\n  TGlobalState extends GlobalState = GlobalState,\n  TAccount extends Account = Account\n> implements StateServiceAbstraction<TAccount>\n{\n  protected accountsSubject = new BehaviorSubject<{ [userId: string]: TAccount }>({});\n  accounts$ = this.accountsSubject.asObservable();\n\n  protected activeAccountSubject = new BehaviorSubject<string | null>(null);\n  activeAccount$ = this.activeAccountSubject.asObservable();\n\n  protected activeAccountUnlockedSubject = new BehaviorSubject<boolean>(false);\n  activeAccountUnlocked$ = this.activeAccountUnlockedSubject.asObservable();\n\n  private hasBeenInited = false;\n  private isRecoveredSession = false;\n\n  protected accountDiskCache = new BehaviorSubject<Record<string, TAccount>>({});\n\n  // default account serializer, must be overridden by child class\n  protected accountDeserializer = Account.fromJSON as (json: Jsonify<TAccount>) => TAccount;\n\n  constructor(\n    protected storageService: AbstractStorageService,\n    protected secureStorageService: AbstractStorageService,\n    protected memoryStorageService: AbstractMemoryStorageService,\n    protected logService: LogService,\n    protected stateFactory: StateFactory<TGlobalState, TAccount>,\n    protected accountService: AccountService,\n    protected useAccountCache: boolean = true\n  ) {\n    // If the account gets changed, verify the new account is unlocked\n    this.activeAccountSubject\n      .pipe(\n        concatMap(async (userId) => {\n          if (userId == null && this.activeAccountUnlockedSubject.getValue() == false) {\n            return;\n          } else if (userId == null) {\n            this.activeAccountUnlockedSubject.next(false);\n          }\n          // FIXME: This should be refactored into AuthService or a similar service,\n          //  as checking for the existence of the crypto key is a low level\n          //  implementation detail.\n          this.activeAccountUnlockedSubject.next((await this.getUserKey()) != null);\n        })\n      )\n      .subscribe();\n  }\n\n  async init(): Promise<void> {\n    if (this.hasBeenInited) {\n      return;\n    }\n\n    await migrate(this.storageService, this.logService);\n\n    await this.state().then(async (state) => {\n      if (state == null) {\n        await this.setState(new State<TGlobalState, TAccount>(this.createGlobals()));\n      } else {\n        this.isRecoveredSession = true;\n      }\n    });\n    await this.initAccountState();\n\n    this.hasBeenInited = true;\n  }\n\n  async initAccountState() {\n    if (this.isRecoveredSession) {\n      return;\n    }\n\n    await this.updateState(async (state) => {\n      state.authenticatedAccounts =\n        (await this.storageService.get<string[]>(keys.authenticatedAccounts)) ?? [];\n      for (const i in state.authenticatedAccounts) {\n        if (i != null) {\n          await this.syncAccountFromDisk(state.authenticatedAccounts[i]);\n        }\n      }\n      const storedActiveUser = await this.storageService.get<string>(keys.activeUserId);\n      if (storedActiveUser != null) {\n        state.activeUserId = storedActiveUser;\n      }\n      await this.pushAccounts();\n      this.activeAccountSubject.next(state.activeUserId);\n      // TODO: Temporary update to avoid routing all account status changes through account service for now.\n      // account service tracks logged out accounts, but State service does not, so we need to add the active account\n      // if it's not in the accounts list.\n      if (state.activeUserId != null && this.accountsSubject.value[state.activeUserId] == null) {\n        const activeDiskAccount = await this.getAccountFromDisk({ userId: state.activeUserId });\n        this.accountService.addAccount(state.activeUserId as UserId, {\n          name: activeDiskAccount.profile.name,\n          email: activeDiskAccount.profile.email,\n          status: AuthenticationStatus.LoggedOut,\n        });\n      }\n      this.accountService.switchAccount(state.activeUserId as UserId);\n      // End TODO\n\n      return state;\n    });\n  }\n\n  async syncAccountFromDisk(userId: string) {\n    if (userId == null) {\n      return;\n    }\n    await this.updateState(async (state) => {\n      if (state.accounts == null) {\n        state.accounts = {};\n      }\n      state.accounts[userId] = this.createAccount();\n      const diskAccount = await this.getAccountFromDisk({ userId: userId });\n      state.accounts[userId].profile = diskAccount.profile;\n      // TODO: Temporary update to avoid routing all account status changes through account service for now.\n      this.accountService.addAccount(userId as UserId, {\n        status: AuthenticationStatus.Locked,\n        name: diskAccount.profile.name,\n        email: diskAccount.profile.email,\n      });\n      return state;\n    });\n  }\n\n  async addAccount(account: TAccount) {\n    account = await this.setAccountEnvironment(account);\n    await this.updateState(async (state) => {\n      state.authenticatedAccounts.push(account.profile.userId);\n      await this.storageService.save(keys.authenticatedAccounts, state.authenticatedAccounts);\n      state.accounts[account.profile.userId] = account;\n      return state;\n    });\n    await this.scaffoldNewAccountStorage(account);\n    await this.setLastActive(new Date().getTime(), { userId: account.profile.userId });\n    // TODO: Temporary update to avoid routing all account status changes through account service for now.\n    this.accountService.addAccount(account.profile.userId as UserId, {\n      status: AuthenticationStatus.Locked,\n      name: account.profile.name,\n      email: account.profile.email,\n    });\n    await this.setActiveUser(account.profile.userId);\n    this.activeAccountSubject.next(account.profile.userId);\n  }\n\n  async setActiveUser(userId: string): Promise<void> {\n    this.clearDecryptedDataForActiveUser();\n    await this.updateState(async (state) => {\n      state.activeUserId = userId;\n      await this.storageService.save(keys.activeUserId, userId);\n      this.activeAccountSubject.next(state.activeUserId);\n      // TODO: temporary update to avoid routing all account status changes through account service for now.\n      this.accountService.switchAccount(userId as UserId);\n\n      return state;\n    });\n\n    await this.pushAccounts();\n  }\n\n  async clean(options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultInMemoryOptions());\n    await this.deAuthenticateAccount(options.userId);\n    if (options.userId === (await this.state())?.activeUserId) {\n      await this.dynamicallySetActiveUser();\n    }\n\n    await this.removeAccountFromDisk(options?.userId);\n    this.removeAccountFromMemory(options?.userId);\n    await this.pushAccounts();\n  }\n\n  async getAccessToken(options?: StorageOptions): Promise<string> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    return (await this.getAccount(options))?.tokens?.accessToken;\n  }\n\n  async setAccessToken(value: string, options?: StorageOptions): Promise<void> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    const account = await this.getAccount(options);\n    account.tokens.accessToken = value;\n    await this.saveAccount(account, options);\n  }\n\n  async getAddEditCipherInfo(options?: StorageOptions): Promise<AddEditCipherInfo> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.data?.addEditCipherInfo;\n  }\n\n  async setAddEditCipherInfo(value: AddEditCipherInfo, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.data.addEditCipherInfo = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getAlwaysShowDock(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.alwaysShowDock ?? false\n    );\n  }\n\n  async setAlwaysShowDock(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.alwaysShowDock = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getApiKeyClientId(options?: StorageOptions): Promise<string> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    return (await this.getAccount(options))?.profile?.apiKeyClientId;\n  }\n\n  async setApiKeyClientId(value: string, options?: StorageOptions): Promise<void> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    const account = await this.getAccount(options);\n    account.profile.apiKeyClientId = value;\n    await this.saveAccount(account, options);\n  }\n\n  async getApiKeyClientSecret(options?: StorageOptions): Promise<string> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    return (await this.getAccount(options))?.keys?.apiKeyClientSecret;\n  }\n\n  async setApiKeyClientSecret(value: string, options?: StorageOptions): Promise<void> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    const account = await this.getAccount(options);\n    account.keys.apiKeyClientSecret = value;\n    await this.saveAccount(account, options);\n  }\n\n  async getAutoConfirmFingerPrints(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.autoConfirmFingerPrints ?? false\n    );\n  }\n\n  async setAutoConfirmFingerprints(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.autoConfirmFingerPrints = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getAutoFillOnPageLoadDefault(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.autoFillOnPageLoadDefault ?? true\n    );\n  }\n\n  async setAutoFillOnPageLoadDefault(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.autoFillOnPageLoadDefault = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getBiometricAwaitingAcceptance(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.biometricAwaitingAcceptance ?? false\n    );\n  }\n\n  async setBiometricAwaitingAcceptance(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.biometricAwaitingAcceptance = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getBiometricFingerprintValidated(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.biometricFingerprintValidated ?? false\n    );\n  }\n\n  async setBiometricFingerprintValidated(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.biometricFingerprintValidated = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getBiometricText(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.biometricText;\n  }\n\n  async setBiometricText(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.biometricText = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getBiometricUnlock(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.biometricUnlock ?? false\n    );\n  }\n\n  async setBiometricUnlock(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.biometricUnlock = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getCanAccessPremium(options?: StorageOptions): Promise<boolean> {\n    if (!(await this.getIsAuthenticated(options))) {\n      return false;\n    }\n\n    return (\n      (await this.getHasPremiumPersonally(options)) ||\n      (await this.getHasPremiumFromOrganization(options))\n    );\n  }\n\n  async getHasPremiumPersonally(options?: StorageOptions): Promise<boolean> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    return account?.profile?.hasPremiumPersonally;\n  }\n\n  async setHasPremiumPersonally(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.hasPremiumPersonally = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getHasPremiumFromOrganization(options?: StorageOptions): Promise<boolean> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n\n    if (account.profile?.hasPremiumFromOrganization) {\n      return true;\n    }\n\n    // TODO: older server versions won't send the hasPremiumFromOrganization flag, so we're keeping the old logic\n    // for backwards compatibility. It can be removed after everyone has upgraded.\n    const organizations = await this.getOrganizations(options);\n    if (organizations == null) {\n      return false;\n    }\n\n    for (const id of Object.keys(organizations)) {\n      const o = organizations[id];\n      if (o.enabled && o.usersGetPremium && !o.isProviderUser) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  async setHasPremiumFromOrganization(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.hasPremiumFromOrganization = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getClearClipboard(options?: StorageOptions): Promise<number> {\n    return (\n      (\n        await this.getAccount(\n          this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n        )\n      )?.settings?.clearClipboard ?? null\n    );\n  }\n\n  async setClearClipboard(value: number, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.clearClipboard = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getCollapsedGroupings(options?: StorageOptions): Promise<string[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.collapsedGroupings;\n  }\n\n  async setCollapsedGroupings(value: string[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.collapsedGroupings = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getConvertAccountToKeyConnector(options?: StorageOptions): Promise<boolean> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.convertAccountToKeyConnector;\n  }\n\n  async setConvertAccountToKeyConnector(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.convertAccountToKeyConnector = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  /**\n   * @deprecated Do not save the Master Key. Use the User Symmetric Key instead\n   */\n  async getCryptoMasterKey(options?: StorageOptions): Promise<SymmetricCryptoKey> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    return account?.keys?.cryptoMasterKey;\n  }\n\n  /**\n   * @deprecated Do not save the Master Key. Use the User Symmetric Key instead\n   */\n  async setCryptoMasterKey(value: SymmetricCryptoKey, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.keys.cryptoMasterKey = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n\n    const nextStatus = value != null ? AuthenticationStatus.Unlocked : AuthenticationStatus.Locked;\n    this.accountService.setAccountStatus(options.userId as UserId, nextStatus);\n\n    if (options.userId == this.activeAccountSubject.getValue()) {\n      const nextValue = value != null;\n\n      // Avoid emitting if we are already unlocked\n      if (this.activeAccountUnlockedSubject.getValue() != nextValue) {\n        this.activeAccountUnlockedSubject.next(nextValue);\n      }\n    }\n  }\n\n  /**\n   * user key used to encrypt/decrypt data\n   */\n  async getUserKey(options?: StorageOptions): Promise<UserKey> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    return account?.keys?.userKey as UserKey;\n  }\n\n  /**\n   * user key used to encrypt/decrypt data\n   */\n  async setUserKey(value: UserKey, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.keys.userKey = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n\n    const nextStatus = value != null ? AuthenticationStatus.Unlocked : AuthenticationStatus.Locked;\n    this.accountService.setAccountStatus(options.userId as UserId, nextStatus);\n\n    if (options?.userId == this.activeAccountSubject.getValue()) {\n      const nextValue = value != null;\n\n      // Avoid emitting if we are already unlocked\n      if (this.activeAccountUnlockedSubject.getValue() != nextValue) {\n        this.activeAccountUnlockedSubject.next(nextValue);\n      }\n    }\n  }\n\n  /**\n   * User's master key derived from MP, saved only if we decrypted with MP\n   */\n  async getMasterKey(options?: StorageOptions): Promise<MasterKey> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    return account?.keys?.masterKey;\n  }\n\n  /**\n   * User's master key derived from MP, saved only if we decrypted with MP\n   */\n  async setMasterKey(value: MasterKey, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.keys.masterKey = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  /**\n   * The master key encrypted User symmetric key, saved on every auth\n   * so we can unlock with MP offline\n   */\n  async getMasterKeyEncryptedUserKey(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.keys.masterKeyEncryptedUserKey;\n  }\n\n  /**\n   * The master key encrypted User symmetric key, saved on every auth\n   * so we can unlock with MP offline\n   */\n  async setMasterKeyEncryptedUserKey(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.masterKeyEncryptedUserKey = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  /**\n   * user key when using the \"never\" option of vault timeout\n   */\n  async getUserKeyAutoUnlock(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"auto\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get<string>(\n      `${options.userId}${partialKeys.userAutoKey}`,\n      options\n    );\n  }\n\n  /**\n   * user key when using the \"never\" option of vault timeout\n   */\n  async setUserKeyAutoUnlock(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"auto\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.userAutoKey, value, options);\n  }\n\n  /**\n   * User's encrypted symmetric key when using biometrics\n   */\n  async getUserKeyBiometric(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get<string>(\n      `${options.userId}${partialKeys.userBiometricKey}`,\n      options\n    );\n  }\n\n  async hasUserKeyBiometric(options?: StorageOptions): Promise<boolean> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return false;\n    }\n    return await this.secureStorageService.has(\n      `${options.userId}${partialKeys.userBiometricKey}`,\n      options\n    );\n  }\n\n  async setUserKeyBiometric(value: BiometricKey, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.userBiometricKey, value, options);\n  }\n\n  async getPinKeyEncryptedUserKey(options?: StorageOptions): Promise<EncString> {\n    return EncString.fromJSON(\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.pinKeyEncryptedUserKey\n    );\n  }\n\n  async setPinKeyEncryptedUserKey(value: EncString, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.pinKeyEncryptedUserKey = value?.encryptedString;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getPinKeyEncryptedUserKeyEphemeral(options?: StorageOptions): Promise<EncString> {\n    return EncString.fromJSON(\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions())))\n        ?.settings?.pinKeyEncryptedUserKeyEphemeral\n    );\n  }\n\n  async setPinKeyEncryptedUserKeyEphemeral(\n    value: EncString,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.settings.pinKeyEncryptedUserKeyEphemeral = value?.encryptedString;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  /**\n   * @deprecated Use UserKeyAuto instead\n   */\n  async getCryptoMasterKeyAuto(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"auto\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get<string>(\n      `${options.userId}${partialKeys.autoKey}`,\n      options\n    );\n  }\n\n  /**\n   * @deprecated Use UserKeyAuto instead\n   */\n  async setCryptoMasterKeyAuto(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"auto\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.autoKey, value, options);\n  }\n\n  /**\n   * @deprecated I don't see where this is even used\n   */\n  async getCryptoMasterKeyB64(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(options, await this.defaultSecureStorageOptions());\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get<string>(\n      `${options?.userId}${partialKeys.masterKey}`,\n      options\n    );\n  }\n\n  /**\n   * @deprecated I don't see where this is even used\n   */\n  async setCryptoMasterKeyB64(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultSecureStorageOptions());\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.masterKey, value, options);\n  }\n\n  /**\n   * @deprecated Use UserKeyBiometric instead\n   */\n  async getCryptoMasterKeyBiometric(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get<string>(\n      `${options.userId}${partialKeys.biometricKey}`,\n      options\n    );\n  }\n\n  /**\n   * @deprecated Use UserKeyBiometric instead\n   */\n  async hasCryptoMasterKeyBiometric(options?: StorageOptions): Promise<boolean> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return false;\n    }\n    return await this.secureStorageService.has(\n      `${options.userId}${partialKeys.biometricKey}`,\n      options\n    );\n  }\n\n  /**\n   * @deprecated Use UserKeyBiometric instead\n   */\n  async setCryptoMasterKeyBiometric(value: BiometricKey, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.biometricKey, value, options);\n  }\n\n  @withPrototypeForArrayMembers(CipherView, CipherView.fromJSON)\n  async getDecryptedCiphers(options?: StorageOptions): Promise<CipherView[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.data?.ciphers?.decrypted;\n  }\n\n  async setDecryptedCiphers(value: CipherView[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.data.ciphers.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototypeForArrayMembers(CollectionView)\n  async getDecryptedCollections(options?: StorageOptions): Promise<CollectionView[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.data?.collections?.decrypted;\n  }\n\n  async setDecryptedCollections(value: CollectionView[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.data.collections.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  /**\n   * @deprecated Use UserKey instead\n   */\n  async getDecryptedCryptoSymmetricKey(options?: StorageOptions): Promise<SymmetricCryptoKey> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    return account?.keys?.cryptoSymmetricKey?.decrypted;\n  }\n\n  /**\n   * @deprecated Use UserKey instead\n   */\n  async setDecryptedCryptoSymmetricKey(\n    value: SymmetricCryptoKey,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.keys.cryptoSymmetricKey.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getDecryptedOrganizationKeys(\n    options?: StorageOptions\n  ): Promise<Map<string, SymmetricCryptoKey>> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    return Utils.recordToMap(account?.keys?.organizationKeys?.decrypted);\n  }\n\n  async setDecryptedOrganizationKeys(\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.keys.organizationKeys.decrypted = Utils.mapToRecord(value);\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototypeForArrayMembers(GeneratedPasswordHistory)\n  async getDecryptedPasswordGenerationHistory(\n    options?: StorageOptions\n  ): Promise<GeneratedPasswordHistory[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.data?.passwordGenerationHistory?.decrypted;\n  }\n\n  async setDecryptedPasswordGenerationHistory(\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.data.passwordGenerationHistory.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  /**\n   * @deprecated Use getPinKeyEncryptedUserKeyEphemeral instead\n   */\n  async getDecryptedPinProtected(options?: StorageOptions): Promise<EncString> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.settings?.pinProtected?.decrypted;\n  }\n\n  /**\n   * @deprecated Use setPinKeyEncryptedUserKeyEphemeral instead\n   */\n  async setDecryptedPinProtected(value: EncString, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.settings.pinProtected.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototypeForArrayMembers(Policy)\n  async getDecryptedPolicies(options?: StorageOptions): Promise<Policy[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.data?.policies?.decrypted;\n  }\n\n  async setDecryptedPolicies(value: Policy[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.data.policies.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getDecryptedPrivateKey(options?: StorageOptions): Promise<Uint8Array> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.keys?.privateKey.decrypted;\n  }\n\n  async setDecryptedPrivateKey(value: Uint8Array, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.keys.privateKey.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getDecryptedProviderKeys(\n    options?: StorageOptions\n  ): Promise<Map<string, SymmetricCryptoKey>> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    return Utils.recordToMap(account?.keys?.providerKeys?.decrypted);\n  }\n\n  async setDecryptedProviderKeys(\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.keys.providerKeys.decrypted = Utils.mapToRecord(value);\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototypeForArrayMembers(SendView)\n  async getDecryptedSends(options?: StorageOptions): Promise<SendView[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.data?.sends?.decrypted;\n  }\n\n  async setDecryptedSends(value: SendView[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.data.sends.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getDefaultUriMatch(options?: StorageOptions): Promise<UriMatchType> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.defaultUriMatch;\n  }\n\n  async setDefaultUriMatch(value: UriMatchType, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.defaultUriMatch = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableAddLoginNotification(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableAddLoginNotification ?? false\n    );\n  }\n\n  async setDisableAddLoginNotification(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableAddLoginNotification = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableAutoBiometricsPrompt(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableAutoBiometricsPrompt ?? false\n    );\n  }\n\n  async setDisableAutoBiometricsPrompt(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableAutoBiometricsPrompt = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableAutoTotpCopy(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableAutoTotpCopy ?? false\n    );\n  }\n\n  async setDisableAutoTotpCopy(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableAutoTotpCopy = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableBadgeCounter(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableBadgeCounter ?? false\n    );\n  }\n\n  async setDisableBadgeCounter(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableBadgeCounter = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableChangedPasswordNotification(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableChangedPasswordNotification ?? false\n    );\n  }\n\n  async setDisableChangedPasswordNotification(\n    value: boolean,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableChangedPasswordNotification = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableContextMenuItem(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableContextMenuItem ?? false\n    );\n  }\n\n  async setDisableContextMenuItem(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableContextMenuItem = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableFavicon(options?: StorageOptions): Promise<boolean> {\n    return (\n      (\n        await this.getGlobals(\n          this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n        )\n      )?.disableFavicon ?? false\n    );\n  }\n\n  async setDisableFavicon(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.disableFavicon = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getDisableGa(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableGa ?? false\n    );\n  }\n\n  async setDisableGa(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableGa = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDismissedAutofillCallout(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.dismissedAutoFillOnPageLoadCallout ?? false\n    );\n  }\n\n  async setDismissedAutofillCallout(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.dismissedAutoFillOnPageLoadCallout = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDontShowCardsCurrentTab(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.dontShowCardsCurrentTab ?? false\n    );\n  }\n\n  async setDontShowCardsCurrentTab(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.dontShowCardsCurrentTab = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDontShowIdentitiesCurrentTab(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.dontShowIdentitiesCurrentTab ?? false\n    );\n  }\n\n  async setDontShowIdentitiesCurrentTab(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.dontShowIdentitiesCurrentTab = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDuckDuckGoSharedKey(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(options, await this.defaultSecureStorageOptions());\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get<string>(DDG_SHARED_KEY, options);\n  }\n\n  async setDuckDuckGoSharedKey(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultSecureStorageOptions());\n    if (options?.userId == null) {\n      return;\n    }\n    value == null\n      ? await this.secureStorageService.remove(DDG_SHARED_KEY, options)\n      : await this.secureStorageService.save(DDG_SHARED_KEY, value, options);\n  }\n\n  async getDeviceKey(options?: StorageOptions): Promise<DeviceKey | null> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskLocalOptions());\n\n    if (options?.userId == null) {\n      return null;\n    }\n\n    const account = await this.getAccount(options);\n\n    const existingDeviceKey = account?.keys?.deviceKey;\n\n    // Must manually instantiate the SymmetricCryptoKey class from the JSON object\n    if (existingDeviceKey != null) {\n      return SymmetricCryptoKey.fromJSON(existingDeviceKey) as DeviceKey;\n    } else {\n      return null;\n    }\n  }\n\n  async setDeviceKey(value: DeviceKey | null, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskLocalOptions());\n\n    if (options?.userId == null) {\n      return;\n    }\n\n    const account = await this.getAccount(options);\n\n    account.keys.deviceKey = value?.toJSON() ?? null;\n\n    await this.saveAccount(account, options);\n  }\n\n  async getAdminAuthRequest(options?: StorageOptions): Promise<AdminAuthRequestStorable | null> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskLocalOptions());\n\n    if (options?.userId == null) {\n      return null;\n    }\n\n    const account = await this.getAccount(options);\n\n    return account?.adminAuthRequest\n      ? AdminAuthRequestStorable.fromJSON(account.adminAuthRequest)\n      : null;\n  }\n\n  async setAdminAuthRequest(\n    adminAuthRequest: AdminAuthRequestStorable,\n    options?: StorageOptions\n  ): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskLocalOptions());\n\n    if (options?.userId == null) {\n      return;\n    }\n\n    const account = await this.getAccount(options);\n\n    account.adminAuthRequest = adminAuthRequest?.toJSON();\n\n    await this.saveAccount(account, options);\n  }\n\n  async getShouldTrustDevice(options?: StorageOptions): Promise<boolean | null> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskLocalOptions());\n\n    if (options?.userId == null) {\n      return null;\n    }\n\n    const account = await this.getAccount(options);\n\n    return account?.settings?.trustDeviceChoiceForDecryption ?? null;\n  }\n\n  async setShouldTrustDevice(value: boolean, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskLocalOptions());\n    if (options?.userId == null) {\n      return;\n    }\n\n    const account = await this.getAccount(options);\n\n    account.settings.trustDeviceChoiceForDecryption = value;\n\n    await this.saveAccount(account, options);\n  }\n\n  async getAccountDecryptionOptions(\n    options?: StorageOptions\n  ): Promise<AccountDecryptionOptions | null> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskLocalOptions());\n\n    if (options?.userId == null) {\n      return null;\n    }\n\n    const account = await this.getAccount(options);\n\n    return account?.decryptionOptions as AccountDecryptionOptions;\n  }\n\n  async setAccountDecryptionOptions(\n    value: AccountDecryptionOptions,\n    options?: StorageOptions\n  ): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskLocalOptions());\n\n    if (options?.userId == null) {\n      return;\n    }\n\n    const account = await this.getAccount(options);\n\n    account.decryptionOptions = value;\n\n    await this.saveAccount(account, options);\n  }\n\n  async getEmail(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.profile?.email;\n  }\n\n  async setEmail(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.profile.email = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getEmailVerified(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.profile.emailVerified ?? false\n    );\n  }\n\n  async setEmailVerified(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.emailVerified = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableAlwaysOnTop(options?: StorageOptions): Promise<boolean> {\n    const accountPreference = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.enableAlwaysOnTop;\n    const globalPreference = (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.enableAlwaysOnTop;\n    return accountPreference ?? globalPreference ?? false;\n  }\n\n  async setEnableAlwaysOnTop(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.enableAlwaysOnTop = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableAlwaysOnTop = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableAutoFillOnPageLoad(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.enableAutoFillOnPageLoad ?? false\n    );\n  }\n\n  async setEnableAutoFillOnPageLoad(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.enableAutoFillOnPageLoad = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableBrowserIntegration(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableBrowserIntegration ?? false\n    );\n  }\n\n  async setEnableBrowserIntegration(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableBrowserIntegration = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableBrowserIntegrationFingerprint(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableBrowserIntegrationFingerprint ?? false\n    );\n  }\n\n  async setEnableBrowserIntegrationFingerprint(\n    value: boolean,\n    options?: StorageOptions\n  ): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableBrowserIntegrationFingerprint = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableCloseToTray(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableCloseToTray ?? false\n    );\n  }\n\n  async setEnableCloseToTray(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableCloseToTray = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableDuckDuckGoBrowserIntegration(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableDuckDuckGoBrowserIntegration ?? false\n    );\n  }\n\n  async setEnableDuckDuckGoBrowserIntegration(\n    value: boolean,\n    options?: StorageOptions\n  ): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableDuckDuckGoBrowserIntegration = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableFullWidth(options?: StorageOptions): Promise<boolean> {\n    return (\n      (\n        await this.getAccount(\n          this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n        )\n      )?.settings?.enableFullWidth ?? false\n    );\n  }\n\n  async setEnableFullWidth(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.enableFullWidth = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getEnableMinimizeToTray(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableMinimizeToTray ?? false\n    );\n  }\n\n  async setEnableMinimizeToTray(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableMinimizeToTray = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableStartToTray(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableStartToTray ?? false\n    );\n  }\n\n  async setEnableStartToTray(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableStartToTray = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableTray(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableTray ?? false\n    );\n  }\n\n  async setEnableTray(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableTray = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForObjectValues(CipherData)\n  async getEncryptedCiphers(options?: StorageOptions): Promise<{ [id: string]: CipherData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.data?.ciphers?.encrypted;\n  }\n\n  async setEncryptedCiphers(\n    value: { [id: string]: CipherData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.data.ciphers.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  @withPrototypeForObjectValues(CollectionData)\n  async getEncryptedCollections(\n    options?: StorageOptions\n  ): Promise<{ [id: string]: CollectionData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.data?.collections?.encrypted;\n  }\n\n  async setEncryptedCollections(\n    value: { [id: string]: CollectionData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.data.collections.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  /**\n   * @deprecated Use UserKey instead\n   */\n  async getEncryptedCryptoSymmetricKey(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.keys.cryptoSymmetricKey.encrypted;\n  }\n\n  /**\n   * @deprecated Use UserKey instead\n   */\n  async setEncryptedCryptoSymmetricKey(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.cryptoSymmetricKey.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForObjectValues(FolderData)\n  async getEncryptedFolders(options?: StorageOptions): Promise<{ [id: string]: FolderData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.data?.folders?.encrypted;\n  }\n\n  async setEncryptedFolders(\n    value: { [id: string]: FolderData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.data.folders.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getEncryptedOrganizationKeys(\n    options?: StorageOptions\n  ): Promise<{ [orgId: string]: EncryptedOrganizationKeyData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.keys?.organizationKeys.encrypted;\n  }\n\n  async setEncryptedOrganizationKeys(\n    value: { [orgId: string]: EncryptedOrganizationKeyData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.organizationKeys.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForArrayMembers(GeneratedPasswordHistory)\n  async getEncryptedPasswordGenerationHistory(\n    options?: StorageOptions\n  ): Promise<GeneratedPasswordHistory[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.passwordGenerationHistory?.encrypted;\n  }\n\n  async setEncryptedPasswordGenerationHistory(\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.passwordGenerationHistory.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedPinProtected(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.pinProtected?.encrypted;\n  }\n\n  async setEncryptedPinProtected(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.pinProtected.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForObjectValues(PolicyData)\n  async getEncryptedPolicies(options?: StorageOptions): Promise<{ [id: string]: PolicyData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.policies?.encrypted;\n  }\n\n  async setEncryptedPolicies(\n    value: { [id: string]: PolicyData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.policies.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedPrivateKey(options?: StorageOptions): Promise<string> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    return account?.keys?.privateKey?.encrypted;\n  }\n\n  async setEncryptedPrivateKey(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.privateKey.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedProviderKeys(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.keys?.providerKeys?.encrypted;\n  }\n\n  async setEncryptedProviderKeys(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.providerKeys.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForObjectValues(SendData)\n  async getEncryptedSends(options?: StorageOptions): Promise<{ [id: string]: SendData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.data?.sends.encrypted;\n  }\n\n  async setEncryptedSends(\n    value: { [id: string]: SendData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.data.sends.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getEntityId(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.profile?.entityId;\n  }\n\n  async setEntityId(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.profile.entityId = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getEntityType(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.profile?.entityType;\n  }\n\n  async setEntityType(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.profile.entityType = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getEnvironmentUrls(options?: StorageOptions): Promise<EnvironmentUrls> {\n    if ((await this.state())?.activeUserId == null) {\n      return await this.getGlobalEnvironmentUrls(options);\n    }\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n    return (await this.getAccount(options))?.settings?.environmentUrls ?? new EnvironmentUrls();\n  }\n\n  async setEnvironmentUrls(value: EnvironmentUrls, options?: StorageOptions): Promise<void> {\n    // Global values are set on each change and the current global settings are passed to any newly authed accounts.\n    // This is to allow setting environment values before an account is active, while still allowing individual accounts to have their own environments.\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.environmentUrls = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getRegion(options?: StorageOptions): Promise<string> {\n    if ((await this.state())?.activeUserId == null) {\n      options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n      return (await this.getGlobals(options)).region ?? null;\n    }\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n    return (await this.getAccount(options))?.settings?.region ?? null;\n  }\n\n  async setRegion(value: string, options?: StorageOptions): Promise<void> {\n    // Global values are set on each change and the current global settings are passed to any newly authed accounts.\n    // This is to allow setting region values before an account is active, while still allowing individual accounts to have their own region.\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.region = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEquivalentDomains(options?: StorageOptions): Promise<string[][]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.equivalentDomains;\n  }\n\n  async setEquivalentDomains(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.equivalentDomains = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForArrayMembers(EventData)\n  async getEventCollection(options?: StorageOptions): Promise<EventData[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.eventCollection;\n  }\n\n  async setEventCollection(value: EventData[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.eventCollection = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEverHadUserKey(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.profile?.everHadUserKey ?? false\n    );\n  }\n\n  async setEverHadUserKey(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.everHadUserKey = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEverBeenUnlocked(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions())))\n        ?.profile?.everBeenUnlocked ?? false\n    );\n  }\n\n  async setEverBeenUnlocked(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.profile.everBeenUnlocked = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getForcePasswordResetReason(options?: StorageOptions): Promise<ForceResetPasswordReason> {\n    return (\n      (\n        await this.getAccount(\n          this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n        )\n      )?.profile?.forcePasswordResetReason ?? ForceResetPasswordReason.None\n    );\n  }\n\n  async setForcePasswordResetReason(\n    value: ForceResetPasswordReason,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.profile.forcePasswordResetReason = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getInstalledVersion(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.installedVersion;\n  }\n\n  async setInstalledVersion(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.installedVersion = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getIsAuthenticated(options?: StorageOptions): Promise<boolean> {\n    return (await this.getAccessToken(options)) != null && (await this.getUserId(options)) != null;\n  }\n\n  async getKdfConfig(options?: StorageOptions): Promise<KdfConfig> {\n    const iterations = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.kdfIterations;\n    const memory = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.kdfMemory;\n    const parallelism = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.kdfParallelism;\n    return new KdfConfig(iterations, memory, parallelism);\n  }\n\n  async setKdfConfig(config: KdfConfig, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.kdfIterations = config.iterations;\n    account.profile.kdfMemory = config.memory;\n    account.profile.kdfParallelism = config.parallelism;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getKdfType(options?: StorageOptions): Promise<KdfType> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.kdfType;\n  }\n\n  async setKdfType(value: KdfType, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.kdfType = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getKeyHash(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.keyHash;\n  }\n\n  async setKeyHash(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.keyHash = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getLastActive(options?: StorageOptions): Promise<number> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n\n    const accountActivity = await this.storageService.get<{ [userId: string]: number }>(\n      keys.accountActivity,\n      options\n    );\n\n    if (accountActivity == null || Object.keys(accountActivity).length < 1) {\n      return null;\n    }\n\n    return accountActivity[options.userId];\n  }\n\n  async setLastActive(value: number, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n    if (options.userId == null) {\n      return;\n    }\n    const accountActivity =\n      (await this.storageService.get<{ [userId: string]: number }>(\n        keys.accountActivity,\n        options\n      )) ?? {};\n    accountActivity[options.userId] = value;\n    await this.storageService.save(keys.accountActivity, accountActivity, options);\n  }\n\n  async getLastSync(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.profile?.lastSync;\n  }\n\n  async setLastSync(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.profile.lastSync = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getLocalData(options?: StorageOptions): Promise<{ [cipherId: string]: LocalData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.data?.localData;\n  }\n\n  async setLocalData(\n    value: { [cipherId: string]: LocalData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.data.localData = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getLocale(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.locale;\n  }\n\n  async setLocale(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.locale = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getMainWindowSize(options?: StorageOptions): Promise<number> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.mainWindowSize;\n  }\n\n  async setMainWindowSize(value: number, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    globals.mainWindowSize = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getMinimizeOnCopyToClipboard(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.minimizeOnCopyToClipboard ?? false\n    );\n  }\n\n  async setMinimizeOnCopyToClipboard(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.minimizeOnCopyToClipboard = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getNeverDomains(options?: StorageOptions): Promise<{ [id: string]: any }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.neverDomains;\n  }\n\n  async setNeverDomains(value: { [id: string]: any }, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.neverDomains = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getNoAutoPromptBiometricsText(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.noAutoPromptBiometricsText;\n  }\n\n  async setNoAutoPromptBiometricsText(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.noAutoPromptBiometricsText = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getOpenAtLogin(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.openAtLogin ?? false\n    );\n  }\n\n  async setOpenAtLogin(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.openAtLogin = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getOrganizationInvitation(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.organizationInvitation;\n  }\n\n  async setOrganizationInvitation(value: any, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    globals.organizationInvitation = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getEmergencyAccessInvitation(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.emergencyAccessInvitation;\n  }\n\n  async setEmergencyAccessInvitation(value: any, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.emergencyAccessInvitation = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  /**\n   * @deprecated Do not call this directly, use OrganizationService\n   */\n  async getOrganizations(options?: StorageOptions): Promise<{ [id: string]: OrganizationData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.organizations;\n  }\n\n  /**\n   * @deprecated Do not call this directly, use OrganizationService\n   */\n  async setOrganizations(\n    value: { [id: string]: OrganizationData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.organizations = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getPasswordGenerationOptions(options?: StorageOptions): Promise<PasswordGeneratorOptions> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.passwordGenerationOptions;\n  }\n\n  async setPasswordGenerationOptions(\n    value: PasswordGeneratorOptions,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.passwordGenerationOptions = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getUsernameGenerationOptions(options?: StorageOptions): Promise<UsernameGeneratorOptions> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.usernameGenerationOptions;\n  }\n\n  async setUsernameGenerationOptions(\n    value: UsernameGeneratorOptions,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.usernameGenerationOptions = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getGeneratorOptions(options?: StorageOptions): Promise<GeneratorOptions> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.generatorOptions;\n  }\n\n  async setGeneratorOptions(value: GeneratorOptions, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.generatorOptions = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getProtectedPin(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.protectedPin;\n  }\n\n  async setProtectedPin(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.protectedPin = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForObjectValues(ProviderData)\n  async getProviders(options?: StorageOptions): Promise<{ [id: string]: ProviderData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.providers;\n  }\n\n  async setProviders(\n    value: { [id: string]: ProviderData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.providers = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getPublicKey(options?: StorageOptions): Promise<Uint8Array> {\n    const keys = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.keys;\n    return keys?.publicKey;\n  }\n\n  async setPublicKey(value: Uint8Array, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.keys.publicKey = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getRefreshToken(options?: StorageOptions): Promise<string> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    return (await this.getAccount(options))?.tokens?.refreshToken;\n  }\n\n  async setRefreshToken(value: string, options?: StorageOptions): Promise<void> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    const account = await this.getAccount(options);\n    account.tokens.refreshToken = value;\n    await this.saveAccount(account, options);\n  }\n\n  async getRememberedEmail(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.rememberedEmail;\n  }\n\n  async setRememberedEmail(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.rememberedEmail = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getSecurityStamp(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.tokens?.securityStamp;\n  }\n\n  async setSecurityStamp(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.tokens.securityStamp = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getSettings(options?: StorageOptions): Promise<AccountSettingsSettings> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.settings?.settings;\n  }\n\n  async setSettings(value: AccountSettingsSettings, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.settings.settings = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getSsoCodeVerifier(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.ssoCodeVerifier;\n  }\n\n  async setSsoCodeVerifier(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.ssoCodeVerifier = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getSsoOrgIdentifier(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.ssoOrganizationIdentifier;\n  }\n\n  async setSsoOrganizationIdentifier(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.ssoOrganizationIdentifier = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getSsoState(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.ssoState;\n  }\n\n  async setSsoState(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.ssoState = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getUserSsoOrganizationIdentifier(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.loginState?.ssoOrganizationIdentifier;\n  }\n\n  async setUserSsoOrganizationIdentifier(\n    value: string | null,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.loginState.ssoOrganizationIdentifier = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getTheme(options?: StorageOptions): Promise<ThemeType> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.theme;\n  }\n\n  async setTheme(value: ThemeType, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.theme = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getTwoFactorToken(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.twoFactorToken;\n  }\n\n  async setTwoFactorToken(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.twoFactorToken = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getUserId(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.userId;\n  }\n\n  async getUsesKeyConnector(options?: StorageOptions): Promise<boolean> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.usesKeyConnector;\n  }\n\n  async setUsesKeyConnector(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.usesKeyConnector = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getVaultTimeout(options?: StorageOptions): Promise<number> {\n    const accountVaultTimeout = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.vaultTimeout;\n    return accountVaultTimeout;\n  }\n\n  async setVaultTimeout(value: number, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.vaultTimeout = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getVaultTimeoutAction(options?: StorageOptions): Promise<string> {\n    const accountVaultTimeoutAction = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.vaultTimeoutAction;\n    const globalVaultTimeoutAction = (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.vaultTimeoutAction;\n    return accountVaultTimeoutAction ?? globalVaultTimeoutAction;\n  }\n\n  async setVaultTimeoutAction(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.vaultTimeoutAction = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getApproveLoginRequests(options?: StorageOptions): Promise<boolean> {\n    const approveLoginRequests = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.approveLoginRequests;\n    return approveLoginRequests;\n  }\n\n  async setApproveLoginRequests(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.approveLoginRequests = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getWindow(): Promise<WindowState> {\n    const globals = await this.getGlobals(await this.defaultOnDiskOptions());\n    return globals?.window != null && Object.keys(globals.window).length > 0\n      ? globals.window\n      : new WindowState();\n  }\n\n  async setWindow(value: WindowState, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.window = value;\n    return await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async setServerConfig(value: ServerConfigData, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.serverConfig = value;\n    return await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getServerConfig(options: StorageOptions): Promise<ServerConfigData> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.serverConfig;\n  }\n\n  async getAvatarColor(options?: StorageOptions): Promise<string | null | undefined> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.avatarColor;\n  }\n\n  async setAvatarColor(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.avatarColor = value;\n    return await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getActivateAutoFillOnPageLoadFromPolicy(options?: StorageOptions): Promise<boolean> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.activateAutoFillOnPageLoadFromPolicy;\n  }\n\n  async setActivateAutoFillOnPageLoadFromPolicy(\n    value: boolean,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.activateAutoFillOnPageLoadFromPolicy = value;\n    return await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getSMOnboardingTasks(\n    options?: StorageOptions\n  ): Promise<Record<string, Record<string, boolean>>> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.smOnboardingTasks;\n  }\n\n  async setSMOnboardingTasks(\n    value: Record<string, Record<string, boolean>>,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.smOnboardingTasks = value;\n    return await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  protected async getGlobals(options: StorageOptions): Promise<TGlobalState> {\n    let globals: TGlobalState;\n    if (this.useMemory(options.storageLocation)) {\n      globals = await this.getGlobalsFromMemory();\n    }\n\n    if (this.useDisk && globals == null) {\n      globals = await this.getGlobalsFromDisk(options);\n    }\n\n    if (globals == null) {\n      globals = this.createGlobals();\n    }\n\n    return globals;\n  }\n\n  protected async saveGlobals(globals: TGlobalState, options: StorageOptions) {\n    return this.useMemory(options.storageLocation)\n      ? this.saveGlobalsToMemory(globals)\n      : await this.saveGlobalsToDisk(globals, options);\n  }\n\n  protected async getGlobalsFromMemory(): Promise<TGlobalState> {\n    return (await this.state()).globals;\n  }\n\n  protected async getGlobalsFromDisk(options: StorageOptions): Promise<TGlobalState> {\n    return await this.storageService.get<TGlobalState>(keys.global, options);\n  }\n\n  protected async saveGlobalsToMemory(globals: TGlobalState): Promise<void> {\n    await this.updateState(async (state) => {\n      state.globals = globals;\n      return state;\n    });\n  }\n\n  protected async saveGlobalsToDisk(globals: TGlobalState, options: StorageOptions): Promise<void> {\n    if (options.useSecureStorage) {\n      await this.secureStorageService.save(keys.global, globals, options);\n    } else {\n      await this.storageService.save(keys.global, globals, options);\n    }\n  }\n\n  protected async getAccount(options: StorageOptions): Promise<TAccount> {\n    try {\n      let account: TAccount;\n      if (this.useMemory(options.storageLocation)) {\n        account = await this.getAccountFromMemory(options);\n      }\n\n      if (this.useDisk(options.storageLocation) && account == null) {\n        account = await this.getAccountFromDisk(options);\n      }\n\n      return account;\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  protected async getAccountFromMemory(options: StorageOptions): Promise<TAccount> {\n    return await this.state().then(async (state) => {\n      if (state.accounts == null) {\n        return null;\n      }\n      return state.accounts[await this.getUserIdFromMemory(options)];\n    });\n  }\n\n  protected async getUserIdFromMemory(options: StorageOptions): Promise<string> {\n    return await this.state().then((state) => {\n      return options?.userId != null\n        ? state.accounts[options.userId]?.profile?.userId\n        : state.activeUserId;\n    });\n  }\n\n  protected async getAccountFromDisk(options: StorageOptions): Promise<TAccount> {\n    if (options?.userId == null && (await this.state())?.activeUserId == null) {\n      return null;\n    }\n\n    if (this.useAccountCache) {\n      const cachedAccount = this.accountDiskCache.value[options.userId];\n      if (cachedAccount != null) {\n        return cachedAccount;\n      }\n    }\n\n    const account = options?.useSecureStorage\n      ? (await this.secureStorageService.get<TAccount>(options.userId, options)) ??\n        (await this.storageService.get<TAccount>(\n          options.userId,\n          this.reconcileOptions(options, { htmlStorageLocation: HtmlStorageLocation.Local })\n        ))\n      : await this.storageService.get<TAccount>(options.userId, options);\n\n    this.setDiskCache(options.userId, account);\n    return account;\n  }\n\n  protected useMemory(storageLocation: StorageLocation) {\n    return storageLocation === StorageLocation.Memory || storageLocation === StorageLocation.Both;\n  }\n\n  protected useDisk(storageLocation: StorageLocation) {\n    return storageLocation === StorageLocation.Disk || storageLocation === StorageLocation.Both;\n  }\n\n  protected async saveAccount(\n    account: TAccount,\n    options: StorageOptions = {\n      storageLocation: StorageLocation.Both,\n      useSecureStorage: false,\n    }\n  ) {\n    return this.useMemory(options.storageLocation)\n      ? await this.saveAccountToMemory(account)\n      : await this.saveAccountToDisk(account, options);\n  }\n\n  protected async saveAccountToDisk(account: TAccount, options: StorageOptions): Promise<void> {\n    const storageLocation = options.useSecureStorage\n      ? this.secureStorageService\n      : this.storageService;\n\n    await storageLocation.save(`${options.userId}`, account, options);\n\n    this.deleteDiskCache(options.userId);\n  }\n\n  protected async saveAccountToMemory(account: TAccount): Promise<void> {\n    if (this.getAccountFromMemory({ userId: account.profile.userId }) !== null) {\n      await this.updateState((state) => {\n        return new Promise((resolve) => {\n          state.accounts[account.profile.userId] = account;\n          resolve(state);\n        });\n      });\n    }\n    await this.pushAccounts();\n  }\n\n  protected async scaffoldNewAccountStorage(account: TAccount): Promise<void> {\n    // We don't want to manipulate the referenced in memory account\n    const deepClone = JSON.parse(JSON.stringify(account));\n    await this.scaffoldNewAccountLocalStorage(deepClone);\n    await this.scaffoldNewAccountSessionStorage(deepClone);\n    await this.scaffoldNewAccountMemoryStorage(deepClone);\n  }\n\n  // TODO: There is a tech debt item for splitting up these methods - only Web uses multiple storage locations in its storageService.\n  // For now these methods exist with some redundancy to facilitate this special web requirement.\n  protected async scaffoldNewAccountLocalStorage(account: TAccount): Promise<void> {\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskLocalOptions()\n      )\n    );\n    // EnvironmentUrls and region are set before authenticating and should override whatever is stored from any previous session\n    const environmentUrls = account.settings.environmentUrls;\n    const region = account.settings.region;\n    if (storedAccount?.settings != null) {\n      account.settings = storedAccount.settings;\n    } else if (await this.storageService.has(keys.tempAccountSettings)) {\n      account.settings = await this.storageService.get<AccountSettings>(keys.tempAccountSettings);\n      await this.storageService.remove(keys.tempAccountSettings);\n    }\n    account.settings.environmentUrls = environmentUrls;\n    account.settings.region = region;\n\n    if (\n      account.settings.vaultTimeoutAction === VaultTimeoutAction.LogOut &&\n      account.settings.vaultTimeout != null\n    ) {\n      account.tokens.accessToken = null;\n      account.tokens.refreshToken = null;\n      account.profile.apiKeyClientId = null;\n      account.keys.apiKeyClientSecret = null;\n    }\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskLocalOptions()\n      )\n    );\n  }\n\n  protected async scaffoldNewAccountMemoryStorage(account: TAccount): Promise<void> {\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskMemoryOptions()\n      )\n    );\n    if (storedAccount?.settings != null) {\n      storedAccount.settings.environmentUrls = account.settings.environmentUrls;\n      storedAccount.settings.region = account.settings.region;\n      account.settings = storedAccount.settings;\n    }\n    await this.storageService.save(\n      account.profile.userId,\n      account,\n      await this.defaultOnDiskMemoryOptions()\n    );\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskMemoryOptions()\n      )\n    );\n  }\n\n  protected async scaffoldNewAccountSessionStorage(account: TAccount): Promise<void> {\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions({ userId: account.profile.userId }, await this.defaultOnDiskOptions())\n    );\n    if (storedAccount?.settings != null) {\n      storedAccount.settings.environmentUrls = account.settings.environmentUrls;\n      storedAccount.settings.region = account.settings.region;\n      account.settings = storedAccount.settings;\n    }\n    await this.storageService.save(\n      account.profile.userId,\n      account,\n      await this.defaultOnDiskMemoryOptions()\n    );\n    await this.saveAccount(\n      account,\n      this.reconcileOptions({ userId: account.profile.userId }, await this.defaultOnDiskOptions())\n    );\n  }\n\n  protected async pushAccounts(): Promise<void> {\n    await this.pruneInMemoryAccounts();\n    await this.state().then((state) => {\n      if (state.accounts == null || Object.keys(state.accounts).length < 1) {\n        this.accountsSubject.next({});\n        return;\n      }\n\n      this.accountsSubject.next(state.accounts);\n    });\n  }\n\n  protected reconcileOptions(\n    requestedOptions: StorageOptions,\n    defaultOptions: StorageOptions\n  ): StorageOptions {\n    if (requestedOptions == null) {\n      return defaultOptions;\n    }\n    requestedOptions.userId = requestedOptions?.userId ?? defaultOptions.userId;\n    requestedOptions.storageLocation =\n      requestedOptions?.storageLocation ?? defaultOptions.storageLocation;\n    requestedOptions.useSecureStorage =\n      requestedOptions?.useSecureStorage ?? defaultOptions.useSecureStorage;\n    requestedOptions.htmlStorageLocation =\n      requestedOptions?.htmlStorageLocation ?? defaultOptions.htmlStorageLocation;\n    requestedOptions.keySuffix = requestedOptions?.keySuffix ?? defaultOptions.keySuffix;\n    return requestedOptions;\n  }\n\n  protected async defaultInMemoryOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Memory,\n      userId: (await this.state()).activeUserId,\n    };\n  }\n\n  protected async defaultOnDiskOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      htmlStorageLocation: HtmlStorageLocation.Session,\n      userId: (await this.state())?.activeUserId ?? (await this.getActiveUserIdFromStorage()),\n      useSecureStorage: false,\n    };\n  }\n\n  protected async defaultOnDiskLocalOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      htmlStorageLocation: HtmlStorageLocation.Local,\n      userId: (await this.state())?.activeUserId ?? (await this.getActiveUserIdFromStorage()),\n      useSecureStorage: false,\n    };\n  }\n\n  protected async defaultOnDiskMemoryOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      htmlStorageLocation: HtmlStorageLocation.Memory,\n      userId: (await this.state())?.activeUserId ?? (await this.getUserId()),\n      useSecureStorage: false,\n    };\n  }\n\n  protected async defaultSecureStorageOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      useSecureStorage: true,\n      userId: (await this.state())?.activeUserId ?? (await this.getActiveUserIdFromStorage()),\n    };\n  }\n\n  protected async getActiveUserIdFromStorage(): Promise<string> {\n    return await this.storageService.get<string>(keys.activeUserId);\n  }\n\n  protected async removeAccountFromLocalStorage(userId: string = null): Promise<void> {\n    userId = userId ?? (await this.state())?.activeUserId;\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskLocalOptions())\n    );\n    await this.saveAccount(\n      this.resetAccount(storedAccount),\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  protected async removeAccountFromSessionStorage(userId: string = null): Promise<void> {\n    userId = userId ?? (await this.state())?.activeUserId;\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskOptions())\n    );\n    await this.saveAccount(\n      this.resetAccount(storedAccount),\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskOptions())\n    );\n  }\n\n  protected async removeAccountFromSecureStorage(userId: string = null): Promise<void> {\n    userId = userId ?? (await this.state())?.activeUserId;\n    await this.setUserKeyAutoUnlock(null, { userId: userId });\n    await this.setUserKeyBiometric(null, { userId: userId });\n    await this.setCryptoMasterKeyAuto(null, { userId: userId });\n    await this.setCryptoMasterKeyBiometric(null, { userId: userId });\n    await this.setCryptoMasterKeyB64(null, { userId: userId });\n  }\n\n  protected async removeAccountFromMemory(userId: string = null): Promise<void> {\n    await this.updateState(async (state) => {\n      userId = userId ?? state.activeUserId;\n      delete state.accounts[userId];\n\n      this.deleteDiskCache(userId);\n\n      return state;\n    });\n    // TODO: Invert this logic, we should remove accounts based on logged out emit\n    this.accountService.setAccountStatus(userId as UserId, AuthenticationStatus.LoggedOut);\n  }\n\n  protected async pruneInMemoryAccounts() {\n    // We preserve settings for logged out accounts, but we don't want to consider them when thinking about active account state\n    for (const userId in (await this.state())?.accounts) {\n      if (!(await this.getIsAuthenticated({ userId: userId }))) {\n        await this.removeAccountFromMemory(userId);\n      }\n    }\n  }\n\n  // settings persist even on reset, and are not affected by this method\n  protected resetAccount(account: TAccount) {\n    const persistentAccountInformation = {\n      settings: account.settings,\n      keys: { deviceKey: account.keys.deviceKey },\n      adminAuthRequest: account.adminAuthRequest,\n    };\n    return Object.assign(this.createAccount(), persistentAccountInformation);\n  }\n\n  // The environment urls and region are selected before login and are transferred here to an authenticated account\n  protected async setAccountEnvironment(account: TAccount): Promise<TAccount> {\n    account.settings.region = await this.getGlobalRegion();\n    account.settings.environmentUrls = await this.getGlobalEnvironmentUrls();\n    return account;\n  }\n\n  protected async getGlobalEnvironmentUrls(options?: StorageOptions): Promise<EnvironmentUrls> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n    return (await this.getGlobals(options)).environmentUrls ?? new EnvironmentUrls();\n  }\n\n  protected async getGlobalRegion(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n    return (await this.getGlobals(options)).region ?? null;\n  }\n\n  protected async clearDecryptedDataForActiveUser(): Promise<void> {\n    await this.updateState(async (state) => {\n      const userId = state?.activeUserId;\n      if (userId != null && state?.accounts[userId]?.data != null) {\n        state.accounts[userId].data = new AccountData();\n      }\n\n      return state;\n    });\n  }\n\n  protected createAccount(init: Partial<TAccount> = null): TAccount {\n    return this.stateFactory.createAccount(init);\n  }\n\n  protected createGlobals(init: Partial<TGlobalState> = null): TGlobalState {\n    return this.stateFactory.createGlobal(init);\n  }\n\n  protected async deAuthenticateAccount(userId: string): Promise<void> {\n    await this.setAccessToken(null, { userId: userId });\n    await this.setLastActive(null, { userId: userId });\n    await this.updateState(async (state) => {\n      state.authenticatedAccounts = state.authenticatedAccounts.filter((id) => id !== userId);\n\n      await this.storageService.save(keys.authenticatedAccounts, state.authenticatedAccounts);\n\n      return state;\n    });\n  }\n\n  protected async removeAccountFromDisk(userId: string) {\n    await this.removeAccountFromSessionStorage(userId);\n    await this.removeAccountFromLocalStorage(userId);\n    await this.removeAccountFromSecureStorage(userId);\n  }\n\n  protected async dynamicallySetActiveUser() {\n    const accounts = (await this.state())?.accounts;\n    if (accounts == null || Object.keys(accounts).length < 1) {\n      await this.setActiveUser(null);\n      return;\n    }\n    for (const userId in accounts) {\n      if (userId == null) {\n        continue;\n      }\n      if (await this.getIsAuthenticated({ userId: userId })) {\n        await this.setActiveUser(userId);\n        break;\n      }\n      await this.setActiveUser(null);\n    }\n  }\n\n  private async getTimeoutBasedStorageOptions(options?: StorageOptions): Promise<StorageOptions> {\n    const timeoutAction = await this.getVaultTimeoutAction({ userId: options?.userId });\n    const timeout = await this.getVaultTimeout({ userId: options?.userId });\n    const defaultOptions =\n      timeoutAction === VaultTimeoutAction.LogOut && timeout != null\n        ? await this.defaultInMemoryOptions()\n        : await this.defaultOnDiskOptions();\n    return this.reconcileOptions(options, defaultOptions);\n  }\n\n  protected async saveSecureStorageKey<T extends JsonValue>(\n    key: string,\n    value: T,\n    options?: StorageOptions\n  ) {\n    return value == null\n      ? await this.secureStorageService.remove(`${options.userId}${key}`, options)\n      : await this.secureStorageService.save(`${options.userId}${key}`, value, options);\n  }\n\n  protected async state(): Promise<State<TGlobalState, TAccount>> {\n    const state = await this.memoryStorageService.get<State<TGlobalState, TAccount>>(keys.state, {\n      deserializer: (s) => State.fromJSON(s, this.accountDeserializer),\n    });\n    return state;\n  }\n\n  private async setState(state: State<TGlobalState, TAccount>): Promise<void> {\n    await this.memoryStorageService.save(keys.state, state);\n  }\n\n  protected async updateState(\n    stateUpdater: (state: State<TGlobalState, TAccount>) => Promise<State<TGlobalState, TAccount>>\n  ) {\n    await this.state().then(async (state) => {\n      const updatedState = await stateUpdater(state);\n      if (updatedState == null) {\n        throw new Error(\"Attempted to update state to null value\");\n      }\n\n      await this.setState(updatedState);\n    });\n  }\n\n  private setDiskCache(key: string, value: TAccount, options?: StorageOptions) {\n    if (this.useAccountCache) {\n      this.accountDiskCache.value[key] = value;\n      this.accountDiskCache.next(this.accountDiskCache.value);\n    }\n  }\n\n  protected deleteDiskCache(key: string) {\n    if (this.useAccountCache) {\n      delete this.accountDiskCache.value[key];\n      this.accountDiskCache.next(this.accountDiskCache.value);\n    }\n  }\n}\n\nfunction withPrototypeForArrayMembers<T>(\n  memberConstructor: new (...args: any[]) => T,\n  memberConverter: (input: any) => T = (i) => i\n): (\n  target: any,\n  propertyKey: string | symbol,\n  descriptor: PropertyDescriptor\n) => { value: (...args: any[]) => Promise<T[]> } {\n  return (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const originalMethod = descriptor.value;\n\n    return {\n      value: function (...args: any[]) {\n        const originalResult: Promise<any[]> = originalMethod.apply(this, args);\n\n        if (!Utils.isPromise(originalResult)) {\n          throw new Error(\n            `Error applying prototype to stored value -- result is not a promise for method ${String(\n              propertyKey\n            )}`\n          );\n        }\n\n        return originalResult.then((result) => {\n          if (result == null) {\n            return null;\n          } else if (!(result instanceof Array)) {\n            throw new Error(\n              `Attempted to retrieve non array type from state as an array for method ${String(\n                propertyKey\n              )}`\n            );\n          } else {\n            return result.map((r) => {\n              return r == null ||\n                r.constructor.name === memberConstructor.prototype.constructor.name\n                ? r\n                : memberConverter(\n                    Object.create(memberConstructor.prototype, Object.getOwnPropertyDescriptors(r))\n                  );\n            });\n          }\n        });\n      },\n    };\n  };\n}\n\nfunction withPrototypeForObjectValues<T>(\n  valuesConstructor: new (...args: any[]) => T,\n  valuesConverter: (input: any) => T = (i) => i\n): (\n  target: any,\n  propertyKey: string | symbol,\n  descriptor: PropertyDescriptor\n) => { value: (...args: any[]) => Promise<{ [key: string]: T }> } {\n  return (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const originalMethod = descriptor.value;\n\n    return {\n      value: function (...args: any[]) {\n        const originalResult: Promise<{ [key: string]: T }> = originalMethod.apply(this, args);\n\n        if (!Utils.isPromise(originalResult)) {\n          throw new Error(\n            `Error applying prototype to stored value -- result is not a promise for method ${String(\n              propertyKey\n            )}`\n          );\n        }\n\n        return originalResult.then((result) => {\n          if (result == null) {\n            return null;\n          } else {\n            for (const [key, val] of Object.entries(result)) {\n              result[key] =\n                val == null || val.constructor.name === valuesConstructor.prototype.constructor.name\n                  ? valuesConverter(val)\n                  : valuesConverter(\n                      Object.create(\n                        valuesConstructor.prototype,\n                        Object.getOwnPropertyDescriptors(val)\n                      )\n                    );\n            }\n\n            return result as { [key: string]: T };\n          }\n        });\n      },\n    };\n  };\n}\n","import { Jsonify } from \"type-fest\";\n\nexport class BrowserComponentState {\n  scrollY: number;\n  searchText: string;\n\n  static fromJSON(json: Jsonify<BrowserComponentState>) {\n    if (json == null) {\n      return null;\n    }\n\n    return Object.assign(new BrowserComponentState(), json);\n  }\n}\n","import { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { DeepJsonify } from \"@bitwarden/common/types/deep-jsonify\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { BrowserComponentState } from \"./browserComponentState\";\n\nexport class BrowserGroupingsComponentState extends BrowserComponentState {\n  favoriteCiphers: CipherView[];\n  noFolderCiphers: CipherView[];\n  ciphers: CipherView[];\n  collectionCounts: Map<string, number>;\n  folderCounts: Map<string, number>;\n  typeCounts: Map<CipherType, number>;\n  folders: FolderView[];\n  collections: CollectionView[];\n  deletedCount: number;\n\n  toJSON() {\n    return Utils.merge(this, {\n      collectionCounts: Utils.mapToRecord(this.collectionCounts),\n      folderCounts: Utils.mapToRecord(this.folderCounts),\n      typeCounts: Utils.mapToRecord(this.typeCounts),\n    });\n  }\n\n  static fromJSON(json: DeepJsonify<BrowserGroupingsComponentState>) {\n    if (json == null) {\n      return null;\n    }\n\n    return Object.assign(new BrowserGroupingsComponentState(), json, {\n      favoriteCiphers: json.favoriteCiphers?.map((c) => CipherView.fromJSON(c)),\n      noFolderCiphers: json.noFolderCiphers?.map((c) => CipherView.fromJSON(c)),\n      ciphers: json.ciphers?.map((c) => CipherView.fromJSON(c)),\n      collectionCounts: Utils.recordToMap(json.collectionCounts),\n      folderCounts: Utils.recordToMap(json.folderCounts),\n      typeCounts: Utils.recordToMap(json.typeCounts),\n      folders: json.folders?.map((f) => FolderView.fromJSON(f)),\n    });\n  }\n}\n","import { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { SendType } from \"@bitwarden/common/tools/send/enums/send-type\";\nimport { SendView } from \"@bitwarden/common/tools/send/models/view/send.view\";\nimport { DeepJsonify } from \"@bitwarden/common/types/deep-jsonify\";\n\nimport { BrowserComponentState } from \"./browserComponentState\";\n\nexport class BrowserSendComponentState extends BrowserComponentState {\n  sends: SendView[];\n  typeCounts: Map<SendType, number>;\n\n  toJSON() {\n    return Utils.merge(this, {\n      typeCounts: Utils.mapToRecord(this.typeCounts),\n    });\n  }\n\n  static fromJSON(json: DeepJsonify<BrowserSendComponentState>) {\n    if (json == null) {\n      return null;\n    }\n\n    return Object.assign(new BrowserSendComponentState(), json, {\n      sends: json.sends?.map((s) => SendView.fromJSON(s)),\n      typeCounts: Utils.recordToMap(json.typeCounts),\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport {\n  Account as BaseAccount,\n  AccountSettings as BaseAccountSettings,\n} from \"@bitwarden/common/platform/models/domain/account\";\n\nimport { BrowserComponentState } from \"./browserComponentState\";\nimport { BrowserGroupingsComponentState } from \"./browserGroupingsComponentState\";\nimport { BrowserSendComponentState } from \"./browserSendComponentState\";\n\nexport class AccountSettings extends BaseAccountSettings {\n  vaultTimeout = -1; // On Restart\n\n  static fromJSON(json: Jsonify<AccountSettings>): AccountSettings {\n    if (json == null) {\n      return null;\n    }\n\n    return Object.assign(new AccountSettings(), json, super.fromJSON(json));\n  }\n}\n\nexport class Account extends BaseAccount {\n  settings?: AccountSettings = new AccountSettings();\n  groupings?: BrowserGroupingsComponentState;\n  send?: BrowserSendComponentState;\n  ciphers?: BrowserComponentState;\n  sendType?: BrowserComponentState;\n\n  constructor(init: Partial<Account>) {\n    super(init);\n    Object.assign(this.settings, {\n      ...new AccountSettings(),\n      ...this.settings,\n    });\n    this.groupings = init?.groupings ?? new BrowserGroupingsComponentState();\n    this.send = init?.send ?? new BrowserSendComponentState();\n    this.ciphers = init?.ciphers ?? new BrowserComponentState();\n    this.sendType = init?.sendType ?? new BrowserComponentState();\n  }\n\n  static fromJSON(json: Jsonify<Account>): Account {\n    if (json == null) {\n      return null;\n    }\n\n    return Object.assign(new Account({}), json, super.fromJSON(json), {\n      settings: AccountSettings.fromJSON(json.settings),\n      groupings: BrowserGroupingsComponentState.fromJSON(json.groupings),\n      send: BrowserSendComponentState.fromJSON(json.send),\n      ciphers: BrowserComponentState.fromJSON(json.ciphers),\n      sendType: BrowserComponentState.fromJSON(json.sendType),\n    });\n  }\n}\n","import { BehaviorSubject } from \"rxjs\";\n\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport {\n  AbstractStorageService,\n  AbstractMemoryStorageService,\n} from \"@bitwarden/common/platform/abstractions/storage.service\";\nimport { StateFactory } from \"@bitwarden/common/platform/factories/state-factory\";\nimport { GlobalState } from \"@bitwarden/common/platform/models/domain/global-state\";\nimport { StorageOptions } from \"@bitwarden/common/platform/models/domain/storage-options\";\nimport { StateService as BaseStateService } from \"@bitwarden/common/platform/services/state.service\";\n\nimport { Account } from \"../../models/account\";\nimport { BrowserComponentState } from \"../../models/browserComponentState\";\nimport { BrowserGroupingsComponentState } from \"../../models/browserGroupingsComponentState\";\nimport { BrowserSendComponentState } from \"../../models/browserSendComponentState\";\nimport { BrowserApi } from \"../browser/browser-api\";\nimport { browserSession, sessionSync } from \"../decorators/session-sync-observable\";\n\nimport { BrowserStateService as StateServiceAbstraction } from \"./abstractions/browser-state.service\";\n\n@browserSession\nexport class BrowserStateService\n  extends BaseStateService<GlobalState, Account>\n  implements StateServiceAbstraction\n{\n  @sessionSync({\n    initializer: Account.fromJSON as any, // TODO: Remove this any when all any types are removed from Account\n    initializeAs: \"record\",\n  })\n  protected accountsSubject: BehaviorSubject<{ [userId: string]: Account }>;\n  @sessionSync({ initializer: (s: string) => s })\n  protected activeAccountSubject: BehaviorSubject<string>;\n  @sessionSync({ initializer: (b: boolean) => b })\n  protected activeAccountUnlockedSubject: BehaviorSubject<boolean>;\n\n  protected accountDeserializer = Account.fromJSON;\n\n  constructor(\n    storageService: AbstractStorageService,\n    secureStorageService: AbstractStorageService,\n    memoryStorageService: AbstractMemoryStorageService,\n    logService: LogService,\n    stateFactory: StateFactory<GlobalState, Account>,\n    accountService: AccountService,\n    useAccountCache = true\n  ) {\n    super(\n      storageService,\n      secureStorageService,\n      memoryStorageService,\n      logService,\n      stateFactory,\n      accountService,\n      useAccountCache\n    );\n\n    // TODO: This is a hack to fix having a disk cache on both the popup and\n    // the background page that can get out of sync. We need to work out the\n    // best way to handle caching with multiple instances of the state service.\n    if (useAccountCache) {\n      BrowserApi.storageChangeListener((changes, namespace) => {\n        if (namespace === \"local\") {\n          for (const key of Object.keys(changes)) {\n            if (key !== \"accountActivity\" && this.accountDiskCache.value[key]) {\n              this.deleteDiskCache(key);\n            }\n          }\n        }\n      });\n    }\n  }\n\n  async addAccount(account: Account) {\n    // Apply browser overrides to default account values\n    account = new Account(account);\n    await super.addAccount(account);\n  }\n\n  async getIsAuthenticated(options?: StorageOptions): Promise<boolean> {\n    // Firefox Private Mode can clash with non-Private Mode because they both read from the same onDiskOptions\n    // Check that there is an account in memory before considering the user authenticated\n    return (\n      (await super.getIsAuthenticated(options)) &&\n      (await this.getAccount(await this.defaultInMemoryOptions())) != null\n    );\n  }\n\n  async getBrowserGroupingComponentState(\n    options?: StorageOptions\n  ): Promise<BrowserGroupingsComponentState> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.groupings;\n  }\n\n  async setBrowserGroupingComponentState(\n    value: BrowserGroupingsComponentState,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.groupings = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getBrowserVaultItemsComponentState(\n    options?: StorageOptions\n  ): Promise<BrowserComponentState> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.ciphers;\n  }\n\n  async setBrowserVaultItemsComponentState(\n    value: BrowserComponentState,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.ciphers = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getBrowserSendComponentState(options?: StorageOptions): Promise<BrowserSendComponentState> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.send;\n  }\n\n  async setBrowserSendComponentState(\n    value: BrowserSendComponentState,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.send = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getBrowserSendTypeComponentState(options?: StorageOptions): Promise<BrowserComponentState> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.sendType;\n  }\n\n  async setBrowserSendTypeComponentState(\n    value: BrowserComponentState,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.sendType = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  // Overriding the base class to prevent deleting the cache on save. We register a storage listener\n  // to delete the cache in the constructor above.\n  protected override async saveAccountToDisk(\n    account: Account,\n    options: StorageOptions\n  ): Promise<void> {\n    const storageLocation = options.useSecureStorage\n      ? this.secureStorageService\n      : this.storageService;\n\n    await storageLocation.save(`${options.userId}`, account, options);\n  }\n}\n","import { AbstractStorageService } from \"@bitwarden/common/platform/abstractions/storage.service\";\n\nexport default abstract class AbstractChromeStorageService implements AbstractStorageService {\n  protected abstract chromeStorageApi: chrome.storage.StorageArea;\n\n  async get<T>(key: string): Promise<T> {\n    return new Promise((resolve) => {\n      this.chromeStorageApi.get(key, (obj: any) => {\n        if (obj != null && obj[key] != null) {\n          resolve(obj[key] as T);\n          return;\n        }\n        resolve(null);\n      });\n    });\n  }\n\n  async has(key: string): Promise<boolean> {\n    return (await this.get(key)) != null;\n  }\n\n  async save(key: string, obj: any): Promise<void> {\n    if (obj == null) {\n      // Fix safari not liking null in set\n      return new Promise<void>((resolve) => {\n        this.chromeStorageApi.remove(key, () => {\n          resolve();\n        });\n      });\n    }\n\n    if (obj instanceof Set) {\n      obj = Array.from(obj);\n    }\n\n    const keyedObj = { [key]: obj };\n    return new Promise<void>((resolve) => {\n      this.chromeStorageApi.set(keyedObj, () => {\n        resolve();\n      });\n    });\n  }\n\n  async remove(key: string): Promise<void> {\n    return new Promise<void>((resolve) => {\n      this.chromeStorageApi.remove(key, () => {\n        resolve();\n      });\n    });\n  }\n}\n","import AbstractChromeStorageService from \"./abstractions/abstract-chrome-storage-api.service\";\n\nexport default class BrowserLocalStorageService extends AbstractChromeStorageService {\n  protected chromeStorageApi = chrome.storage.local;\n}\n","import AbstractChromeStorageService from \"./abstractions/abstract-chrome-storage-api.service\";\n\nexport default class BrowserMemoryStorageService extends AbstractChromeStorageService {\n  protected chromeStorageApi = chrome.storage.session;\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { AbstractMemoryStorageService } from \"@bitwarden/common/platform/abstractions/storage.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { MemoryStorageOptions } from \"@bitwarden/common/platform/models/domain/storage-options\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\n\nimport { devFlag } from \"../decorators/dev-flag.decorator\";\nimport { devFlagEnabled } from \"../flags\";\n\nimport { AbstractKeyGenerationService } from \"./abstractions/abstract-key-generation.service\";\nimport BrowserLocalStorageService from \"./browser-local-storage.service\";\nimport BrowserMemoryStorageService from \"./browser-memory-storage.service\";\n\nconst keys = {\n  encKey: \"localEncryptionKey\",\n  sessionKey: \"session\",\n};\n\nexport class LocalBackedSessionStorageService extends AbstractMemoryStorageService {\n  private cache = new Map<string, unknown>();\n  private localStorage = new BrowserLocalStorageService();\n  private sessionStorage = new BrowserMemoryStorageService();\n\n  constructor(\n    private encryptService: EncryptService,\n    private keyGenerationService: AbstractKeyGenerationService\n  ) {\n    super();\n  }\n\n  async get<T>(key: string, options?: MemoryStorageOptions<T>): Promise<T> {\n    if (this.cache.has(key)) {\n      return this.cache.get(key) as T;\n    }\n\n    return await this.getBypassCache(key, options);\n  }\n\n  async getBypassCache<T>(key: string, options?: MemoryStorageOptions<T>): Promise<T> {\n    const session = await this.getLocalSession(await this.getSessionEncKey());\n    if (session == null || !Object.keys(session).includes(key)) {\n      return null;\n    }\n\n    let value = session[key];\n    if (options?.deserializer != null) {\n      value = options.deserializer(value as Jsonify<T>);\n    }\n\n    this.cache.set(key, value);\n    return this.cache.get(key) as T;\n  }\n\n  async has(key: string): Promise<boolean> {\n    return (await this.get(key)) != null;\n  }\n\n  async save<T>(key: string, obj: T): Promise<void> {\n    if (obj == null) {\n      this.cache.delete(key);\n    } else {\n      this.cache.set(key, obj);\n    }\n\n    const sessionEncKey = await this.getSessionEncKey();\n    const localSession = (await this.getLocalSession(sessionEncKey)) ?? {};\n    localSession[key] = obj;\n    await this.setLocalSession(localSession, sessionEncKey);\n  }\n\n  async remove(key: string): Promise<void> {\n    await this.save(key, null);\n  }\n\n  async getLocalSession(encKey: SymmetricCryptoKey): Promise<Record<string, unknown>> {\n    const local = await this.localStorage.get<string>(keys.sessionKey);\n\n    if (local == null) {\n      return null;\n    }\n\n    if (devFlagEnabled(\"storeSessionDecrypted\")) {\n      return local as any as Record<string, unknown>;\n    }\n\n    const sessionJson = await this.encryptService.decryptToUtf8(new EncString(local), encKey);\n    if (sessionJson == null) {\n      // Error with decryption -- session is lost, delete state and key and start over\n      await this.setSessionEncKey(null);\n      await this.localStorage.remove(keys.sessionKey);\n      return null;\n    }\n    return JSON.parse(sessionJson);\n  }\n\n  async setLocalSession(session: Record<string, unknown>, key: SymmetricCryptoKey) {\n    if (devFlagEnabled(\"storeSessionDecrypted\")) {\n      await this.setDecryptedLocalSession(session);\n    } else {\n      await this.setEncryptedLocalSession(session, key);\n    }\n  }\n\n  @devFlag(\"storeSessionDecrypted\")\n  async setDecryptedLocalSession(session: Record<string, unknown>): Promise<void> {\n    // Make sure we're storing the jsonified version of the session\n    const jsonSession = JSON.parse(JSON.stringify(session));\n    if (session == null) {\n      await this.localStorage.remove(keys.sessionKey);\n    } else {\n      await this.localStorage.save(keys.sessionKey, jsonSession);\n    }\n  }\n\n  async setEncryptedLocalSession(session: Record<string, unknown>, key: SymmetricCryptoKey) {\n    const jsonSession = JSON.stringify(session);\n    const encSession = await this.encryptService.encrypt(jsonSession, key);\n\n    if (encSession == null) {\n      return await this.localStorage.remove(keys.sessionKey);\n    }\n    await this.localStorage.save(keys.sessionKey, encSession.encryptedString);\n  }\n\n  async getSessionEncKey(): Promise<SymmetricCryptoKey> {\n    let storedKey = await this.sessionStorage.get<SymmetricCryptoKey>(keys.encKey);\n    if (storedKey == null || Object.keys(storedKey).length == 0) {\n      storedKey = await this.keyGenerationService.makeEphemeralKey();\n      await this.setSessionEncKey(storedKey);\n    }\n    return SymmetricCryptoKey.fromJSON(storedKey);\n  }\n\n  async setSessionEncKey(input: SymmetricCryptoKey): Promise<void> {\n    if (input == null) {\n      await this.sessionStorage.remove(keys.encKey);\n    } else {\n      await this.sessionStorage.save(keys.encKey, input);\n    }\n  }\n}\n","import { CryptoFunctionService } from \"@bitwarden/common/platform/abstractions/crypto-function.service\";\nimport { WebCryptoFunctionService } from \"@bitwarden/common/platform/services/web-crypto-function.service\";\n\nimport { CachedServices, factory, FactoryOptions } from \"./factory-options\";\n\ntype CryptoFunctionServiceFactoryOptions = FactoryOptions & {\n  cryptoFunctionServiceOptions: {\n    win: Window | typeof globalThis;\n  };\n};\n\nexport type CryptoFunctionServiceInitOptions = CryptoFunctionServiceFactoryOptions;\n\nexport function cryptoFunctionServiceFactory(\n  cache: { cryptoFunctionService?: CryptoFunctionService } & CachedServices,\n  opts: CryptoFunctionServiceFactoryOptions\n): Promise<CryptoFunctionService> {\n  return factory(\n    cache,\n    \"cryptoFunctionService\",\n    opts,\n    () => new WebCryptoFunctionService(opts.cryptoFunctionServiceOptions.win)\n  );\n}\n","import { devFlagEnabled, DevFlags } from \"../flags\";\n\nexport function devFlag(flag: keyof DevFlags) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = function (...args: any[]) {\n      if (!devFlagEnabled(flag)) {\n        throw new Error(\n          `This method should not be called, it is protected by a disabled dev flag.`\n        );\n      }\n      return originalMethod.apply(this, args);\n    };\n  };\n}\n","import { EncryptServiceImplementation } from \"@bitwarden/common/platform/services/cryptography/encrypt.service.implementation\";\n\nimport {\n  LogServiceInitOptions,\n  logServiceFactory,\n} from \"../../background/service-factories/log-service.factory\";\n\nimport {\n  cryptoFunctionServiceFactory,\n  CryptoFunctionServiceInitOptions,\n} from \"./crypto-function-service.factory\";\nimport { FactoryOptions, CachedServices, factory } from \"./factory-options\";\n\ntype EncryptServiceFactoryOptions = FactoryOptions & {\n  encryptServiceOptions: {\n    logMacFailures: boolean;\n  };\n};\n\nexport type EncryptServiceInitOptions = EncryptServiceFactoryOptions &\n  CryptoFunctionServiceInitOptions &\n  LogServiceInitOptions;\n\nexport function encryptServiceFactory(\n  cache: { encryptService?: EncryptServiceImplementation } & CachedServices,\n  opts: EncryptServiceInitOptions\n): Promise<EncryptServiceImplementation> {\n  return factory(\n    cache,\n    \"encryptService\",\n    opts,\n    async () =>\n      new EncryptServiceImplementation(\n        await cryptoFunctionServiceFactory(cache, opts),\n        await logServiceFactory(cache, opts),\n        opts.encryptServiceOptions.logMacFailures\n      )\n  );\n}\n","import { CryptoFunctionService } from \"@bitwarden/common/platform/abstractions/crypto-function.service\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\n\nimport { AbstractKeyGenerationService } from \"./abstractions/abstract-key-generation.service\";\n\nexport class KeyGenerationService implements AbstractKeyGenerationService {\n  constructor(private cryptoFunctionService: CryptoFunctionService) {}\n\n  async makeEphemeralKey(numBytes = 16): Promise<SymmetricCryptoKey> {\n    const keyMaterial = await this.cryptoFunctionService.randomBytes(numBytes);\n    const key = await this.cryptoFunctionService.hkdf(\n      keyMaterial,\n      \"bitwarden-ephemeral\",\n      \"ephemeral\",\n      64,\n      \"sha256\"\n    );\n    return new SymmetricCryptoKey(key);\n  }\n}\n","import {\n  AbstractMemoryStorageService,\n  AbstractStorageService,\n} from \"@bitwarden/common/platform/abstractions/storage.service\";\nimport { MemoryStorageService } from \"@bitwarden/common/platform/services/memory-storage.service\";\n\nimport { BrowserApi } from \"../../browser/browser-api\";\nimport BrowserLocalStorageService from \"../../services/browser-local-storage.service\";\nimport { LocalBackedSessionStorageService } from \"../../services/local-backed-session-storage.service\";\n\nimport { EncryptServiceInitOptions, encryptServiceFactory } from \"./encrypt-service.factory\";\nimport { CachedServices, factory, FactoryOptions } from \"./factory-options\";\nimport {\n  KeyGenerationServiceInitOptions,\n  keyGenerationServiceFactory,\n} from \"./key-generation-service.factory\";\n\ntype StorageServiceFactoryOptions = FactoryOptions;\n\nexport type DiskStorageServiceInitOptions = StorageServiceFactoryOptions;\nexport type SecureStorageServiceInitOptions = StorageServiceFactoryOptions;\nexport type MemoryStorageServiceInitOptions = StorageServiceFactoryOptions &\n  EncryptServiceInitOptions &\n  KeyGenerationServiceInitOptions;\n\nexport function diskStorageServiceFactory(\n  cache: { diskStorageService?: AbstractStorageService } & CachedServices,\n  opts: DiskStorageServiceInitOptions\n): Promise<AbstractStorageService> {\n  return factory(cache, \"diskStorageService\", opts, () => new BrowserLocalStorageService());\n}\n\nexport function secureStorageServiceFactory(\n  cache: { secureStorageService?: AbstractStorageService } & CachedServices,\n  opts: SecureStorageServiceInitOptions\n): Promise<AbstractStorageService> {\n  return factory(cache, \"secureStorageService\", opts, () => new BrowserLocalStorageService());\n}\n\nexport function memoryStorageServiceFactory(\n  cache: { memoryStorageService?: AbstractMemoryStorageService } & CachedServices,\n  opts: MemoryStorageServiceInitOptions\n): Promise<AbstractMemoryStorageService> {\n  return factory(cache, \"memoryStorageService\", opts, async () => {\n    if (BrowserApi.manifestVersion === 3) {\n      return new LocalBackedSessionStorageService(\n        await encryptServiceFactory(cache, opts),\n        await keyGenerationServiceFactory(cache, opts)\n      );\n    }\n    return new MemoryStorageService();\n  });\n}\n","import { KeyGenerationService } from \"../../services/key-generation.service\";\n\nimport {\n  cryptoFunctionServiceFactory,\n  CryptoFunctionServiceInitOptions,\n} from \"./crypto-function-service.factory\";\nimport { FactoryOptions, CachedServices, factory } from \"./factory-options\";\n\ntype KeyGenerationServiceFactoryOptions = FactoryOptions;\n\nexport type KeyGenerationServiceInitOptions = KeyGenerationServiceFactoryOptions &\n  CryptoFunctionServiceInitOptions;\n\nexport function keyGenerationServiceFactory(\n  cache: { keyGenerationService?: KeyGenerationService } & CachedServices,\n  opts: KeyGenerationServiceInitOptions\n): Promise<KeyGenerationService> {\n  return factory(\n    cache,\n    \"keyGenerationService\",\n    opts,\n    async () => new KeyGenerationService(await cryptoFunctionServiceFactory(cache, opts))\n  );\n}\n","import { StateFactory } from \"@bitwarden/common/platform/factories/state-factory\";\nimport { GlobalState } from \"@bitwarden/common/platform/models/domain/global-state\";\n\nimport {\n  accountServiceFactory,\n  AccountServiceInitOptions,\n} from \"../../../auth/background/service-factories/account-service.factory\";\nimport { Account } from \"../../../models/account\";\nimport { BrowserStateService } from \"../../services/browser-state.service\";\n\nimport { CachedServices, factory, FactoryOptions } from \"./factory-options\";\nimport { logServiceFactory, LogServiceInitOptions } from \"./log-service.factory\";\nimport {\n  diskStorageServiceFactory,\n  secureStorageServiceFactory,\n  memoryStorageServiceFactory,\n  DiskStorageServiceInitOptions,\n  SecureStorageServiceInitOptions,\n  MemoryStorageServiceInitOptions,\n} from \"./storage-service.factory\";\n\ntype StateServiceFactoryOptions = FactoryOptions & {\n  stateServiceOptions: {\n    useAccountCache?: boolean;\n    stateFactory: StateFactory<GlobalState, Account>;\n  };\n};\n\nexport type StateServiceInitOptions = StateServiceFactoryOptions &\n  DiskStorageServiceInitOptions &\n  SecureStorageServiceInitOptions &\n  MemoryStorageServiceInitOptions &\n  LogServiceInitOptions &\n  AccountServiceInitOptions;\n\nexport async function stateServiceFactory(\n  cache: { stateService?: BrowserStateService } & CachedServices,\n  opts: StateServiceInitOptions\n): Promise<BrowserStateService> {\n  const service = await factory(\n    cache,\n    \"stateService\",\n    opts,\n    async () =>\n      await new BrowserStateService(\n        await diskStorageServiceFactory(cache, opts),\n        await secureStorageServiceFactory(cache, opts),\n        await memoryStorageServiceFactory(cache, opts),\n        await logServiceFactory(cache, opts),\n        opts.stateServiceOptions.stateFactory,\n        await accountServiceFactory(cache, opts),\n        opts.stateServiceOptions.useAccountCache\n      )\n  );\n  service.init();\n  return service;\n}\n","import { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { AccountServiceImplementation } from \"@bitwarden/common/auth/services/account.service\";\n\nimport {\n  FactoryOptions,\n  CachedServices,\n  factory,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport {\n  LogServiceInitOptions,\n  logServiceFactory,\n} from \"../../../platform/background/service-factories/log-service.factory\";\nimport {\n  MessagingServiceInitOptions,\n  messagingServiceFactory,\n} from \"../../../platform/background/service-factories/messaging-service.factory\";\n\ntype AccountServiceFactoryOptions = FactoryOptions;\n\nexport type AccountServiceInitOptions = AccountServiceFactoryOptions &\n  MessagingServiceInitOptions &\n  LogServiceInitOptions;\n\nexport function accountServiceFactory(\n  cache: { accountService?: AccountService } & CachedServices,\n  opts: AccountServiceInitOptions\n): Promise<AccountService> {\n  return factory(\n    cache,\n    \"accountService\",\n    opts,\n    async () =>\n      new AccountServiceImplementation(\n        await messagingServiceFactory(cache, opts),\n        await logServiceFactory(cache, opts)\n      )\n  );\n}\n","import { OrganizationService as AbstractOrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\n\nimport {\n  FactoryOptions,\n  CachedServices,\n  factory,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport {\n  stateServiceFactory,\n  StateServiceInitOptions,\n} from \"../../../platform/background/service-factories/state-service.factory\";\nimport { BrowserOrganizationService } from \"../../services/browser-organization.service\";\n\ntype OrganizationServiceFactoryOptions = FactoryOptions;\n\nexport type OrganizationServiceInitOptions = OrganizationServiceFactoryOptions &\n  StateServiceInitOptions;\n\nexport function organizationServiceFactory(\n  cache: { organizationService?: AbstractOrganizationService } & CachedServices,\n  opts: OrganizationServiceInitOptions\n): Promise<AbstractOrganizationService> {\n  return factory(\n    cache,\n    \"organizationService\",\n    opts,\n    async () => new BrowserOrganizationService(await stateServiceFactory(cache, opts))\n  );\n}\n","import { PolicyService as AbstractPolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\n\nimport {\n  CachedServices,\n  factory,\n  FactoryOptions,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport {\n  stateServiceFactory as stateServiceFactory,\n  StateServiceInitOptions,\n} from \"../../../platform/background/service-factories/state-service.factory\";\nimport { BrowserPolicyService } from \"../../services/browser-policy.service\";\n\nimport {\n  organizationServiceFactory,\n  OrganizationServiceInitOptions,\n} from \"./organization-service.factory\";\n\ntype PolicyServiceFactoryOptions = FactoryOptions;\n\nexport type PolicyServiceInitOptions = PolicyServiceFactoryOptions &\n  StateServiceInitOptions &\n  OrganizationServiceInitOptions;\n\nexport function policyServiceFactory(\n  cache: { policyService?: AbstractPolicyService } & CachedServices,\n  opts: PolicyServiceInitOptions\n): Promise<AbstractPolicyService> {\n  return factory(\n    cache,\n    \"policyService\",\n    opts,\n    async () =>\n      new BrowserPolicyService(\n        await stateServiceFactory(cache, opts),\n        await organizationServiceFactory(cache, opts)\n      )\n  );\n}\n","import { TokenService as AbstractTokenService } from \"@bitwarden/common/auth/abstractions/token.service\";\nimport { TokenService } from \"@bitwarden/common/auth/services/token.service\";\n\nimport {\n  FactoryOptions,\n  CachedServices,\n  factory,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport {\n  stateServiceFactory,\n  StateServiceInitOptions,\n} from \"../../../platform/background/service-factories/state-service.factory\";\n\ntype TokenServiceFactoryOptions = FactoryOptions;\n\nexport type TokenServiceInitOptions = TokenServiceFactoryOptions & StateServiceInitOptions;\n\nexport function tokenServiceFactory(\n  cache: { tokenService?: AbstractTokenService } & CachedServices,\n  opts: TokenServiceInitOptions\n): Promise<AbstractTokenService> {\n  return factory(\n    cache,\n    \"tokenService\",\n    opts,\n    async () => new TokenService(await stateServiceFactory(cache, opts))\n  );\n}\n","import { Observable } from \"rxjs\";\n\nexport type Urls = {\n  base?: string;\n  webVault?: string;\n  api?: string;\n  identity?: string;\n  icons?: string;\n  notifications?: string;\n  events?: string;\n  keyConnector?: string;\n  scim?: string;\n};\n\nexport type PayPalConfig = {\n  businessId?: string;\n  buttonAction?: string;\n};\n\nexport enum Region {\n  US = \"US\",\n  EU = \"EU\",\n  SelfHosted = \"Self-hosted\",\n}\n\nexport enum RegionDomain {\n  US = \"bitwarden.com\",\n  EU = \"bitwarden.eu\",\n  USQA = \"bitwarden.pw\",\n}\n\nexport abstract class EnvironmentService {\n  urls: Observable<void>;\n  usUrls: Urls;\n  euUrls: Urls;\n  selectedRegion?: Region;\n  initialized = true;\n\n  hasBaseUrl: () => boolean;\n  getNotificationsUrl: () => string;\n  getWebVaultUrl: () => string;\n  /**\n   * Retrieves the URL of the cloud web vault app.\n   *\n   * @returns {string} The URL of the cloud web vault app.\n   * @remarks Use this method only in views exclusive to self-host instances.\n   */\n  getCloudWebVaultUrl: () => string;\n  /**\n   * Sets the URL of the cloud web vault app based on the region parameter.\n   *\n   * @param {Region} region - The region of the cloud web vault app.\n   */\n  setCloudWebVaultUrl: (region: Region) => void;\n  getSendUrl: () => string;\n  getIconsUrl: () => string;\n  getApiUrl: () => string;\n  getIdentityUrl: () => string;\n  getEventsUrl: () => string;\n  getKeyConnectorUrl: () => string;\n  getScimUrl: () => string;\n  setUrlsFromStorage: () => Promise<void>;\n  setUrls: (urls: Urls) => Promise<Urls>;\n  setRegion: (region: Region) => Promise<void>;\n  getUrls: () => Urls;\n  isCloud: () => boolean;\n  isEmpty: () => boolean;\n}\n","import { DiskStorageOptions } from \"@koa/multer\";\n\nimport { AppIdService as AbstractAppIdService } from \"@bitwarden/common/platform/abstractions/app-id.service\";\nimport { AppIdService } from \"@bitwarden/common/platform/services/app-id.service\";\n\nimport { FactoryOptions, CachedServices, factory } from \"./factory-options\";\nimport { diskStorageServiceFactory } from \"./storage-service.factory\";\n\ntype AppIdServiceFactoryOptions = FactoryOptions;\n\nexport type AppIdServiceInitOptions = AppIdServiceFactoryOptions & DiskStorageOptions;\n\nexport function appIdServiceFactory(\n  cache: { appIdService?: AbstractAppIdService } & CachedServices,\n  opts: AppIdServiceInitOptions\n): Promise<AbstractAppIdService> {\n  return factory(\n    cache,\n    \"appIdService\",\n    opts,\n    async () => new AppIdService(await diskStorageServiceFactory(cache, opts))\n  );\n}\n","import { concatMap, Observable, ReplaySubject } from \"rxjs\";\n\nimport { EnvironmentUrls } from \"../../auth/models/domain/environment-urls\";\nimport {\n  EnvironmentService as EnvironmentServiceAbstraction,\n  Region,\n  Urls,\n} from \"../abstractions/environment.service\";\nimport { StateService } from \"../abstractions/state.service\";\n\nexport class EnvironmentService implements EnvironmentServiceAbstraction {\n  private readonly urlsSubject = new ReplaySubject<void>(1);\n  urls: Observable<void> = this.urlsSubject.asObservable();\n  selectedRegion?: Region;\n  initialized = false;\n\n  protected baseUrl: string;\n  protected webVaultUrl: string;\n  protected apiUrl: string;\n  protected identityUrl: string;\n  protected iconsUrl: string;\n  protected notificationsUrl: string;\n  protected eventsUrl: string;\n  private keyConnectorUrl: string;\n  private scimUrl: string = null;\n  private cloudWebVaultUrl: string;\n\n  readonly usUrls: Urls = {\n    base: null,\n    api: \"https://api.bitwarden.com\",\n    identity: \"https://identity.bitwarden.com\",\n    icons: \"https://icons.bitwarden.net\",\n    webVault: \"https://vault.bitwarden.com\",\n    notifications: \"https://notifications.bitwarden.com\",\n    events: \"https://events.bitwarden.com\",\n    scim: \"https://scim.bitwarden.com\",\n  };\n\n  readonly euUrls: Urls = {\n    base: null,\n    api: \"https://api.bitwarden.eu\",\n    identity: \"https://identity.bitwarden.eu\",\n    icons: \"https://icons.bitwarden.eu\",\n    webVault: \"https://vault.bitwarden.eu\",\n    notifications: \"https://notifications.bitwarden.eu\",\n    events: \"https://events.bitwarden.eu\",\n    scim: \"https://scim.bitwarden.eu\",\n  };\n\n  constructor(private stateService: StateService) {\n    this.stateService.activeAccount$\n      .pipe(\n        concatMap(async () => {\n          if (!this.initialized) {\n            return;\n          }\n          await this.setUrlsFromStorage();\n        })\n      )\n      .subscribe();\n  }\n\n  hasBaseUrl() {\n    return this.baseUrl != null;\n  }\n\n  getNotificationsUrl() {\n    if (this.notificationsUrl != null) {\n      return this.notificationsUrl;\n    }\n\n    if (this.baseUrl != null) {\n      return this.baseUrl + \"/notifications\";\n    }\n\n    return \"https://notifications.bitwarden.com\";\n  }\n\n  getWebVaultUrl() {\n    if (this.webVaultUrl != null) {\n      return this.webVaultUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl;\n    }\n    return \"https://vault.bitwarden.com\";\n  }\n\n  getCloudWebVaultUrl() {\n    if (this.cloudWebVaultUrl != null) {\n      return this.cloudWebVaultUrl;\n    }\n\n    return this.usUrls.webVault;\n  }\n\n  setCloudWebVaultUrl(region: Region) {\n    switch (region) {\n      case Region.EU:\n        this.cloudWebVaultUrl = this.euUrls.webVault;\n        break;\n      case Region.US:\n      default:\n        this.cloudWebVaultUrl = this.usUrls.webVault;\n        break;\n    }\n  }\n\n  getSendUrl() {\n    return this.getWebVaultUrl() === \"https://vault.bitwarden.com\"\n      ? \"https://send.bitwarden.com/#\"\n      : this.getWebVaultUrl() + \"/#/send/\";\n  }\n\n  getIconsUrl() {\n    if (this.iconsUrl != null) {\n      return this.iconsUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl + \"/icons\";\n    }\n\n    return \"https://icons.bitwarden.net\";\n  }\n\n  getApiUrl() {\n    if (this.apiUrl != null) {\n      return this.apiUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl + \"/api\";\n    }\n\n    return \"https://api.bitwarden.com\";\n  }\n\n  getIdentityUrl() {\n    if (this.identityUrl != null) {\n      return this.identityUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl + \"/identity\";\n    }\n\n    return \"https://identity.bitwarden.com\";\n  }\n\n  getEventsUrl() {\n    if (this.eventsUrl != null) {\n      return this.eventsUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl + \"/events\";\n    }\n\n    return \"https://events.bitwarden.com\";\n  }\n\n  getKeyConnectorUrl() {\n    return this.keyConnectorUrl;\n  }\n\n  getScimUrl() {\n    if (this.scimUrl != null) {\n      return this.scimUrl + \"/v2\";\n    }\n\n    return this.getWebVaultUrl() === \"https://vault.bitwarden.com\"\n      ? \"https://scim.bitwarden.com/v2\"\n      : this.getWebVaultUrl() + \"/scim/v2\";\n  }\n\n  async setUrlsFromStorage(): Promise<void> {\n    const region = await this.stateService.getRegion();\n    const savedUrls = await this.stateService.getEnvironmentUrls();\n    const envUrls = new EnvironmentUrls();\n\n    // In release `2023.5.0`, we set the `base` property of the environment URLs to the US web vault URL when a user clicked the \"US\" region.\n    // This check will detect these cases and convert them to the proper region instead.\n    // We are detecting this by checking for the presence of the web vault URL in the `base` and the absence of the `notifications` property.\n    // This is because the `notifications` will not be `null` in the web vault, and we don't want to migrate the URLs in that case.\n    if (savedUrls.base === \"https://vault.bitwarden.com\" && savedUrls.notifications == null) {\n      await this.setRegion(Region.US);\n      return;\n    }\n\n    switch (region) {\n      case Region.EU:\n        await this.setRegion(Region.EU);\n        return;\n      case Region.US:\n        await this.setRegion(Region.US);\n        return;\n      case Region.SelfHosted:\n      case null:\n      default:\n        this.baseUrl = envUrls.base = savedUrls.base;\n        this.webVaultUrl = savedUrls.webVault;\n        this.apiUrl = envUrls.api = savedUrls.api;\n        this.identityUrl = envUrls.identity = savedUrls.identity;\n        this.iconsUrl = savedUrls.icons;\n        this.notificationsUrl = savedUrls.notifications;\n        this.eventsUrl = envUrls.events = savedUrls.events;\n        this.keyConnectorUrl = savedUrls.keyConnector;\n        await this.setRegion(Region.SelfHosted);\n        // scimUrl is not saved to storage\n        this.urlsSubject.next();\n        break;\n    }\n  }\n\n  async setUrls(urls: Urls): Promise<Urls> {\n    urls.base = this.formatUrl(urls.base);\n    urls.webVault = this.formatUrl(urls.webVault);\n    urls.api = this.formatUrl(urls.api);\n    urls.identity = this.formatUrl(urls.identity);\n    urls.icons = this.formatUrl(urls.icons);\n    urls.notifications = this.formatUrl(urls.notifications);\n    urls.events = this.formatUrl(urls.events);\n    urls.keyConnector = this.formatUrl(urls.keyConnector);\n\n    // scimUrl cannot be cleared\n    urls.scim = this.formatUrl(urls.scim) ?? this.scimUrl;\n\n    await this.stateService.setEnvironmentUrls({\n      base: urls.base,\n      api: urls.api,\n      identity: urls.identity,\n      webVault: urls.webVault,\n      icons: urls.icons,\n      notifications: urls.notifications,\n      events: urls.events,\n      keyConnector: urls.keyConnector,\n      // scimUrl is not saved to storage\n    });\n\n    this.baseUrl = urls.base;\n    this.webVaultUrl = urls.webVault;\n    this.apiUrl = urls.api;\n    this.identityUrl = urls.identity;\n    this.iconsUrl = urls.icons;\n    this.notificationsUrl = urls.notifications;\n    this.eventsUrl = urls.events;\n    this.keyConnectorUrl = urls.keyConnector;\n    this.scimUrl = urls.scim;\n\n    await this.setRegion(Region.SelfHosted);\n\n    this.urlsSubject.next();\n\n    return urls;\n  }\n\n  getUrls() {\n    return {\n      base: this.baseUrl,\n      webVault: this.webVaultUrl,\n      cloudWebVault: this.cloudWebVaultUrl,\n      api: this.apiUrl,\n      identity: this.identityUrl,\n      icons: this.iconsUrl,\n      notifications: this.notificationsUrl,\n      events: this.eventsUrl,\n      keyConnector: this.keyConnectorUrl,\n      scim: this.scimUrl,\n    };\n  }\n\n  isEmpty(): boolean {\n    return (\n      this.baseUrl == null &&\n      this.webVaultUrl == null &&\n      this.apiUrl == null &&\n      this.identityUrl == null &&\n      this.iconsUrl == null &&\n      this.notificationsUrl == null &&\n      this.eventsUrl == null\n    );\n  }\n\n  async setRegion(region: Region) {\n    this.selectedRegion = region;\n    await this.stateService.setRegion(region);\n\n    if (region === Region.SelfHosted) {\n      // If user saves a self-hosted region with empty fields, default to US\n      if (this.isEmpty()) {\n        await this.setRegion(Region.US);\n      }\n    } else {\n      // If we are setting the region to EU or US, clear the self-hosted URLs\n      await this.stateService.setEnvironmentUrls(new EnvironmentUrls());\n      if (region === Region.EU) {\n        this.setUrlsInternal(this.euUrls);\n      } else if (region === Region.US) {\n        this.setUrlsInternal(this.usUrls);\n      }\n    }\n  }\n\n  private setUrlsInternal(urls: Urls) {\n    this.baseUrl = this.formatUrl(urls.base);\n    this.webVaultUrl = this.formatUrl(urls.webVault);\n    this.apiUrl = this.formatUrl(urls.api);\n    this.identityUrl = this.formatUrl(urls.identity);\n    this.iconsUrl = this.formatUrl(urls.icons);\n    this.notificationsUrl = this.formatUrl(urls.notifications);\n    this.eventsUrl = this.formatUrl(urls.events);\n    this.keyConnectorUrl = this.formatUrl(urls.keyConnector);\n\n    // scimUrl cannot be cleared\n    this.scimUrl = this.formatUrl(urls.scim) ?? this.scimUrl;\n    this.urlsSubject.next();\n  }\n\n  private formatUrl(url: string): string {\n    if (url == null || url === \"\") {\n      return null;\n    }\n\n    url = url.replace(/\\/+$/g, \"\");\n    if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n      url = \"https://\" + url;\n    }\n\n    return url.trim();\n  }\n\n  isCloud(): boolean {\n    return [\n      \"https://api.bitwarden.com\",\n      \"https://vault.bitwarden.com/api\",\n      \"https://api.bitwarden.eu\",\n      \"https://vault.bitwarden.eu/api\",\n    ].includes(this.getApiUrl());\n  }\n}\n","import { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { EnvironmentService } from \"@bitwarden/common/platform/services/environment.service\";\n\nimport { GroupPolicyEnvironment } from \"../../admin-console/types/group-policy-environment\";\nimport { devFlagEnabled, devFlagValue } from \"../flags\";\n\nexport class BrowserEnvironmentService extends EnvironmentService {\n  constructor(stateService: StateService, private logService: LogService) {\n    super(stateService);\n  }\n\n  async hasManagedEnvironment(): Promise<boolean> {\n    try {\n      return (await this.getManagedEnvironment()) != null;\n    } catch (e) {\n      this.logService.error(e);\n      return false;\n    }\n  }\n\n  async settingsHaveChanged() {\n    if (!(await this.hasManagedEnvironment())) {\n      return false;\n    }\n\n    const env = await this.getManagedEnvironment();\n\n    return (\n      env.base != this.baseUrl ||\n      env.webVault != this.webVaultUrl ||\n      env.api != this.webVaultUrl ||\n      env.identity != this.identityUrl ||\n      env.icons != this.iconsUrl ||\n      env.notifications != this.notificationsUrl ||\n      env.events != this.eventsUrl\n    );\n  }\n\n  getManagedEnvironment(): Promise<GroupPolicyEnvironment> {\n    return devFlagEnabled(\"managedEnvironment\")\n      ? new Promise((resolve) => resolve(devFlagValue(\"managedEnvironment\")))\n      : new Promise((resolve, reject) => {\n          if (chrome.storage.managed == null) {\n            return resolve(null);\n          }\n\n          chrome.storage.managed.get(\"environment\", (result) => {\n            if (chrome.runtime.lastError) {\n              return reject(chrome.runtime.lastError);\n            }\n\n            resolve(result.environment);\n          });\n        });\n  }\n\n  async setUrlsToManagedEnvironment() {\n    const env = await this.getManagedEnvironment();\n    await this.setUrls({\n      base: env.base,\n      webVault: env.webVault,\n      api: env.api,\n      identity: env.identity,\n      icons: env.icons,\n      notifications: env.notifications,\n      events: env.events,\n    });\n  }\n}\n","import { BrowserEnvironmentService } from \"../../services/browser-environment.service\";\n\nimport { CachedServices, factory, FactoryOptions } from \"./factory-options\";\nimport { logServiceFactory, LogServiceInitOptions } from \"./log-service.factory\";\nimport {\n  stateServiceFactory as stateServiceFactory,\n  StateServiceInitOptions,\n} from \"./state-service.factory\";\n\ntype EnvironmentServiceFactoryOptions = FactoryOptions;\n\nexport type EnvironmentServiceInitOptions = EnvironmentServiceFactoryOptions &\n  StateServiceInitOptions &\n  LogServiceInitOptions;\n\nexport function environmentServiceFactory(\n  cache: { environmentService?: BrowserEnvironmentService } & CachedServices,\n  opts: EnvironmentServiceInitOptions\n): Promise<BrowserEnvironmentService> {\n  return factory(\n    cache,\n    \"environmentService\",\n    opts,\n    async () =>\n      new BrowserEnvironmentService(\n        await stateServiceFactory(cache, opts),\n        await logServiceFactory(cache, opts)\n      )\n  );\n}\n","import { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport BrowserPlatformUtilsService from \"../../services/browser-platform-utils.service\";\n\nimport { CachedServices, factory, FactoryOptions } from \"./factory-options\";\nimport { MessagingServiceInitOptions, messagingServiceFactory } from \"./messaging-service.factory\";\n\ntype PlatformUtilsServiceFactoryOptions = FactoryOptions & {\n  platformUtilsServiceOptions: {\n    clipboardWriteCallback: (clipboardValue: string, clearMs: number) => Promise<void>;\n    biometricCallback: () => Promise<boolean>;\n    win: Window & typeof globalThis;\n  };\n};\n\nexport type PlatformUtilsServiceInitOptions = PlatformUtilsServiceFactoryOptions &\n  MessagingServiceInitOptions;\n\nexport function platformUtilsServiceFactory(\n  cache: { platformUtilsService?: PlatformUtilsService } & CachedServices,\n  opts: PlatformUtilsServiceInitOptions\n): Promise<PlatformUtilsService> {\n  return factory(\n    cache,\n    \"platformUtilsService\",\n    opts,\n    async () =>\n      new BrowserPlatformUtilsService(\n        await messagingServiceFactory(cache, opts),\n        opts.platformUtilsServiceOptions.clipboardWriteCallback,\n        opts.platformUtilsServiceOptions.biometricCallback,\n        opts.platformUtilsServiceOptions.win\n      )\n  );\n}\n","import { ApiService as AbstractApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ApiService } from \"@bitwarden/common/services/api.service\";\n\nimport {\n  tokenServiceFactory,\n  TokenServiceInitOptions,\n} from \"../../../auth/background/service-factories/token-service.factory\";\nimport {\n  CachedServices,\n  factory,\n  FactoryOptions,\n} from \"../../background/service-factories/factory-options\";\n\nimport { AppIdServiceInitOptions, appIdServiceFactory } from \"./app-id-service.factory\";\nimport {\n  environmentServiceFactory,\n  EnvironmentServiceInitOptions,\n} from \"./environment-service.factory\";\nimport {\n  PlatformUtilsServiceInitOptions,\n  platformUtilsServiceFactory,\n} from \"./platform-utils-service.factory\";\n\ntype ApiServiceFactoryOptions = FactoryOptions & {\n  apiServiceOptions: {\n    logoutCallback: (expired: boolean) => Promise<void>;\n    customUserAgent?: string;\n  };\n};\n\nexport type ApiServiceInitOptions = ApiServiceFactoryOptions &\n  TokenServiceInitOptions &\n  PlatformUtilsServiceInitOptions &\n  EnvironmentServiceInitOptions &\n  AppIdServiceInitOptions;\n\nexport function apiServiceFactory(\n  cache: { apiService?: AbstractApiService } & CachedServices,\n  opts: ApiServiceInitOptions\n): Promise<AbstractApiService> {\n  return factory(\n    cache,\n    \"apiService\",\n    opts,\n    async () =>\n      new ApiService(\n        await tokenServiceFactory(cache, opts),\n        await platformUtilsServiceFactory(cache, opts),\n        await environmentServiceFactory(cache, opts),\n        await appIdServiceFactory(cache, opts),\n        opts.apiServiceOptions.logoutCallback,\n        opts.apiServiceOptions.customUserAgent\n      )\n  );\n}\n","import { CryptoService } from \"../../../platform/abstractions/crypto.service\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { EncryptedOrganizationKeyData } from \"../data/encrypted-organization-key.data\";\n\nexport abstract class BaseEncryptedOrganizationKey {\n  decrypt: (cryptoService: CryptoService) => Promise<SymmetricCryptoKey>;\n\n  static fromData(data: EncryptedOrganizationKeyData) {\n    switch (data.type) {\n      case \"organization\":\n        return new EncryptedOrganizationKey(data.key);\n\n      case \"provider\":\n        return new ProviderEncryptedOrganizationKey(data.key, data.providerId);\n\n      default:\n        return null;\n    }\n  }\n}\n\nexport class EncryptedOrganizationKey implements BaseEncryptedOrganizationKey {\n  constructor(private key: string) {}\n\n  async decrypt(cryptoService: CryptoService) {\n    const decValue = await cryptoService.rsaDecrypt(this.key);\n    return new SymmetricCryptoKey(decValue);\n  }\n\n  toData(): EncryptedOrganizationKeyData {\n    return {\n      type: \"organization\",\n      key: this.key,\n    };\n  }\n}\n\nexport class ProviderEncryptedOrganizationKey implements BaseEncryptedOrganizationKey {\n  constructor(private key: string, private providerId: string) {}\n\n  async decrypt(cryptoService: CryptoService) {\n    const providerKey = await cryptoService.getProviderKey(this.providerId);\n    const decValue = await cryptoService.decryptToBytes(new EncString(this.key), providerKey);\n    return new SymmetricCryptoKey(decValue);\n  }\n\n  toData(): EncryptedOrganizationKeyData {\n    return {\n      type: \"provider\",\n      key: this.key,\n      providerId: this.providerId,\n    };\n  }\n}\n","import * as bigInt from \"big-integer\";\n\nimport { EncryptedOrganizationKeyData } from \"../../admin-console/models/data/encrypted-organization-key.data\";\nimport { BaseEncryptedOrganizationKey } from \"../../admin-console/models/domain/encrypted-organization-key\";\nimport { ProfileOrganizationResponse } from \"../../admin-console/models/response/profile-organization.response\";\nimport { ProfileProviderOrganizationResponse } from \"../../admin-console/models/response/profile-provider-organization.response\";\nimport { ProfileProviderResponse } from \"../../admin-console/models/response/profile-provider.response\";\nimport { KdfConfig } from \"../../auth/models/domain/kdf-config\";\nimport {\n  KeySuffixOptions,\n  HashPurpose,\n  KdfType,\n  DEFAULT_ARGON2_ITERATIONS,\n  DEFAULT_ARGON2_MEMORY,\n  DEFAULT_ARGON2_PARALLELISM,\n  EncryptionType,\n} from \"../../enums\";\nimport { Utils } from \"../../platform/misc/utils\";\nimport { CryptoFunctionService } from \"../abstractions/crypto-function.service\";\nimport { CryptoService as CryptoServiceAbstraction } from \"../abstractions/crypto.service\";\nimport { EncryptService } from \"../abstractions/encrypt.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { PlatformUtilsService } from \"../abstractions/platform-utils.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { sequentialize } from \"../misc/sequentialize\";\nimport { EFFLongWordList } from \"../misc/wordlist\";\nimport { EncArrayBuffer } from \"../models/domain/enc-array-buffer\";\nimport { EncString } from \"../models/domain/enc-string\";\nimport {\n  CipherKey,\n  MasterKey,\n  OrgKey,\n  PinKey,\n  ProviderKey,\n  SymmetricCryptoKey,\n  UserKey,\n} from \"../models/domain/symmetric-crypto-key\";\n\nexport class CryptoService implements CryptoServiceAbstraction {\n  constructor(\n    protected cryptoFunctionService: CryptoFunctionService,\n    protected encryptService: EncryptService,\n    protected platformUtilService: PlatformUtilsService,\n    protected logService: LogService,\n    protected stateService: StateService\n  ) {}\n\n  async setUserKey(key: UserKey, userId?: string): Promise<void> {\n    if (key != null) {\n      await this.stateService.setEverHadUserKey(true, { userId: userId });\n    }\n    await this.stateService.setUserKey(key, { userId: userId });\n    await this.storeAdditionalKeys(key, userId);\n  }\n\n  async getEverHadUserKey(userId?: string): Promise<boolean> {\n    return await this.stateService.getEverHadUserKey({ userId: userId });\n  }\n\n  async refreshAdditionalKeys(): Promise<void> {\n    const key = await this.getUserKey();\n    await this.setUserKey(key);\n  }\n\n  async getUserKey(userId?: string): Promise<UserKey> {\n    let userKey = await this.stateService.getUserKey({ userId: userId });\n    if (userKey) {\n      return userKey;\n    }\n\n    // If the user has set their vault timeout to 'Never', we can load the user key from storage\n    if (await this.hasUserKeyStored(KeySuffixOptions.Auto, userId)) {\n      userKey = await this.getKeyFromStorage(KeySuffixOptions.Auto, userId);\n      if (userKey) {\n        await this.setUserKey(userKey, userId);\n        return userKey;\n      }\n    }\n  }\n\n  async isLegacyUser(masterKey?: MasterKey, userId?: string): Promise<boolean> {\n    return await this.validateUserKey(\n      (masterKey ?? (await this.getMasterKey(userId))) as unknown as UserKey\n    );\n  }\n\n  async getUserKeyWithLegacySupport(userId?: string): Promise<UserKey> {\n    const userKey = await this.getUserKey(userId);\n    if (userKey) {\n      return userKey;\n    }\n\n    // Legacy support: encryption used to be done with the master key (derived from master password).\n    // Users who have not migrated will have a null user key and must use the master key instead.\n    return (await this.getMasterKey(userId)) as unknown as UserKey;\n  }\n\n  async getUserKeyFromStorage(keySuffix: KeySuffixOptions, userId?: string): Promise<UserKey> {\n    const userKey = await this.getKeyFromStorage(keySuffix, userId);\n    if (userKey) {\n      if (!(await this.validateUserKey(userKey))) {\n        this.logService.warning(\"Invalid key, throwing away stored keys\");\n        await this.clearAllStoredUserKeys(userId);\n      }\n      return userKey;\n    }\n  }\n\n  async hasUserKey(): Promise<boolean> {\n    return (\n      (await this.hasUserKeyInMemory()) || (await this.hasUserKeyStored(KeySuffixOptions.Auto))\n    );\n  }\n\n  async hasUserKeyInMemory(userId?: string): Promise<boolean> {\n    return (await this.stateService.getUserKey({ userId: userId })) != null;\n  }\n\n  async hasUserKeyStored(keySuffix: KeySuffixOptions, userId?: string): Promise<boolean> {\n    return (await this.getKeyFromStorage(keySuffix, userId)) != null;\n  }\n\n  async makeUserKey(masterKey: MasterKey): Promise<[UserKey, EncString]> {\n    masterKey ||= await this.getMasterKey();\n    if (masterKey == null) {\n      throw new Error(\"No Master Key found.\");\n    }\n\n    const newUserKey = await this.cryptoFunctionService.aesGenerateKey(512);\n    return this.buildProtectedSymmetricKey(masterKey, newUserKey);\n  }\n\n  async clearUserKey(clearStoredKeys = true, userId?: string): Promise<void> {\n    await this.stateService.setUserKey(null, { userId: userId });\n    if (clearStoredKeys) {\n      await this.clearAllStoredUserKeys(userId);\n    }\n  }\n\n  async clearStoredUserKey(keySuffix: KeySuffixOptions, userId?: string): Promise<void> {\n    if (keySuffix === KeySuffixOptions.Auto) {\n      this.stateService.setUserKeyAutoUnlock(null, { userId: userId });\n      this.clearDeprecatedKeys(KeySuffixOptions.Auto, userId);\n    }\n    if (keySuffix === KeySuffixOptions.Pin) {\n      this.stateService.setPinKeyEncryptedUserKeyEphemeral(null, { userId: userId });\n      this.clearDeprecatedKeys(KeySuffixOptions.Pin, userId);\n    }\n  }\n\n  async setMasterKeyEncryptedUserKey(userKeyMasterKey: string, userId?: string): Promise<void> {\n    await this.stateService.setMasterKeyEncryptedUserKey(userKeyMasterKey, { userId: userId });\n  }\n\n  async setMasterKey(key: MasterKey, userId?: string): Promise<void> {\n    await this.stateService.setMasterKey(key, { userId: userId });\n  }\n\n  async getMasterKey(userId?: string): Promise<MasterKey> {\n    let masterKey = await this.stateService.getMasterKey({ userId: userId });\n    if (!masterKey) {\n      masterKey = (await this.stateService.getCryptoMasterKey({ userId: userId })) as MasterKey;\n      await this.setMasterKey(masterKey, userId);\n    }\n    return masterKey;\n  }\n\n  async getOrDeriveMasterKey(password: string, userId?: string) {\n    let masterKey = await this.getMasterKey(userId);\n    return (masterKey ||= await this.makeMasterKey(\n      password,\n      await this.stateService.getEmail({ userId: userId }),\n      await this.stateService.getKdfType({ userId: userId }),\n      await this.stateService.getKdfConfig({ userId: userId })\n    ));\n  }\n\n  async makeMasterKey(\n    password: string,\n    email: string,\n    kdf: KdfType,\n    KdfConfig: KdfConfig\n  ): Promise<MasterKey> {\n    return (await this.makeKey(password, email, kdf, KdfConfig)) as MasterKey;\n  }\n\n  async clearMasterKey(userId?: string): Promise<void> {\n    await this.stateService.setMasterKey(null, { userId: userId });\n  }\n\n  async encryptUserKeyWithMasterKey(\n    masterKey: MasterKey,\n    userKey?: UserKey\n  ): Promise<[UserKey, EncString]> {\n    userKey ||= await this.getUserKey();\n    return await this.buildProtectedSymmetricKey(masterKey, userKey.key);\n  }\n\n  async decryptUserKeyWithMasterKey(\n    masterKey: MasterKey,\n    userKey?: EncString,\n    userId?: string\n  ): Promise<UserKey> {\n    masterKey ||= await this.getMasterKey(userId);\n    if (masterKey == null) {\n      throw new Error(\"No master key found.\");\n    }\n\n    if (!userKey) {\n      let masterKeyEncryptedUserKey = await this.stateService.getMasterKeyEncryptedUserKey({\n        userId: userId,\n      });\n\n      // Try one more way to get the user key if it still wasn't found.\n      if (masterKeyEncryptedUserKey == null) {\n        masterKeyEncryptedUserKey = await this.stateService.getEncryptedCryptoSymmetricKey({\n          userId: userId,\n        });\n      }\n\n      if (masterKeyEncryptedUserKey == null) {\n        throw new Error(\"No encrypted user key found.\");\n      }\n      userKey = new EncString(masterKeyEncryptedUserKey);\n    }\n\n    let decUserKey: Uint8Array;\n    if (userKey.encryptionType === EncryptionType.AesCbc256_B64) {\n      decUserKey = await this.encryptService.decryptToBytes(userKey, masterKey);\n    } else if (userKey.encryptionType === EncryptionType.AesCbc256_HmacSha256_B64) {\n      const newKey = await this.stretchKey(masterKey);\n      decUserKey = await this.encryptService.decryptToBytes(userKey, newKey);\n    } else {\n      throw new Error(\"Unsupported encryption type.\");\n    }\n    if (decUserKey == null) {\n      return null;\n    }\n\n    return new SymmetricCryptoKey(decUserKey) as UserKey;\n  }\n\n  async hashMasterKey(\n    password: string,\n    key: MasterKey,\n    hashPurpose?: HashPurpose\n  ): Promise<string> {\n    key ||= await this.getMasterKey();\n\n    if (password == null || key == null) {\n      throw new Error(\"Invalid parameters.\");\n    }\n\n    const iterations = hashPurpose === HashPurpose.LocalAuthorization ? 2 : 1;\n    const hash = await this.cryptoFunctionService.pbkdf2(key.key, password, \"sha256\", iterations);\n    return Utils.fromBufferToB64(hash);\n  }\n\n  async setMasterKeyHash(keyHash: string): Promise<void> {\n    await this.stateService.setKeyHash(keyHash);\n  }\n\n  async getMasterKeyHash(): Promise<string> {\n    return await this.stateService.getKeyHash();\n  }\n\n  async clearMasterKeyHash(userId?: string): Promise<void> {\n    return await this.stateService.setKeyHash(null, { userId: userId });\n  }\n\n  async compareAndUpdateKeyHash(masterPassword: string, masterKey: MasterKey): Promise<boolean> {\n    const storedPasswordHash = await this.getMasterKeyHash();\n    if (masterPassword != null && storedPasswordHash != null) {\n      const localKeyHash = await this.hashMasterKey(\n        masterPassword,\n        masterKey,\n        HashPurpose.LocalAuthorization\n      );\n      if (localKeyHash != null && storedPasswordHash === localKeyHash) {\n        return true;\n      }\n\n      // TODO: remove serverKeyHash check in 1-2 releases after everyone's keyHash has been updated\n      const serverKeyHash = await this.hashMasterKey(\n        masterPassword,\n        masterKey,\n        HashPurpose.ServerAuthorization\n      );\n      if (serverKeyHash != null && storedPasswordHash === serverKeyHash) {\n        await this.setMasterKeyHash(localKeyHash);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  async setOrgKeys(\n    orgs: ProfileOrganizationResponse[] = [],\n    providerOrgs: ProfileProviderOrganizationResponse[] = []\n  ): Promise<void> {\n    const encOrgKeyData: { [orgId: string]: EncryptedOrganizationKeyData } = {};\n\n    orgs.forEach((org) => {\n      encOrgKeyData[org.id] = {\n        type: \"organization\",\n        key: org.key,\n      };\n    });\n\n    providerOrgs.forEach((org) => {\n      encOrgKeyData[org.id] = {\n        type: \"provider\",\n        providerId: org.providerId,\n        key: org.key,\n      };\n    });\n\n    await this.stateService.setDecryptedOrganizationKeys(null);\n    return await this.stateService.setEncryptedOrganizationKeys(encOrgKeyData);\n  }\n\n  async getOrgKey(orgId: string): Promise<OrgKey> {\n    if (orgId == null) {\n      return null;\n    }\n\n    const orgKeys = await this.getOrgKeys();\n    if (orgKeys == null || !orgKeys.has(orgId)) {\n      return null;\n    }\n\n    return orgKeys.get(orgId);\n  }\n\n  @sequentialize(() => \"getOrgKeys\")\n  async getOrgKeys(): Promise<Map<string, OrgKey>> {\n    const result: Map<string, OrgKey> = new Map<string, OrgKey>();\n    const decryptedOrganizationKeys = await this.stateService.getDecryptedOrganizationKeys();\n    if (decryptedOrganizationKeys != null && decryptedOrganizationKeys.size > 0) {\n      return decryptedOrganizationKeys as Map<string, OrgKey>;\n    }\n\n    const encOrgKeyData = await this.stateService.getEncryptedOrganizationKeys();\n    if (encOrgKeyData == null) {\n      return result;\n    }\n\n    let setKey = false;\n\n    for (const orgId of Object.keys(encOrgKeyData)) {\n      if (result.has(orgId)) {\n        continue;\n      }\n\n      const encOrgKey = BaseEncryptedOrganizationKey.fromData(encOrgKeyData[orgId]);\n      const decOrgKey = (await encOrgKey.decrypt(this)) as OrgKey;\n      result.set(orgId, decOrgKey);\n\n      setKey = true;\n    }\n\n    if (setKey) {\n      await this.stateService.setDecryptedOrganizationKeys(result);\n    }\n\n    return result;\n  }\n\n  async makeDataEncKey<T extends OrgKey | UserKey>(\n    key: T\n  ): Promise<[SymmetricCryptoKey, EncString]> {\n    if (key == null) {\n      throw new Error(\"No key provided\");\n    }\n\n    const newSymKey = await this.cryptoFunctionService.aesGenerateKey(512);\n    return this.buildProtectedSymmetricKey(key, newSymKey);\n  }\n\n  async clearOrgKeys(memoryOnly?: boolean, userId?: string): Promise<void> {\n    await this.stateService.setDecryptedOrganizationKeys(null, { userId: userId });\n    if (!memoryOnly) {\n      await this.stateService.setEncryptedOrganizationKeys(null, { userId: userId });\n    }\n  }\n\n  async setProviderKeys(providers: ProfileProviderResponse[]): Promise<void> {\n    const providerKeys: any = {};\n    providers.forEach((provider) => {\n      providerKeys[provider.id] = provider.key;\n    });\n\n    await this.stateService.setDecryptedProviderKeys(null);\n    return await this.stateService.setEncryptedProviderKeys(providerKeys);\n  }\n\n  async getProviderKey(providerId: string): Promise<ProviderKey> {\n    if (providerId == null) {\n      return null;\n    }\n\n    const providerKeys = await this.getProviderKeys();\n    if (providerKeys == null || !providerKeys.has(providerId)) {\n      return null;\n    }\n\n    return providerKeys.get(providerId);\n  }\n\n  @sequentialize(() => \"getProviderKeys\")\n  async getProviderKeys(): Promise<Map<string, ProviderKey>> {\n    const providerKeys: Map<string, ProviderKey> = new Map<string, ProviderKey>();\n    const decryptedProviderKeys = await this.stateService.getDecryptedProviderKeys();\n    if (decryptedProviderKeys != null && decryptedProviderKeys.size > 0) {\n      return decryptedProviderKeys as Map<string, ProviderKey>;\n    }\n\n    const encProviderKeys = await this.stateService.getEncryptedProviderKeys();\n    if (encProviderKeys == null) {\n      return null;\n    }\n\n    let setKey = false;\n\n    for (const orgId in encProviderKeys) {\n      // eslint-disable-next-line\n      if (!encProviderKeys.hasOwnProperty(orgId)) {\n        continue;\n      }\n\n      const decValue = await this.rsaDecrypt(encProviderKeys[orgId]);\n      providerKeys.set(orgId, new SymmetricCryptoKey(decValue) as ProviderKey);\n      setKey = true;\n    }\n\n    if (setKey) {\n      await this.stateService.setDecryptedProviderKeys(providerKeys);\n    }\n\n    return providerKeys;\n  }\n\n  async clearProviderKeys(memoryOnly?: boolean, userId?: string): Promise<void> {\n    await this.stateService.setDecryptedProviderKeys(null, { userId: userId });\n    if (!memoryOnly) {\n      await this.stateService.setEncryptedProviderKeys(null, { userId: userId });\n    }\n  }\n\n  async getPublicKey(): Promise<Uint8Array> {\n    const inMemoryPublicKey = await this.stateService.getPublicKey();\n    if (inMemoryPublicKey != null) {\n      return inMemoryPublicKey;\n    }\n\n    const privateKey = await this.getPrivateKey();\n    if (privateKey == null) {\n      return null;\n    }\n\n    const publicKey = await this.cryptoFunctionService.rsaExtractPublicKey(privateKey);\n    await this.stateService.setPublicKey(publicKey);\n    return publicKey;\n  }\n\n  async makeOrgKey<T extends OrgKey | ProviderKey>(): Promise<[EncString, T]> {\n    const shareKey = await this.cryptoFunctionService.aesGenerateKey(512);\n    const publicKey = await this.getPublicKey();\n    const encShareKey = await this.rsaEncrypt(shareKey, publicKey);\n    return [encShareKey, new SymmetricCryptoKey(shareKey) as T];\n  }\n\n  async setPrivateKey(encPrivateKey: string): Promise<void> {\n    if (encPrivateKey == null) {\n      return;\n    }\n\n    await this.stateService.setDecryptedPrivateKey(null);\n    await this.stateService.setEncryptedPrivateKey(encPrivateKey);\n  }\n\n  async getPrivateKey(): Promise<Uint8Array> {\n    const decryptedPrivateKey = await this.stateService.getDecryptedPrivateKey();\n    if (decryptedPrivateKey != null) {\n      return decryptedPrivateKey;\n    }\n\n    const encPrivateKey = await this.stateService.getEncryptedPrivateKey();\n    if (encPrivateKey == null) {\n      return null;\n    }\n\n    const privateKey = await this.encryptService.decryptToBytes(\n      new EncString(encPrivateKey),\n      await this.getUserKeyWithLegacySupport()\n    );\n    await this.stateService.setDecryptedPrivateKey(privateKey);\n    return privateKey;\n  }\n\n  async getFingerprint(fingerprintMaterial: string, publicKey?: Uint8Array): Promise<string[]> {\n    if (publicKey == null) {\n      publicKey = await this.getPublicKey();\n    }\n    if (publicKey === null) {\n      throw new Error(\"No public key available.\");\n    }\n    const keyFingerprint = await this.cryptoFunctionService.hash(publicKey, \"sha256\");\n    const userFingerprint = await this.cryptoFunctionService.hkdfExpand(\n      keyFingerprint,\n      fingerprintMaterial,\n      32,\n      \"sha256\"\n    );\n    return this.hashPhrase(userFingerprint);\n  }\n\n  async makeKeyPair(key?: SymmetricCryptoKey): Promise<[string, EncString]> {\n    // Default to user key\n    key ||= await this.getUserKeyWithLegacySupport();\n\n    const keyPair = await this.cryptoFunctionService.rsaGenerateKeyPair(2048);\n    const publicB64 = Utils.fromBufferToB64(keyPair[0]);\n    const privateEnc = await this.encryptService.encrypt(keyPair[1], key);\n    return [publicB64, privateEnc];\n  }\n\n  async clearKeyPair(memoryOnly?: boolean, userId?: string): Promise<void[]> {\n    const keysToClear: Promise<void>[] = [\n      this.stateService.setDecryptedPrivateKey(null, { userId: userId }),\n      this.stateService.setPublicKey(null, { userId: userId }),\n    ];\n    if (!memoryOnly) {\n      keysToClear.push(this.stateService.setEncryptedPrivateKey(null, { userId: userId }));\n    }\n    return Promise.all(keysToClear);\n  }\n\n  async makePinKey(pin: string, salt: string, kdf: KdfType, kdfConfig: KdfConfig): Promise<PinKey> {\n    const pinKey = await this.makeKey(pin, salt, kdf, kdfConfig);\n    return (await this.stretchKey(pinKey)) as PinKey;\n  }\n\n  async clearPinKeys(userId?: string): Promise<void> {\n    await this.stateService.setPinKeyEncryptedUserKey(null, { userId: userId });\n    await this.stateService.setPinKeyEncryptedUserKeyEphemeral(null, { userId: userId });\n    await this.stateService.setProtectedPin(null, { userId: userId });\n    await this.clearDeprecatedKeys(KeySuffixOptions.Pin, userId);\n  }\n\n  async decryptUserKeyWithPin(\n    pin: string,\n    salt: string,\n    kdf: KdfType,\n    kdfConfig: KdfConfig,\n    pinProtectedUserKey?: EncString\n  ): Promise<UserKey> {\n    pinProtectedUserKey ||= await this.stateService.getPinKeyEncryptedUserKey();\n    pinProtectedUserKey ||= await this.stateService.getPinKeyEncryptedUserKeyEphemeral();\n    if (!pinProtectedUserKey) {\n      throw new Error(\"No PIN protected key found.\");\n    }\n    const pinKey = await this.makePinKey(pin, salt, kdf, kdfConfig);\n    const userKey = await this.encryptService.decryptToBytes(pinProtectedUserKey, pinKey);\n    return new SymmetricCryptoKey(userKey) as UserKey;\n  }\n\n  // only for migration purposes\n  async decryptMasterKeyWithPin(\n    pin: string,\n    salt: string,\n    kdf: KdfType,\n    kdfConfig: KdfConfig,\n    pinProtectedMasterKey?: EncString\n  ): Promise<MasterKey> {\n    if (!pinProtectedMasterKey) {\n      const pinProtectedMasterKeyString = await this.stateService.getEncryptedPinProtected();\n      if (pinProtectedMasterKeyString == null) {\n        throw new Error(\"No PIN protected key found.\");\n      }\n      pinProtectedMasterKey = new EncString(pinProtectedMasterKeyString);\n    }\n    const pinKey = await this.makePinKey(pin, salt, kdf, kdfConfig);\n    const masterKey = await this.encryptService.decryptToBytes(pinProtectedMasterKey, pinKey);\n    return new SymmetricCryptoKey(masterKey) as MasterKey;\n  }\n\n  async makeSendKey(keyMaterial: Uint8Array): Promise<SymmetricCryptoKey> {\n    const sendKey = await this.cryptoFunctionService.hkdf(\n      keyMaterial,\n      \"bitwarden-send\",\n      \"send\",\n      64,\n      \"sha256\"\n    );\n    return new SymmetricCryptoKey(sendKey);\n  }\n\n  async makeCipherKey(): Promise<CipherKey> {\n    const randomBytes = await this.cryptoFunctionService.aesGenerateKey(512);\n    return new SymmetricCryptoKey(randomBytes) as CipherKey;\n  }\n\n  async clearKeys(userId?: string): Promise<any> {\n    await this.clearUserKey(true, userId);\n    await this.clearMasterKeyHash(userId);\n    await this.clearOrgKeys(false, userId);\n    await this.clearProviderKeys(false, userId);\n    await this.clearKeyPair(false, userId);\n    await this.clearPinKeys(userId);\n  }\n\n  async rsaEncrypt(data: Uint8Array, publicKey?: Uint8Array): Promise<EncString> {\n    if (publicKey == null) {\n      publicKey = await this.getPublicKey();\n    }\n    if (publicKey == null) {\n      throw new Error(\"Public key unavailable.\");\n    }\n\n    const encBytes = await this.cryptoFunctionService.rsaEncrypt(data, publicKey, \"sha1\");\n    return new EncString(EncryptionType.Rsa2048_OaepSha1_B64, Utils.fromBufferToB64(encBytes));\n  }\n\n  async rsaDecrypt(encValue: string, privateKeyValue?: Uint8Array): Promise<Uint8Array> {\n    const headerPieces = encValue.split(\".\");\n    let encType: EncryptionType = null;\n    let encPieces: string[];\n\n    if (headerPieces.length === 1) {\n      encType = EncryptionType.Rsa2048_OaepSha256_B64;\n      encPieces = [headerPieces[0]];\n    } else if (headerPieces.length === 2) {\n      try {\n        encType = parseInt(headerPieces[0], null);\n        encPieces = headerPieces[1].split(\"|\");\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    switch (encType) {\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n      case EncryptionType.Rsa2048_OaepSha256_HmacSha256_B64: // HmacSha256 types are deprecated\n      case EncryptionType.Rsa2048_OaepSha1_HmacSha256_B64:\n        break;\n      default:\n        throw new Error(\"encType unavailable.\");\n    }\n\n    if (encPieces == null || encPieces.length <= 0) {\n      throw new Error(\"encPieces unavailable.\");\n    }\n\n    const data = Utils.fromB64ToArray(encPieces[0]);\n    const privateKey = privateKeyValue ?? (await this.getPrivateKey());\n    if (privateKey == null) {\n      throw new Error(\"No private key.\");\n    }\n\n    let alg: \"sha1\" | \"sha256\" = \"sha1\";\n    switch (encType) {\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha256_HmacSha256_B64:\n        alg = \"sha256\";\n        break;\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n      case EncryptionType.Rsa2048_OaepSha1_HmacSha256_B64:\n        break;\n      default:\n        throw new Error(\"encType unavailable.\");\n    }\n\n    return this.cryptoFunctionService.rsaDecrypt(data, privateKey, alg);\n  }\n\n  // EFForg/OpenWireless\n  // ref https://github.com/EFForg/OpenWireless/blob/master/app/js/diceware.js\n  async randomNumber(min: number, max: number): Promise<number> {\n    let rval = 0;\n    const range = max - min + 1;\n    const bitsNeeded = Math.ceil(Math.log2(range));\n    if (bitsNeeded > 53) {\n      throw new Error(\"We cannot generate numbers larger than 53 bits.\");\n    }\n\n    const bytesNeeded = Math.ceil(bitsNeeded / 8);\n    const mask = Math.pow(2, bitsNeeded) - 1;\n    // 7776 -> (2^13 = 8192) -1 == 8191 or 0x00001111 11111111\n\n    // Fill a byte array with N random numbers\n    const byteArray = new Uint8Array(await this.cryptoFunctionService.randomBytes(bytesNeeded));\n\n    let p = (bytesNeeded - 1) * 8;\n    for (let i = 0; i < bytesNeeded; i++) {\n      rval += byteArray[i] * Math.pow(2, p);\n      p -= 8;\n    }\n\n    // Use & to apply the mask and reduce the number of recursive lookups\n    rval = rval & mask;\n\n    if (rval >= range) {\n      // Integer out of acceptable range\n      return this.randomNumber(min, max);\n    }\n\n    // Return an integer that falls within the range\n    return min + rval;\n  }\n\n  // ---HELPERS---\n  protected async validateUserKey(key: UserKey): Promise<boolean> {\n    if (!key) {\n      return false;\n    }\n\n    try {\n      const encPrivateKey = await this.stateService.getEncryptedPrivateKey();\n      if (encPrivateKey == null) {\n        return false;\n      }\n\n      const privateKey = await this.encryptService.decryptToBytes(\n        new EncString(encPrivateKey),\n        key\n      );\n      await this.cryptoFunctionService.rsaExtractPublicKey(privateKey);\n    } catch (e) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Initialize all necessary crypto keys needed for a new account.\n   * Warning! This completely replaces any existing keys!\n   */\n  async initAccount(): Promise<{\n    userKey: UserKey;\n    publicKey: string;\n    privateKey: EncString;\n  }> {\n    const rawKey = await this.cryptoFunctionService.aesGenerateKey(512);\n    const userKey = new SymmetricCryptoKey(rawKey) as UserKey;\n    const [publicKey, privateKey] = await this.makeKeyPair(userKey);\n    await this.setUserKey(userKey);\n    await this.stateService.setEncryptedPrivateKey(privateKey.encryptedString);\n\n    return {\n      userKey,\n      publicKey,\n      privateKey,\n    };\n  }\n\n  /**\n   * Generates any additional keys if needed. Additional keys are\n   * keys such as biometrics, auto, and pin keys.\n   * Useful to make sure other keys stay in sync when the user key\n   * has been rotated.\n   * @param key The user key\n   * @param userId The desired user\n   */\n  protected async storeAdditionalKeys(key: UserKey, userId?: string) {\n    const storeAuto = await this.shouldStoreKey(KeySuffixOptions.Auto, userId);\n    if (storeAuto) {\n      await this.stateService.setUserKeyAutoUnlock(key.keyB64, { userId: userId });\n    } else {\n      await this.stateService.setUserKeyAutoUnlock(null, { userId: userId });\n    }\n    await this.clearDeprecatedKeys(KeySuffixOptions.Auto, userId);\n\n    const storePin = await this.shouldStoreKey(KeySuffixOptions.Pin, userId);\n    if (storePin) {\n      await this.storePinKey(key, userId);\n      // We can't always clear deprecated keys because the pin is only\n      // migrated once used to unlock\n      await this.clearDeprecatedKeys(KeySuffixOptions.Pin, userId);\n    } else {\n      await this.stateService.setPinKeyEncryptedUserKey(null, { userId: userId });\n      await this.stateService.setPinKeyEncryptedUserKeyEphemeral(null, { userId: userId });\n    }\n  }\n\n  /**\n   * Stores the pin key if needed. If MP on Reset is enabled, stores the\n   * ephemeral version.\n   * @param key The user key\n   */\n  protected async storePinKey(key: UserKey, userId?: string) {\n    const pin = await this.encryptService.decryptToUtf8(\n      new EncString(await this.stateService.getProtectedPin({ userId: userId })),\n      key\n    );\n    const pinKey = await this.makePinKey(\n      pin,\n      await this.stateService.getEmail({ userId: userId }),\n      await this.stateService.getKdfType({ userId: userId }),\n      await this.stateService.getKdfConfig({ userId: userId })\n    );\n    const encPin = await this.encryptService.encrypt(key.key, pinKey);\n\n    if ((await this.stateService.getPinKeyEncryptedUserKey({ userId: userId })) != null) {\n      await this.stateService.setPinKeyEncryptedUserKey(encPin, { userId: userId });\n    } else {\n      await this.stateService.setPinKeyEncryptedUserKeyEphemeral(encPin, { userId: userId });\n    }\n  }\n\n  protected async shouldStoreKey(keySuffix: KeySuffixOptions, userId?: string) {\n    let shouldStoreKey = false;\n    switch (keySuffix) {\n      case KeySuffixOptions.Auto: {\n        const vaultTimeout = await this.stateService.getVaultTimeout({ userId: userId });\n        shouldStoreKey = vaultTimeout == null;\n        break;\n      }\n      case KeySuffixOptions.Pin: {\n        const protectedPin = await this.stateService.getProtectedPin({ userId: userId });\n        shouldStoreKey = !!protectedPin;\n        break;\n      }\n    }\n    return shouldStoreKey;\n  }\n\n  protected async getKeyFromStorage(\n    keySuffix: KeySuffixOptions,\n    userId?: string\n  ): Promise<UserKey> {\n    if (keySuffix === KeySuffixOptions.Auto) {\n      const userKey = await this.stateService.getUserKeyAutoUnlock({ userId: userId });\n      if (userKey) {\n        return new SymmetricCryptoKey(Utils.fromB64ToArray(userKey)) as UserKey;\n      }\n    }\n    return null;\n  }\n\n  protected async clearAllStoredUserKeys(userId?: string): Promise<void> {\n    await this.stateService.setUserKeyAutoUnlock(null, { userId: userId });\n    await this.stateService.setPinKeyEncryptedUserKeyEphemeral(null, { userId: userId });\n  }\n\n  private async stretchKey(key: SymmetricCryptoKey): Promise<SymmetricCryptoKey> {\n    const newKey = new Uint8Array(64);\n    const encKey = await this.cryptoFunctionService.hkdfExpand(key.key, \"enc\", 32, \"sha256\");\n    const macKey = await this.cryptoFunctionService.hkdfExpand(key.key, \"mac\", 32, \"sha256\");\n    newKey.set(new Uint8Array(encKey));\n    newKey.set(new Uint8Array(macKey), 32);\n    return new SymmetricCryptoKey(newKey);\n  }\n\n  private async hashPhrase(hash: Uint8Array, minimumEntropy = 64) {\n    const entropyPerWord = Math.log(EFFLongWordList.length) / Math.log(2);\n    let numWords = Math.ceil(minimumEntropy / entropyPerWord);\n\n    const hashArr = Array.from(new Uint8Array(hash));\n    const entropyAvailable = hashArr.length * 4;\n    if (numWords * entropyPerWord > entropyAvailable) {\n      throw new Error(\"Output entropy of hash function is too small\");\n    }\n\n    const phrase: string[] = [];\n    let hashNumber = bigInt.fromArray(hashArr, 256);\n    while (numWords--) {\n      const remainder = hashNumber.mod(EFFLongWordList.length);\n      hashNumber = hashNumber.divide(EFFLongWordList.length);\n      phrase.push(EFFLongWordList[remainder as any]);\n    }\n    return phrase;\n  }\n\n  private async buildProtectedSymmetricKey<T extends SymmetricCryptoKey>(\n    encryptionKey: SymmetricCryptoKey,\n    newSymKey: Uint8Array\n  ): Promise<[T, EncString]> {\n    let protectedSymKey: EncString = null;\n    if (encryptionKey.key.byteLength === 32) {\n      const stretchedEncryptionKey = await this.stretchKey(encryptionKey);\n      protectedSymKey = await this.encryptService.encrypt(newSymKey, stretchedEncryptionKey);\n    } else if (encryptionKey.key.byteLength === 64) {\n      protectedSymKey = await this.encryptService.encrypt(newSymKey, encryptionKey);\n    } else {\n      throw new Error(\"Invalid key size.\");\n    }\n    return [new SymmetricCryptoKey(newSymKey) as T, protectedSymKey];\n  }\n\n  private async makeKey(\n    password: string,\n    salt: string,\n    kdf: KdfType,\n    kdfConfig: KdfConfig\n  ): Promise<SymmetricCryptoKey> {\n    let key: Uint8Array = null;\n    if (kdf == null || kdf === KdfType.PBKDF2_SHA256) {\n      if (kdfConfig.iterations == null) {\n        kdfConfig.iterations = 5000;\n      } else if (kdfConfig.iterations < 5000) {\n        throw new Error(\"PBKDF2 iteration minimum is 5000.\");\n      }\n      key = await this.cryptoFunctionService.pbkdf2(password, salt, \"sha256\", kdfConfig.iterations);\n    } else if (kdf == KdfType.Argon2id) {\n      if (kdfConfig.iterations == null) {\n        kdfConfig.iterations = DEFAULT_ARGON2_ITERATIONS;\n      } else if (kdfConfig.iterations < 2) {\n        throw new Error(\"Argon2 iteration minimum is 2.\");\n      }\n\n      if (kdfConfig.memory == null) {\n        kdfConfig.memory = DEFAULT_ARGON2_MEMORY;\n      } else if (kdfConfig.memory < 16) {\n        throw new Error(\"Argon2 memory minimum is 16 MB\");\n      } else if (kdfConfig.memory > 1024) {\n        throw new Error(\"Argon2 memory maximum is 1024 MB\");\n      }\n\n      if (kdfConfig.parallelism == null) {\n        kdfConfig.parallelism = DEFAULT_ARGON2_PARALLELISM;\n      } else if (kdfConfig.parallelism < 1) {\n        throw new Error(\"Argon2 parallelism minimum is 1.\");\n      }\n\n      const saltHash = await this.cryptoFunctionService.hash(salt, \"sha256\");\n      key = await this.cryptoFunctionService.argon2(\n        password,\n        saltHash,\n        kdfConfig.iterations,\n        kdfConfig.memory * 1024, // convert to KiB from MiB\n        kdfConfig.parallelism\n      );\n    } else {\n      throw new Error(\"Unknown Kdf.\");\n    }\n    return new SymmetricCryptoKey(key);\n  }\n\n  // --LEGACY METHODS--\n  // We previously used the master key for additional keys, but now we use the user key.\n  // These methods support migrating the old keys to the new ones.\n  // TODO: Remove after 2023.10 release (https://bitwarden.atlassian.net/browse/PM-3475)\n\n  async clearDeprecatedKeys(keySuffix: KeySuffixOptions, userId?: string) {\n    if (keySuffix === KeySuffixOptions.Auto) {\n      await this.stateService.setCryptoMasterKeyAuto(null, { userId: userId });\n    } else if (keySuffix === KeySuffixOptions.Pin) {\n      await this.stateService.setEncryptedPinProtected(null, { userId: userId });\n      await this.stateService.setDecryptedPinProtected(null, { userId: userId });\n    }\n  }\n\n  async migrateAutoKeyIfNeeded(userId?: string) {\n    const oldAutoKey = await this.stateService.getCryptoMasterKeyAuto({ userId: userId });\n    if (!oldAutoKey) {\n      return;\n    }\n    // Decrypt\n    const masterKey = new SymmetricCryptoKey(Utils.fromB64ToArray(oldAutoKey)) as MasterKey;\n    if (await this.isLegacyUser(masterKey, userId)) {\n      // Legacy users don't have a user key, so no need to migrate.\n      // Instead, set the master key for additional isLegacyUser checks that will log the user out.\n      await this.setMasterKey(masterKey, userId);\n      return;\n    }\n    const encryptedUserKey = await this.stateService.getEncryptedCryptoSymmetricKey({\n      userId: userId,\n    });\n    const userKey = await this.decryptUserKeyWithMasterKey(\n      masterKey,\n      new EncString(encryptedUserKey),\n      userId\n    );\n    // Migrate\n    await this.stateService.setUserKeyAutoUnlock(userKey.keyB64, { userId: userId });\n    await this.stateService.setCryptoMasterKeyAuto(null, { userId: userId });\n    // Set encrypted user key in case user immediately locks without syncing\n    await this.setMasterKeyEncryptedUserKey(encryptedUserKey);\n  }\n\n  async decryptAndMigrateOldPinKey(\n    masterPasswordOnRestart: boolean,\n    pin: string,\n    email: string,\n    kdf: KdfType,\n    kdfConfig: KdfConfig,\n    oldPinKey: EncString\n  ): Promise<UserKey> {\n    // Decrypt\n    const masterKey = await this.decryptMasterKeyWithPin(pin, email, kdf, kdfConfig, oldPinKey);\n    const encUserKey = await this.stateService.getEncryptedCryptoSymmetricKey();\n    const userKey = await this.decryptUserKeyWithMasterKey(masterKey, new EncString(encUserKey));\n    // Migrate\n    const pinKey = await this.makePinKey(pin, email, kdf, kdfConfig);\n    const pinProtectedKey = await this.encryptService.encrypt(userKey.key, pinKey);\n    if (masterPasswordOnRestart) {\n      await this.stateService.setDecryptedPinProtected(null);\n      await this.stateService.setPinKeyEncryptedUserKeyEphemeral(pinProtectedKey);\n    } else {\n      await this.stateService.setEncryptedPinProtected(null);\n      await this.stateService.setPinKeyEncryptedUserKey(pinProtectedKey);\n      // We previously only set the protected pin if MP on Restart was enabled\n      // now we set it regardless\n      const encPin = await this.encryptService.encrypt(pin, userKey);\n      await this.stateService.setProtectedPin(encPin.encryptedString);\n    }\n    // This also clears the old Biometrics key since the new Biometrics key will\n    // be created when the user key is set.\n    await this.stateService.setCryptoMasterKeyBiometric(null);\n    return userKey;\n  }\n\n  // --DEPRECATED METHODS--\n\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.encrypt\n   */\n  async encrypt(plainValue: string | Uint8Array, key?: SymmetricCryptoKey): Promise<EncString> {\n    key ||= await this.getUserKeyWithLegacySupport();\n    return await this.encryptService.encrypt(plainValue, key);\n  }\n\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.encryptToBytes\n   */\n  async encryptToBytes(plainValue: Uint8Array, key?: SymmetricCryptoKey): Promise<EncArrayBuffer> {\n    key ||= await this.getUserKeyWithLegacySupport();\n    return this.encryptService.encryptToBytes(plainValue, key);\n  }\n\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.decryptToBytes\n   */\n  async decryptToBytes(encString: EncString, key?: SymmetricCryptoKey): Promise<Uint8Array> {\n    key ||= await this.getUserKeyWithLegacySupport();\n    return this.encryptService.decryptToBytes(encString, key);\n  }\n\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.decryptToUtf8\n   */\n  async decryptToUtf8(encString: EncString, key?: SymmetricCryptoKey): Promise<string> {\n    key ||= await this.getUserKeyWithLegacySupport();\n    return await this.encryptService.decryptToUtf8(encString, key);\n  }\n\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.decryptToBytes\n   */\n  async decryptFromBytes(encBuffer: EncArrayBuffer, key: SymmetricCryptoKey): Promise<Uint8Array> {\n    if (encBuffer == null) {\n      throw new Error(\"No buffer provided for decryption.\");\n    }\n\n    key ||= await this.getUserKeyWithLegacySupport();\n\n    return this.encryptService.decryptToBytes(encBuffer, key);\n  }\n}\n","import { KeySuffixOptions } from \"@bitwarden/common/enums\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport {\n  SymmetricCryptoKey,\n  UserKey,\n} from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\nimport { CryptoService } from \"@bitwarden/common/platform/services/crypto.service\";\n\nexport class BrowserCryptoService extends CryptoService {\n  override async hasUserKeyStored(keySuffix: KeySuffixOptions, userId?: string): Promise<boolean> {\n    if (keySuffix === KeySuffixOptions.Biometric) {\n      return await this.stateService.getBiometricUnlock({ userId: userId });\n    }\n    return super.hasUserKeyStored(keySuffix, userId);\n  }\n\n  /**\n   * Browser doesn't store biometric keys, so we retrieve them from the desktop and return\n   * if we successfully saved it into memory as the User Key\n   */\n  protected override async getKeyFromStorage(keySuffix: KeySuffixOptions): Promise<UserKey> {\n    if (keySuffix === KeySuffixOptions.Biometric) {\n      await this.platformUtilService.authenticateBiometric();\n      const userKey = await this.stateService.getUserKey();\n      if (userKey) {\n        return new SymmetricCryptoKey(Utils.fromB64ToArray(userKey.keyB64)) as UserKey;\n      }\n    }\n\n    return await super.getKeyFromStorage(keySuffix);\n  }\n}\n","import { CryptoService as AbstractCryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\n\nimport {\n  StateServiceInitOptions,\n  stateServiceFactory,\n} from \"../../../platform/background/service-factories/state-service.factory\";\nimport {\n  LogServiceInitOptions,\n  logServiceFactory,\n} from \"../../background/service-factories/log-service.factory\";\nimport { BrowserCryptoService } from \"../../services/browser-crypto.service\";\n\nimport {\n  cryptoFunctionServiceFactory,\n  CryptoFunctionServiceInitOptions,\n} from \"./crypto-function-service.factory\";\nimport { encryptServiceFactory, EncryptServiceInitOptions } from \"./encrypt-service.factory\";\nimport { FactoryOptions, CachedServices, factory } from \"./factory-options\";\nimport {\n  PlatformUtilsServiceInitOptions,\n  platformUtilsServiceFactory,\n} from \"./platform-utils-service.factory\";\n\ntype CryptoServiceFactoryOptions = FactoryOptions;\n\nexport type CryptoServiceInitOptions = CryptoServiceFactoryOptions &\n  CryptoFunctionServiceInitOptions &\n  EncryptServiceInitOptions &\n  PlatformUtilsServiceInitOptions &\n  LogServiceInitOptions &\n  StateServiceInitOptions;\n\nexport function cryptoServiceFactory(\n  cache: { cryptoService?: AbstractCryptoService } & CachedServices,\n  opts: CryptoServiceInitOptions\n): Promise<AbstractCryptoService> {\n  return factory(\n    cache,\n    \"cryptoService\",\n    opts,\n    async () =>\n      new BrowserCryptoService(\n        await cryptoFunctionServiceFactory(cache, opts),\n        await encryptServiceFactory(cache, opts),\n        await platformUtilsServiceFactory(cache, opts),\n        await logServiceFactory(cache, opts),\n        await stateServiceFactory(cache, opts)\n      )\n  );\n}\n","import { TranslationService as TranslationServiceAbstraction } from \"../abstractions/translation.service\";\n\nexport abstract class TranslationService implements TranslationServiceAbstraction {\n  // First locale is the default (English)\n  supportedTranslationLocales: string[] = [\"en\"];\n  defaultLocale = \"en\";\n  abstract translationLocale: string;\n  collator: Intl.Collator;\n  localeNames = new Map<string, string>([\n    [\"af\", \"Afrikaans\"],\n    [\"ar\", \"العربية الفصحى\"],\n    [\"az\", \"Azərbaycanca\"],\n    [\"be\", \"Беларуская\"],\n    [\"bg\", \"български\"],\n    [\"bn\", \"বাংলা\"],\n    [\"bs\", \"bosanski jezik\"],\n    [\"ca\", \"català\"],\n    [\"cs\", \"čeština\"],\n    [\"da\", \"dansk\"],\n    [\"de\", \"Deutsch\"],\n    [\"el\", \"Ελληνικά\"],\n    [\"en\", \"English\"],\n    [\"en-GB\", \"English (British)\"],\n    [\"en-IN\", \"English (India)\"],\n    [\"eo\", \"Esperanto\"],\n    [\"es\", \"español\"],\n    [\"et\", \"eesti\"],\n    [\"eu\", \"euskara\"],\n    [\"fa\", \"فارسی\"],\n    [\"fi\", \"suomi\"],\n    [\"fil\", \"Wikang Filipino\"],\n    [\"fr\", \"français\"],\n    [\"he\", \"עברית\"],\n    [\"hi\", \"हिन्दी\"],\n    [\"hr\", \"hrvatski\"],\n    [\"hu\", \"magyar\"],\n    [\"id\", \"Bahasa Indonesia\"],\n    [\"it\", \"italiano\"],\n    [\"ja\", \"日本語\"],\n    [\"ka\", \"ქართული\"],\n    [\"km\", \"ខ្មែរ, ខេមរភាសា, ភាសាខ្មែរ\"],\n    [\"kn\", \"ಕನ್ನಡ\"],\n    [\"ko\", \"한국어\"],\n    [\"lt\", \"lietuvių kalba\"],\n    [\"lv\", \"Latvietis\"],\n    [\"me\", \"црногорски\"],\n    [\"ml\", \"മലയാളം\"],\n    [\"nb\", \"norsk (bokmål)\"],\n    [\"nl\", \"Nederlands\"],\n    [\"nn\", \"Norsk Nynorsk\"],\n    [\"pl\", \"polski\"],\n    [\"pt-BR\", \"português do Brasil\"],\n    [\"pt-PT\", \"português\"],\n    [\"ro\", \"română\"],\n    [\"ru\", \"русский\"],\n    [\"si\", \"සිංහල\"],\n    [\"sk\", \"slovenčina\"],\n    [\"sl\", \"Slovenski jezik, Slovenščina\"],\n    [\"sr\", \"Српски\"],\n    [\"sv\", \"svenska\"],\n    [\"th\", \"ไทย\"],\n    [\"tr\", \"Türkçe\"],\n    [\"uk\", \"українська\"],\n    [\"vi\", \"Tiếng Việt\"],\n    [\"zh-CN\", \"中文（中国大陆）\"],\n    [\"zh-TW\", \"中文（台灣）\"],\n  ]);\n\n  protected inited: boolean;\n  protected defaultMessages: any = {};\n  protected localeMessages: any = {};\n\n  constructor(\n    protected systemLanguage: string,\n    protected localesDirectory: string,\n    protected getLocalesJson: (formattedLocale: string) => Promise<any>\n  ) {\n    this.systemLanguage = systemLanguage.replace(\"_\", \"-\");\n  }\n\n  async init(locale?: string) {\n    if (this.inited) {\n      throw new Error(\"i18n already initialized.\");\n    }\n    if (this.supportedTranslationLocales == null || this.supportedTranslationLocales.length === 0) {\n      throw new Error(\"supportedTranslationLocales not set.\");\n    }\n\n    this.inited = true;\n    this.translationLocale = locale != null ? locale : this.systemLanguage;\n\n    try {\n      this.collator = new Intl.Collator(this.translationLocale, {\n        numeric: true,\n        sensitivity: \"base\",\n      });\n    } catch {\n      this.collator = null;\n    }\n\n    if (this.supportedTranslationLocales.indexOf(this.translationLocale) === -1) {\n      this.translationLocale = this.translationLocale.slice(0, 2);\n\n      if (this.supportedTranslationLocales.indexOf(this.translationLocale) === -1) {\n        this.translationLocale = this.defaultLocale;\n      }\n    }\n\n    if (this.localesDirectory != null) {\n      await this.loadMessages(this.translationLocale, this.localeMessages);\n      if (this.translationLocale !== this.defaultLocale) {\n        await this.loadMessages(this.defaultLocale, this.defaultMessages);\n      }\n    }\n  }\n\n  t(id: string, p1?: string, p2?: string, p3?: string): string {\n    return this.translate(id, p1, p2, p3);\n  }\n\n  translate(id: string, p1?: string | number, p2?: string | number, p3?: string | number): string {\n    let result: string;\n    // eslint-disable-next-line\n    if (this.localeMessages.hasOwnProperty(id) && this.localeMessages[id]) {\n      result = this.localeMessages[id];\n      // eslint-disable-next-line\n    } else if (this.defaultMessages.hasOwnProperty(id) && this.defaultMessages[id]) {\n      result = this.defaultMessages[id];\n    } else {\n      result = \"\";\n    }\n\n    if (result !== \"\") {\n      if (p1 != null) {\n        result = result.split(\"__$1__\").join(p1.toString());\n      }\n      if (p2 != null) {\n        result = result.split(\"__$2__\").join(p2.toString());\n      }\n      if (p3 != null) {\n        result = result.split(\"__$3__\").join(p3.toString());\n      }\n    }\n\n    return result;\n  }\n\n  protected async loadMessages(locale: string, messagesObj: any): Promise<any> {\n    const formattedLocale = locale.replace(\"-\", \"_\");\n    const locales = await this.getLocalesJson(formattedLocale);\n    for (const prop in locales) {\n      // eslint-disable-next-line\n      if (!locales.hasOwnProperty(prop)) {\n        continue;\n      }\n      messagesObj[prop] = locales[prop].message;\n\n      if (locales[prop].placeholders) {\n        for (const placeProp in locales[prop].placeholders) {\n          if (\n            !locales[prop].placeholders.hasOwnProperty(placeProp) || // eslint-disable-line\n            !locales[prop].placeholders[placeProp].content\n          ) {\n            continue;\n          }\n\n          const replaceToken = \"\\\\$\" + placeProp.toUpperCase() + \"\\\\$\";\n          let replaceContent = locales[prop].placeholders[placeProp].content;\n          if (replaceContent === \"$1\" || replaceContent === \"$2\" || replaceContent === \"$3\") {\n            replaceContent = \"__$\" + replaceContent + \"__\";\n          }\n          messagesObj[prop] = messagesObj[prop].replace(\n            new RegExp(replaceToken, \"g\"),\n            replaceContent\n          );\n        }\n      }\n    }\n  }\n}\n","import { Observable, ReplaySubject } from \"rxjs\";\n\nimport { I18nService as I18nServiceAbstraction } from \"../abstractions/i18n.service\";\n\nimport { TranslationService } from \"./translation.service\";\n\nexport class I18nService extends TranslationService implements I18nServiceAbstraction {\n  protected _locale = new ReplaySubject<string>(1);\n  private _translationLocale: string;\n  locale$: Observable<string> = this._locale.asObservable();\n\n  constructor(\n    protected systemLanguage: string,\n    protected localesDirectory: string,\n    protected getLocalesJson: (formattedLocale: string) => Promise<any>\n  ) {\n    super(systemLanguage, localesDirectory, getLocalesJson);\n  }\n\n  get translationLocale(): string {\n    return this._translationLocale;\n  }\n\n  set translationLocale(locale: string) {\n    this._translationLocale = locale;\n    this._locale.next(locale);\n  }\n}\n","import { I18nService as BaseI18nService } from \"@bitwarden/common/platform/services/i18n.service\";\n\nexport default class I18nService extends BaseI18nService {\n  constructor(systemLanguage: string) {\n    super(systemLanguage, null, async (formattedLocale: string) => {\n      // Deprecated\n      const file = await fetch(this.localesDirectory + formattedLocale + \"/messages.json\");\n      return await file.json();\n    });\n\n    // Please leave 'en' where it is, as it's our fallback language in case no translation can be found\n    this.supportedTranslationLocales = [\n      \"en\",\n      \"ar\",\n      \"az\",\n      \"be\",\n      \"bg\",\n      \"bn\",\n      \"bs\",\n      \"ca\",\n      \"cs\",\n      \"da\",\n      \"de\",\n      \"el\",\n      \"en-GB\",\n      \"en-IN\",\n      \"es\",\n      \"et\",\n      \"eu\",\n      \"fa\",\n      \"fi\",\n      \"fil\",\n      \"fr\",\n      \"he\",\n      \"hi\",\n      \"hr\",\n      \"hu\",\n      \"id\",\n      \"it\",\n      \"ja\",\n      \"ka\",\n      \"km\",\n      \"kn\",\n      \"ko\",\n      \"lt\",\n      \"lv\",\n      \"ml\",\n      \"nb\",\n      \"nl\",\n      \"nn\",\n      \"pl\",\n      \"pt-BR\",\n      \"pt-PT\",\n      \"ro\",\n      \"ru\",\n      \"si\",\n      \"sk\",\n      \"sl\",\n      \"sr\",\n      \"sv\",\n      \"th\",\n      \"tr\",\n      \"uk\",\n      \"vi\",\n      \"zh-CN\",\n      \"zh-TW\",\n    ];\n  }\n\n  t(id: string, p1?: string, p2?: string, p3?: string): string {\n    return this.translate(id, p1, p2, p3);\n  }\n\n  translate(id: string, p1?: string, p2?: string, p3?: string): string {\n    if (this.localesDirectory == null) {\n      const placeholders: string[] = [];\n      if (p1 != null) {\n        placeholders.push(p1);\n      }\n      if (p2 != null) {\n        placeholders.push(p2);\n      }\n      if (p3 != null) {\n        placeholders.push(p3);\n      }\n\n      if (placeholders.length) {\n        return chrome.i18n.getMessage(id, placeholders);\n      } else {\n        return chrome.i18n.getMessage(id);\n      }\n    }\n\n    return super.translate(id, p1, p2, p3);\n  }\n}\n","import { I18nService as AbstractI18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { I18nService as BaseI18nService } from \"@bitwarden/common/platform/services/i18n.service\";\n\nimport I18nService from \"../../services/i18n.service\";\n\nimport { FactoryOptions, CachedServices, factory } from \"./factory-options\";\n\ntype I18nServiceFactoryOptions = FactoryOptions & {\n  i18nServiceOptions: {\n    systemLanguage: string;\n  };\n};\n\nexport type I18nServiceInitOptions = I18nServiceFactoryOptions;\n\nexport async function i18nServiceFactory(\n  cache: { i18nService?: AbstractI18nService } & CachedServices,\n  opts: I18nServiceInitOptions\n): Promise<AbstractI18nService> {\n  const service = await factory(\n    cache,\n    \"i18nService\",\n    opts,\n    () => new I18nService(opts.i18nServiceOptions.systemLanguage)\n  );\n  if (!(service as BaseI18nService as any).inited) {\n    await (service as BaseI18nService).init();\n  }\n  return service;\n}\n","import { DeviceTrustCryptoServiceAbstraction } from \"@bitwarden/common/auth/abstractions/device-trust-crypto.service.abstraction\";\nimport { DeviceTrustCryptoService } from \"@bitwarden/common/auth/services/device-trust-crypto.service.implementation\";\n\nimport {\n  DevicesApiServiceInitOptions,\n  devicesApiServiceFactory,\n} from \"../../../background/service-factories/devices-api-service.factory\";\nimport {\n  AppIdServiceInitOptions,\n  appIdServiceFactory,\n} from \"../../../platform/background/service-factories/app-id-service.factory\";\nimport {\n  CryptoFunctionServiceInitOptions,\n  cryptoFunctionServiceFactory,\n} from \"../../../platform/background/service-factories/crypto-function-service.factory\";\nimport {\n  CryptoServiceInitOptions,\n  cryptoServiceFactory,\n} from \"../../../platform/background/service-factories/crypto-service.factory\";\nimport {\n  EncryptServiceInitOptions,\n  encryptServiceFactory,\n} from \"../../../platform/background/service-factories/encrypt-service.factory\";\nimport {\n  CachedServices,\n  FactoryOptions,\n  factory,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport {\n  I18nServiceInitOptions,\n  i18nServiceFactory,\n} from \"../../../platform/background/service-factories/i18n-service.factory\";\nimport {\n  PlatformUtilsServiceInitOptions,\n  platformUtilsServiceFactory,\n} from \"../../../platform/background/service-factories/platform-utils-service.factory\";\nimport {\n  StateServiceInitOptions,\n  stateServiceFactory,\n} from \"../../../platform/background/service-factories/state-service.factory\";\n\ntype DeviceTrustCryptoServiceFactoryOptions = FactoryOptions;\n\nexport type DeviceTrustCryptoServiceInitOptions = DeviceTrustCryptoServiceFactoryOptions &\n  CryptoFunctionServiceInitOptions &\n  CryptoServiceInitOptions &\n  EncryptServiceInitOptions &\n  StateServiceInitOptions &\n  AppIdServiceInitOptions &\n  DevicesApiServiceInitOptions &\n  I18nServiceInitOptions &\n  PlatformUtilsServiceInitOptions;\n\nexport function deviceTrustCryptoServiceFactory(\n  cache: { deviceTrustCryptoService?: DeviceTrustCryptoServiceAbstraction } & CachedServices,\n  opts: DeviceTrustCryptoServiceInitOptions\n): Promise<DeviceTrustCryptoServiceAbstraction> {\n  return factory(\n    cache,\n    \"deviceTrustCryptoService\",\n    opts,\n    async () =>\n      new DeviceTrustCryptoService(\n        await cryptoFunctionServiceFactory(cache, opts),\n        await cryptoServiceFactory(cache, opts),\n        await encryptServiceFactory(cache, opts),\n        await stateServiceFactory(cache, opts),\n        await appIdServiceFactory(cache, opts),\n        await devicesApiServiceFactory(cache, opts),\n        await i18nServiceFactory(cache, opts),\n        await platformUtilsServiceFactory(cache, opts)\n      )\n  );\n}\n","import { DevicesApiServiceAbstraction } from \"@bitwarden/common/auth/abstractions/devices-api.service.abstraction\";\nimport { DevicesApiServiceImplementation } from \"@bitwarden/common/auth/services/devices-api.service.implementation\";\n\nimport {\n  ApiServiceInitOptions,\n  apiServiceFactory,\n} from \"../../platform/background/service-factories/api-service.factory\";\nimport {\n  FactoryOptions,\n  CachedServices,\n  factory,\n} from \"../../platform/background/service-factories/factory-options\";\n\ntype DevicesApiServiceFactoryOptions = FactoryOptions;\n\nexport type DevicesApiServiceInitOptions = DevicesApiServiceFactoryOptions & ApiServiceInitOptions;\n\nexport function devicesApiServiceFactory(\n  cache: { devicesApiService?: DevicesApiServiceAbstraction } & CachedServices,\n  opts: DevicesApiServiceInitOptions\n): Promise<DevicesApiServiceAbstraction> {\n  return factory(\n    cache,\n    \"devicesApiService\",\n    opts,\n    async () => new DevicesApiServiceImplementation(await apiServiceFactory(cache, opts))\n  );\n}\n","import { AuthService as AbstractAuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthService } from \"@bitwarden/common/auth/services/auth.service\";\n\nimport {\n  policyServiceFactory,\n  PolicyServiceInitOptions,\n} from \"../../../admin-console/background/service-factories/policy-service.factory\";\nimport {\n  apiServiceFactory,\n  ApiServiceInitOptions,\n} from \"../../../platform/background/service-factories/api-service.factory\";\nimport { appIdServiceFactory } from \"../../../platform/background/service-factories/app-id-service.factory\";\nimport {\n  CryptoServiceInitOptions,\n  cryptoServiceFactory,\n} from \"../../../platform/background/service-factories/crypto-service.factory\";\nimport {\n  EncryptServiceInitOptions,\n  encryptServiceFactory,\n} from \"../../../platform/background/service-factories/encrypt-service.factory\";\nimport {\n  environmentServiceFactory,\n  EnvironmentServiceInitOptions,\n} from \"../../../platform/background/service-factories/environment-service.factory\";\nimport {\n  CachedServices,\n  factory,\n  FactoryOptions,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport {\n  i18nServiceFactory,\n  I18nServiceInitOptions,\n} from \"../../../platform/background/service-factories/i18n-service.factory\";\nimport {\n  logServiceFactory,\n  LogServiceInitOptions,\n} from \"../../../platform/background/service-factories/log-service.factory\";\nimport {\n  messagingServiceFactory,\n  MessagingServiceInitOptions,\n} from \"../../../platform/background/service-factories/messaging-service.factory\";\nimport {\n  platformUtilsServiceFactory,\n  PlatformUtilsServiceInitOptions,\n} from \"../../../platform/background/service-factories/platform-utils-service.factory\";\nimport {\n  stateServiceFactory,\n  StateServiceInitOptions,\n} from \"../../../platform/background/service-factories/state-service.factory\";\nimport {\n  passwordStrengthServiceFactory,\n  PasswordStrengthServiceInitOptions,\n} from \"../../../tools/background/service_factories/password-strength-service.factory\";\n\nimport {\n  authRequestCryptoServiceFactory,\n  AuthRequestCryptoServiceInitOptions,\n} from \"./auth-request-crypto-service.factory\";\nimport {\n  deviceTrustCryptoServiceFactory,\n  DeviceTrustCryptoServiceInitOptions,\n} from \"./device-trust-crypto-service.factory\";\nimport {\n  keyConnectorServiceFactory,\n  KeyConnectorServiceInitOptions,\n} from \"./key-connector-service.factory\";\nimport { tokenServiceFactory, TokenServiceInitOptions } from \"./token-service.factory\";\nimport { twoFactorServiceFactory, TwoFactorServiceInitOptions } from \"./two-factor-service.factory\";\n\ntype AuthServiceFactoyOptions = FactoryOptions;\n\nexport type AuthServiceInitOptions = AuthServiceFactoyOptions &\n  CryptoServiceInitOptions &\n  ApiServiceInitOptions &\n  TokenServiceInitOptions &\n  PlatformUtilsServiceInitOptions &\n  MessagingServiceInitOptions &\n  LogServiceInitOptions &\n  KeyConnectorServiceInitOptions &\n  EnvironmentServiceInitOptions &\n  StateServiceInitOptions &\n  TwoFactorServiceInitOptions &\n  I18nServiceInitOptions &\n  EncryptServiceInitOptions &\n  PolicyServiceInitOptions &\n  PasswordStrengthServiceInitOptions &\n  DeviceTrustCryptoServiceInitOptions &\n  AuthRequestCryptoServiceInitOptions;\n\nexport function authServiceFactory(\n  cache: { authService?: AbstractAuthService } & CachedServices,\n  opts: AuthServiceInitOptions\n): Promise<AbstractAuthService> {\n  return factory(\n    cache,\n    \"authService\",\n    opts,\n    async () =>\n      new AuthService(\n        await cryptoServiceFactory(cache, opts),\n        await apiServiceFactory(cache, opts),\n        await tokenServiceFactory(cache, opts),\n        await appIdServiceFactory(cache, opts),\n        await platformUtilsServiceFactory(cache, opts),\n        await messagingServiceFactory(cache, opts),\n        await logServiceFactory(cache, opts),\n        await keyConnectorServiceFactory(cache, opts),\n        await environmentServiceFactory(cache, opts),\n        await stateServiceFactory(cache, opts),\n        await twoFactorServiceFactory(cache, opts),\n        await i18nServiceFactory(cache, opts),\n        await encryptServiceFactory(cache, opts),\n        await passwordStrengthServiceFactory(cache, opts),\n        await policyServiceFactory(cache, opts),\n        await deviceTrustCryptoServiceFactory(cache, opts),\n        await authRequestCryptoServiceFactory(cache, opts)\n      )\n  );\n}\n","import { KeyConnectorService as AbstractKeyConnectorService } from \"@bitwarden/common/auth/abstractions/key-connector.service\";\nimport { KeyConnectorService } from \"@bitwarden/common/auth/services/key-connector.service\";\n\nimport {\n  OrganizationServiceInitOptions,\n  organizationServiceFactory,\n} from \"../../../admin-console/background/service-factories/organization-service.factory\";\nimport {\n  apiServiceFactory,\n  ApiServiceInitOptions,\n} from \"../../../platform/background/service-factories/api-service.factory\";\nimport {\n  CryptoFunctionServiceInitOptions,\n  cryptoFunctionServiceFactory,\n} from \"../../../platform/background/service-factories/crypto-function-service.factory\";\nimport {\n  CryptoServiceInitOptions,\n  cryptoServiceFactory,\n} from \"../../../platform/background/service-factories/crypto-service.factory\";\nimport {\n  FactoryOptions,\n  CachedServices,\n  factory,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport {\n  logServiceFactory,\n  LogServiceInitOptions,\n} from \"../../../platform/background/service-factories/log-service.factory\";\nimport {\n  stateServiceFactory,\n  StateServiceInitOptions,\n} from \"../../../platform/background/service-factories/state-service.factory\";\n\nimport { TokenServiceInitOptions, tokenServiceFactory } from \"./token-service.factory\";\n\ntype KeyConnectorServiceFactoryOptions = FactoryOptions & {\n  keyConnectorServiceOptions: {\n    logoutCallback: (expired: boolean, userId?: string) => Promise<void>;\n  };\n};\n\nexport type KeyConnectorServiceInitOptions = KeyConnectorServiceFactoryOptions &\n  StateServiceInitOptions &\n  CryptoServiceInitOptions &\n  ApiServiceInitOptions &\n  TokenServiceInitOptions &\n  LogServiceInitOptions &\n  OrganizationServiceInitOptions &\n  CryptoFunctionServiceInitOptions;\n\nexport function keyConnectorServiceFactory(\n  cache: { keyConnectorService?: AbstractKeyConnectorService } & CachedServices,\n  opts: KeyConnectorServiceInitOptions\n): Promise<AbstractKeyConnectorService> {\n  return factory(\n    cache,\n    \"keyConnectorService\",\n    opts,\n    async () =>\n      new KeyConnectorService(\n        await stateServiceFactory(cache, opts),\n        await cryptoServiceFactory(cache, opts),\n        await apiServiceFactory(cache, opts),\n        await tokenServiceFactory(cache, opts),\n        await logServiceFactory(cache, opts),\n        await organizationServiceFactory(cache, opts),\n        await cryptoFunctionServiceFactory(cache, opts),\n        opts.keyConnectorServiceOptions.logoutCallback\n      )\n  );\n}\n","import { TwoFactorService as AbstractTwoFactorService } from \"@bitwarden/common/auth/abstractions/two-factor.service\";\nimport { TwoFactorService } from \"@bitwarden/common/auth/services/two-factor.service\";\n\nimport {\n  FactoryOptions,\n  CachedServices,\n  factory,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport {\n  I18nServiceInitOptions,\n  i18nServiceFactory,\n} from \"../../../platform/background/service-factories/i18n-service.factory\";\nimport {\n  PlatformUtilsServiceInitOptions,\n  platformUtilsServiceFactory,\n} from \"../../../platform/background/service-factories/platform-utils-service.factory\";\n\ntype TwoFactorServiceFactoryOptions = FactoryOptions;\n\nexport type TwoFactorServiceInitOptions = TwoFactorServiceFactoryOptions &\n  I18nServiceInitOptions &\n  PlatformUtilsServiceInitOptions;\n\nexport async function twoFactorServiceFactory(\n  cache: { twoFactorService?: AbstractTwoFactorService } & CachedServices,\n  opts: TwoFactorServiceInitOptions\n): Promise<AbstractTwoFactorService> {\n  const service = await factory(\n    cache,\n    \"twoFactorService\",\n    opts,\n    async () =>\n      new TwoFactorService(\n        await i18nServiceFactory(cache, opts),\n        await platformUtilsServiceFactory(cache, opts)\n      )\n  );\n  service.init();\n  return service;\n}\n","import {\n  PasswordStrengthService,\n  PasswordStrengthServiceAbstraction,\n} from \"@bitwarden/common/tools/password-strength\";\n\nimport {\n  CachedServices,\n  factory,\n  FactoryOptions,\n} from \"../../../platform/background/service-factories/factory-options\";\n\ntype PasswordStrengthServiceFactoryOptions = FactoryOptions;\n\nexport type PasswordStrengthServiceInitOptions = PasswordStrengthServiceFactoryOptions;\n\nexport function passwordStrengthServiceFactory(\n  cache: {\n    passwordStrengthService?: PasswordStrengthServiceAbstraction;\n  } & CachedServices,\n  opts: PasswordStrengthServiceInitOptions\n): Promise<PasswordStrengthServiceAbstraction> {\n  return factory(cache, \"passwordStrengthService\", opts, async () => new PasswordStrengthService());\n}\n","import { AuthRequestCryptoServiceAbstraction } from \"@bitwarden/common/auth/abstractions/auth-request-crypto.service.abstraction\";\nimport { AuthRequestCryptoServiceImplementation } from \"@bitwarden/common/auth/services/auth-request-crypto.service.implementation\";\n\nimport {\n  CryptoServiceInitOptions,\n  cryptoServiceFactory,\n} from \"../../../platform/background/service-factories/crypto-service.factory\";\nimport {\n  CachedServices,\n  FactoryOptions,\n  factory,\n} from \"../../../platform/background/service-factories/factory-options\";\n\ntype AuthRequestCryptoServiceFactoryOptions = FactoryOptions;\n\nexport type AuthRequestCryptoServiceInitOptions = AuthRequestCryptoServiceFactoryOptions &\n  CryptoServiceInitOptions;\n\nexport function authRequestCryptoServiceFactory(\n  cache: { authRequestCryptoService?: AuthRequestCryptoServiceAbstraction } & CachedServices,\n  opts: AuthRequestCryptoServiceInitOptions\n): Promise<AuthRequestCryptoServiceAbstraction> {\n  return factory(\n    cache,\n    \"authRequestCryptoService\",\n    opts,\n    async () => new AuthRequestCryptoServiceImplementation(await cryptoServiceFactory(cache, opts))\n  );\n}\n","import { CipherFileUploadService as CipherFileUploadServiceAbstraction } from \"@bitwarden/common/vault/abstractions/file-upload/cipher-file-upload.service\";\nimport { CipherFileUploadService } from \"@bitwarden/common/vault/services/file-upload/cipher-file-upload.service\";\n\nimport {\n  ApiServiceInitOptions,\n  apiServiceFactory,\n} from \"../../platform/background/service-factories/api-service.factory\";\nimport {\n  FactoryOptions,\n  CachedServices,\n  factory,\n} from \"../../platform/background/service-factories/factory-options\";\nimport {\n  FileUploadServiceInitOptions,\n  fileUploadServiceFactory,\n} from \"../../platform/background/service-factories/file-upload-service.factory\";\n\ntype CipherFileUploadServiceFactoyOptions = FactoryOptions;\n\nexport type CipherFileUploadServiceInitOptions = CipherFileUploadServiceFactoyOptions &\n  ApiServiceInitOptions &\n  FileUploadServiceInitOptions;\n\nexport function cipherFileUploadServiceFactory(\n  cache: { cipherFileUploadService?: CipherFileUploadServiceAbstraction } & CachedServices,\n  opts: CipherFileUploadServiceInitOptions\n): Promise<CipherFileUploadServiceAbstraction> {\n  return factory(\n    cache,\n    \"cipherFileUploadService\",\n    opts,\n    async () =>\n      new CipherFileUploadService(\n        await apiServiceFactory(cache, opts),\n        await fileUploadServiceFactory(cache, opts)\n      )\n  );\n}\n","import { FileUploadService as FileUploadServiceAbstraction } from \"@bitwarden/common/platform/abstractions/file-upload/file-upload.service\";\nimport { FileUploadService } from \"@bitwarden/common/platform/services/file-upload/file-upload.service\";\n\nimport {\n  CachedServices,\n  factory,\n  FactoryOptions,\n} from \"../../background/service-factories/factory-options\";\n\nimport { logServiceFactory, LogServiceInitOptions } from \"./log-service.factory\";\n\ntype FileUploadServiceFactoryOptions = FactoryOptions;\n\nexport type FileUploadServiceInitOptions = FileUploadServiceFactoryOptions & LogServiceInitOptions;\n\nexport function fileUploadServiceFactory(\n  cache: { fileUploadService?: FileUploadServiceAbstraction } & CachedServices,\n  opts: FileUploadServiceInitOptions\n): Promise<FileUploadServiceAbstraction> {\n  return factory(\n    cache,\n    \"fileUploadService\",\n    opts,\n    async () => new FileUploadService(await logServiceFactory(cache, opts))\n  );\n}\n","import { BehaviorSubject, concatMap } from \"rxjs\";\n\nimport { SettingsService as SettingsServiceAbstraction } from \"../abstractions/settings.service\";\nimport { StateService } from \"../platform/abstractions/state.service\";\nimport { Utils } from \"../platform/misc/utils\";\nimport { AccountSettingsSettings } from \"../platform/models/domain/account\";\n\nexport class SettingsService implements SettingsServiceAbstraction {\n  protected _settings: BehaviorSubject<AccountSettingsSettings> = new BehaviorSubject({});\n  protected _disableFavicon = new BehaviorSubject<boolean>(null);\n\n  settings$ = this._settings.asObservable();\n  disableFavicon$ = this._disableFavicon.asObservable();\n\n  constructor(private stateService: StateService) {\n    this.stateService.activeAccountUnlocked$\n      .pipe(\n        concatMap(async (unlocked) => {\n          if (Utils.global.bitwardenContainerService == null) {\n            return;\n          }\n\n          if (!unlocked) {\n            this._settings.next({});\n            return;\n          }\n\n          const data = await this.stateService.getSettings();\n          const disableFavicon = await this.stateService.getDisableFavicon();\n\n          this._settings.next(data);\n          this._disableFavicon.next(disableFavicon);\n        })\n      )\n      .subscribe();\n  }\n\n  async setEquivalentDomains(equivalentDomains: string[][]): Promise<void> {\n    const settings = this._settings.getValue() ?? {};\n\n    settings.equivalentDomains = equivalentDomains;\n\n    this._settings.next(settings);\n    await this.stateService.setSettings(settings);\n  }\n\n  getEquivalentDomains(url: string): Set<string> {\n    const domain = Utils.getDomain(url);\n    if (domain == null) {\n      return new Set();\n    }\n\n    const settings = this._settings.getValue();\n\n    let result: string[] = [];\n\n    if (settings?.equivalentDomains != null) {\n      settings.equivalentDomains\n        .filter((ed) => ed.length > 0 && ed.includes(domain))\n        .forEach((ed) => {\n          result = result.concat(ed);\n        });\n    }\n\n    return new Set(result);\n  }\n\n  async setDisableFavicon(value: boolean) {\n    this._disableFavicon.next(value);\n    await this.stateService.setDisableFavicon(value);\n  }\n\n  getDisableFavicon(): boolean {\n    return this._disableFavicon.getValue();\n  }\n\n  async clear(userId?: string): Promise<void> {\n    if (userId == null || userId == (await this.stateService.getUserId())) {\n      this._settings.next({});\n    }\n\n    await this.stateService.setSettings(null, { userId: userId });\n  }\n}\n","import { BehaviorSubject } from \"rxjs\";\n\nimport { AccountSettingsSettings } from \"@bitwarden/common/platform/models/domain/account\";\nimport { SettingsService } from \"@bitwarden/common/services/settings.service\";\n\nimport { browserSession, sessionSync } from \"../platform/decorators/session-sync-observable\";\n\n@browserSession\nexport class BrowserSettingsService extends SettingsService {\n  @sessionSync({ initializer: (obj: string[][]) => obj })\n  protected _settings: BehaviorSubject<AccountSettingsSettings>;\n\n  @sessionSync({ initializer: (b: boolean) => b })\n  protected _disableFavicon: BehaviorSubject<boolean>;\n}\n","import { SettingsService as AbstractSettingsService } from \"@bitwarden/common/abstractions/settings.service\";\n\nimport {\n  FactoryOptions,\n  CachedServices,\n  factory,\n} from \"../../platform/background/service-factories/factory-options\";\nimport {\n  stateServiceFactory,\n  StateServiceInitOptions,\n} from \"../../platform/background/service-factories/state-service.factory\";\nimport { BrowserSettingsService } from \"../../services/browser-settings.service\";\n\ntype SettingsServiceFactoryOptions = FactoryOptions;\n\nexport type SettingsServiceInitOptions = SettingsServiceFactoryOptions & StateServiceInitOptions;\n\nexport function settingsServiceFactory(\n  cache: { settingsService?: AbstractSettingsService } & CachedServices,\n  opts: SettingsServiceInitOptions\n): Promise<AbstractSettingsService> {\n  return factory(\n    cache,\n    \"settingsService\",\n    opts,\n    async () => new BrowserSettingsService(await stateServiceFactory(cache, opts))\n  );\n}\n","import { Jsonify } from \"type-fest\";\n\nimport {\n  ServerConfigData,\n  ThirdPartyServerConfigData,\n  EnvironmentServerConfigData,\n} from \"../../models/data/server-config.data\";\n\nconst dayInMilliseconds = 24 * 3600 * 1000;\nconst eighteenHoursInMilliseconds = 18 * 3600 * 1000;\n\nexport class ServerConfig {\n  version: string;\n  gitHash: string;\n  server?: ThirdPartyServerConfigData;\n  environment?: EnvironmentServerConfigData;\n  utcDate: Date;\n  featureStates: { [key: string]: string } = {};\n\n  constructor(serverConfigData: ServerConfigData) {\n    this.version = serverConfigData.version;\n    this.gitHash = serverConfigData.gitHash;\n    this.server = serverConfigData.server;\n    this.utcDate = new Date(serverConfigData.utcDate);\n    this.environment = serverConfigData.environment;\n    this.featureStates = serverConfigData.featureStates;\n\n    if (this.server?.name == null && this.server?.url == null) {\n      this.server = null;\n    }\n  }\n\n  private getAgeInMilliseconds(): number {\n    return new Date().getTime() - this.utcDate?.getTime();\n  }\n\n  isValid(): boolean {\n    return this.getAgeInMilliseconds() <= dayInMilliseconds;\n  }\n\n  expiresSoon(): boolean {\n    return this.getAgeInMilliseconds() >= eighteenHoursInMilliseconds;\n  }\n\n  static fromJSON(obj: Jsonify<ServerConfig>): ServerConfig {\n    if (obj == null) {\n      return null;\n    }\n\n    return new ServerConfig(obj);\n  }\n}\n","import {\n  ReplaySubject,\n  Subject,\n  catchError,\n  concatMap,\n  defer,\n  delayWhen,\n  firstValueFrom,\n  map,\n  merge,\n  timer,\n} from \"rxjs\";\nimport { SemVer } from \"semver\";\n\nimport { AuthService } from \"../../../auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"../../../auth/enums/authentication-status\";\nimport { FeatureFlag, FeatureFlagValue } from \"../../../enums/feature-flag.enum\";\nimport { ConfigApiServiceAbstraction } from \"../../abstractions/config/config-api.service.abstraction\";\nimport { ConfigServiceAbstraction } from \"../../abstractions/config/config.service.abstraction\";\nimport { ServerConfig } from \"../../abstractions/config/server-config\";\nimport { EnvironmentService, Region } from \"../../abstractions/environment.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { ServerConfigData } from \"../../models/data/server-config.data\";\n\nconst ONE_HOUR_IN_MILLISECONDS = 1000 * 3600;\n\nexport class ConfigService implements ConfigServiceAbstraction {\n  private inited = false;\n\n  protected _serverConfig = new ReplaySubject<ServerConfig | null>(1);\n  serverConfig$ = this._serverConfig.asObservable();\n\n  private _forceFetchConfig = new Subject<void>();\n  protected refreshTimer$ = timer(ONE_HOUR_IN_MILLISECONDS, ONE_HOUR_IN_MILLISECONDS); // after 1 hour, then every hour\n\n  cloudRegion$ = this.serverConfig$.pipe(\n    map((config) => config?.environment?.cloudRegion ?? Region.US)\n  );\n\n  constructor(\n    private stateService: StateService,\n    private configApiService: ConfigApiServiceAbstraction,\n    private authService: AuthService,\n    private environmentService: EnvironmentService,\n    private logService: LogService,\n\n    // Used to avoid duplicate subscriptions, e.g. in browser between the background and popup\n    private subscribe = true\n  ) {}\n\n  init() {\n    if (!this.subscribe || this.inited) {\n      return;\n    }\n\n    const latestServerConfig$ = defer(() => this.configApiService.get()).pipe(\n      map((response) => new ServerConfigData(response)),\n      delayWhen((data) => this.saveConfig(data)),\n      catchError((e: unknown) => {\n        // fall back to stored ServerConfig (if any)\n        this.logService.error(\"Unable to fetch ServerConfig: \" + (e as Error)?.message);\n        return this.stateService.getServerConfig();\n      })\n    );\n\n    // If you need to fetch a new config when an event occurs, add an observable that emits on that event here\n    merge(\n      this.refreshTimer$, // an overridable interval\n      this.environmentService.urls, // when environment URLs change (including when app is started)\n      this._forceFetchConfig // manual\n    )\n      .pipe(\n        concatMap(() => latestServerConfig$),\n        map((data) => (data == null ? null : new ServerConfig(data)))\n      )\n      .subscribe((config) => this._serverConfig.next(config));\n\n    this.inited = true;\n  }\n\n  getFeatureFlag$<T extends FeatureFlagValue>(key: FeatureFlag, defaultValue?: T) {\n    return this.serverConfig$.pipe(\n      map((serverConfig) => {\n        if (serverConfig?.featureStates == null || serverConfig.featureStates[key] == null) {\n          return defaultValue;\n        }\n\n        return serverConfig.featureStates[key] as T;\n      })\n    );\n  }\n\n  async getFeatureFlag<T extends FeatureFlagValue>(key: FeatureFlag, defaultValue?: T) {\n    return await firstValueFrom(this.getFeatureFlag$(key, defaultValue));\n  }\n\n  triggerServerConfigFetch() {\n    this._forceFetchConfig.next();\n  }\n\n  private async saveConfig(data: ServerConfigData) {\n    if ((await this.authService.getAuthStatus()) === AuthenticationStatus.LoggedOut) {\n      return;\n    }\n\n    await this.stateService.setServerConfig(data);\n    this.environmentService.setCloudWebVaultUrl(data.environment?.cloudRegion);\n  }\n\n  /**\n   * Verifies whether the server version meets the minimum required version\n   * @param minimumRequiredServerVersion The minimum version required\n   * @returns True if the server version is greater than or equal to the minimum required version\n   */\n  checkServerMeetsVersionRequirement$(minimumRequiredServerVersion: SemVer) {\n    return this.serverConfig$.pipe(\n      map((serverConfig) => {\n        if (serverConfig == null) {\n          return false;\n        }\n        const serverVersion = new SemVer(serverConfig.version);\n        return serverVersion.compare(minimumRequiredServerVersion) >= 0;\n      })\n    );\n  }\n}\n","import { ConfigServiceAbstraction } from \"@bitwarden/common/platform/abstractions/config/config.service.abstraction\";\nimport { ConfigService } from \"@bitwarden/common/platform/services/config/config.service\";\n\nimport {\n  authServiceFactory,\n  AuthServiceInitOptions,\n} from \"../../../auth/background/service-factories/auth-service.factory\";\n\nimport { configApiServiceFactory, ConfigApiServiceInitOptions } from \"./config-api.service.factory\";\nimport {\n  environmentServiceFactory,\n  EnvironmentServiceInitOptions,\n} from \"./environment-service.factory\";\nimport { FactoryOptions, CachedServices, factory } from \"./factory-options\";\nimport { logServiceFactory, LogServiceInitOptions } from \"./log-service.factory\";\nimport { stateServiceFactory, StateServiceInitOptions } from \"./state-service.factory\";\n\ntype ConfigServiceFactoryOptions = FactoryOptions & {\n  configServiceOptions?: {\n    subscribe?: boolean;\n  };\n};\n\nexport type ConfigServiceInitOptions = ConfigServiceFactoryOptions &\n  StateServiceInitOptions &\n  ConfigApiServiceInitOptions &\n  AuthServiceInitOptions &\n  EnvironmentServiceInitOptions &\n  LogServiceInitOptions;\n\nexport function configServiceFactory(\n  cache: { configService?: ConfigServiceAbstraction } & CachedServices,\n  opts: ConfigServiceInitOptions\n): Promise<ConfigServiceAbstraction> {\n  return factory(\n    cache,\n    \"configService\",\n    opts,\n    async () =>\n      new ConfigService(\n        await stateServiceFactory(cache, opts),\n        await configApiServiceFactory(cache, opts),\n        await authServiceFactory(cache, opts),\n        await environmentServiceFactory(cache, opts),\n        await logServiceFactory(cache, opts),\n        opts.configServiceOptions?.subscribe ?? true\n      )\n  );\n}\n","import { ConfigApiServiceAbstraction } from \"@bitwarden/common/platform/abstractions/config/config-api.service.abstraction\";\nimport { ConfigApiService } from \"@bitwarden/common/platform/services/config/config-api.service\";\n\nimport {\n  authServiceFactory,\n  AuthServiceInitOptions,\n} from \"../../../auth/background/service-factories/auth-service.factory\";\n\nimport { apiServiceFactory, ApiServiceInitOptions } from \"./api-service.factory\";\nimport { FactoryOptions, CachedServices, factory } from \"./factory-options\";\n\ntype ConfigApiServiceFactoyOptions = FactoryOptions;\n\nexport type ConfigApiServiceInitOptions = ConfigApiServiceFactoyOptions &\n  ApiServiceInitOptions &\n  AuthServiceInitOptions;\n\nexport function configApiServiceFactory(\n  cache: { configApiService?: ConfigApiServiceAbstraction } & CachedServices,\n  opts: ConfigApiServiceInitOptions\n): Promise<ConfigApiServiceAbstraction> {\n  return factory(\n    cache,\n    \"configApiService\",\n    opts,\n    async () =>\n      new ConfigApiService(\n        await apiServiceFactory(cache, opts),\n        await authServiceFactory(cache, opts)\n      )\n  );\n}\n","import { CipherService as AbstractCipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CipherService } from \"@bitwarden/common/vault/services/cipher.service\";\n\nimport {\n  CipherFileUploadServiceInitOptions,\n  cipherFileUploadServiceFactory,\n} from \"../../../background/service-factories/cipher-file-upload-service.factory\";\nimport {\n  searchServiceFactory,\n  SearchServiceInitOptions,\n} from \"../../../background/service-factories/search-service.factory\";\nimport {\n  SettingsServiceInitOptions,\n  settingsServiceFactory,\n} from \"../../../background/service-factories/settings-service.factory\";\nimport {\n  apiServiceFactory,\n  ApiServiceInitOptions,\n} from \"../../../platform/background/service-factories/api-service.factory\";\nimport {\n  configServiceFactory,\n  ConfigServiceInitOptions,\n} from \"../../../platform/background/service-factories/config-service.factory\";\nimport {\n  cryptoServiceFactory,\n  CryptoServiceInitOptions,\n} from \"../../../platform/background/service-factories/crypto-service.factory\";\nimport {\n  EncryptServiceInitOptions,\n  encryptServiceFactory,\n} from \"../../../platform/background/service-factories/encrypt-service.factory\";\nimport {\n  CachedServices,\n  factory,\n  FactoryOptions,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport {\n  i18nServiceFactory,\n  I18nServiceInitOptions,\n} from \"../../../platform/background/service-factories/i18n-service.factory\";\nimport {\n  stateServiceFactory,\n  StateServiceInitOptions,\n} from \"../../../platform/background/service-factories/state-service.factory\";\n\ntype CipherServiceFactoryOptions = FactoryOptions;\n\nexport type CipherServiceInitOptions = CipherServiceFactoryOptions &\n  CryptoServiceInitOptions &\n  SettingsServiceInitOptions &\n  ApiServiceInitOptions &\n  CipherFileUploadServiceInitOptions &\n  I18nServiceInitOptions &\n  SearchServiceInitOptions &\n  StateServiceInitOptions &\n  EncryptServiceInitOptions &\n  ConfigServiceInitOptions;\n\nexport function cipherServiceFactory(\n  cache: { cipherService?: AbstractCipherService } & CachedServices,\n  opts: CipherServiceInitOptions\n): Promise<AbstractCipherService> {\n  return factory(\n    cache,\n    \"cipherService\",\n    opts,\n    async () =>\n      new CipherService(\n        await cryptoServiceFactory(cache, opts),\n        await settingsServiceFactory(cache, opts),\n        await apiServiceFactory(cache, opts),\n        await i18nServiceFactory(cache, opts),\n        await searchServiceFactory(cache, opts),\n        await stateServiceFactory(cache, opts),\n        await encryptServiceFactory(cache, opts),\n        await cipherFileUploadServiceFactory(cache, opts),\n        await configServiceFactory(cache, opts)\n      )\n  );\n}\n","import { SearchService as AbstractSearchService } from \"@bitwarden/common/abstractions/search.service\";\nimport { SearchService } from \"@bitwarden/common/services/search.service\";\n\nimport {\n  CachedServices,\n  factory,\n  FactoryOptions,\n} from \"../../platform/background/service-factories/factory-options\";\nimport {\n  i18nServiceFactory,\n  I18nServiceInitOptions,\n} from \"../../platform/background/service-factories/i18n-service.factory\";\nimport {\n  logServiceFactory,\n  LogServiceInitOptions,\n} from \"../../platform/background/service-factories/log-service.factory\";\n\ntype SearchServiceFactoryOptions = FactoryOptions;\n\nexport type SearchServiceInitOptions = SearchServiceFactoryOptions &\n  LogServiceInitOptions &\n  I18nServiceInitOptions;\n\nexport function searchServiceFactory(\n  cache: { searchService?: AbstractSearchService } & CachedServices,\n  opts: SearchServiceInitOptions\n): Promise<AbstractSearchService> {\n  return factory(\n    cache,\n    \"searchService\",\n    opts,\n    async () =>\n      new SearchService(await logServiceFactory(cache, opts), await i18nServiceFactory(cache, opts))\n  );\n}\n","export const TYPE_CHECK = {\n  FUNCTION: \"function\",\n  NUMBER: \"number\",\n  STRING: \"string\",\n} as const;\n\nexport const EVENTS = {\n  CHANGE: \"change\",\n  INPUT: \"input\",\n  KEYDOWN: \"keydown\",\n  KEYPRESS: \"keypress\",\n  KEYUP: \"keyup\",\n} as const;\n\n/* Context Menu item Ids */\nexport const AUTOFILL_CARD_ID = \"autofill-card\";\nexport const AUTOFILL_ID = \"autofill\";\nexport const AUTOFILL_IDENTITY_ID = \"autofill-identity\";\nexport const COPY_IDENTIFIER_ID = \"copy-identifier\";\nexport const COPY_PASSWORD_ID = \"copy-password\";\nexport const COPY_USERNAME_ID = \"copy-username\";\nexport const COPY_VERIFICATIONCODE_ID = \"copy-totp\";\nexport const CREATE_CARD_ID = \"create-card\";\nexport const CREATE_IDENTITY_ID = \"create-identity\";\nexport const CREATE_LOGIN_ID = \"create-login\";\nexport const GENERATE_PASSWORD_ID = \"generate-password\";\nexport const NOOP_COMMAND_SUFFIX = \"noop\";\nexport const ROOT_ID = \"root\";\nexport const SEPARATOR_ID = \"separator\";\n","import { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { StateFactory } from \"@bitwarden/common/platform/factories/state-factory\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { GlobalState } from \"@bitwarden/common/platform/models/domain/global-state\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { Account } from \"../../models/account\";\nimport { CachedServices } from \"../../platform/background/service-factories/factory-options\";\nimport {\n  i18nServiceFactory,\n  I18nServiceInitOptions,\n} from \"../../platform/background/service-factories/i18n-service.factory\";\nimport {\n  logServiceFactory,\n  LogServiceInitOptions,\n} from \"../../platform/background/service-factories/log-service.factory\";\nimport {\n  stateServiceFactory,\n  StateServiceInitOptions,\n} from \"../../platform/background/service-factories/state-service.factory\";\nimport { BrowserStateService } from \"../../platform/services/abstractions/browser-state.service\";\nimport {\n  AUTOFILL_CARD_ID,\n  AUTOFILL_ID,\n  AUTOFILL_IDENTITY_ID,\n  COPY_IDENTIFIER_ID,\n  COPY_PASSWORD_ID,\n  COPY_USERNAME_ID,\n  COPY_VERIFICATIONCODE_ID,\n  CREATE_CARD_ID,\n  CREATE_IDENTITY_ID,\n  CREATE_LOGIN_ID,\n  GENERATE_PASSWORD_ID,\n  NOOP_COMMAND_SUFFIX,\n  ROOT_ID,\n  SEPARATOR_ID,\n} from \"../constants\";\n\nexport class MainContextMenuHandler {\n  private initRunning = false;\n\n  create: (options: chrome.contextMenus.CreateProperties) => Promise<void>;\n\n  constructor(\n    private stateService: BrowserStateService,\n    private i18nService: I18nService,\n    private logService: LogService\n  ) {\n    if (chrome.contextMenus) {\n      this.create = (options) => {\n        return new Promise<void>((resolve, reject) => {\n          chrome.contextMenus.create(options, () => {\n            if (chrome.runtime.lastError) {\n              reject(chrome.runtime.lastError);\n              return;\n            }\n            resolve();\n          });\n        });\n      };\n    } else {\n      this.create = (_options) => Promise.resolve();\n    }\n  }\n\n  static async mv3Create(cachedServices: CachedServices) {\n    const stateFactory = new StateFactory(GlobalState, Account);\n    const serviceOptions: StateServiceInitOptions & I18nServiceInitOptions & LogServiceInitOptions =\n      {\n        cryptoFunctionServiceOptions: {\n          win: self,\n        },\n        encryptServiceOptions: {\n          logMacFailures: false,\n        },\n        i18nServiceOptions: {\n          systemLanguage: chrome.i18n.getUILanguage(),\n        },\n        logServiceOptions: {\n          isDev: false,\n        },\n        stateServiceOptions: {\n          stateFactory: stateFactory,\n        },\n      };\n\n    return new MainContextMenuHandler(\n      await stateServiceFactory(cachedServices, serviceOptions),\n      await i18nServiceFactory(cachedServices, serviceOptions),\n      await logServiceFactory(cachedServices, serviceOptions)\n    );\n  }\n\n  /**\n   *\n   * @returns a boolean showing whether or not items were created\n   */\n  async init(): Promise<boolean> {\n    const menuDisabled = await this.stateService.getDisableContextMenuItem();\n    if (menuDisabled) {\n      await MainContextMenuHandler.removeAll();\n      return false;\n    }\n\n    if (this.initRunning) {\n      return true;\n    }\n    this.initRunning = true;\n\n    try {\n      const create = async (options: Omit<chrome.contextMenus.CreateProperties, \"contexts\">) => {\n        await this.create({ ...options, contexts: [\"all\"] });\n      };\n\n      await create({\n        id: ROOT_ID,\n        title: \"Bitwarden\",\n      });\n\n      await create({\n        id: AUTOFILL_ID,\n        parentId: ROOT_ID,\n        title: this.i18nService.t(\"autoFillLogin\"),\n      });\n\n      await create({\n        id: COPY_USERNAME_ID,\n        parentId: ROOT_ID,\n        title: this.i18nService.t(\"copyUsername\"),\n      });\n\n      await create({\n        id: COPY_PASSWORD_ID,\n        parentId: ROOT_ID,\n        title: this.i18nService.t(\"copyPassword\"),\n      });\n\n      if (await this.stateService.getCanAccessPremium()) {\n        await create({\n          id: COPY_VERIFICATIONCODE_ID,\n          parentId: ROOT_ID,\n          title: this.i18nService.t(\"copyVerificationCode\"),\n        });\n      }\n\n      await create({\n        id: SEPARATOR_ID + 1,\n        type: \"separator\",\n        parentId: ROOT_ID,\n      });\n\n      await create({\n        id: AUTOFILL_IDENTITY_ID,\n        parentId: ROOT_ID,\n        title: this.i18nService.t(\"autoFillIdentity\"),\n      });\n\n      await create({\n        id: AUTOFILL_CARD_ID,\n        parentId: ROOT_ID,\n        title: this.i18nService.t(\"autoFillCard\"),\n      });\n\n      await create({\n        id: SEPARATOR_ID + 2,\n        type: \"separator\",\n        parentId: ROOT_ID,\n      });\n\n      await create({\n        id: GENERATE_PASSWORD_ID,\n        parentId: ROOT_ID,\n        title: this.i18nService.t(\"generatePasswordCopied\"),\n      });\n\n      await create({\n        id: COPY_IDENTIFIER_ID,\n        parentId: ROOT_ID,\n        title: this.i18nService.t(\"copyElementIdentifier\"),\n      });\n    } catch (error) {\n      this.logService.warning(error.message);\n    } finally {\n      this.initRunning = false;\n    }\n    return true;\n  }\n\n  static async removeAll() {\n    return new Promise<void>((resolve, reject) => {\n      chrome.contextMenus.removeAll(() => {\n        if (chrome.runtime.lastError) {\n          reject(chrome.runtime.lastError);\n          return;\n        }\n\n        resolve();\n      });\n    });\n  }\n\n  static remove(menuItemId: string) {\n    return new Promise<void>((resolve, reject) => {\n      chrome.contextMenus.remove(menuItemId, () => {\n        if (chrome.runtime.lastError) {\n          reject(chrome.runtime.lastError);\n          return;\n        }\n\n        resolve();\n      });\n    });\n  }\n\n  async loadOptions(title: string, optionId: string, cipher?: CipherView) {\n    try {\n      const sanitizedTitle = MainContextMenuHandler.sanitizeContextMenuTitle(title);\n\n      const createChildItem = async (parentId: string) => {\n        const menuItemId = `${parentId}_${optionId}`;\n\n        return await this.create({\n          type: \"normal\",\n          id: menuItemId,\n          parentId,\n          title: sanitizedTitle,\n          contexts: [\"all\"],\n        });\n      };\n\n      if (\n        !cipher ||\n        (cipher.type === CipherType.Login && !Utils.isNullOrEmpty(cipher.login?.password))\n      ) {\n        await createChildItem(AUTOFILL_ID);\n\n        if (cipher?.viewPassword ?? true) {\n          await createChildItem(COPY_PASSWORD_ID);\n        }\n      }\n\n      if (\n        !cipher ||\n        (cipher.type === CipherType.Login && !Utils.isNullOrEmpty(cipher.login?.username))\n      ) {\n        await createChildItem(COPY_USERNAME_ID);\n      }\n\n      const canAccessPremium = await this.stateService.getCanAccessPremium();\n      if (canAccessPremium && (!cipher || !Utils.isNullOrEmpty(cipher.login?.totp))) {\n        await createChildItem(COPY_VERIFICATIONCODE_ID);\n      }\n\n      if ((!cipher || cipher.type === CipherType.Card) && optionId !== CREATE_LOGIN_ID) {\n        await createChildItem(AUTOFILL_CARD_ID);\n      }\n\n      if ((!cipher || cipher.type === CipherType.Identity) && optionId !== CREATE_LOGIN_ID) {\n        await createChildItem(AUTOFILL_IDENTITY_ID);\n      }\n    } catch (error) {\n      this.logService.warning(error.message);\n    }\n  }\n\n  static sanitizeContextMenuTitle(title: string): string {\n    return title.replace(/&/g, \"&&\");\n  }\n\n  async noAccess() {\n    if (await this.init()) {\n      const authed = await this.stateService.getIsAuthenticated();\n      await this.loadOptions(\n        this.i18nService.t(authed ? \"unlockVaultMenu\" : \"loginToVaultMenu\"),\n        NOOP_COMMAND_SUFFIX\n      );\n    }\n  }\n\n  async noCards() {\n    await this.create({\n      id: `${AUTOFILL_CARD_ID}_NOTICE`,\n      enabled: false,\n      parentId: AUTOFILL_CARD_ID,\n      title: this.i18nService.t(\"noCards\"),\n      type: \"normal\",\n    });\n\n    await this.create({\n      id: `${AUTOFILL_CARD_ID}_${SEPARATOR_ID}`,\n      parentId: AUTOFILL_CARD_ID,\n      type: \"separator\",\n    });\n\n    await this.create({\n      id: `${AUTOFILL_CARD_ID}_${CREATE_CARD_ID}`,\n      parentId: AUTOFILL_CARD_ID,\n      title: this.i18nService.t(\"addCardMenu\"),\n      type: \"normal\",\n    });\n  }\n\n  async noIdentities() {\n    await this.create({\n      id: `${AUTOFILL_IDENTITY_ID}_NOTICE`,\n      enabled: false,\n      parentId: AUTOFILL_IDENTITY_ID,\n      title: this.i18nService.t(\"noIdentities\"),\n      type: \"normal\",\n    });\n\n    await this.create({\n      id: `${AUTOFILL_IDENTITY_ID}_${SEPARATOR_ID}`,\n      parentId: AUTOFILL_IDENTITY_ID,\n      type: \"separator\",\n    });\n\n    await this.create({\n      id: `${AUTOFILL_IDENTITY_ID}_${CREATE_IDENTITY_ID}`,\n      parentId: AUTOFILL_IDENTITY_ID,\n      title: this.i18nService.t(\"addIdentityMenu\"),\n      type: \"normal\",\n    });\n  }\n\n  async noLogins() {\n    await this.create({\n      id: `${AUTOFILL_ID}_NOTICE`,\n      enabled: false,\n      parentId: AUTOFILL_ID,\n      title: this.i18nService.t(\"noMatchingLogins\"),\n      type: \"normal\",\n    });\n\n    await this.create({\n      id: `${AUTOFILL_ID}_${SEPARATOR_ID}` + 1,\n      parentId: AUTOFILL_ID,\n      type: \"separator\",\n    });\n\n    await this.loadOptions(this.i18nService.t(\"addLoginMenu\"), CREATE_LOGIN_ID);\n  }\n}\n","import { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { StateFactory } from \"@bitwarden/common/platform/factories/state-factory\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { GlobalState } from \"@bitwarden/common/platform/models/domain/global-state\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport {\n  authServiceFactory,\n  AuthServiceInitOptions,\n} from \"../../auth/background/service-factories/auth-service.factory\";\nimport { Account } from \"../../models/account\";\nimport { CachedServices } from \"../../platform/background/service-factories/factory-options\";\nimport { BrowserApi } from \"../../platform/browser/browser-api\";\nimport {\n  cipherServiceFactory,\n  CipherServiceInitOptions,\n} from \"../../vault/background/service_factories/cipher-service.factory\";\nimport { AutofillCipherTypeId } from \"../types\";\n\nimport { MainContextMenuHandler } from \"./main-context-menu-handler\";\n\nconst NOT_IMPLEMENTED = (..._args: unknown[]) => Promise.resolve();\n\nconst LISTENED_TO_COMMANDS = [\n  \"loggedIn\",\n  \"unlocked\",\n  \"syncCompleted\",\n  \"bgUpdateContextMenu\",\n  \"editedCipher\",\n  \"addedCipher\",\n  \"deletedCipher\",\n];\n\nexport class CipherContextMenuHandler {\n  constructor(\n    private mainContextMenuHandler: MainContextMenuHandler,\n    private authService: AuthService,\n    private cipherService: CipherService\n  ) {}\n\n  static async create(cachedServices: CachedServices) {\n    const stateFactory = new StateFactory(GlobalState, Account);\n    const serviceOptions: AuthServiceInitOptions & CipherServiceInitOptions = {\n      apiServiceOptions: {\n        logoutCallback: NOT_IMPLEMENTED,\n      },\n      cryptoFunctionServiceOptions: {\n        win: self,\n      },\n      encryptServiceOptions: {\n        logMacFailures: false,\n      },\n      i18nServiceOptions: {\n        systemLanguage: chrome.i18n.getUILanguage(),\n      },\n      keyConnectorServiceOptions: {\n        logoutCallback: NOT_IMPLEMENTED,\n      },\n      logServiceOptions: {\n        isDev: false,\n      },\n      platformUtilsServiceOptions: {\n        biometricCallback: () => Promise.resolve(false),\n        clipboardWriteCallback: NOT_IMPLEMENTED,\n        win: self,\n      },\n      stateServiceOptions: {\n        stateFactory: stateFactory,\n      },\n    };\n    return new CipherContextMenuHandler(\n      await MainContextMenuHandler.mv3Create(cachedServices),\n      await authServiceFactory(cachedServices, serviceOptions),\n      await cipherServiceFactory(cachedServices, serviceOptions)\n    );\n  }\n\n  static async windowsOnFocusChangedListener(windowId: number, serviceCache: CachedServices) {\n    const cipherContextMenuHandler = await CipherContextMenuHandler.create(serviceCache);\n    const tab = await BrowserApi.getTabFromCurrentWindow();\n    await cipherContextMenuHandler.update(tab?.url);\n  }\n\n  static async tabsOnActivatedListener(\n    activeInfo: chrome.tabs.TabActiveInfo,\n    serviceCache: CachedServices\n  ) {\n    const cipherContextMenuHandler = await CipherContextMenuHandler.create(serviceCache);\n    const tab = await BrowserApi.getTab(activeInfo.tabId);\n    await cipherContextMenuHandler.update(tab.url);\n  }\n\n  static async tabsOnReplacedListener(\n    addedTabId: number,\n    removedTabId: number,\n    serviceCache: CachedServices\n  ) {\n    const cipherContextMenuHandler = await CipherContextMenuHandler.create(serviceCache);\n    const tab = await BrowserApi.getTab(addedTabId);\n    await cipherContextMenuHandler.update(tab.url);\n  }\n\n  static async tabsOnUpdatedListener(\n    tabId: number,\n    changeInfo: chrome.tabs.TabChangeInfo,\n    tab: chrome.tabs.Tab,\n    serviceCache: CachedServices\n  ) {\n    if (changeInfo.status !== \"complete\") {\n      return;\n    }\n    const cipherContextMenuHandler = await CipherContextMenuHandler.create(serviceCache);\n    await cipherContextMenuHandler.update(tab.url);\n  }\n\n  static async messageListener(\n    message: { command: string },\n    sender: chrome.runtime.MessageSender,\n    cachedServices: CachedServices\n  ) {\n    if (!CipherContextMenuHandler.shouldListen(message)) {\n      return;\n    }\n    const cipherContextMenuHandler = await CipherContextMenuHandler.create(cachedServices);\n    await cipherContextMenuHandler.messageListener(message);\n  }\n\n  private static shouldListen(message: { command: string }) {\n    return LISTENED_TO_COMMANDS.includes(message.command);\n  }\n\n  async messageListener(message: { command: string }, sender?: chrome.runtime.MessageSender) {\n    if (!CipherContextMenuHandler.shouldListen(message)) {\n      return;\n    }\n\n    const activeTabs = await BrowserApi.getActiveTabs();\n    if (!activeTabs || activeTabs.length === 0) {\n      return;\n    }\n\n    await this.update(activeTabs[0].url);\n  }\n\n  async update(url: string) {\n    const authStatus = await this.authService.getAuthStatus();\n    await MainContextMenuHandler.removeAll();\n    if (authStatus !== AuthenticationStatus.Unlocked) {\n      // Should I pass in the auth status or even have two separate methods for this\n      // on MainContextMenuHandler\n      await this.mainContextMenuHandler.noAccess();\n      return;\n    }\n\n    const menuEnabled = await this.mainContextMenuHandler.init();\n    if (!menuEnabled) {\n      return;\n    }\n\n    const ciphers = await this.cipherService.getAllDecryptedForUrl(url, [\n      CipherType.Card,\n      CipherType.Identity,\n    ]);\n    ciphers.sort((a, b) => this.cipherService.sortCiphersByLastUsedThenName(a, b));\n\n    const groupedCiphers: Record<AutofillCipherTypeId, CipherView[]> = ciphers.reduce(\n      (ciphersByType, cipher) => {\n        if (!cipher?.type) {\n          return ciphersByType;\n        }\n\n        const existingCiphersOfType = ciphersByType[cipher.type as AutofillCipherTypeId] || [];\n\n        return {\n          ...ciphersByType,\n          [cipher.type]: [...existingCiphersOfType, cipher],\n        };\n      },\n      {\n        [CipherType.Login]: [],\n        [CipherType.Card]: [],\n        [CipherType.Identity]: [],\n      }\n    );\n\n    if (groupedCiphers[CipherType.Login].length === 0) {\n      await this.mainContextMenuHandler.noLogins();\n    }\n\n    if (groupedCiphers[CipherType.Identity].length === 0) {\n      await this.mainContextMenuHandler.noIdentities();\n    }\n\n    if (groupedCiphers[CipherType.Card].length === 0) {\n      await this.mainContextMenuHandler.noCards();\n    }\n\n    for (const cipher of ciphers) {\n      await this.updateForCipher(cipher);\n    }\n  }\n\n  private async updateForCipher(cipher: CipherView) {\n    if (\n      cipher == null ||\n      !new Set([CipherType.Login, CipherType.Card, CipherType.Identity]).has(cipher.type)\n    ) {\n      return;\n    }\n\n    let title = cipher.name;\n\n    if (cipher.type === CipherType.Login && !Utils.isNullOrEmpty(title) && cipher.login?.username) {\n      title += ` (${cipher.login.username})`;\n    }\n\n    if (cipher.type === CipherType.Card && cipher.card?.subTitle) {\n      title += ` ${cipher.card.subTitle}`;\n    }\n\n    await this.mainContextMenuHandler.loadOptions(title, cipher.id, cipher);\n  }\n}\n","import { TotpService as AbstractTotpService } from \"@bitwarden/common/abstractions/totp.service\";\nimport { TotpService } from \"@bitwarden/common/services/totp.service\";\n\nimport {\n  CryptoFunctionServiceInitOptions,\n  cryptoFunctionServiceFactory,\n} from \"../../../platform/background/service-factories/crypto-function-service.factory\";\nimport {\n  FactoryOptions,\n  CachedServices,\n  factory,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport {\n  LogServiceInitOptions,\n  logServiceFactory,\n} from \"../../../platform/background/service-factories/log-service.factory\";\n\ntype TotpServiceOptions = FactoryOptions;\n\nexport type TotpServiceInitOptions = TotpServiceOptions &\n  CryptoFunctionServiceInitOptions &\n  LogServiceInitOptions;\n\nexport function totpServiceFactory(\n  cache: { totpService?: AbstractTotpService } & CachedServices,\n  opts: TotpServiceInitOptions\n): Promise<AbstractTotpService> {\n  return factory(\n    cache,\n    \"totpService\",\n    opts,\n    async () =>\n      new TotpService(\n        await cryptoFunctionServiceFactory(cache, opts),\n        await logServiceFactory(cache, opts)\n      )\n  );\n}\n","import { UserVerificationService as AbstractUserVerificationService } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification.service.abstraction\";\nimport { UserVerificationService } from \"@bitwarden/common/auth/services/user-verification/user-verification.service\";\n\nimport {\n  CryptoServiceInitOptions,\n  cryptoServiceFactory,\n} from \"../../../platform/background/service-factories/crypto-service.factory\";\nimport {\n  FactoryOptions,\n  CachedServices,\n  factory,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport {\n  I18nServiceInitOptions,\n  i18nServiceFactory,\n} from \"../../../platform/background/service-factories/i18n-service.factory\";\nimport {\n  StateServiceInitOptions,\n  stateServiceFactory,\n} from \"../../../platform/background/service-factories/state-service.factory\";\n\nimport {\n  UserVerificationApiServiceInitOptions,\n  userVerificationApiServiceFactory,\n} from \"./user-verification-api-service.factory\";\n\ntype UserVerificationServiceFactoryOptions = FactoryOptions;\n\nexport type UserVerificationServiceInitOptions = UserVerificationServiceFactoryOptions &\n  StateServiceInitOptions &\n  CryptoServiceInitOptions &\n  I18nServiceInitOptions &\n  UserVerificationApiServiceInitOptions;\n\nexport function userVerificationServiceFactory(\n  cache: { userVerificationService?: AbstractUserVerificationService } & CachedServices,\n  opts: UserVerificationServiceInitOptions\n): Promise<AbstractUserVerificationService> {\n  return factory(\n    cache,\n    \"userVerificationService\",\n    opts,\n    async () =>\n      new UserVerificationService(\n        await stateServiceFactory(cache, opts),\n        await cryptoServiceFactory(cache, opts),\n        await i18nServiceFactory(cache, opts),\n        await userVerificationApiServiceFactory(cache, opts)\n      )\n  );\n}\n","import { UserVerificationApiServiceAbstraction } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification-api.service.abstraction\";\nimport { UserVerificationApiService } from \"@bitwarden/common/auth/services/user-verification/user-verification-api.service\";\n\nimport {\n  ApiServiceInitOptions,\n  apiServiceFactory,\n} from \"../../../platform/background/service-factories/api-service.factory\";\nimport {\n  FactoryOptions,\n  CachedServices,\n  factory,\n} from \"../../../platform/background/service-factories/factory-options\";\n\ntype UserVerificationApiServiceFactoryOptions = FactoryOptions;\n\nexport type UserVerificationApiServiceInitOptions = UserVerificationApiServiceFactoryOptions &\n  ApiServiceInitOptions;\n\nexport function userVerificationApiServiceFactory(\n  cache: { userVerificationApiService?: UserVerificationApiServiceAbstraction } & CachedServices,\n  opts: UserVerificationApiServiceInitOptions\n): Promise<UserVerificationApiServiceAbstraction> {\n  return factory(\n    cache,\n    \"userVerificationApiService\",\n    opts,\n    async () => new UserVerificationApiService(await apiServiceFactory(cache, opts))\n  );\n}\n","import { EventCollectionService as AbstractEventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { EventCollectionService } from \"@bitwarden/common/services/event/event-collection.service\";\n\nimport {\n  organizationServiceFactory,\n  OrganizationServiceInitOptions,\n} from \"../../admin-console/background/service-factories/organization-service.factory\";\nimport {\n  FactoryOptions,\n  CachedServices,\n  factory,\n} from \"../../platform/background/service-factories/factory-options\";\nimport {\n  stateServiceFactory,\n  StateServiceInitOptions,\n} from \"../../platform/background/service-factories/state-service.factory\";\nimport {\n  cipherServiceFactory,\n  CipherServiceInitOptions,\n} from \"../../vault/background/service_factories/cipher-service.factory\";\n\nimport {\n  eventUploadServiceFactory,\n  EventUploadServiceInitOptions,\n} from \"./event-upload-service.factory\";\n\ntype EventCollectionServiceOptions = FactoryOptions;\n\nexport type EventCollectionServiceInitOptions = EventCollectionServiceOptions &\n  CipherServiceInitOptions &\n  StateServiceInitOptions &\n  OrganizationServiceInitOptions &\n  EventUploadServiceInitOptions;\n\nexport function eventCollectionServiceFactory(\n  cache: { eventCollectionService?: AbstractEventCollectionService } & CachedServices,\n  opts: EventCollectionServiceInitOptions\n): Promise<AbstractEventCollectionService> {\n  return factory(\n    cache,\n    \"eventCollectionService\",\n    opts,\n    async () =>\n      new EventCollectionService(\n        await cipherServiceFactory(cache, opts),\n        await stateServiceFactory(cache, opts),\n        await organizationServiceFactory(cache, opts),\n        await eventUploadServiceFactory(cache, opts)\n      )\n  );\n}\n","import { EventUploadService as AbstractEventUploadService } from \"@bitwarden/common/abstractions/event/event-upload.service\";\nimport { EventUploadService } from \"@bitwarden/common/services/event/event-upload.service\";\n\nimport {\n  ApiServiceInitOptions,\n  apiServiceFactory,\n} from \"../../platform/background/service-factories/api-service.factory\";\nimport {\n  FactoryOptions,\n  CachedServices,\n  factory,\n} from \"../../platform/background/service-factories/factory-options\";\nimport {\n  logServiceFactory,\n  LogServiceInitOptions,\n} from \"../../platform/background/service-factories/log-service.factory\";\nimport {\n  stateServiceFactory,\n  StateServiceInitOptions,\n} from \"../../platform/background/service-factories/state-service.factory\";\n\ntype EventUploadServiceOptions = FactoryOptions;\n\nexport type EventUploadServiceInitOptions = EventUploadServiceOptions &\n  ApiServiceInitOptions &\n  StateServiceInitOptions &\n  LogServiceInitOptions;\n\nexport function eventUploadServiceFactory(\n  cache: { eventUploadService?: AbstractEventUploadService } & CachedServices,\n  opts: EventUploadServiceInitOptions\n): Promise<AbstractEventUploadService> {\n  return factory(\n    cache,\n    \"eventUploadService\",\n    opts,\n    async () =>\n      new EventUploadService(\n        await apiServiceFactory(cache, opts),\n        await stateServiceFactory(cache, opts),\n        await logServiceFactory(cache, opts)\n      )\n  );\n}\n","import {\n  PasswordGenerationService,\n  PasswordGenerationServiceAbstraction,\n} from \"@bitwarden/common/tools/generator/password\";\n\nimport {\n  policyServiceFactory,\n  PolicyServiceInitOptions,\n} from \"../../../admin-console/background/service-factories/policy-service.factory\";\nimport {\n  CryptoServiceInitOptions,\n  cryptoServiceFactory,\n} from \"../../../platform/background/service-factories/crypto-service.factory\";\nimport {\n  CachedServices,\n  factory,\n  FactoryOptions,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport {\n  stateServiceFactory,\n  StateServiceInitOptions,\n} from \"../../../platform/background/service-factories/state-service.factory\";\n\ntype PasswordGenerationServiceFactoryOptions = FactoryOptions;\n\nexport type PasswordGenerationServiceInitOptions = PasswordGenerationServiceFactoryOptions &\n  CryptoServiceInitOptions &\n  PolicyServiceInitOptions &\n  StateServiceInitOptions;\n\nexport function passwordGenerationServiceFactory(\n  cache: { passwordGenerationService?: PasswordGenerationServiceAbstraction } & CachedServices,\n  opts: PasswordGenerationServiceInitOptions\n): Promise<PasswordGenerationServiceAbstraction> {\n  return factory(\n    cache,\n    \"passwordGenerationService\",\n    opts,\n    async () =>\n      new PasswordGenerationService(\n        await cryptoServiceFactory(cache, opts),\n        await policyServiceFactory(cache, opts),\n        await stateServiceFactory(cache, opts)\n      )\n  );\n}\n","// String values affect code flow in autofill.ts and must not be changed\nexport type FillScriptActions = \"click_on_opid\" | \"focus_by_opid\" | \"fill_by_opid\";\n\nexport type FillScript = [action: FillScriptActions, opid: string, value?: string];\n\nexport type AutofillScriptProperties = {\n  delay_between_operations?: number;\n};\n\nexport type AutofillInsertActions = {\n  fill_by_opid: ({ opid, value }: { opid: string; value: string }) => void;\n  click_on_opid: ({ opid }: { opid: string }) => void;\n  focus_by_opid: ({ opid }: { opid: string }) => void;\n};\n\nexport default class AutofillScript {\n  script: FillScript[] = [];\n  properties: AutofillScriptProperties = {};\n  metadata: any = {}; // Unused, not written or read\n  autosubmit: any = null; // Appears to be unused, read but not written\n  savedUrls: string[];\n  untrustedIframe: boolean;\n  itemType: string; // Appears to be unused, read but not written\n}\n","export class AutoFillConstants {\n  static readonly UsernameFieldNames: string[] = [\n    // English\n    \"username\",\n    \"user name\",\n    \"email\",\n    \"email address\",\n    \"e-mail\",\n    \"e-mail address\",\n    \"userid\",\n    \"user id\",\n    \"customer id\",\n    \"login id\",\n    // German\n    \"benutzername\",\n    \"benutzer name\",\n    \"email adresse\",\n    \"e-mail adresse\",\n    \"benutzerid\",\n    \"benutzer id\",\n  ];\n\n  static readonly TotpFieldNames: string[] = [\n    \"totp\",\n    \"2fa\",\n    \"mfa\",\n    \"totpcode\",\n    \"2facode\",\n    \"mfacode\",\n    \"twofactor\",\n    \"twofactorcode\",\n  ];\n\n  static readonly PasswordFieldIgnoreList: string[] = [\n    \"onetimepassword\",\n    \"captcha\",\n    \"findanything\",\n    \"forgot\",\n  ];\n\n  static readonly ExcludedAutofillTypes: string[] = [\n    \"radio\",\n    \"checkbox\",\n    \"hidden\",\n    \"file\",\n    \"button\",\n    \"image\",\n    \"reset\",\n    \"search\",\n  ];\n}\n\nexport class CreditCardAutoFillConstants {\n  static readonly CardAttributes: string[] = [\n    \"autoCompleteType\",\n    \"data-stripe\",\n    \"htmlName\",\n    \"htmlID\",\n    \"label-tag\",\n    \"placeholder\",\n    \"label-left\",\n    \"label-top\",\n    \"data-recurly\",\n  ];\n\n  static readonly CardAttributesExtended: string[] = [\n    ...CreditCardAutoFillConstants.CardAttributes,\n    \"label-right\",\n  ];\n\n  static readonly CardHolderFieldNames: string[] = [\n    \"cc-name\",\n    \"card-name\",\n    \"cardholder-name\",\n    \"cardholder\",\n    \"name\",\n    \"nom\",\n  ];\n\n  static readonly CardHolderFieldNameValues: string[] = [\n    \"cc-name\",\n    \"card-name\",\n    \"cardholder-name\",\n    \"cardholder\",\n    \"tbName\",\n  ];\n\n  static readonly CardNumberFieldNames: string[] = [\n    \"cc-number\",\n    \"cc-num\",\n    \"card-number\",\n    \"card-num\",\n    \"number\",\n    \"cc\",\n    \"cc-no\",\n    \"card-no\",\n    \"credit-card\",\n    \"numero-carte\",\n    \"carte\",\n    \"carte-credit\",\n    \"num-carte\",\n    \"cb-num\",\n  ];\n\n  static readonly CardNumberFieldNameValues: string[] = [\n    \"cc-number\",\n    \"cc-num\",\n    \"card-number\",\n    \"card-num\",\n    \"cc-no\",\n    \"card-no\",\n    \"numero-carte\",\n    \"num-carte\",\n    \"cb-num\",\n  ];\n\n  static readonly CardExpiryFieldNames: string[] = [\n    \"cc-exp\",\n    \"card-exp\",\n    \"cc-expiration\",\n    \"card-expiration\",\n    \"cc-ex\",\n    \"card-ex\",\n    \"card-expire\",\n    \"card-expiry\",\n    \"validite\",\n    \"expiration\",\n    \"expiry\",\n    \"mm-yy\",\n    \"mm-yyyy\",\n    \"yy-mm\",\n    \"yyyy-mm\",\n    \"expiration-date\",\n    \"payment-card-expiration\",\n    \"payment-cc-date\",\n  ];\n\n  static readonly CardExpiryFieldNameValues: string[] = [\n    \"mm-yy\",\n    \"mm-yyyy\",\n    \"yy-mm\",\n    \"yyyy-mm\",\n    \"expiration-date\",\n    \"payment-card-expiration\",\n  ];\n\n  static readonly ExpiryMonthFieldNames: string[] = [\n    \"exp-month\",\n    \"cc-exp-month\",\n    \"cc-month\",\n    \"card-month\",\n    \"cc-mo\",\n    \"card-mo\",\n    \"exp-mo\",\n    \"card-exp-mo\",\n    \"cc-exp-mo\",\n    \"card-expiration-month\",\n    \"expiration-month\",\n    \"cc-mm\",\n    \"cc-m\",\n    \"card-mm\",\n    \"card-m\",\n    \"card-exp-mm\",\n    \"cc-exp-mm\",\n    \"exp-mm\",\n    \"exp-m\",\n    \"expire-month\",\n    \"expire-mo\",\n    \"expiry-month\",\n    \"expiry-mo\",\n    \"card-expire-month\",\n    \"card-expire-mo\",\n    \"card-expiry-month\",\n    \"card-expiry-mo\",\n    \"mois-validite\",\n    \"mois-expiration\",\n    \"m-validite\",\n    \"m-expiration\",\n    \"expiry-date-field-month\",\n    \"expiration-date-month\",\n    \"expiration-date-mm\",\n    \"exp-mon\",\n    \"validity-mo\",\n    \"exp-date-mo\",\n    \"cb-date-mois\",\n    \"date-m\",\n  ];\n\n  static readonly ExpiryYearFieldNames: string[] = [\n    \"exp-year\",\n    \"cc-exp-year\",\n    \"cc-year\",\n    \"card-year\",\n    \"cc-yr\",\n    \"card-yr\",\n    \"exp-yr\",\n    \"card-exp-yr\",\n    \"cc-exp-yr\",\n    \"card-expiration-year\",\n    \"expiration-year\",\n    \"cc-yy\",\n    \"cc-y\",\n    \"card-yy\",\n    \"card-y\",\n    \"card-exp-yy\",\n    \"cc-exp-yy\",\n    \"exp-yy\",\n    \"exp-y\",\n    \"cc-yyyy\",\n    \"card-yyyy\",\n    \"card-exp-yyyy\",\n    \"cc-exp-yyyy\",\n    \"expire-year\",\n    \"expire-yr\",\n    \"expiry-year\",\n    \"expiry-yr\",\n    \"card-expire-year\",\n    \"card-expire-yr\",\n    \"card-expiry-year\",\n    \"card-expiry-yr\",\n    \"an-validite\",\n    \"an-expiration\",\n    \"annee-validite\",\n    \"annee-expiration\",\n    \"expiry-date-field-year\",\n    \"expiration-date-year\",\n    \"cb-date-ann\",\n    \"expiration-date-yy\",\n    \"expiration-date-yyyy\",\n    \"validity-year\",\n    \"exp-date-year\",\n    \"date-y\",\n  ];\n\n  static readonly CVVFieldNames: string[] = [\n    \"cvv\",\n    \"cvc\",\n    \"cvv2\",\n    \"cc-csc\",\n    \"cc-cvv\",\n    \"card-csc\",\n    \"card-cvv\",\n    \"cvd\",\n    \"cid\",\n    \"cvc2\",\n    \"cnv\",\n    \"cvn2\",\n    \"cc-code\",\n    \"card-code\",\n    \"code-securite\",\n    \"security-code\",\n    \"crypto\",\n    \"card-verif\",\n    \"verification-code\",\n    \"csc\",\n    \"ccv\",\n  ];\n\n  static readonly CardBrandFieldNames: string[] = [\n    \"cc-type\",\n    \"card-type\",\n    \"card-brand\",\n    \"cc-brand\",\n    \"cb-type\",\n  ];\n\n  // Each index represents a language. These three arrays should all be the same length.\n  // 0: English, 1: Danish, 2: German/Dutch, 3: French/Spanish/Italian, 4: Russian, 5: Portuguese\n  static readonly MonthAbbr = [\"mm\", \"mm\", \"mm\", \"mm\", \"мм\", \"mm\"];\n  static readonly YearAbbrShort = [\"yy\", \"åå\", \"jj\", \"aa\", \"гг\", \"rr\"];\n  static readonly YearAbbrLong = [\"yyyy\", \"åååå\", \"jjjj\", \"aa\", \"гггг\", \"rrrr\"];\n}\n\nexport class IdentityAutoFillConstants {\n  static readonly IdentityAttributes: string[] = [\n    \"autoCompleteType\",\n    \"data-stripe\",\n    \"htmlName\",\n    \"htmlID\",\n    \"label-tag\",\n    \"placeholder\",\n    \"label-left\",\n    \"label-top\",\n    \"data-recurly\",\n  ];\n\n  static readonly FullNameFieldNames: string[] = [\"name\", \"full-name\", \"your-name\"];\n\n  static readonly FullNameFieldNameValues: string[] = [\"full-name\", \"your-name\"];\n\n  static readonly TitleFieldNames: string[] = [\n    \"honorific-prefix\",\n    \"prefix\",\n    \"title\",\n    // German\n    \"anrede\",\n  ];\n\n  static readonly FirstnameFieldNames: string[] = [\n    // English\n    \"f-name\",\n    \"first-name\",\n    \"given-name\",\n    \"first-n\",\n    // German\n    \"vorname\",\n  ];\n\n  static readonly MiddlenameFieldNames: string[] = [\n    \"m-name\",\n    \"middle-name\",\n    \"additional-name\",\n    \"middle-initial\",\n    \"middle-n\",\n    \"middle-i\",\n  ];\n\n  static readonly LastnameFieldNames: string[] = [\n    // English\n    \"l-name\",\n    \"last-name\",\n    \"s-name\",\n    \"surname\",\n    \"family-name\",\n    \"family-n\",\n    \"last-n\",\n    // German\n    \"nachname\",\n    \"familienname\",\n  ];\n\n  static readonly EmailFieldNames: string[] = [\"e-mail\", \"email-address\"];\n\n  static readonly AddressFieldNames: string[] = [\n    \"address\",\n    \"street-address\",\n    \"addr\",\n    \"street\",\n    \"mailing-addr\",\n    \"billing-addr\",\n    \"mail-addr\",\n    \"bill-addr\",\n    // German\n    \"strasse\",\n    \"adresse\",\n  ];\n\n  static readonly AddressFieldNameValues: string[] = [\n    \"mailing-addr\",\n    \"billing-addr\",\n    \"mail-addr\",\n    \"bill-addr\",\n  ];\n\n  static readonly Address1FieldNames: string[] = [\n    \"address-1\",\n    \"address-line-1\",\n    \"addr-1\",\n    \"street-1\",\n  ];\n\n  static readonly Address2FieldNames: string[] = [\n    \"address-2\",\n    \"address-line-2\",\n    \"addr-2\",\n    \"street-2\",\n  ];\n\n  static readonly Address3FieldNames: string[] = [\n    \"address-3\",\n    \"address-line-3\",\n    \"addr-3\",\n    \"street-3\",\n  ];\n\n  static readonly PostalCodeFieldNames: string[] = [\n    \"postal\",\n    \"zip\",\n    \"zip2\",\n    \"zip-code\",\n    \"postal-code\",\n    \"post-code\",\n    \"address-zip\",\n    \"address-postal\",\n    \"address-code\",\n    \"address-postal-code\",\n    \"address-zip-code\",\n    // German\n    \"plz\",\n    \"postleitzahl\",\n  ];\n\n  static readonly CityFieldNames: string[] = [\n    \"city\",\n    \"town\",\n    \"address-level-2\",\n    \"address-city\",\n    \"address-town\",\n    // German\n    \"ort\",\n    \"stadt\",\n    \"wohnort\",\n  ];\n\n  static readonly StateFieldNames: string[] = [\n    \"state\",\n    \"province\",\n    \"provence\",\n    \"address-level-1\",\n    \"address-state\",\n    \"address-province\",\n    // German\n    \"bundesland\",\n  ];\n\n  static readonly CountryFieldNames: string[] = [\n    \"country\",\n    \"country-code\",\n    \"country-name\",\n    \"address-country\",\n    \"address-country-name\",\n    \"address-country-code\",\n    // German\n    \"land\",\n  ];\n\n  static readonly PhoneFieldNames: string[] = [\n    \"phone\",\n    \"mobile\",\n    \"mobile-phone\",\n    \"tel\",\n    \"telephone\",\n    \"phone-number\",\n    // German\n    \"telefon\",\n    \"telefonnummer\",\n    \"mobil\",\n    \"handy\",\n  ];\n\n  static readonly UserNameFieldNames: string[] = [\"user-name\", \"user-id\", \"screen-name\"];\n\n  static readonly CompanyFieldNames: string[] = [\n    \"company\",\n    \"company-name\",\n    \"organization\",\n    \"organization-name\",\n    // German\n    \"firma\",\n  ];\n\n  static readonly IsoCountries: { [id: string]: string } = {\n    afghanistan: \"AF\",\n    \"aland islands\": \"AX\",\n    albania: \"AL\",\n    algeria: \"DZ\",\n    \"american samoa\": \"AS\",\n    andorra: \"AD\",\n    angola: \"AO\",\n    anguilla: \"AI\",\n    antarctica: \"AQ\",\n    \"antigua and barbuda\": \"AG\",\n    argentina: \"AR\",\n    armenia: \"AM\",\n    aruba: \"AW\",\n    australia: \"AU\",\n    austria: \"AT\",\n    azerbaijan: \"AZ\",\n    bahamas: \"BS\",\n    bahrain: \"BH\",\n    bangladesh: \"BD\",\n    barbados: \"BB\",\n    belarus: \"BY\",\n    belgium: \"BE\",\n    belize: \"BZ\",\n    benin: \"BJ\",\n    bermuda: \"BM\",\n    bhutan: \"BT\",\n    bolivia: \"BO\",\n    \"bosnia and herzegovina\": \"BA\",\n    botswana: \"BW\",\n    \"bouvet island\": \"BV\",\n    brazil: \"BR\",\n    \"british indian ocean territory\": \"IO\",\n    \"brunei darussalam\": \"BN\",\n    bulgaria: \"BG\",\n    \"burkina faso\": \"BF\",\n    burundi: \"BI\",\n    cambodia: \"KH\",\n    cameroon: \"CM\",\n    canada: \"CA\",\n    \"cape verde\": \"CV\",\n    \"cayman islands\": \"KY\",\n    \"central african republic\": \"CF\",\n    chad: \"TD\",\n    chile: \"CL\",\n    china: \"CN\",\n    \"christmas island\": \"CX\",\n    \"cocos (keeling) islands\": \"CC\",\n    colombia: \"CO\",\n    comoros: \"KM\",\n    congo: \"CG\",\n    \"congo, democratic republic\": \"CD\",\n    \"cook islands\": \"CK\",\n    \"costa rica\": \"CR\",\n    \"cote d'ivoire\": \"CI\",\n    croatia: \"HR\",\n    cuba: \"CU\",\n    cyprus: \"CY\",\n    \"czech republic\": \"CZ\",\n    denmark: \"DK\",\n    djibouti: \"DJ\",\n    dominica: \"DM\",\n    \"dominican republic\": \"DO\",\n    ecuador: \"EC\",\n    egypt: \"EG\",\n    \"el salvador\": \"SV\",\n    \"equatorial guinea\": \"GQ\",\n    eritrea: \"ER\",\n    estonia: \"EE\",\n    ethiopia: \"ET\",\n    \"falkland islands\": \"FK\",\n    \"faroe islands\": \"FO\",\n    fiji: \"FJ\",\n    finland: \"FI\",\n    france: \"FR\",\n    \"french guiana\": \"GF\",\n    \"french polynesia\": \"PF\",\n    \"french southern territories\": \"TF\",\n    gabon: \"GA\",\n    gambia: \"GM\",\n    georgia: \"GE\",\n    germany: \"DE\",\n    ghana: \"GH\",\n    gibraltar: \"GI\",\n    greece: \"GR\",\n    greenland: \"GL\",\n    grenada: \"GD\",\n    guadeloupe: \"GP\",\n    guam: \"GU\",\n    guatemala: \"GT\",\n    guernsey: \"GG\",\n    guinea: \"GN\",\n    \"guinea-bissau\": \"GW\",\n    guyana: \"GY\",\n    haiti: \"HT\",\n    \"heard island & mcdonald islands\": \"HM\",\n    \"holy see (vatican city state)\": \"VA\",\n    honduras: \"HN\",\n    \"hong kong\": \"HK\",\n    hungary: \"HU\",\n    iceland: \"IS\",\n    india: \"IN\",\n    indonesia: \"ID\",\n    \"iran, islamic republic of\": \"IR\",\n    iraq: \"IQ\",\n    ireland: \"IE\",\n    \"isle of man\": \"IM\",\n    israel: \"IL\",\n    italy: \"IT\",\n    jamaica: \"JM\",\n    japan: \"JP\",\n    jersey: \"JE\",\n    jordan: \"JO\",\n    kazakhstan: \"KZ\",\n    kenya: \"KE\",\n    kiribati: \"KI\",\n    \"republic of korea\": \"KR\",\n    \"south korea\": \"KR\",\n    \"democratic people's republic of korea\": \"KP\",\n    \"north korea\": \"KP\",\n    kuwait: \"KW\",\n    kyrgyzstan: \"KG\",\n    \"lao people's democratic republic\": \"LA\",\n    latvia: \"LV\",\n    lebanon: \"LB\",\n    lesotho: \"LS\",\n    liberia: \"LR\",\n    \"libyan arab jamahiriya\": \"LY\",\n    liechtenstein: \"LI\",\n    lithuania: \"LT\",\n    luxembourg: \"LU\",\n    macao: \"MO\",\n    macedonia: \"MK\",\n    madagascar: \"MG\",\n    malawi: \"MW\",\n    malaysia: \"MY\",\n    maldives: \"MV\",\n    mali: \"ML\",\n    malta: \"MT\",\n    \"marshall islands\": \"MH\",\n    martinique: \"MQ\",\n    mauritania: \"MR\",\n    mauritius: \"MU\",\n    mayotte: \"YT\",\n    mexico: \"MX\",\n    \"micronesia, federated states of\": \"FM\",\n    moldova: \"MD\",\n    monaco: \"MC\",\n    mongolia: \"MN\",\n    montenegro: \"ME\",\n    montserrat: \"MS\",\n    morocco: \"MA\",\n    mozambique: \"MZ\",\n    myanmar: \"MM\",\n    namibia: \"NA\",\n    nauru: \"NR\",\n    nepal: \"NP\",\n    netherlands: \"NL\",\n    \"netherlands antilles\": \"AN\",\n    \"new caledonia\": \"NC\",\n    \"new zealand\": \"NZ\",\n    nicaragua: \"NI\",\n    niger: \"NE\",\n    nigeria: \"NG\",\n    niue: \"NU\",\n    \"norfolk island\": \"NF\",\n    \"northern mariana islands\": \"MP\",\n    norway: \"NO\",\n    oman: \"OM\",\n    pakistan: \"PK\",\n    palau: \"PW\",\n    \"palestinian territory, occupied\": \"PS\",\n    panama: \"PA\",\n    \"papua new guinea\": \"PG\",\n    paraguay: \"PY\",\n    peru: \"PE\",\n    philippines: \"PH\",\n    pitcairn: \"PN\",\n    poland: \"PL\",\n    portugal: \"PT\",\n    \"puerto rico\": \"PR\",\n    qatar: \"QA\",\n    reunion: \"RE\",\n    romania: \"RO\",\n    \"russian federation\": \"RU\",\n    rwanda: \"RW\",\n    \"saint barthelemy\": \"BL\",\n    \"saint helena\": \"SH\",\n    \"saint kitts and nevis\": \"KN\",\n    \"saint lucia\": \"LC\",\n    \"saint martin\": \"MF\",\n    \"saint pierre and miquelon\": \"PM\",\n    \"saint vincent and grenadines\": \"VC\",\n    samoa: \"WS\",\n    \"san marino\": \"SM\",\n    \"sao tome and principe\": \"ST\",\n    \"saudi arabia\": \"SA\",\n    senegal: \"SN\",\n    serbia: \"RS\",\n    seychelles: \"SC\",\n    \"sierra leone\": \"SL\",\n    singapore: \"SG\",\n    slovakia: \"SK\",\n    slovenia: \"SI\",\n    \"solomon islands\": \"SB\",\n    somalia: \"SO\",\n    \"south africa\": \"ZA\",\n    \"south georgia and sandwich isl.\": \"GS\",\n    spain: \"ES\",\n    \"sri lanka\": \"LK\",\n    sudan: \"SD\",\n    suriname: \"SR\",\n    \"svalbard and jan mayen\": \"SJ\",\n    swaziland: \"SZ\",\n    sweden: \"SE\",\n    switzerland: \"CH\",\n    \"syrian arab republic\": \"SY\",\n    taiwan: \"TW\",\n    tajikistan: \"TJ\",\n    tanzania: \"TZ\",\n    thailand: \"TH\",\n    \"timor-leste\": \"TL\",\n    togo: \"TG\",\n    tokelau: \"TK\",\n    tonga: \"TO\",\n    \"trinidad and tobago\": \"TT\",\n    tunisia: \"TN\",\n    turkey: \"TR\",\n    turkmenistan: \"TM\",\n    \"turks and caicos islands\": \"TC\",\n    tuvalu: \"TV\",\n    uganda: \"UG\",\n    ukraine: \"UA\",\n    \"united arab emirates\": \"AE\",\n    \"united kingdom\": \"GB\",\n    \"united states\": \"US\",\n    \"united states outlying islands\": \"UM\",\n    uruguay: \"UY\",\n    uzbekistan: \"UZ\",\n    vanuatu: \"VU\",\n    venezuela: \"VE\",\n    vietnam: \"VN\",\n    \"virgin islands, british\": \"VG\",\n    \"virgin islands, u.s.\": \"VI\",\n    \"wallis and futuna\": \"WF\",\n    \"western sahara\": \"EH\",\n    yemen: \"YE\",\n    zambia: \"ZM\",\n    zimbabwe: \"ZW\",\n  };\n\n  static readonly IsoStates: { [id: string]: string } = {\n    alabama: \"AL\",\n    alaska: \"AK\",\n    \"american samoa\": \"AS\",\n    arizona: \"AZ\",\n    arkansas: \"AR\",\n    california: \"CA\",\n    colorado: \"CO\",\n    connecticut: \"CT\",\n    delaware: \"DE\",\n    \"district of columbia\": \"DC\",\n    \"federated states of micronesia\": \"FM\",\n    florida: \"FL\",\n    georgia: \"GA\",\n    guam: \"GU\",\n    hawaii: \"HI\",\n    idaho: \"ID\",\n    illinois: \"IL\",\n    indiana: \"IN\",\n    iowa: \"IA\",\n    kansas: \"KS\",\n    kentucky: \"KY\",\n    louisiana: \"LA\",\n    maine: \"ME\",\n    \"marshall islands\": \"MH\",\n    maryland: \"MD\",\n    massachusetts: \"MA\",\n    michigan: \"MI\",\n    minnesota: \"MN\",\n    mississippi: \"MS\",\n    missouri: \"MO\",\n    montana: \"MT\",\n    nebraska: \"NE\",\n    nevada: \"NV\",\n    \"new hampshire\": \"NH\",\n    \"new jersey\": \"NJ\",\n    \"new mexico\": \"NM\",\n    \"new york\": \"NY\",\n    \"north carolina\": \"NC\",\n    \"north dakota\": \"ND\",\n    \"northern mariana islands\": \"MP\",\n    ohio: \"OH\",\n    oklahoma: \"OK\",\n    oregon: \"OR\",\n    palau: \"PW\",\n    pennsylvania: \"PA\",\n    \"puerto rico\": \"PR\",\n    \"rhode island\": \"RI\",\n    \"south carolina\": \"SC\",\n    \"south dakota\": \"SD\",\n    tennessee: \"TN\",\n    texas: \"TX\",\n    utah: \"UT\",\n    vermont: \"VT\",\n    \"virgin islands\": \"VI\",\n    virginia: \"VA\",\n    washington: \"WA\",\n    \"west virginia\": \"WV\",\n    wisconsin: \"WI\",\n    wyoming: \"WY\",\n  };\n\n  static readonly IsoProvinces: { [id: string]: string } = {\n    alberta: \"AB\",\n    \"british columbia\": \"BC\",\n    manitoba: \"MB\",\n    \"new brunswick\": \"NB\",\n    \"newfoundland and labrador\": \"NL\",\n    \"nova scotia\": \"NS\",\n    ontario: \"ON\",\n    \"prince edward island\": \"PE\",\n    quebec: \"QC\",\n    saskatchewan: \"SK\",\n  };\n}\n","import { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { SettingsService } from \"@bitwarden/common/abstractions/settings.service\";\nimport { TotpService } from \"@bitwarden/common/abstractions/totp.service\";\nimport { UserVerificationService } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification.service.abstraction\";\nimport { EventType, FieldType, UriMatchType } from \"@bitwarden/common/enums\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\n\nimport { BrowserApi } from \"../../platform/browser/browser-api\";\nimport { BrowserStateService } from \"../../platform/services/abstractions/browser-state.service\";\nimport AutofillField from \"../models/autofill-field\";\nimport AutofillPageDetails from \"../models/autofill-page-details\";\nimport AutofillScript from \"../models/autofill-script\";\n\nimport {\n  AutoFillOptions,\n  AutofillService as AutofillServiceInterface,\n  FormData,\n  GenerateFillScriptOptions,\n  PageDetail,\n} from \"./abstractions/autofill.service\";\nimport {\n  AutoFillConstants,\n  CreditCardAutoFillConstants,\n  IdentityAutoFillConstants,\n} from \"./autofill-constants\";\n\nexport default class AutofillService implements AutofillServiceInterface {\n  constructor(\n    private cipherService: CipherService,\n    private stateService: BrowserStateService,\n    private totpService: TotpService,\n    private eventCollectionService: EventCollectionService,\n    private logService: LogService,\n    private settingsService: SettingsService,\n    private userVerificationService: UserVerificationService\n  ) {}\n\n  /**\n   * Injects the autofill scripts into the current tab and all frames\n   * found within the tab. Temporarily, will conditionally inject\n   * the refactor of the core autofill script if the feature flag\n   * is enabled.\n   * @param {chrome.runtime.MessageSender} sender\n   * @param {boolean} autofillV2\n   * @returns {Promise<void>}\n   */\n  async injectAutofillScripts(sender: chrome.runtime.MessageSender, autofillV2 = false) {\n    const mainAutofillScript = autofillV2 ? `autofill-init.js` : \"autofill.js\";\n\n    const injectedScripts = [\n      mainAutofillScript,\n      \"autofiller.js\",\n      \"notificationBar.js\",\n      \"contextMenuHandler.js\",\n    ];\n\n    for (const injectedScript of injectedScripts) {\n      await BrowserApi.executeScriptInTab(sender.tab.id, {\n        file: `content/${injectedScript}`,\n        frameId: sender.frameId,\n        runAt: \"document_start\",\n      });\n    }\n  }\n\n  /**\n   * Gets all forms with password fields and formats the data\n   * for both forms and password input elements.\n   * @param {AutofillPageDetails} pageDetails\n   * @returns {FormData[]}\n   */\n  getFormsWithPasswordFields(pageDetails: AutofillPageDetails): FormData[] {\n    const formData: FormData[] = [];\n\n    const passwordFields = AutofillService.loadPasswordFields(pageDetails, true, true, false, true);\n\n    // TODO: this logic prevents multi-step account creation forms (that just start with email)\n    // from being passed on to the notification bar content script - even if autofill.js found the form and email field.\n    // ex: https://signup.live.com/\n    if (passwordFields.length === 0) {\n      return formData;\n    }\n\n    // Back up check for cases where there are several password fields detected,\n    // but they are not all part of the form b/c of bad HTML\n\n    // gather password fields that don't have an enclosing form\n    const passwordFieldsWithoutForm = passwordFields.filter((pf) => pf.form === undefined);\n    const formKeys = Object.keys(pageDetails.forms);\n    const formCount = formKeys.length;\n\n    // if we have 3 password fields and only 1 form, and there are password fields that are not within a form\n    // but there is at least one password field within the form, then most likely this is a poorly built password change form\n    if (passwordFields.length === 3 && formCount == 1 && passwordFieldsWithoutForm.length > 0) {\n      // Only one form so get the singular form key\n      const soloFormKey = formKeys[0];\n\n      const atLeastOnePasswordFieldWithinSoloForm =\n        passwordFields.filter((pf) => pf.form !== null && pf.form === soloFormKey).length > 0;\n\n      if (atLeastOnePasswordFieldWithinSoloForm) {\n        // We have a form with at least one password field,\n        // so let's make an assumption that the password fields without a form are actually part of this form\n        passwordFieldsWithoutForm.forEach((pf) => {\n          pf.form = soloFormKey;\n        });\n      }\n    }\n\n    for (const formKey in pageDetails.forms) {\n      // eslint-disable-next-line\n      if (!pageDetails.forms.hasOwnProperty(formKey)) {\n        continue;\n      }\n\n      const formPasswordFields = passwordFields.filter((pf) => formKey === pf.form);\n      if (formPasswordFields.length > 0) {\n        let uf = this.findUsernameField(pageDetails, formPasswordFields[0], false, false, false);\n        if (uf == null) {\n          // not able to find any viewable username fields. maybe there are some \"hidden\" ones?\n          uf = this.findUsernameField(pageDetails, formPasswordFields[0], true, true, false);\n        }\n        formData.push({\n          form: pageDetails.forms[formKey],\n          password: formPasswordFields[0],\n          username: uf,\n          passwords: formPasswordFields,\n        });\n      }\n    }\n\n    return formData;\n  }\n\n  /**\n   * Autofill a given tab with a given login item\n   * @param {AutoFillOptions} options Instructions about the autofill operation, including tab and login item\n   * @returns {Promise<string | null>} The TOTP code of the successfully autofilled login, if any\n   */\n  async doAutoFill(options: AutoFillOptions): Promise<string | null> {\n    const tab = options.tab;\n    if (!tab || !options.cipher || !options.pageDetails || !options.pageDetails.length) {\n      throw new Error(\"Nothing to auto-fill.\");\n    }\n\n    let totp: string | null = null;\n\n    const canAccessPremium = await this.stateService.getCanAccessPremium();\n    const defaultUriMatch = (await this.stateService.getDefaultUriMatch()) ?? UriMatchType.Domain;\n\n    if (!canAccessPremium) {\n      options.cipher.login.totp = null;\n    }\n\n    let didAutofill = false;\n    await Promise.all(\n      options.pageDetails.map(async (pd) => {\n        // make sure we're still on correct tab\n        if (pd.tab.id !== tab.id || pd.tab.url !== tab.url) {\n          return;\n        }\n\n        const fillScript = await this.generateFillScript(pd.details, {\n          skipUsernameOnlyFill: options.skipUsernameOnlyFill || false,\n          onlyEmptyFields: options.onlyEmptyFields || false,\n          onlyVisibleFields: options.onlyVisibleFields || false,\n          fillNewPassword: options.fillNewPassword || false,\n          allowTotpAutofill: options.allowTotpAutofill || false,\n          cipher: options.cipher,\n          tabUrl: tab.url,\n          defaultUriMatch: defaultUriMatch,\n        });\n\n        if (!fillScript || !fillScript.script || !fillScript.script.length) {\n          return;\n        }\n\n        if (\n          fillScript.untrustedIframe &&\n          options.allowUntrustedIframe != undefined &&\n          !options.allowUntrustedIframe\n        ) {\n          this.logService.info(\"Auto-fill on page load was blocked due to an untrusted iframe.\");\n          return;\n        }\n\n        // Add a small delay between operations\n        fillScript.properties.delay_between_operations = 20;\n\n        didAutofill = true;\n        if (!options.skipLastUsed) {\n          this.cipherService.updateLastUsedDate(options.cipher.id);\n        }\n\n        BrowserApi.tabSendMessage(\n          tab,\n          {\n            command: \"fillForm\",\n            fillScript: fillScript,\n            url: tab.url,\n          },\n          { frameId: pd.frameId }\n        );\n\n        // Skip getting the TOTP code for clipboard in these cases\n        if (\n          options.cipher.type !== CipherType.Login ||\n          totp !== null ||\n          !options.cipher.login.totp ||\n          (!canAccessPremium && !options.cipher.organizationUseTotp)\n        ) {\n          return;\n        }\n\n        totp = await this.stateService.getDisableAutoTotpCopy().then((disabled) => {\n          if (!disabled) {\n            return this.totpService.getCode(options.cipher.login.totp);\n          }\n          return null;\n        });\n      })\n    );\n\n    if (didAutofill) {\n      this.eventCollectionService.collect(EventType.Cipher_ClientAutofilled, options.cipher.id);\n      if (totp !== null) {\n        return totp;\n      } else {\n        return null;\n      }\n    } else {\n      throw new Error(\"Did not auto-fill.\");\n    }\n  }\n\n  /**\n   * Autofill the specified tab with the next login item from the cache\n   * @param {PageDetail[]} pageDetails The data scraped from the page\n   * @param {chrome.tabs.Tab} tab The tab to be autofilled\n   * @param {boolean} fromCommand Whether the autofill is triggered by a keyboard shortcut (`true`) or autofill on page load (`false`)\n   * @returns {Promise<string | null>} The TOTP code of the successfully autofilled login, if any\n   */\n  async doAutoFillOnTab(\n    pageDetails: PageDetail[],\n    tab: chrome.tabs.Tab,\n    fromCommand: boolean\n  ): Promise<string | null> {\n    let cipher: CipherView;\n    if (fromCommand) {\n      cipher = await this.cipherService.getNextCipherForUrl(tab.url);\n    } else {\n      const lastLaunchedCipher = await this.cipherService.getLastLaunchedForUrl(tab.url, true);\n      if (\n        lastLaunchedCipher &&\n        Date.now().valueOf() - lastLaunchedCipher.localData?.lastLaunched?.valueOf() < 30000\n      ) {\n        cipher = lastLaunchedCipher;\n      } else {\n        cipher = await this.cipherService.getLastUsedForUrl(tab.url, true);\n      }\n    }\n\n    if (cipher == null || (cipher.reprompt === CipherRepromptType.Password && !fromCommand)) {\n      return null;\n    }\n\n    if (\n      cipher.reprompt === CipherRepromptType.Password &&\n      // If the master password has is not available, reprompt will error\n      (await this.userVerificationService.hasMasterPasswordAndMasterKeyHash())\n    ) {\n      if (fromCommand) {\n        this.cipherService.updateLastUsedIndexForUrl(tab.url);\n      }\n\n      await BrowserApi.tabSendMessageData(tab, \"passwordReprompt\", {\n        cipherId: cipher.id,\n        action: \"autofill\",\n      });\n\n      return null;\n    }\n\n    const totpCode = await this.doAutoFill({\n      tab: tab,\n      cipher: cipher,\n      pageDetails: pageDetails,\n      skipLastUsed: !fromCommand,\n      skipUsernameOnlyFill: !fromCommand,\n      onlyEmptyFields: !fromCommand,\n      onlyVisibleFields: !fromCommand,\n      fillNewPassword: fromCommand,\n      allowUntrustedIframe: fromCommand,\n      allowTotpAutofill: fromCommand,\n    });\n\n    // Update last used index as autofill has succeeded\n    if (fromCommand) {\n      this.cipherService.updateLastUsedIndexForUrl(tab.url);\n    }\n\n    return totpCode;\n  }\n\n  /**\n   * Autofill the active tab with the next cipher from the cache\n   * @param {PageDetail[]} pageDetails The data scraped from the page\n   * @param {boolean} fromCommand Whether the autofill is triggered by a keyboard shortcut (`true`) or autofill on page load (`false`)\n   * @returns {Promise<string | null>} The TOTP code of the successfully autofilled login, if any\n   */\n  async doAutoFillActiveTab(\n    pageDetails: PageDetail[],\n    fromCommand: boolean,\n    cipherType?: CipherType\n  ): Promise<string | null> {\n    if (!pageDetails[0]?.details?.fields?.length) {\n      return null;\n    }\n\n    const tab = await this.getActiveTab();\n\n    if (!tab || !tab.url) {\n      return null;\n    }\n\n    if (!cipherType || cipherType === CipherType.Login) {\n      return await this.doAutoFillOnTab(pageDetails, tab, fromCommand);\n    }\n\n    // Cipher is a non-login type\n    const cipher: CipherView = (\n      (await this.cipherService.getAllDecryptedForUrl(tab.url, [cipherType])) || []\n    ).find(({ type }) => type === cipherType);\n\n    if (!cipher || cipher.reprompt !== CipherRepromptType.None) {\n      return null;\n    }\n\n    return await this.doAutoFill({\n      tab: tab,\n      cipher: cipher,\n      pageDetails: pageDetails,\n      skipLastUsed: !fromCommand,\n      skipUsernameOnlyFill: !fromCommand,\n      onlyEmptyFields: !fromCommand,\n      onlyVisibleFields: !fromCommand,\n      fillNewPassword: false,\n      allowUntrustedIframe: fromCommand,\n      allowTotpAutofill: false,\n    });\n  }\n\n  /**\n   * Gets the active tab from the current window.\n   * Throws an error if no tab is found.\n   * @returns {Promise<chrome.tabs.Tab>}\n   * @private\n   */\n  private async getActiveTab(): Promise<chrome.tabs.Tab> {\n    const tab = await BrowserApi.getTabFromCurrentWindow();\n    if (!tab) {\n      throw new Error(\"No tab found.\");\n    }\n\n    return tab;\n  }\n\n  /**\n   * Generates the autofill script for the specified page details and cipher.\n   * @param {AutofillPageDetails} pageDetails\n   * @param {GenerateFillScriptOptions} options\n   * @returns {Promise<AutofillScript | null>}\n   * @private\n   */\n  private async generateFillScript(\n    pageDetails: AutofillPageDetails,\n    options: GenerateFillScriptOptions\n  ): Promise<AutofillScript | null> {\n    if (!pageDetails || !options.cipher) {\n      return null;\n    }\n\n    let fillScript = new AutofillScript();\n    const filledFields: { [id: string]: AutofillField } = {};\n    const fields = options.cipher.fields;\n\n    if (fields && fields.length) {\n      const fieldNames: string[] = [];\n\n      fields.forEach((f) => {\n        if (AutofillService.hasValue(f.name)) {\n          fieldNames.push(f.name.toLowerCase());\n        }\n      });\n\n      pageDetails.fields.forEach((field) => {\n        // eslint-disable-next-line\n        if (filledFields.hasOwnProperty(field.opid)) {\n          return;\n        }\n\n        if (!field.viewable && field.tagName !== \"span\") {\n          return;\n        }\n\n        const matchingIndex = this.findMatchingFieldIndex(field, fieldNames);\n        if (matchingIndex > -1) {\n          const matchingField: FieldView = fields[matchingIndex];\n          let val: string;\n          if (matchingField.type === FieldType.Linked) {\n            // Assumption: Linked Field is not being used to autofill a boolean value\n            val = options.cipher.linkedFieldValue(matchingField.linkedId) as string;\n          } else {\n            val = matchingField.value;\n            if (val == null && matchingField.type === FieldType.Boolean) {\n              val = \"false\";\n            }\n          }\n\n          filledFields[field.opid] = field;\n          AutofillService.fillByOpid(fillScript, field, val);\n        }\n      });\n    }\n\n    switch (options.cipher.type) {\n      case CipherType.Login:\n        fillScript = await this.generateLoginFillScript(\n          fillScript,\n          pageDetails,\n          filledFields,\n          options\n        );\n        break;\n      case CipherType.Card:\n        fillScript = this.generateCardFillScript(fillScript, pageDetails, filledFields, options);\n        break;\n      case CipherType.Identity:\n        fillScript = this.generateIdentityFillScript(\n          fillScript,\n          pageDetails,\n          filledFields,\n          options\n        );\n        break;\n      default:\n        return null;\n    }\n\n    return fillScript;\n  }\n\n  /**\n   * Generates the autofill script for the specified page details and login cipher item.\n   * @param {AutofillScript} fillScript\n   * @param {AutofillPageDetails} pageDetails\n   * @param {{[p: string]: AutofillField}} filledFields\n   * @param {GenerateFillScriptOptions} options\n   * @returns {Promise<AutofillScript | null>}\n   * @private\n   */\n  private async generateLoginFillScript(\n    fillScript: AutofillScript,\n    pageDetails: AutofillPageDetails,\n    filledFields: { [id: string]: AutofillField },\n    options: GenerateFillScriptOptions\n  ): Promise<AutofillScript | null> {\n    if (!options.cipher.login) {\n      return null;\n    }\n\n    const passwords: AutofillField[] = [];\n    const usernames: AutofillField[] = [];\n    const totps: AutofillField[] = [];\n    let pf: AutofillField = null;\n    let username: AutofillField = null;\n    let totp: AutofillField = null;\n    const login = options.cipher.login;\n    fillScript.savedUrls =\n      login?.uris?.filter((u) => u.match != UriMatchType.Never).map((u) => u.uri) ?? [];\n\n    fillScript.untrustedIframe = this.inUntrustedIframe(pageDetails.url, options);\n\n    let passwordFields = AutofillService.loadPasswordFields(\n      pageDetails,\n      false,\n      false,\n      options.onlyEmptyFields,\n      options.fillNewPassword\n    );\n    if (!passwordFields.length && !options.onlyVisibleFields) {\n      // not able to find any viewable password fields. maybe there are some \"hidden\" ones?\n      passwordFields = AutofillService.loadPasswordFields(\n        pageDetails,\n        true,\n        true,\n        options.onlyEmptyFields,\n        options.fillNewPassword\n      );\n    }\n\n    for (const formKey in pageDetails.forms) {\n      // eslint-disable-next-line\n      if (!pageDetails.forms.hasOwnProperty(formKey)) {\n        continue;\n      }\n\n      passwordFields.forEach((passField) => {\n        pf = passField;\n        passwords.push(pf);\n\n        if (login.username) {\n          username = this.findUsernameField(pageDetails, pf, false, false, false);\n\n          if (!username && !options.onlyVisibleFields) {\n            // not able to find any viewable username fields. maybe there are some \"hidden\" ones?\n            username = this.findUsernameField(pageDetails, pf, true, true, false);\n          }\n\n          if (username) {\n            usernames.push(username);\n          }\n        }\n\n        if (options.allowTotpAutofill && login.totp) {\n          totp = this.findTotpField(pageDetails, pf, false, false, false);\n\n          if (!totp && !options.onlyVisibleFields) {\n            // not able to find any viewable totp fields. maybe there are some \"hidden\" ones?\n            totp = this.findTotpField(pageDetails, pf, true, true, false);\n          }\n\n          if (totp) {\n            totps.push(totp);\n          }\n        }\n      });\n    }\n\n    if (passwordFields.length && !passwords.length) {\n      // The page does not have any forms with password fields. Use the first password field on the page and the\n      // input field just before it as the username.\n\n      pf = passwordFields[0];\n      passwords.push(pf);\n\n      if (login.username && pf.elementNumber > 0) {\n        username = this.findUsernameField(pageDetails, pf, false, false, true);\n\n        if (!username && !options.onlyVisibleFields) {\n          // not able to find any viewable username fields. maybe there are some \"hidden\" ones?\n          username = this.findUsernameField(pageDetails, pf, true, true, true);\n        }\n\n        if (username) {\n          usernames.push(username);\n        }\n      }\n\n      if (options.allowTotpAutofill && login.totp && pf.elementNumber > 0) {\n        totp = this.findTotpField(pageDetails, pf, false, false, true);\n\n        if (!totp && !options.onlyVisibleFields) {\n          // not able to find any viewable username fields. maybe there are some \"hidden\" ones?\n          totp = this.findTotpField(pageDetails, pf, true, true, true);\n        }\n\n        if (totp) {\n          totps.push(totp);\n        }\n      }\n    }\n\n    if (!passwordFields.length) {\n      // No password fields on this page. Let's try to just fuzzy fill the username.\n      pageDetails.fields.forEach((f) => {\n        if (\n          !options.skipUsernameOnlyFill &&\n          f.viewable &&\n          (f.type === \"text\" || f.type === \"email\" || f.type === \"tel\") &&\n          AutofillService.fieldIsFuzzyMatch(f, AutoFillConstants.UsernameFieldNames)\n        ) {\n          usernames.push(f);\n        }\n\n        if (\n          options.allowTotpAutofill &&\n          f.viewable &&\n          (f.type === \"text\" || f.type === \"number\") &&\n          (AutofillService.fieldIsFuzzyMatch(f, AutoFillConstants.TotpFieldNames) ||\n            f.autoCompleteType === \"one-time-code\")\n        ) {\n          totps.push(f);\n        }\n      });\n    }\n\n    usernames.forEach((u) => {\n      // eslint-disable-next-line\n      if (filledFields.hasOwnProperty(u.opid)) {\n        return;\n      }\n\n      filledFields[u.opid] = u;\n      AutofillService.fillByOpid(fillScript, u, login.username);\n    });\n\n    passwords.forEach((p) => {\n      // eslint-disable-next-line\n      if (filledFields.hasOwnProperty(p.opid)) {\n        return;\n      }\n\n      filledFields[p.opid] = p;\n      AutofillService.fillByOpid(fillScript, p, login.password);\n    });\n\n    if (options.allowTotpAutofill) {\n      await Promise.all(\n        totps.map(async (t) => {\n          if (Object.prototype.hasOwnProperty.call(filledFields, t.opid)) {\n            return;\n          }\n\n          filledFields[t.opid] = t;\n          const totpValue = await this.totpService.getCode(login.totp);\n          AutofillService.fillByOpid(fillScript, t, totpValue);\n        })\n      );\n    }\n\n    fillScript = AutofillService.setFillScriptForFocus(filledFields, fillScript);\n    return fillScript;\n  }\n\n  /**\n   * Generates the autofill script for the specified page details and credit card cipher item.\n   * @param {AutofillScript} fillScript\n   * @param {AutofillPageDetails} pageDetails\n   * @param {{[p: string]: AutofillField}} filledFields\n   * @param {GenerateFillScriptOptions} options\n   * @returns {AutofillScript|null}\n   * @private\n   */\n  private generateCardFillScript(\n    fillScript: AutofillScript,\n    pageDetails: AutofillPageDetails,\n    filledFields: { [id: string]: AutofillField },\n    options: GenerateFillScriptOptions\n  ): AutofillScript | null {\n    if (!options.cipher.card) {\n      return null;\n    }\n\n    const fillFields: { [id: string]: AutofillField } = {};\n\n    pageDetails.fields.forEach((f) => {\n      if (AutofillService.forCustomFieldsOnly(f)) {\n        return;\n      }\n\n      if (this.isExcludedType(f.type, AutoFillConstants.ExcludedAutofillTypes)) {\n        return;\n      }\n\n      for (let i = 0; i < CreditCardAutoFillConstants.CardAttributes.length; i++) {\n        const attr = CreditCardAutoFillConstants.CardAttributes[i];\n        // eslint-disable-next-line\n        if (!f.hasOwnProperty(attr) || !f[attr] || !f.viewable) {\n          continue;\n        }\n\n        // ref https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\n        // ref https://developers.google.com/web/fundamentals/design-and-ux/input/forms/\n        if (\n          !fillFields.cardholderName &&\n          AutofillService.isFieldMatch(\n            f[attr],\n            CreditCardAutoFillConstants.CardHolderFieldNames,\n            CreditCardAutoFillConstants.CardHolderFieldNameValues\n          )\n        ) {\n          fillFields.cardholderName = f;\n          break;\n        } else if (\n          !fillFields.number &&\n          AutofillService.isFieldMatch(\n            f[attr],\n            CreditCardAutoFillConstants.CardNumberFieldNames,\n            CreditCardAutoFillConstants.CardNumberFieldNameValues\n          )\n        ) {\n          fillFields.number = f;\n          break;\n        } else if (\n          !fillFields.exp &&\n          AutofillService.isFieldMatch(\n            f[attr],\n            CreditCardAutoFillConstants.CardExpiryFieldNames,\n            CreditCardAutoFillConstants.CardExpiryFieldNameValues\n          )\n        ) {\n          fillFields.exp = f;\n          break;\n        } else if (\n          !fillFields.expMonth &&\n          AutofillService.isFieldMatch(f[attr], CreditCardAutoFillConstants.ExpiryMonthFieldNames)\n        ) {\n          fillFields.expMonth = f;\n          break;\n        } else if (\n          !fillFields.expYear &&\n          AutofillService.isFieldMatch(f[attr], CreditCardAutoFillConstants.ExpiryYearFieldNames)\n        ) {\n          fillFields.expYear = f;\n          break;\n        } else if (\n          !fillFields.code &&\n          AutofillService.isFieldMatch(f[attr], CreditCardAutoFillConstants.CVVFieldNames)\n        ) {\n          fillFields.code = f;\n          break;\n        } else if (\n          !fillFields.brand &&\n          AutofillService.isFieldMatch(f[attr], CreditCardAutoFillConstants.CardBrandFieldNames)\n        ) {\n          fillFields.brand = f;\n          break;\n        }\n      }\n    });\n\n    const card = options.cipher.card;\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"cardholderName\");\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"number\");\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"code\");\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"brand\");\n\n    if (fillFields.expMonth && AutofillService.hasValue(card.expMonth)) {\n      let expMonth: string = card.expMonth;\n\n      if (fillFields.expMonth.selectInfo && fillFields.expMonth.selectInfo.options) {\n        let index: number = null;\n        const siOptions = fillFields.expMonth.selectInfo.options;\n        if (siOptions.length === 12) {\n          index = parseInt(card.expMonth, null) - 1;\n        } else if (siOptions.length === 13) {\n          if (\n            siOptions[0][0] != null &&\n            siOptions[0][0] !== \"\" &&\n            (siOptions[12][0] == null || siOptions[12][0] === \"\")\n          ) {\n            index = parseInt(card.expMonth, null) - 1;\n          } else {\n            index = parseInt(card.expMonth, null);\n          }\n        }\n\n        if (index != null) {\n          const option = siOptions[index];\n          if (option.length > 1) {\n            expMonth = option[1];\n          }\n        }\n      } else if (\n        (this.fieldAttrsContain(fillFields.expMonth, \"mm\") ||\n          fillFields.expMonth.maxLength === 2) &&\n        expMonth.length === 1\n      ) {\n        expMonth = \"0\" + expMonth;\n      }\n\n      filledFields[fillFields.expMonth.opid] = fillFields.expMonth;\n      AutofillService.fillByOpid(fillScript, fillFields.expMonth, expMonth);\n    }\n\n    if (fillFields.expYear && AutofillService.hasValue(card.expYear)) {\n      let expYear: string = card.expYear;\n      if (fillFields.expYear.selectInfo && fillFields.expYear.selectInfo.options) {\n        for (let i = 0; i < fillFields.expYear.selectInfo.options.length; i++) {\n          const o: [string, string] = fillFields.expYear.selectInfo.options[i];\n          if (o[0] === card.expYear || o[1] === card.expYear) {\n            expYear = o[1];\n            break;\n          }\n          if (\n            o[1].length === 2 &&\n            card.expYear.length === 4 &&\n            o[1] === card.expYear.substring(2)\n          ) {\n            expYear = o[1];\n            break;\n          }\n          const colonIndex = o[1].indexOf(\":\");\n          if (colonIndex > -1 && o[1].length > colonIndex + 1) {\n            const val = o[1].substring(colonIndex + 2);\n            if (val != null && val.trim() !== \"\" && val === card.expYear) {\n              expYear = o[1];\n              break;\n            }\n          }\n        }\n      } else if (\n        this.fieldAttrsContain(fillFields.expYear, \"yyyy\") ||\n        fillFields.expYear.maxLength === 4\n      ) {\n        if (expYear.length === 2) {\n          expYear = \"20\" + expYear;\n        }\n      } else if (\n        this.fieldAttrsContain(fillFields.expYear, \"yy\") ||\n        fillFields.expYear.maxLength === 2\n      ) {\n        if (expYear.length === 4) {\n          expYear = expYear.substr(2);\n        }\n      }\n\n      filledFields[fillFields.expYear.opid] = fillFields.expYear;\n      AutofillService.fillByOpid(fillScript, fillFields.expYear, expYear);\n    }\n\n    if (\n      fillFields.exp &&\n      AutofillService.hasValue(card.expMonth) &&\n      AutofillService.hasValue(card.expYear)\n    ) {\n      const fullMonth = (\"0\" + card.expMonth).slice(-2);\n\n      let fullYear: string = card.expYear;\n      let partYear: string = null;\n      if (fullYear.length === 2) {\n        partYear = fullYear;\n        fullYear = \"20\" + fullYear;\n      } else if (fullYear.length === 4) {\n        partYear = fullYear.substr(2, 2);\n      }\n\n      let exp: string = null;\n      for (let i = 0; i < CreditCardAutoFillConstants.MonthAbbr.length; i++) {\n        if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.YearAbbrLong[i]\n          )\n        ) {\n          exp = fullMonth + \"/\" + fullYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.YearAbbrShort[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = fullMonth + \"/\" + partYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrLong[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.MonthAbbr[i]\n          )\n        ) {\n          exp = fullYear + \"/\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrShort[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.MonthAbbr[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = partYear + \"/\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.YearAbbrLong[i]\n          )\n        ) {\n          exp = fullMonth + \"-\" + fullYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.YearAbbrShort[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = fullMonth + \"-\" + partYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrLong[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.MonthAbbr[i]\n          )\n        ) {\n          exp = fullYear + \"-\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrShort[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.MonthAbbr[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = partYear + \"-\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrLong[i] + CreditCardAutoFillConstants.MonthAbbr[i]\n          )\n        ) {\n          exp = fullYear + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrShort[i] + CreditCardAutoFillConstants.MonthAbbr[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = partYear + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] + CreditCardAutoFillConstants.YearAbbrLong[i]\n          )\n        ) {\n          exp = fullMonth + fullYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] + CreditCardAutoFillConstants.YearAbbrShort[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = fullMonth + partYear;\n        }\n\n        if (exp != null) {\n          break;\n        }\n      }\n\n      if (exp == null) {\n        exp = fullYear + \"-\" + fullMonth;\n      }\n\n      this.makeScriptActionWithValue(fillScript, exp, fillFields.exp, filledFields);\n    }\n\n    return fillScript;\n  }\n\n  /**\n   * Determines whether an iframe is potentially dangerous (\"untrusted\") to autofill\n   * @param {string} pageUrl The url of the page/iframe, usually from AutofillPageDetails\n   * @param {GenerateFillScriptOptions} options The GenerateFillScript options\n   * @returns {boolean} `true` if the iframe is untrusted and a warning should be shown, `false` otherwise\n   * @private\n   */\n  private inUntrustedIframe(pageUrl: string, options: GenerateFillScriptOptions): boolean {\n    // If the pageUrl (from the content script) matches the tabUrl (from the sender tab), we are not in an iframe\n    // This also avoids a false positive if no URI is saved and the user triggers auto-fill anyway\n    if (pageUrl === options.tabUrl) {\n      return false;\n    }\n\n    // Check the pageUrl against cipher URIs using the configured match detection.\n    // Remember: if we are in this function, the tabUrl already matches a saved URI for the login.\n    // We need to verify the pageUrl also matches.\n    const equivalentDomains = this.settingsService.getEquivalentDomains(pageUrl);\n    const matchesUri = options.cipher.login.matchesUri(\n      pageUrl,\n      equivalentDomains,\n      options.defaultUriMatch\n    );\n    return !matchesUri;\n  }\n\n  /**\n   * Used when handling autofill on credit card fields. Determines whether\n   * the field has an attribute that matches the given value.\n   * @param {AutofillField} field\n   * @param {string} containsVal\n   * @returns {boolean}\n   * @private\n   */\n  private fieldAttrsContain(field: AutofillField, containsVal: string): boolean {\n    if (!field) {\n      return false;\n    }\n\n    let doesContain = false;\n    CreditCardAutoFillConstants.CardAttributesExtended.forEach((attr) => {\n      // eslint-disable-next-line\n      if (doesContain || !field.hasOwnProperty(attr) || !field[attr]) {\n        return;\n      }\n\n      let val = field[attr];\n      val = val.replace(/ /g, \"\").toLowerCase();\n      doesContain = val.indexOf(containsVal) > -1;\n    });\n\n    return doesContain;\n  }\n\n  /**\n   * Generates the autofill script for the specified page details and identify cipher item.\n   * @param {AutofillScript} fillScript\n   * @param {AutofillPageDetails} pageDetails\n   * @param {{[p: string]: AutofillField}} filledFields\n   * @param {GenerateFillScriptOptions} options\n   * @returns {AutofillScript}\n   * @private\n   */\n  private generateIdentityFillScript(\n    fillScript: AutofillScript,\n    pageDetails: AutofillPageDetails,\n    filledFields: { [id: string]: AutofillField },\n    options: GenerateFillScriptOptions\n  ): AutofillScript {\n    if (!options.cipher.identity) {\n      return null;\n    }\n\n    const fillFields: { [id: string]: AutofillField } = {};\n\n    pageDetails.fields.forEach((f) => {\n      if (AutofillService.forCustomFieldsOnly(f)) {\n        return;\n      }\n\n      if (this.isExcludedType(f.type, AutoFillConstants.ExcludedAutofillTypes)) {\n        return;\n      }\n\n      for (let i = 0; i < IdentityAutoFillConstants.IdentityAttributes.length; i++) {\n        const attr = IdentityAutoFillConstants.IdentityAttributes[i];\n        // eslint-disable-next-line\n        if (!f.hasOwnProperty(attr) || !f[attr] || !f.viewable) {\n          continue;\n        }\n\n        // ref https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\n        // ref https://developers.google.com/web/fundamentals/design-and-ux/input/forms/\n        if (\n          !fillFields.name &&\n          AutofillService.isFieldMatch(\n            f[attr],\n            IdentityAutoFillConstants.FullNameFieldNames,\n            IdentityAutoFillConstants.FullNameFieldNameValues\n          )\n        ) {\n          fillFields.name = f;\n          break;\n        } else if (\n          !fillFields.firstName &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.FirstnameFieldNames)\n        ) {\n          fillFields.firstName = f;\n          break;\n        } else if (\n          !fillFields.middleName &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.MiddlenameFieldNames)\n        ) {\n          fillFields.middleName = f;\n          break;\n        } else if (\n          !fillFields.lastName &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.LastnameFieldNames)\n        ) {\n          fillFields.lastName = f;\n          break;\n        } else if (\n          !fillFields.title &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.TitleFieldNames)\n        ) {\n          fillFields.title = f;\n          break;\n        } else if (\n          !fillFields.email &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.EmailFieldNames)\n        ) {\n          fillFields.email = f;\n          break;\n        } else if (\n          !fillFields.address &&\n          AutofillService.isFieldMatch(\n            f[attr],\n            IdentityAutoFillConstants.AddressFieldNames,\n            IdentityAutoFillConstants.AddressFieldNameValues\n          )\n        ) {\n          fillFields.address = f;\n          break;\n        } else if (\n          !fillFields.address1 &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.Address1FieldNames)\n        ) {\n          fillFields.address1 = f;\n          break;\n        } else if (\n          !fillFields.address2 &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.Address2FieldNames)\n        ) {\n          fillFields.address2 = f;\n          break;\n        } else if (\n          !fillFields.address3 &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.Address3FieldNames)\n        ) {\n          fillFields.address3 = f;\n          break;\n        } else if (\n          !fillFields.postalCode &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.PostalCodeFieldNames)\n        ) {\n          fillFields.postalCode = f;\n          break;\n        } else if (\n          !fillFields.city &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.CityFieldNames)\n        ) {\n          fillFields.city = f;\n          break;\n        } else if (\n          !fillFields.state &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.StateFieldNames)\n        ) {\n          fillFields.state = f;\n          break;\n        } else if (\n          !fillFields.country &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.CountryFieldNames)\n        ) {\n          fillFields.country = f;\n          break;\n        } else if (\n          !fillFields.phone &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.PhoneFieldNames)\n        ) {\n          fillFields.phone = f;\n          break;\n        } else if (\n          !fillFields.username &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.UserNameFieldNames)\n        ) {\n          fillFields.username = f;\n          break;\n        } else if (\n          !fillFields.company &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.CompanyFieldNames)\n        ) {\n          fillFields.company = f;\n          break;\n        }\n      }\n    });\n\n    const identity = options.cipher.identity;\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"title\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"firstName\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"middleName\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"lastName\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"address1\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"address2\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"address3\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"city\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"postalCode\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"company\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"email\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"phone\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"username\");\n\n    let filledState = false;\n    if (fillFields.state && identity.state && identity.state.length > 2) {\n      const stateLower = identity.state.toLowerCase();\n      const isoState =\n        IdentityAutoFillConstants.IsoStates[stateLower] ||\n        IdentityAutoFillConstants.IsoProvinces[stateLower];\n      if (isoState) {\n        filledState = true;\n        this.makeScriptActionWithValue(fillScript, isoState, fillFields.state, filledFields);\n      }\n    }\n\n    if (!filledState) {\n      this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"state\");\n    }\n\n    let filledCountry = false;\n    if (fillFields.country && identity.country && identity.country.length > 2) {\n      const countryLower = identity.country.toLowerCase();\n      const isoCountry = IdentityAutoFillConstants.IsoCountries[countryLower];\n      if (isoCountry) {\n        filledCountry = true;\n        this.makeScriptActionWithValue(fillScript, isoCountry, fillFields.country, filledFields);\n      }\n    }\n\n    if (!filledCountry) {\n      this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"country\");\n    }\n\n    if (fillFields.name && (identity.firstName || identity.lastName)) {\n      let fullName = \"\";\n      if (AutofillService.hasValue(identity.firstName)) {\n        fullName = identity.firstName;\n      }\n      if (AutofillService.hasValue(identity.middleName)) {\n        if (fullName !== \"\") {\n          fullName += \" \";\n        }\n        fullName += identity.middleName;\n      }\n      if (AutofillService.hasValue(identity.lastName)) {\n        if (fullName !== \"\") {\n          fullName += \" \";\n        }\n        fullName += identity.lastName;\n      }\n\n      this.makeScriptActionWithValue(fillScript, fullName, fillFields.name, filledFields);\n    }\n\n    if (fillFields.address && AutofillService.hasValue(identity.address1)) {\n      let address = \"\";\n      if (AutofillService.hasValue(identity.address1)) {\n        address = identity.address1;\n      }\n      if (AutofillService.hasValue(identity.address2)) {\n        if (address !== \"\") {\n          address += \", \";\n        }\n        address += identity.address2;\n      }\n      if (AutofillService.hasValue(identity.address3)) {\n        if (address !== \"\") {\n          address += \", \";\n        }\n        address += identity.address3;\n      }\n\n      this.makeScriptActionWithValue(fillScript, address, fillFields.address, filledFields);\n    }\n\n    return fillScript;\n  }\n\n  /**\n   * Accepts an HTMLInputElement type value and a list of\n   * excluded types and returns true if the type is excluded.\n   * @param {string} type\n   * @param {string[]} excludedTypes\n   * @returns {boolean}\n   * @private\n   */\n  private isExcludedType(type: string, excludedTypes: string[]) {\n    return excludedTypes.indexOf(type) > -1;\n  }\n\n  /**\n   * Accepts the value of a field, a list of possible options that define if\n   * a field can be matched to a vault cipher, and a secondary optional list\n   * of options that define if a field can be matched to a vault cipher. Returns\n   * true if the field value matches one of the options.\n   * @param {string} value\n   * @param {string[]} options\n   * @param {string[]} containsOptions\n   * @returns {boolean}\n   * @private\n   */\n  private static isFieldMatch(\n    value: string,\n    options: string[],\n    containsOptions?: string[]\n  ): boolean {\n    value = value\n      .trim()\n      .toLowerCase()\n      .replace(/[^a-zA-Z0-9]+/g, \"\");\n    for (let i = 0; i < options.length; i++) {\n      let option = options[i];\n      const checkValueContains = containsOptions == null || containsOptions.indexOf(option) > -1;\n      option = option.toLowerCase().replace(/-/g, \"\");\n      if (value === option || (checkValueContains && value.indexOf(option) > -1)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Helper method used to create a script action for a field. Conditionally\n   * accepts a fieldProp value that will be used in place of the dataProp value.\n   * @param {AutofillScript} fillScript\n   * @param cipherData\n   * @param {{[p: string]: AutofillField}} fillFields\n   * @param {{[p: string]: AutofillField}} filledFields\n   * @param {string} dataProp\n   * @param {string} fieldProp\n   * @private\n   */\n  private makeScriptAction(\n    fillScript: AutofillScript,\n    cipherData: any,\n    fillFields: { [id: string]: AutofillField },\n    filledFields: { [id: string]: AutofillField },\n    dataProp: string,\n    fieldProp?: string\n  ) {\n    fieldProp = fieldProp || dataProp;\n    this.makeScriptActionWithValue(\n      fillScript,\n      cipherData[dataProp],\n      fillFields[fieldProp],\n      filledFields\n    );\n  }\n\n  /**\n   * Handles updating the list of filled fields and adding a script action\n   * to the fill script. If a select field is passed as part of the fill options,\n   * we iterate over the options to check if the passed value matches one of the\n   * options. If it does, we add a script action to select the option.\n   * @param {AutofillScript} fillScript\n   * @param dataValue\n   * @param {AutofillField} field\n   * @param {{[p: string]: AutofillField}} filledFields\n   * @private\n   */\n  private makeScriptActionWithValue(\n    fillScript: AutofillScript,\n    dataValue: any,\n    field: AutofillField,\n    filledFields: { [id: string]: AutofillField }\n  ) {\n    let doFill = false;\n    if (AutofillService.hasValue(dataValue) && field) {\n      if (field.type === \"select-one\" && field.selectInfo && field.selectInfo.options) {\n        for (let i = 0; i < field.selectInfo.options.length; i++) {\n          const option = field.selectInfo.options[i];\n          for (let j = 0; j < option.length; j++) {\n            if (\n              AutofillService.hasValue(option[j]) &&\n              option[j].toLowerCase() === dataValue.toLowerCase()\n            ) {\n              doFill = true;\n              if (option.length > 1) {\n                dataValue = option[1];\n              }\n              break;\n            }\n          }\n\n          if (doFill) {\n            break;\n          }\n        }\n      } else {\n        doFill = true;\n      }\n    }\n\n    if (doFill) {\n      filledFields[field.opid] = field;\n      AutofillService.fillByOpid(fillScript, field, dataValue);\n    }\n  }\n\n  /**\n   * Accepts a pageDetails object with a list of fields and returns a list of\n   * fields that are likely to be password fields.\n   * @param {AutofillPageDetails} pageDetails\n   * @param {boolean} canBeHidden\n   * @param {boolean} canBeReadOnly\n   * @param {boolean} mustBeEmpty\n   * @param {boolean} fillNewPassword\n   * @returns {AutofillField[]}\n   */\n  static loadPasswordFields(\n    pageDetails: AutofillPageDetails,\n    canBeHidden: boolean,\n    canBeReadOnly: boolean,\n    mustBeEmpty: boolean,\n    fillNewPassword: boolean\n  ) {\n    const arr: AutofillField[] = [];\n    pageDetails.fields.forEach((f) => {\n      if (AutofillService.forCustomFieldsOnly(f)) {\n        return;\n      }\n\n      const isPassword = f.type === \"password\";\n      const valueIsLikePassword = (value: string) => {\n        if (value == null) {\n          return false;\n        }\n        // Removes all whitespace, _ and - characters\n        // eslint-disable-next-line\n        const cleanedValue = value.toLowerCase().replace(/[\\s_\\-]/g, \"\");\n\n        if (cleanedValue.indexOf(\"password\") < 0) {\n          return false;\n        }\n\n        if (AutoFillConstants.PasswordFieldIgnoreList.some((i) => cleanedValue.indexOf(i) > -1)) {\n          return false;\n        }\n\n        return true;\n      };\n      const isLikePassword = () => {\n        if (f.type !== \"text\") {\n          return false;\n        }\n        if (valueIsLikePassword(f.htmlID)) {\n          return true;\n        }\n        if (valueIsLikePassword(f.htmlName)) {\n          return true;\n        }\n        if (valueIsLikePassword(f.placeholder)) {\n          return true;\n        }\n        return false;\n      };\n      if (\n        !f.disabled &&\n        (canBeReadOnly || !f.readonly) &&\n        (isPassword || isLikePassword()) &&\n        (canBeHidden || f.viewable) &&\n        (!mustBeEmpty || f.value == null || f.value.trim() === \"\") &&\n        (fillNewPassword || f.autoCompleteType !== \"new-password\")\n      ) {\n        arr.push(f);\n      }\n    });\n    return arr;\n  }\n\n  /**\n   * Accepts a pageDetails object with a list of fields and returns a list of\n   * fields that are likely to be username fields.\n   * @param {AutofillPageDetails} pageDetails\n   * @param {AutofillField} passwordField\n   * @param {boolean} canBeHidden\n   * @param {boolean} canBeReadOnly\n   * @param {boolean} withoutForm\n   * @returns {AutofillField}\n   * @private\n   */\n  private findUsernameField(\n    pageDetails: AutofillPageDetails,\n    passwordField: AutofillField,\n    canBeHidden: boolean,\n    canBeReadOnly: boolean,\n    withoutForm: boolean\n  ): AutofillField | null {\n    let usernameField: AutofillField = null;\n    for (let i = 0; i < pageDetails.fields.length; i++) {\n      const f = pageDetails.fields[i];\n      if (AutofillService.forCustomFieldsOnly(f)) {\n        continue;\n      }\n\n      if (f.elementNumber >= passwordField.elementNumber) {\n        break;\n      }\n\n      if (\n        !f.disabled &&\n        (canBeReadOnly || !f.readonly) &&\n        (withoutForm || f.form === passwordField.form) &&\n        (canBeHidden || f.viewable) &&\n        (f.type === \"text\" || f.type === \"email\" || f.type === \"tel\")\n      ) {\n        usernameField = f;\n\n        if (this.findMatchingFieldIndex(f, AutoFillConstants.UsernameFieldNames) > -1) {\n          // We found an exact match. No need to keep looking.\n          break;\n        }\n      }\n    }\n\n    return usernameField;\n  }\n\n  /**\n   * Accepts a pageDetails object with a list of fields and returns a list of\n   * fields that are likely to be TOTP fields.\n   * @param {AutofillPageDetails} pageDetails\n   * @param {AutofillField} passwordField\n   * @param {boolean} canBeHidden\n   * @param {boolean} canBeReadOnly\n   * @param {boolean} withoutForm\n   * @returns {AutofillField}\n   * @private\n   */\n  private findTotpField(\n    pageDetails: AutofillPageDetails,\n    passwordField: AutofillField,\n    canBeHidden: boolean,\n    canBeReadOnly: boolean,\n    withoutForm: boolean\n  ): AutofillField | null {\n    let totpField: AutofillField = null;\n    for (let i = 0; i < pageDetails.fields.length; i++) {\n      const f = pageDetails.fields[i];\n      if (AutofillService.forCustomFieldsOnly(f)) {\n        continue;\n      }\n\n      if (\n        !f.disabled &&\n        (canBeReadOnly || !f.readonly) &&\n        (withoutForm || f.form === passwordField.form) &&\n        (canBeHidden || f.viewable) &&\n        (f.type === \"text\" || f.type === \"number\") &&\n        AutofillService.fieldIsFuzzyMatch(f, AutoFillConstants.TotpFieldNames)\n      ) {\n        totpField = f;\n\n        if (\n          this.findMatchingFieldIndex(f, AutoFillConstants.TotpFieldNames) > -1 ||\n          f.autoCompleteType === \"one-time-code\"\n        ) {\n          // We found an exact match. No need to keep looking.\n          break;\n        }\n      }\n    }\n\n    return totpField;\n  }\n\n  /**\n   * Accepts a field and returns the index of the first matching property\n   * present in a list of attribute names.\n   * @param {AutofillField} field\n   * @param {string[]} names\n   * @returns {number}\n   * @private\n   */\n  private findMatchingFieldIndex(field: AutofillField, names: string[]): number {\n    for (let i = 0; i < names.length; i++) {\n      if (names[i].indexOf(\"=\") > -1) {\n        if (this.fieldPropertyIsPrefixMatch(field, \"htmlID\", names[i], \"id\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"htmlName\", names[i], \"name\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"label-left\", names[i], \"label\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"label-right\", names[i], \"label\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"label-tag\", names[i], \"label\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"label-aria\", names[i], \"label\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"placeholder\", names[i], \"placeholder\")) {\n          return i;\n        }\n      }\n\n      if (this.fieldPropertyIsMatch(field, \"htmlID\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"htmlName\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"label-left\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"label-right\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"label-tag\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"label-aria\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"placeholder\", names[i])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * Accepts a field, property, name, and prefix and returns true if the field\n   * contains a value that matches the given prefixed property.\n   * @param field\n   * @param {string} property\n   * @param {string} name\n   * @param {string} prefix\n   * @param {string} separator\n   * @returns {boolean}\n   * @private\n   */\n  private fieldPropertyIsPrefixMatch(\n    field: any,\n    property: string,\n    name: string,\n    prefix: string,\n    separator = \"=\"\n  ): boolean {\n    if (name.indexOf(prefix + separator) === 0) {\n      const sepIndex = name.indexOf(separator);\n      const val = name.substring(sepIndex + 1);\n      return val != null && this.fieldPropertyIsMatch(field, property, val);\n    }\n    return false;\n  }\n\n  /**\n   * Identifies if a given property within a field matches the value\n   * of the passed \"name\" parameter. If the name starts with \"regex=\",\n   * the value is tested against a case-insensitive regular expression.\n   * If the name starts with \"csv=\", the value is treated as a\n   * comma-separated list of values to match.\n   * @param field\n   * @param {string} property\n   * @param {string} name\n   * @returns {boolean}\n   * @private\n   */\n  private fieldPropertyIsMatch(field: any, property: string, name: string): boolean {\n    let fieldVal = field[property] as string;\n    if (!AutofillService.hasValue(fieldVal)) {\n      return false;\n    }\n\n    fieldVal = fieldVal.trim().replace(/(?:\\r\\n|\\r|\\n)/g, \"\");\n    if (name.startsWith(\"regex=\")) {\n      try {\n        const regexParts = name.split(\"=\", 2);\n        if (regexParts.length === 2) {\n          const regex = new RegExp(regexParts[1], \"i\");\n          return regex.test(fieldVal);\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    } else if (name.startsWith(\"csv=\")) {\n      const csvParts = name.split(\"=\", 2);\n      if (csvParts.length === 2) {\n        const csvVals = csvParts[1].split(\",\");\n        for (let i = 0; i < csvVals.length; i++) {\n          const val = csvVals[i];\n          if (val != null && val.trim().toLowerCase() === fieldVal.toLowerCase()) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }\n\n    return fieldVal.toLowerCase() === name;\n  }\n\n  /**\n   * Accepts a field and returns true if the field contains a\n   * value that matches any of the names in the provided list.\n   * @param {AutofillField} field\n   * @param {string[]} names\n   * @returns {boolean}\n   */\n  static fieldIsFuzzyMatch(field: AutofillField, names: string[]): boolean {\n    if (AutofillService.hasValue(field.htmlID) && this.fuzzyMatch(names, field.htmlID)) {\n      return true;\n    }\n    if (AutofillService.hasValue(field.htmlName) && this.fuzzyMatch(names, field.htmlName)) {\n      return true;\n    }\n    if (\n      AutofillService.hasValue(field[\"label-tag\"]) &&\n      this.fuzzyMatch(names, field[\"label-tag\"])\n    ) {\n      return true;\n    }\n    if (AutofillService.hasValue(field.placeholder) && this.fuzzyMatch(names, field.placeholder)) {\n      return true;\n    }\n    if (\n      AutofillService.hasValue(field[\"label-left\"]) &&\n      this.fuzzyMatch(names, field[\"label-left\"])\n    ) {\n      return true;\n    }\n    if (\n      AutofillService.hasValue(field[\"label-top\"]) &&\n      this.fuzzyMatch(names, field[\"label-top\"])\n    ) {\n      return true;\n    }\n    if (\n      AutofillService.hasValue(field[\"label-aria\"]) &&\n      this.fuzzyMatch(names, field[\"label-aria\"])\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Accepts a list of options and a value and returns\n   * true if the value matches any of the options.\n   * @param {string[]} options\n   * @param {string} value\n   * @returns {boolean}\n   * @private\n   */\n  private static fuzzyMatch(options: string[], value: string): boolean {\n    if (options == null || options.length === 0 || value == null || value === \"\") {\n      return false;\n    }\n\n    value = value\n      .replace(/(?:\\r\\n|\\r|\\n)/g, \"\")\n      .trim()\n      .toLowerCase();\n\n    for (let i = 0; i < options.length; i++) {\n      if (value.indexOf(options[i]) > -1) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Accepts a string and returns true if the\n   * string is not falsy and not empty.\n   * @param {string} str\n   * @returns {boolean}\n   */\n  static hasValue(str: string): boolean {\n    return Boolean(str && str !== \"\");\n  }\n\n  /**\n   * Sets the `focus_by_opid` autofill script\n   * action to the last field that was filled.\n   * @param {{[p: string]: AutofillField}} filledFields\n   * @param {AutofillScript} fillScript\n   * @returns {AutofillScript}\n   */\n  static setFillScriptForFocus(\n    filledFields: { [id: string]: AutofillField },\n    fillScript: AutofillScript\n  ): AutofillScript {\n    let lastField: AutofillField = null;\n    let lastPasswordField: AutofillField = null;\n\n    for (const opid in filledFields) {\n      // eslint-disable-next-line\n      if (filledFields.hasOwnProperty(opid) && filledFields[opid].viewable) {\n        lastField = filledFields[opid];\n\n        if (filledFields[opid].type === \"password\") {\n          lastPasswordField = filledFields[opid];\n        }\n      }\n    }\n\n    // Prioritize password field over others.\n    if (lastPasswordField) {\n      fillScript.script.push([\"focus_by_opid\", lastPasswordField.opid]);\n    } else if (lastField) {\n      fillScript.script.push([\"focus_by_opid\", lastField.opid]);\n    }\n\n    return fillScript;\n  }\n\n  /**\n   * Updates a fill script to place the `cilck_on_opid`, `focus_on_opid`, and `fill_by_opid`\n   * fill script actions associated with the provided field.\n   * @param {AutofillScript} fillScript\n   * @param {AutofillField} field\n   * @param {string} value\n   */\n  static fillByOpid(fillScript: AutofillScript, field: AutofillField, value: string): void {\n    if (field.maxLength && value && value.length > field.maxLength) {\n      value = value.substr(0, value.length);\n    }\n    if (field.tagName !== \"span\") {\n      fillScript.script.push([\"click_on_opid\", field.opid]);\n      fillScript.script.push([\"focus_by_opid\", field.opid]);\n    }\n    fillScript.script.push([\"fill_by_opid\", field.opid, value]);\n  }\n\n  /**\n   * Identifies if the field is a custom field, a custom\n   * field is defined as a field that is a `span` element.\n   * @param {AutofillField} field\n   * @returns {boolean}\n   */\n  static forCustomFieldsOnly(field: AutofillField): boolean {\n    return field.tagName === \"span\";\n  }\n}\n","import {\n  TotpServiceInitOptions,\n  totpServiceFactory,\n} from \"../../../auth/background/service-factories/totp-service.factory\";\nimport {\n  UserVerificationServiceInitOptions,\n  userVerificationServiceFactory,\n} from \"../../../auth/background/service-factories/user-verification-service.factory\";\nimport {\n  EventCollectionServiceInitOptions,\n  eventCollectionServiceFactory,\n} from \"../../../background/service-factories/event-collection-service.factory\";\nimport {\n  settingsServiceFactory,\n  SettingsServiceInitOptions,\n} from \"../../../background/service-factories/settings-service.factory\";\nimport {\n  CachedServices,\n  factory,\n  FactoryOptions,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport {\n  logServiceFactory,\n  LogServiceInitOptions,\n} from \"../../../platform/background/service-factories/log-service.factory\";\nimport {\n  stateServiceFactory,\n  StateServiceInitOptions,\n} from \"../../../platform/background/service-factories/state-service.factory\";\nimport {\n  cipherServiceFactory,\n  CipherServiceInitOptions,\n} from \"../../../vault/background/service_factories/cipher-service.factory\";\nimport { AutofillService as AbstractAutoFillService } from \"../../services/abstractions/autofill.service\";\nimport AutofillService from \"../../services/autofill.service\";\n\ntype AutoFillServiceOptions = FactoryOptions;\n\nexport type AutoFillServiceInitOptions = AutoFillServiceOptions &\n  CipherServiceInitOptions &\n  StateServiceInitOptions &\n  TotpServiceInitOptions &\n  EventCollectionServiceInitOptions &\n  LogServiceInitOptions &\n  SettingsServiceInitOptions &\n  UserVerificationServiceInitOptions;\n\nexport function autofillServiceFactory(\n  cache: { autofillService?: AbstractAutoFillService } & CachedServices,\n  opts: AutoFillServiceInitOptions\n): Promise<AbstractAutoFillService> {\n  return factory(\n    cache,\n    \"autofillService\",\n    opts,\n    async () =>\n      new AutofillService(\n        await cipherServiceFactory(cache, opts),\n        await stateServiceFactory(cache, opts),\n        await totpServiceFactory(cache, opts),\n        await eventCollectionServiceFactory(cache, opts),\n        await logServiceFactory(cache, opts),\n        await settingsServiceFactory(cache, opts),\n        await userVerificationServiceFactory(cache, opts)\n      )\n  );\n}\n","import { BrowserApi } from \"../../platform/browser/browser-api\";\n\nexport const clearClipboardAlarmName = \"clearClipboard\";\n\nexport class ClearClipboard {\n  /**\n    We currently rely on an active tab with an injected content script (`../content/misc-utils.ts`) to clear the clipboard via `window.navigator.clipboard.writeText(text)`\n    \n    With https://bugs.chromium.org/p/chromium/issues/detail?id=1160302 it was said that service workers,\n    would have access to the clipboard api and then we could migrate to a simpler solution\n    */\n  static async run() {\n    const activeTabs = await BrowserApi.getActiveTabs();\n    if (!activeTabs || activeTabs.length === 0) {\n      return;\n    }\n\n    BrowserApi.sendTabsMessage(activeTabs[0].id, {\n      command: \"clearClipboard\",\n    });\n  }\n}\n","import { BrowserApi } from \"../../platform/browser/browser-api\";\n\n/**\n * Copies text to the clipboard in a MV3 safe way.\n * @param tab - The tab that the text will be sent to so that it can be copied to the users clipboard this needs to be an active tab or the DOM won't be able to be used to do the action. The tab sent in here should be from a user started action or queried for active tabs.\n * @param text - The text that you want added to the users clipboard.\n */\nexport const copyToClipboard = async (tab: chrome.tabs.Tab, text: string) => {\n  if (tab.id == null) {\n    throw new Error(\"Cannot copy text to clipboard with a tab that does not have an id.\");\n  }\n\n  BrowserApi.sendTabsMessage(tab.id, {\n    command: \"copyText\",\n    text: text,\n  });\n};\n","import { clearClipboardAlarmName } from \"../../autofill/clipboard\";\nimport { BrowserApi } from \"../browser/browser-api\";\n\nexport const alarmKeys = [clearClipboardAlarmName] as const;\nexport type AlarmKeys = (typeof alarmKeys)[number];\n\ntype AlarmState = { [T in AlarmKeys]: number | undefined };\n\nconst alarmState: AlarmState = {\n  clearClipboard: null,\n  //TODO once implemented vaultTimeout: null;\n  //TODO once implemented checkNotifications: null;\n  //TODO once implemented (if necessary) processReload: null;\n};\n\n/**\n * Retrieves the set alarm time (planned execution) for a give an commandName {@link AlarmState}\n * @param commandName A command that has been previously registered with {@link AlarmState}\n * @returns {Promise<number>} null or Unix epoch timestamp when the alarm action is supposed to execute\n * @example\n * // getAlarmTime(clearClipboard)\n */\nexport async function getAlarmTime(commandName: AlarmKeys): Promise<number> {\n  let alarmTime: number;\n  if (BrowserApi.manifestVersion == 3) {\n    const fromSessionStore = await chrome.storage.session.get(commandName);\n    alarmTime = fromSessionStore[commandName];\n  } else {\n    alarmTime = alarmState[commandName];\n  }\n\n  return alarmTime;\n}\n\n/**\n * Registers an action that should execute after the given time has passed\n * @param commandName A command that has been previously registered with {@link AlarmState}\n * @param delay_ms The number of ms from now in which the command should execute from\n * @example\n * // setAlarmTime(clearClipboard, 5000) register the clearClipboard action which will execute when at least 5 seconds from now have passed\n */\nexport async function setAlarmTime(commandName: AlarmKeys, delay_ms: number): Promise<void> {\n  if (!delay_ms || delay_ms === 0) {\n    await this.clearAlarmTime(commandName);\n    return;\n  }\n\n  const time = Date.now() + delay_ms;\n  await setAlarmTimeInternal(commandName, time);\n}\n\n/**\n * Clears the time currently set for a given command\n * @param commandName A command that has been previously registered with {@link AlarmState}\n */\nexport async function clearAlarmTime(commandName: AlarmKeys): Promise<void> {\n  await setAlarmTimeInternal(commandName, null);\n}\n\nasync function setAlarmTimeInternal(commandName: AlarmKeys, time: number): Promise<void> {\n  if (BrowserApi.manifestVersion == 3) {\n    await chrome.storage.session.set({ [commandName]: time });\n  } else {\n    alarmState[commandName] = time;\n  }\n}\n","import { PasswordGenerationServiceAbstraction } from \"@bitwarden/common/tools/generator/password\";\n\nimport { setAlarmTime } from \"../../platform/alarms/alarm-state\";\nimport { BrowserStateService } from \"../../platform/services/abstractions/browser-state.service\";\n\nimport { clearClipboardAlarmName } from \"./clear-clipboard\";\nimport { copyToClipboard } from \"./copy-to-clipboard-command\";\n\nexport class GeneratePasswordToClipboardCommand {\n  constructor(\n    private passwordGenerationService: PasswordGenerationServiceAbstraction,\n    private stateService: BrowserStateService\n  ) {}\n\n  async generatePasswordToClipboard(tab: chrome.tabs.Tab) {\n    const [options] = await this.passwordGenerationService.getOptions();\n    const password = await this.passwordGenerationService.generatePassword(options);\n\n    copyToClipboard(tab, password);\n\n    const clearClipboard = await this.stateService.getClearClipboard();\n\n    if (clearClipboard != null) {\n      await setAlarmTime(clearClipboardAlarmName, clearClipboard * 1000);\n    }\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport AutofillPageDetails from \"../models/autofill-page-details\";\nimport { AutofillService } from \"../services/abstractions/autofill.service\";\n\nexport class AutofillTabCommand {\n  constructor(private autofillService: AutofillService) {}\n\n  async doAutofillTabCommand(tab: chrome.tabs.Tab) {\n    if (!tab.id) {\n      throw new Error(\"Tab does not have an id, cannot complete autofill.\");\n    }\n\n    const details = await this.collectPageDetails(tab.id);\n    await this.autofillService.doAutoFillOnTab(\n      [\n        {\n          frameId: 0,\n          tab: tab,\n          details: details,\n        },\n      ],\n      tab,\n      true\n    );\n  }\n\n  async doAutofillTabWithCipherCommand(tab: chrome.tabs.Tab, cipher: CipherView) {\n    if (!tab.id) {\n      throw new Error(\"Tab does not have an id, cannot complete autofill.\");\n    }\n\n    const details = await this.collectPageDetails(tab.id);\n    await this.autofillService.doAutoFill({\n      tab: tab,\n      cipher: cipher,\n      pageDetails: [\n        {\n          frameId: 0,\n          tab: tab,\n          details: details,\n        },\n      ],\n      skipLastUsed: false,\n      skipUsernameOnlyFill: false,\n      onlyEmptyFields: false,\n      onlyVisibleFields: false,\n      fillNewPassword: true,\n      allowTotpAutofill: true,\n    });\n  }\n\n  private async collectPageDetails(tabId: number): Promise<AutofillPageDetails> {\n    return new Promise((resolve, reject) => {\n      chrome.tabs.sendMessage(\n        tabId,\n        {\n          command: \"collectPageDetailsImmediately\",\n        },\n        (response: AutofillPageDetails) => {\n          if (chrome.runtime.lastError) {\n            reject(chrome.runtime.lastError);\n            return;\n          }\n\n          resolve(response);\n        }\n      );\n    });\n  }\n}\n","import { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { TotpService } from \"@bitwarden/common/abstractions/totp.service\";\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { UserVerificationService } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification.service.abstraction\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { EventType } from \"@bitwarden/common/enums\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { StateFactory } from \"@bitwarden/common/platform/factories/state-factory\";\nimport { GlobalState } from \"@bitwarden/common/platform/models/domain/global-state\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport {\n  authServiceFactory,\n  AuthServiceInitOptions,\n} from \"../../auth/background/service-factories/auth-service.factory\";\nimport { totpServiceFactory } from \"../../auth/background/service-factories/totp-service.factory\";\nimport { userVerificationServiceFactory } from \"../../auth/background/service-factories/user-verification-service.factory\";\nimport LockedVaultPendingNotificationsItem from \"../../background/models/lockedVaultPendingNotificationsItem\";\nimport { eventCollectionServiceFactory } from \"../../background/service-factories/event-collection-service.factory\";\nimport { Account } from \"../../models/account\";\nimport { CachedServices } from \"../../platform/background/service-factories/factory-options\";\nimport { stateServiceFactory } from \"../../platform/background/service-factories/state-service.factory\";\nimport { BrowserApi } from \"../../platform/browser/browser-api\";\nimport { passwordGenerationServiceFactory } from \"../../tools/background/service_factories/password-generation-service.factory\";\nimport {\n  cipherServiceFactory,\n  CipherServiceInitOptions,\n} from \"../../vault/background/service_factories/cipher-service.factory\";\nimport { autofillServiceFactory } from \"../background/service_factories/autofill-service.factory\";\nimport { copyToClipboard, GeneratePasswordToClipboardCommand } from \"../clipboard\";\nimport { AutofillTabCommand } from \"../commands/autofill-tab-command\";\nimport {\n  AUTOFILL_CARD_ID,\n  AUTOFILL_ID,\n  AUTOFILL_IDENTITY_ID,\n  COPY_IDENTIFIER_ID,\n  COPY_PASSWORD_ID,\n  COPY_USERNAME_ID,\n  COPY_VERIFICATIONCODE_ID,\n  CREATE_CARD_ID,\n  CREATE_IDENTITY_ID,\n  CREATE_LOGIN_ID,\n  GENERATE_PASSWORD_ID,\n  NOOP_COMMAND_SUFFIX,\n} from \"../constants\";\nimport { AutofillCipherTypeId } from \"../types\";\n\nexport type CopyToClipboardOptions = { text: string; tab: chrome.tabs.Tab };\nexport type CopyToClipboardAction = (options: CopyToClipboardOptions) => void;\nexport type AutofillAction = (tab: chrome.tabs.Tab, cipher: CipherView) => Promise<void>;\n\nexport type GeneratePasswordToClipboardAction = (tab: chrome.tabs.Tab) => Promise<void>;\n\nconst NOT_IMPLEMENTED = (..._args: unknown[]) =>\n  Promise.reject<never>(\"This action is not implemented inside of a service worker context.\");\n\nexport class ContextMenuClickedHandler {\n  constructor(\n    private copyToClipboard: CopyToClipboardAction,\n    private generatePasswordToClipboard: GeneratePasswordToClipboardAction,\n    private autofillAction: AutofillAction,\n    private authService: AuthService,\n    private cipherService: CipherService,\n    private stateService: StateService,\n    private totpService: TotpService,\n    private eventCollectionService: EventCollectionService,\n    private userVerificationService: UserVerificationService\n  ) {}\n\n  static async mv3Create(cachedServices: CachedServices) {\n    const stateFactory = new StateFactory(GlobalState, Account);\n    const serviceOptions: AuthServiceInitOptions & CipherServiceInitOptions = {\n      apiServiceOptions: {\n        logoutCallback: NOT_IMPLEMENTED,\n      },\n      cryptoFunctionServiceOptions: {\n        win: self,\n      },\n      encryptServiceOptions: {\n        logMacFailures: false,\n      },\n      i18nServiceOptions: {\n        systemLanguage: chrome.i18n.getUILanguage(),\n      },\n      keyConnectorServiceOptions: {\n        logoutCallback: NOT_IMPLEMENTED,\n      },\n      logServiceOptions: {\n        isDev: false,\n      },\n      platformUtilsServiceOptions: {\n        biometricCallback: NOT_IMPLEMENTED,\n        clipboardWriteCallback: NOT_IMPLEMENTED,\n        win: self,\n      },\n      stateServiceOptions: {\n        stateFactory: stateFactory,\n      },\n    };\n\n    const generatePasswordToClipboardCommand = new GeneratePasswordToClipboardCommand(\n      await passwordGenerationServiceFactory(cachedServices, serviceOptions),\n      await stateServiceFactory(cachedServices, serviceOptions)\n    );\n\n    const autofillCommand = new AutofillTabCommand(\n      await autofillServiceFactory(cachedServices, serviceOptions)\n    );\n\n    return new ContextMenuClickedHandler(\n      (options) => copyToClipboard(options.tab, options.text),\n      (tab) => generatePasswordToClipboardCommand.generatePasswordToClipboard(tab),\n      (tab, cipher) => autofillCommand.doAutofillTabWithCipherCommand(tab, cipher),\n      await authServiceFactory(cachedServices, serviceOptions),\n      await cipherServiceFactory(cachedServices, serviceOptions),\n      await stateServiceFactory(cachedServices, serviceOptions),\n      await totpServiceFactory(cachedServices, serviceOptions),\n      await eventCollectionServiceFactory(cachedServices, serviceOptions),\n      await userVerificationServiceFactory(cachedServices, serviceOptions)\n    );\n  }\n\n  static async onClickedListener(\n    info: chrome.contextMenus.OnClickData,\n    tab?: chrome.tabs.Tab,\n    cachedServices: CachedServices = {}\n  ) {\n    const contextMenuClickedHandler = await ContextMenuClickedHandler.mv3Create(cachedServices);\n    await contextMenuClickedHandler.run(info, tab);\n  }\n\n  static async messageListener(\n    message: { command: string; data: LockedVaultPendingNotificationsItem },\n    sender: chrome.runtime.MessageSender,\n    cachedServices: CachedServices\n  ) {\n    if (\n      message.command !== \"unlockCompleted\" ||\n      message.data.target !== \"contextmenus.background\"\n    ) {\n      return;\n    }\n\n    const contextMenuClickedHandler = await ContextMenuClickedHandler.mv3Create(cachedServices);\n    await contextMenuClickedHandler.run(\n      message.data.commandToRetry.msg.data,\n      message.data.commandToRetry.sender.tab\n    );\n  }\n\n  async run(info: chrome.contextMenus.OnClickData, tab: chrome.tabs.Tab) {\n    if (!tab) {\n      return;\n    }\n\n    switch (info.menuItemId) {\n      case GENERATE_PASSWORD_ID:\n        await this.generatePasswordToClipboard(tab);\n        break;\n      case COPY_IDENTIFIER_ID:\n        this.copyToClipboard({ text: await this.getIdentifier(tab, info), tab: tab });\n        break;\n      default:\n        await this.cipherAction(info, tab);\n    }\n  }\n\n  async cipherAction(info: chrome.contextMenus.OnClickData, tab: chrome.tabs.Tab) {\n    if (!tab) {\n      return;\n    }\n\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      const retryMessage: LockedVaultPendingNotificationsItem = {\n        commandToRetry: {\n          msg: { command: NOOP_COMMAND_SUFFIX, data: info },\n          sender: { tab: tab },\n        },\n        target: \"contextmenus.background\",\n      };\n      await BrowserApi.tabSendMessageData(\n        tab,\n        \"addToLockedVaultPendingNotifications\",\n        retryMessage\n      );\n\n      await BrowserApi.tabSendMessageData(tab, \"promptForLogin\");\n      return;\n    }\n\n    // NOTE: We don't actually use the first part of this ID, we further switch based on the parentMenuItemId\n    // I would really love to not add it but that is a departure from how it currently works.\n    const menuItemId = (info.menuItemId as string).split(\"_\")[1]; // We create all the ids, we can guarantee they are strings\n    let cipher: CipherView | undefined;\n    const isCreateCipherAction = [CREATE_LOGIN_ID, CREATE_IDENTITY_ID, CREATE_CARD_ID].includes(\n      menuItemId as string\n    );\n\n    if (isCreateCipherAction) {\n      // pass; defer to logic below\n    } else if (menuItemId === NOOP_COMMAND_SUFFIX) {\n      const additionalCiphersToGet =\n        info.parentMenuItemId === AUTOFILL_IDENTITY_ID\n          ? [CipherType.Identity]\n          : info.parentMenuItemId === AUTOFILL_CARD_ID\n          ? [CipherType.Card]\n          : [];\n\n      // This NOOP item has come through which is generally only for no access state but since we got here\n      // we are actually unlocked we will do our best to find a good match of an item to autofill this is useful\n      // in scenarios like unlock on autofill\n      const ciphers = await this.cipherService.getAllDecryptedForUrl(\n        tab.url,\n        additionalCiphersToGet\n      );\n\n      cipher = ciphers[0];\n    } else {\n      const ciphers = await this.cipherService.getAllDecrypted();\n      cipher = ciphers.find(({ id }) => id === menuItemId);\n    }\n\n    if (!cipher && !isCreateCipherAction) {\n      return;\n    }\n\n    this.stateService.setLastActive(new Date().getTime());\n    switch (info.parentMenuItemId) {\n      case AUTOFILL_ID:\n      case AUTOFILL_IDENTITY_ID:\n      case AUTOFILL_CARD_ID: {\n        const cipherType = this.getCipherCreationType(menuItemId);\n\n        if (cipherType) {\n          await BrowserApi.tabSendMessageData(tab, \"openAddEditCipher\", {\n            cipherType,\n          });\n          break;\n        }\n\n        if (await this.isPasswordRepromptRequired(cipher)) {\n          await BrowserApi.tabSendMessageData(tab, \"passwordReprompt\", {\n            cipherId: cipher.id,\n            // The action here is passed on to the single-use reprompt window and doesn't change based on cipher type\n            action: AUTOFILL_ID,\n          });\n        } else {\n          await this.autofillAction(tab, cipher);\n        }\n\n        break;\n      }\n      case COPY_USERNAME_ID:\n        if (menuItemId === CREATE_LOGIN_ID) {\n          await BrowserApi.tabSendMessageData(tab, \"openAddEditCipher\", {\n            cipherType: CipherType.Login,\n          });\n          break;\n        }\n\n        this.copyToClipboard({ text: cipher.login.username, tab: tab });\n        break;\n      case COPY_PASSWORD_ID:\n        if (menuItemId === CREATE_LOGIN_ID) {\n          await BrowserApi.tabSendMessageData(tab, \"openAddEditCipher\", {\n            cipherType: CipherType.Login,\n          });\n          break;\n        }\n\n        if (await this.isPasswordRepromptRequired(cipher)) {\n          await BrowserApi.tabSendMessageData(tab, \"passwordReprompt\", {\n            cipherId: cipher.id,\n            action: info.parentMenuItemId,\n          });\n        } else {\n          this.copyToClipboard({ text: cipher.login.password, tab: tab });\n          this.eventCollectionService.collect(EventType.Cipher_ClientCopiedPassword, cipher.id);\n        }\n\n        break;\n      case COPY_VERIFICATIONCODE_ID:\n        if (menuItemId === CREATE_LOGIN_ID) {\n          await BrowserApi.tabSendMessageData(tab, \"openAddEditCipher\", {\n            cipherType: CipherType.Login,\n          });\n          break;\n        }\n\n        if (await this.isPasswordRepromptRequired(cipher)) {\n          await BrowserApi.tabSendMessageData(tab, \"passwordReprompt\", {\n            cipherId: cipher.id,\n            action: info.parentMenuItemId,\n          });\n        } else {\n          this.copyToClipboard({\n            text: await this.totpService.getCode(cipher.login.totp),\n            tab: tab,\n          });\n        }\n\n        break;\n    }\n  }\n\n  private async isPasswordRepromptRequired(cipher: CipherView): Promise<boolean> {\n    return (\n      cipher.reprompt === CipherRepromptType.Password &&\n      (await this.userVerificationService.hasMasterPasswordAndMasterKeyHash())\n    );\n  }\n\n  private getCipherCreationType(menuItemId?: string): AutofillCipherTypeId | null {\n    return menuItemId === CREATE_IDENTITY_ID\n      ? CipherType.Identity\n      : menuItemId === CREATE_CARD_ID\n      ? CipherType.Card\n      : menuItemId === CREATE_LOGIN_ID\n      ? CipherType.Login\n      : null;\n  }\n\n  private async getIdentifier(tab: chrome.tabs.Tab, info: chrome.contextMenus.OnClickData) {\n    return new Promise<string>((resolve, reject) => {\n      BrowserApi.sendTabsMessage(\n        tab.id,\n        { command: \"getClickedElement\" },\n        { frameId: info.frameId },\n        (identifier: string) => {\n          if (chrome.runtime.lastError) {\n            reject(chrome.runtime.lastError);\n            return;\n          }\n\n          resolve(identifier);\n        }\n      );\n    });\n  }\n}\n","import { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { StateFactory } from \"@bitwarden/common/platform/factories/state-factory\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { GlobalState } from \"@bitwarden/common/platform/models/domain/global-state\";\nimport { ContainerService } from \"@bitwarden/common/platform/services/container.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\n\nimport { authServiceFactory } from \"../../auth/background/service-factories/auth-service.factory\";\nimport { Account } from \"../../models/account\";\nimport { stateServiceFactory } from \"../../platform/background/service-factories/state-service.factory\";\nimport { BrowserStateService } from \"../../platform/services/abstractions/browser-state.service\";\nimport IconDetails from \"../../vault/background/models/icon-details\";\nimport { cipherServiceFactory } from \"../../vault/background/service_factories/cipher-service.factory\";\nimport { BrowserApi } from \"../browser/browser-api\";\nimport BrowserPlatformUtilsService from \"../services/browser-platform-utils.service\";\n\nexport type BadgeOptions = {\n  tab?: chrome.tabs.Tab;\n  windowId?: number;\n};\n\nexport class UpdateBadge {\n  private authService: AuthService;\n  private stateService: BrowserStateService;\n  private cipherService: CipherService;\n  private badgeAction: typeof chrome.action | typeof chrome.browserAction;\n  private sidebarAction: OperaSidebarAction | FirefoxSidebarAction;\n  private inited = false;\n  private win: Window & typeof globalThis;\n\n  private static readonly listenedToCommands = [\n    \"updateBadge\",\n    \"loggedIn\",\n    \"unlocked\",\n    \"syncCompleted\",\n    \"bgUpdateContextMenu\",\n    \"editedCipher\",\n    \"addedCipher\",\n    \"deletedCipher\",\n  ];\n\n  static async windowsOnFocusChangedListener(\n    windowId: number,\n    serviceCache: Record<string, unknown>\n  ) {\n    await new UpdateBadge(self).run({ windowId, existingServices: serviceCache });\n  }\n\n  static async tabsOnActivatedListener(\n    activeInfo: chrome.tabs.TabActiveInfo,\n    serviceCache: Record<string, unknown>\n  ) {\n    await new UpdateBadge(self).run({\n      tabId: activeInfo.tabId,\n      existingServices: serviceCache,\n      windowId: activeInfo.windowId,\n    });\n  }\n\n  static async tabsOnReplacedListener(\n    addedTabId: number,\n    removedTabId: number,\n    serviceCache: Record<string, unknown>\n  ) {\n    await new UpdateBadge(self).run({ tabId: addedTabId, existingServices: serviceCache });\n  }\n\n  static async tabsOnUpdatedListener(\n    tabId: number,\n    changeInfo: chrome.tabs.TabChangeInfo,\n    tab: chrome.tabs.Tab,\n    serviceCache: Record<string, unknown>\n  ) {\n    await new UpdateBadge(self).run({\n      tabId,\n      existingServices: serviceCache,\n      windowId: tab.windowId,\n    });\n  }\n\n  static async messageListener(\n    message: { command: string; tabId: number },\n    serviceCache: Record<string, unknown>\n  ) {\n    if (!UpdateBadge.listenedToCommands.includes(message.command)) {\n      return;\n    }\n\n    await new UpdateBadge(self).run({ existingServices: serviceCache });\n  }\n\n  constructor(win: Window & typeof globalThis) {\n    this.badgeAction = BrowserApi.getBrowserAction();\n    this.sidebarAction = BrowserApi.getSidebarAction(self);\n    this.win = win;\n  }\n\n  async run(opts?: {\n    tabId?: number;\n    windowId?: number;\n    existingServices?: Record<string, unknown>;\n  }): Promise<void> {\n    await this.initServices(opts?.existingServices);\n\n    const authStatus = await this.authService.getAuthStatus();\n\n    await this.setBadgeBackgroundColor();\n\n    switch (authStatus) {\n      case AuthenticationStatus.LoggedOut: {\n        await this.setLoggedOut();\n        break;\n      }\n      case AuthenticationStatus.Locked: {\n        await this.setLocked();\n        break;\n      }\n      case AuthenticationStatus.Unlocked: {\n        const tab = await this.getTab(opts?.tabId, opts?.windowId);\n        await this.setUnlocked({ tab, windowId: tab?.windowId });\n        break;\n      }\n    }\n  }\n\n  async setLoggedOut(): Promise<void> {\n    await this.setBadgeIcon(\"_gray\");\n    await this.clearBadgeText();\n  }\n\n  async setLocked() {\n    await this.setBadgeIcon(\"_locked\");\n    await this.clearBadgeText();\n  }\n\n  private async clearBadgeText() {\n    const tabs = await BrowserApi.getActiveTabs();\n    if (tabs != null) {\n      tabs.forEach(async (tab) => {\n        if (tab.id != null) {\n          await this.setBadgeText(\"\", tab.id);\n        }\n      });\n    }\n  }\n\n  async setUnlocked(opts: BadgeOptions) {\n    await this.initServices();\n\n    await this.setBadgeIcon(\"\");\n\n    const disableBadgeCounter = await this.stateService.getDisableBadgeCounter();\n    if (disableBadgeCounter) {\n      return;\n    }\n\n    const ciphers = await this.cipherService.getAllDecryptedForUrl(opts?.tab?.url);\n    let countText = ciphers.length == 0 ? \"\" : ciphers.length.toString();\n    if (ciphers.length > 9) {\n      countText = \"9+\";\n    }\n    await this.setBadgeText(countText, opts?.tab?.id);\n  }\n\n  setBadgeBackgroundColor(color = \"#294e5f\") {\n    if (this.badgeAction?.setBadgeBackgroundColor) {\n      this.badgeAction.setBadgeBackgroundColor({ color });\n    }\n    if (this.isOperaSidebar(this.sidebarAction)) {\n      this.sidebarAction.setBadgeBackgroundColor({ color });\n    }\n  }\n\n  setBadgeText(text: string, tabId?: number) {\n    this.setActionText(text, tabId);\n    this.setSideBarText(text, tabId);\n  }\n\n  async setBadgeIcon(iconSuffix: string, windowId?: number) {\n    const options: IconDetails = {\n      path: {\n        19: \"/images/icon19\" + iconSuffix + \".png\",\n        38: \"/images/icon38\" + iconSuffix + \".png\",\n      },\n    };\n    if (windowId && BrowserPlatformUtilsService.isFirefox()) {\n      options.windowId = windowId;\n    }\n\n    await this.setActionIcon(options);\n    await this.setSidebarActionIcon(options);\n  }\n\n  private setActionText(text: string, tabId?: number) {\n    if (this.badgeAction?.setBadgeText) {\n      this.badgeAction.setBadgeText({ text, tabId });\n    }\n  }\n\n  private setSideBarText(text: string, tabId?: number) {\n    if (this.isOperaSidebar(this.sidebarAction)) {\n      this.sidebarAction.setBadgeText({ text, tabId });\n    } else if (this.sidebarAction) {\n      // Firefox\n      const title = `Bitwarden${Utils.isNullOrEmpty(text) ? \"\" : ` [${text}]`}`;\n      this.sidebarAction.setTitle({ title, tabId });\n    }\n  }\n\n  private async setActionIcon(options: IconDetails) {\n    if (!this.badgeAction?.setIcon) {\n      return;\n    }\n\n    if (this.useSyncApiCalls) {\n      this.badgeAction.setIcon(options);\n    } else {\n      await new Promise<void>((resolve) => this.badgeAction.setIcon(options, () => resolve()));\n    }\n  }\n\n  private async setSidebarActionIcon(options: IconDetails) {\n    if (!this.sidebarAction?.setIcon) {\n      return;\n    }\n\n    if (this.isOperaSidebar(this.sidebarAction)) {\n      await new Promise<void>((resolve) =>\n        (this.sidebarAction as OperaSidebarAction).setIcon(options, () => resolve())\n      );\n    } else {\n      await this.sidebarAction.setIcon(options);\n    }\n  }\n\n  private async getTab(tabId?: number, windowId?: number) {\n    return (\n      (await BrowserApi.getTab(tabId)) ??\n      (windowId\n        ? await BrowserApi.tabsQueryFirst({ active: true, windowId })\n        : await BrowserApi.tabsQueryFirst({ active: true, currentWindow: true })) ??\n      (await BrowserApi.tabsQueryFirst({ active: true, lastFocusedWindow: true })) ??\n      (await BrowserApi.tabsQueryFirst({ active: true }))\n    );\n  }\n\n  private get useSyncApiCalls() {\n    return (\n      BrowserPlatformUtilsService.isFirefox() || BrowserPlatformUtilsService.isSafari(this.win)\n    );\n  }\n\n  private async initServices(existingServiceCache?: Record<string, unknown>): Promise<UpdateBadge> {\n    if (this.inited) {\n      return this;\n    }\n\n    const serviceCache: Record<string, unknown> = existingServiceCache || {};\n    const opts = {\n      cryptoFunctionServiceOptions: { win: self },\n      encryptServiceOptions: { logMacFailures: false },\n      logServiceOptions: { isDev: false },\n      platformUtilsServiceOptions: {\n        clipboardWriteCallback: (clipboardValue: string, clearMs: number) =>\n          Promise.reject(\"not implemented\"),\n        biometricCallback: () => Promise.reject(\"not implemented\"),\n        win: self,\n      },\n      stateServiceOptions: {\n        stateFactory: new StateFactory(GlobalState, Account),\n      },\n      apiServiceOptions: {\n        logoutCallback: () => Promise.reject(\"not implemented\"),\n      },\n      keyConnectorServiceOptions: {\n        logoutCallback: () => Promise.reject(\"not implemented\"),\n      },\n      i18nServiceOptions: {\n        systemLanguage: BrowserApi.getUILanguage(self),\n      },\n    };\n    this.stateService = await stateServiceFactory(serviceCache, opts);\n    this.authService = await authServiceFactory(serviceCache, opts);\n    this.cipherService = await cipherServiceFactory(serviceCache, opts);\n\n    // Needed for cipher decryption\n    if (!self.bitwardenContainerService) {\n      new ContainerService(\n        serviceCache.cryptoService as CryptoService,\n        serviceCache.encryptService as EncryptService\n      ).attachToGlobal(self);\n    }\n\n    this.inited = true;\n\n    return this;\n  }\n\n  private isOperaSidebar(\n    action: OperaSidebarAction | FirefoxSidebarAction\n  ): action is OperaSidebarAction {\n    return action != null && (action as OperaSidebarAction).setBadgeText != null;\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\n\nimport { BrowserApi } from \"../browser/browser-api\";\n\nimport { BrowserPopoutWindowService as BrowserPopupWindowServiceInterface } from \"./abstractions/browser-popout-window.service\";\n\nclass BrowserPopoutWindowService implements BrowserPopupWindowServiceInterface {\n  private singleActionPopoutTabIds: Record<string, number> = {};\n  private defaultPopoutWindowOptions: chrome.windows.CreateData = {\n    type: \"popup\",\n    focused: true,\n    width: 380,\n    height: 630,\n  };\n\n  async openUnlockPrompt(senderWindowId: number) {\n    await this.openSingleActionPopout(\n      senderWindowId,\n      \"popup/index.html?uilocation=popout\",\n      \"unlockPrompt\"\n    );\n  }\n\n  async closeUnlockPrompt() {\n    await this.closeSingleActionPopout(\"unlockPrompt\");\n  }\n\n  async openPasswordRepromptPrompt(\n    senderWindowId: number,\n    {\n      cipherId,\n      senderTabId,\n      action,\n    }: {\n      cipherId: string;\n      senderTabId: number;\n      action: string;\n    }\n  ) {\n    const promptWindowPath =\n      \"popup/index.html#/view-cipher\" +\n      \"?uilocation=popout\" +\n      `&cipherId=${cipherId}` +\n      `&senderTabId=${senderTabId}` +\n      `&action=${action}`;\n\n    await this.openSingleActionPopout(senderWindowId, promptWindowPath, \"passwordReprompt\");\n  }\n\n  async openCipherCreation(\n    senderWindowId: number,\n    {\n      cipherType = CipherType.Login,\n      senderTabId,\n      senderTabURI,\n    }: {\n      cipherType?: CipherType;\n      senderTabId: number;\n      senderTabURI: string;\n    }\n  ) {\n    const promptWindowPath =\n      \"popup/index.html#/edit-cipher\" +\n      \"?uilocation=popout\" +\n      `&type=${cipherType}` +\n      `&senderTabId=${senderTabId}` +\n      `&uri=${senderTabURI}`;\n\n    await this.openSingleActionPopout(senderWindowId, promptWindowPath, \"cipherCreation\");\n  }\n\n  async openCipherEdit(\n    senderWindowId: number,\n    {\n      cipherId,\n      senderTabId,\n      senderTabURI,\n    }: {\n      cipherId: string;\n      senderTabId: number;\n      senderTabURI: string;\n    }\n  ) {\n    const promptWindowPath =\n      \"popup/index.html#/edit-cipher\" +\n      \"?uilocation=popout\" +\n      `&cipherId=${cipherId}` +\n      `&senderTabId=${senderTabId}` +\n      `&uri=${senderTabURI}`;\n\n    await this.openSingleActionPopout(senderWindowId, promptWindowPath, \"cipherEdit\");\n  }\n\n  async closePasswordRepromptPrompt() {\n    await this.closeSingleActionPopout(\"passwordReprompt\");\n  }\n\n  async openFido2Popout(\n    senderWindow: chrome.tabs.Tab,\n    {\n      sessionId,\n      senderTabId,\n      fallbackSupported,\n    }: {\n      sessionId: string;\n      senderTabId: number;\n      fallbackSupported: boolean;\n    }\n  ): Promise<number> {\n    await this.closeFido2Popout();\n\n    const promptWindowPath =\n      \"popup/index.html#/fido2\" +\n      \"?uilocation=popout\" +\n      `&sessionId=${sessionId}` +\n      `&fallbackSupported=${fallbackSupported}` +\n      `&senderTabId=${senderTabId}` +\n      `&senderUrl=${encodeURIComponent(senderWindow.url)}`;\n\n    return await this.openSingleActionPopout(\n      senderWindow.windowId,\n      promptWindowPath,\n      \"fido2Popout\",\n      {\n        height: 450,\n      }\n    );\n  }\n\n  async closeFido2Popout(): Promise<void> {\n    await this.closeSingleActionPopout(\"fido2Popout\");\n  }\n\n  private async openSingleActionPopout(\n    senderWindowId: number,\n    popupWindowURL: string,\n    singleActionPopoutKey: string,\n    options: chrome.windows.CreateData = {}\n  ): Promise<number> {\n    const senderWindow = senderWindowId && (await BrowserApi.getWindow(senderWindowId));\n    const url = chrome.extension.getURL(popupWindowURL);\n    const offsetRight = 15;\n    const offsetTop = 90;\n    /// Use overrides in `options` if provided, otherwise use default\n    const popupWidth = options?.width || this.defaultPopoutWindowOptions.width;\n    const windowOptions = senderWindow\n      ? {\n          ...this.defaultPopoutWindowOptions,\n          left: senderWindow.left + senderWindow.width - popupWidth - offsetRight,\n          top: senderWindow.top + offsetTop,\n          ...options,\n          url,\n        }\n      : { ...this.defaultPopoutWindowOptions, url, ...options };\n\n    const popupWindow = await BrowserApi.createWindow(windowOptions);\n\n    await this.closeSingleActionPopout(singleActionPopoutKey);\n    this.singleActionPopoutTabIds[singleActionPopoutKey] = popupWindow?.tabs[0].id;\n\n    return popupWindow.id;\n  }\n\n  private async closeSingleActionPopout(popoutKey: string) {\n    const tabId = this.singleActionPopoutTabIds[popoutKey];\n\n    if (tabId) {\n      await BrowserApi.removeTab(tabId);\n    }\n    this.singleActionPopoutTabIds[popoutKey] = null;\n  }\n}\n\nexport default BrowserPopoutWindowService;\n","import { ReplaySubject } from \"rxjs\";\n\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { ConfigApiServiceAbstraction } from \"@bitwarden/common/platform/abstractions/config/config-api.service.abstraction\";\nimport { ServerConfig } from \"@bitwarden/common/platform/abstractions/config/server-config\";\nimport { EnvironmentService } from \"@bitwarden/common/platform/abstractions/environment.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { ConfigService } from \"@bitwarden/common/platform/services/config/config.service\";\n\nimport { browserSession, sessionSync } from \"../decorators/session-sync-observable\";\n\n@browserSession\nexport class BrowserConfigService extends ConfigService {\n  @sessionSync<ServerConfig>({ initializer: ServerConfig.fromJSON })\n  protected _serverConfig: ReplaySubject<ServerConfig | null>;\n\n  constructor(\n    stateService: StateService,\n    configApiService: ConfigApiServiceAbstraction,\n    authService: AuthService,\n    environmentService: EnvironmentService,\n    logService: LogService,\n    subscribe = false\n  ) {\n    super(stateService, configApiService, authService, environmentService, logService, subscribe);\n  }\n}\n","import { ServerConfigResponse } from \"../../models/response/server-config.response\";\n\nexport abstract class ConfigApiServiceAbstraction {\n  get: () => Promise<ServerConfigResponse>;\n}\n","import { Observable } from \"rxjs\";\n\nimport { AuthRequestPushNotification } from \"../../models/response/notification.response\";\nimport { MasterKey } from \"../../platform/models/domain/symmetric-crypto-key\";\nimport { AuthenticationStatus } from \"../enums/authentication-status\";\nimport { AuthResult } from \"../models/domain/auth-result\";\nimport {\n  UserApiLogInCredentials,\n  PasswordLogInCredentials,\n  SsoLogInCredentials,\n  PasswordlessLogInCredentials,\n} from \"../models/domain/log-in-credentials\";\nimport { TokenTwoFactorRequest } from \"../models/request/identity-token/token-two-factor.request\";\nimport { AuthRequestResponse } from \"../models/response/auth-request.response\";\n\nexport abstract class AuthService {\n  masterPasswordHash: string;\n  email: string;\n  accessCode: string;\n  authRequestId: string;\n  ssoEmail2FaSessionToken: string;\n\n  logIn: (\n    credentials:\n      | UserApiLogInCredentials\n      | PasswordLogInCredentials\n      | SsoLogInCredentials\n      | PasswordlessLogInCredentials\n  ) => Promise<AuthResult>;\n  logInTwoFactor: (\n    twoFactor: TokenTwoFactorRequest,\n    captchaResponse: string\n  ) => Promise<AuthResult>;\n  logOut: (callback: () => void) => void;\n  makePreloginKey: (masterPassword: string, email: string) => Promise<MasterKey>;\n  authingWithUserApiKey: () => boolean;\n  authingWithSso: () => boolean;\n  authingWithPassword: () => boolean;\n  authingWithPasswordless: () => boolean;\n  getAuthStatus: (userId?: string) => Promise<AuthenticationStatus>;\n  authResponsePushNotification: (notification: AuthRequestPushNotification) => Promise<any>;\n  passwordlessLogin: (\n    id: string,\n    key: string,\n    requestApproved: boolean\n  ) => Promise<AuthRequestResponse>;\n  getPushNotificationObs$: () => Observable<any>;\n}\n","import { ReplaySubject } from \"rxjs\";\n\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\n\nimport { browserSession, sessionSync } from \"../decorators/session-sync-observable\";\n\nimport I18nService from \"./i18n.service\";\n\n@browserSession\nexport class BrowserI18nService extends I18nService {\n  @sessionSync({ initializer: (s: string) => s })\n  protected _locale: ReplaySubject<string>;\n\n  constructor(systemLanguage: string, private stateService: StateService) {\n    super(systemLanguage);\n  }\n}\n","import { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\n\nexport default class BrowserMessagingPrivateModeBackgroundService implements MessagingService {\n  send(subscriber: string, arg: any = {}) {\n    const message = Object.assign({}, { command: subscriber }, arg);\n    (window as any).bitwardenPopupMainMessageListener(message);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../../platform/models/domain/symmetric-crypto-key\";\nimport { SendFileData } from \"../data/send-file.data\";\nimport { SendFileView } from \"../view/send-file.view\";\n\nexport class SendFile extends Domain {\n  id: string;\n  size: string;\n  sizeName: string;\n  fileName: EncString;\n\n  constructor(obj?: SendFileData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.size = obj.size;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        sizeName: null,\n        fileName: null,\n      },\n      [\"id\", \"sizeName\"]\n    );\n  }\n\n  async decrypt(key: SymmetricCryptoKey): Promise<SendFileView> {\n    const view = await this.decryptObj(\n      new SendFileView(this),\n      {\n        fileName: null,\n      },\n      null,\n      key\n    );\n    return view;\n  }\n\n  static fromJSON(obj: Jsonify<SendFile>) {\n    if (obj == null) {\n      return null;\n    }\n\n    return Object.assign(new SendFile(), obj, {\n      fileName: EncString.fromJSON(obj.fileName),\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../../platform/models/domain/symmetric-crypto-key\";\nimport { SendTextData } from \"../data/send-text.data\";\nimport { SendTextView } from \"../view/send-text.view\";\n\nexport class SendText extends Domain {\n  text: EncString;\n  hidden: boolean;\n\n  constructor(obj?: SendTextData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.hidden = obj.hidden;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        text: null,\n      },\n      []\n    );\n  }\n\n  decrypt(key: SymmetricCryptoKey): Promise<SendTextView> {\n    return this.decryptObj(\n      new SendTextView(this),\n      {\n        text: null,\n      },\n      null,\n      key\n    );\n  }\n\n  static fromJSON(obj: Jsonify<SendText>) {\n    if (obj == null) {\n      return null;\n    }\n\n    return Object.assign(new SendText(), obj, {\n      text: EncString.fromJSON(obj.text),\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Utils } from \"../../../../platform/misc/utils\";\nimport Domain from \"../../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../../platform/models/domain/enc-string\";\nimport { SendType } from \"../../enums/send-type\";\nimport { SendData } from \"../data/send.data\";\nimport { SendView } from \"../view/send.view\";\n\nimport { SendFile } from \"./send-file\";\nimport { SendText } from \"./send-text\";\n\nexport class Send extends Domain {\n  id: string;\n  accessId: string;\n  type: SendType;\n  name: EncString;\n  notes: EncString;\n  file: SendFile;\n  text: SendText;\n  key: EncString;\n  maxAccessCount?: number;\n  accessCount: number;\n  revisionDate: Date;\n  expirationDate: Date;\n  deletionDate: Date;\n  password: string;\n  disabled: boolean;\n  hideEmail: boolean;\n\n  constructor(obj?: SendData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        accessId: null,\n        name: null,\n        notes: null,\n        key: null,\n      },\n      [\"id\", \"accessId\"]\n    );\n\n    this.type = obj.type;\n    this.maxAccessCount = obj.maxAccessCount;\n    this.accessCount = obj.accessCount;\n    this.password = obj.password;\n    this.disabled = obj.disabled;\n    this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;\n    this.deletionDate = obj.deletionDate != null ? new Date(obj.deletionDate) : null;\n    this.expirationDate = obj.expirationDate != null ? new Date(obj.expirationDate) : null;\n    this.hideEmail = obj.hideEmail;\n\n    switch (this.type) {\n      case SendType.Text:\n        this.text = new SendText(obj.text);\n        break;\n      case SendType.File:\n        this.file = new SendFile(obj.file);\n        break;\n      default:\n        break;\n    }\n  }\n\n  async decrypt(): Promise<SendView> {\n    const model = new SendView(this);\n\n    const cryptoService = Utils.getContainerService().getCryptoService();\n\n    try {\n      model.key = await cryptoService.decryptToBytes(this.key, null);\n      model.cryptoKey = await cryptoService.makeSendKey(model.key);\n    } catch (e) {\n      // TODO: error?\n    }\n\n    await this.decryptObj(\n      model,\n      {\n        name: null,\n        notes: null,\n      },\n      null,\n      model.cryptoKey\n    );\n\n    switch (this.type) {\n      case SendType.File:\n        model.file = await this.file.decrypt(model.cryptoKey);\n        break;\n      case SendType.Text:\n        model.text = await this.text.decrypt(model.cryptoKey);\n        break;\n      default:\n        break;\n    }\n\n    return model;\n  }\n\n  static fromJSON(obj: Jsonify<Send>) {\n    if (obj == null) {\n      return null;\n    }\n\n    const revisionDate = obj.revisionDate == null ? null : new Date(obj.revisionDate);\n    const expirationDate = obj.expirationDate == null ? null : new Date(obj.expirationDate);\n    const deletionDate = obj.deletionDate == null ? null : new Date(obj.deletionDate);\n\n    return Object.assign(new Send(), obj, {\n      key: EncString.fromJSON(obj.key),\n      name: EncString.fromJSON(obj.name),\n      notes: EncString.fromJSON(obj.notes),\n      text: SendText.fromJSON(obj.text),\n      file: SendFile.fromJSON(obj.file),\n      revisionDate,\n      expirationDate,\n      deletionDate,\n    });\n  }\n}\n","import { BehaviorSubject, concatMap } from \"rxjs\";\n\nimport { SEND_KDF_ITERATIONS } from \"../../../enums\";\nimport { CryptoFunctionService } from \"../../../platform/abstractions/crypto-function.service\";\nimport { CryptoService } from \"../../../platform/abstractions/crypto.service\";\nimport { I18nService } from \"../../../platform/abstractions/i18n.service\";\nimport { StateService } from \"../../../platform/abstractions/state.service\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { EncArrayBuffer } from \"../../../platform/models/domain/enc-array-buffer\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { SendType } from \"../enums/send-type\";\nimport { SendData } from \"../models/data/send.data\";\nimport { Send } from \"../models/domain/send\";\nimport { SendFile } from \"../models/domain/send-file\";\nimport { SendText } from \"../models/domain/send-text\";\nimport { SendView } from \"../models/view/send.view\";\n\nimport { InternalSendService as InternalSendServiceAbstraction } from \"./send.service.abstraction\";\n\nexport class SendService implements InternalSendServiceAbstraction {\n  protected _sends: BehaviorSubject<Send[]> = new BehaviorSubject([]);\n  protected _sendViews: BehaviorSubject<SendView[]> = new BehaviorSubject([]);\n\n  sends$ = this._sends.asObservable();\n  sendViews$ = this._sendViews.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private i18nService: I18nService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private stateService: StateService\n  ) {\n    this.stateService.activeAccountUnlocked$\n      .pipe(\n        concatMap(async (unlocked) => {\n          if (Utils.global.bitwardenContainerService == null) {\n            return;\n          }\n\n          if (!unlocked) {\n            this._sends.next([]);\n            this._sendViews.next([]);\n            return;\n          }\n\n          const data = await this.stateService.getEncryptedSends();\n\n          await this.updateObservables(data);\n        })\n      )\n      .subscribe();\n  }\n\n  async clearCache(): Promise<void> {\n    await this._sendViews.next([]);\n  }\n\n  async encrypt(\n    model: SendView,\n    file: File | ArrayBuffer,\n    password: string,\n    key?: SymmetricCryptoKey\n  ): Promise<[Send, EncArrayBuffer]> {\n    let fileData: EncArrayBuffer = null;\n    const send = new Send();\n    send.id = model.id;\n    send.type = model.type;\n    send.disabled = model.disabled;\n    send.hideEmail = model.hideEmail;\n    send.maxAccessCount = model.maxAccessCount;\n    if (model.key == null) {\n      model.key = await this.cryptoFunctionService.aesGenerateKey(128);\n      model.cryptoKey = await this.cryptoService.makeSendKey(model.key);\n    }\n    if (password != null) {\n      const passwordHash = await this.cryptoFunctionService.pbkdf2(\n        password,\n        model.key,\n        \"sha256\",\n        SEND_KDF_ITERATIONS\n      );\n      send.password = Utils.fromBufferToB64(passwordHash);\n    }\n    send.key = await this.cryptoService.encrypt(model.key, key);\n    send.name = await this.cryptoService.encrypt(model.name, model.cryptoKey);\n    send.notes = await this.cryptoService.encrypt(model.notes, model.cryptoKey);\n    if (send.type === SendType.Text) {\n      send.text = new SendText();\n      send.text.text = await this.cryptoService.encrypt(model.text.text, model.cryptoKey);\n      send.text.hidden = model.text.hidden;\n    } else if (send.type === SendType.File) {\n      send.file = new SendFile();\n      if (file != null) {\n        if (file instanceof ArrayBuffer) {\n          const [name, data] = await this.encryptFileData(\n            model.file.fileName,\n            file,\n            model.cryptoKey\n          );\n          send.file.fileName = name;\n          fileData = data;\n        } else {\n          fileData = await this.parseFile(send, file, model.cryptoKey);\n        }\n      }\n    }\n\n    return [send, fileData];\n  }\n\n  get(id: string): Send {\n    const sends = this._sends.getValue();\n    return sends.find((send) => send.id === id);\n  }\n\n  async getFromState(id: string): Promise<Send> {\n    const sends = await this.stateService.getEncryptedSends();\n    // eslint-disable-next-line\n    if (sends == null || !sends.hasOwnProperty(id)) {\n      return null;\n    }\n\n    return new Send(sends[id]);\n  }\n\n  async getAll(): Promise<Send[]> {\n    const sends = await this.stateService.getEncryptedSends();\n    const response: Send[] = [];\n    for (const id in sends) {\n      // eslint-disable-next-line\n      if (sends.hasOwnProperty(id)) {\n        response.push(new Send(sends[id]));\n      }\n    }\n    return response;\n  }\n\n  async getAllDecryptedFromState(): Promise<SendView[]> {\n    let decSends = await this.stateService.getDecryptedSends();\n    if (decSends != null) {\n      return decSends;\n    }\n\n    decSends = [];\n    const hasKey = await this.cryptoService.hasUserKey();\n    if (!hasKey) {\n      throw new Error(\"No user key found.\");\n    }\n\n    const promises: Promise<any>[] = [];\n    const sends = await this.getAll();\n    sends.forEach((send) => {\n      promises.push(send.decrypt().then((f) => decSends.push(f)));\n    });\n\n    await Promise.all(promises);\n    decSends.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n\n    await this.stateService.setDecryptedSends(decSends);\n    return decSends;\n  }\n\n  async upsert(send: SendData | SendData[]): Promise<any> {\n    let sends = await this.stateService.getEncryptedSends();\n    if (sends == null) {\n      sends = {};\n    }\n    if (send instanceof SendData) {\n      const s = send as SendData;\n      sends[s.id] = s;\n    } else {\n      (send as SendData[]).forEach((s) => {\n        sends[s.id] = s;\n      });\n    }\n\n    await this.replace(sends);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    if (userId == null || userId == (await this.stateService.getUserId())) {\n      this._sends.next([]);\n      this._sendViews.next([]);\n    }\n    await this.stateService.setDecryptedSends(null, { userId: userId });\n    await this.stateService.setEncryptedSends(null, { userId: userId });\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const sends = await this.stateService.getEncryptedSends();\n    if (sends == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      if (sends[id] == null) {\n        return;\n      }\n      delete sends[id];\n    } else {\n      (id as string[]).forEach((i) => {\n        delete sends[i];\n      });\n    }\n\n    await this.replace(sends);\n  }\n\n  async replace(sends: { [id: string]: SendData }): Promise<any> {\n    await this.updateObservables(sends);\n    await this.stateService.setEncryptedSends(sends);\n  }\n\n  private parseFile(send: Send, file: File, key: SymmetricCryptoKey): Promise<EncArrayBuffer> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(file);\n      reader.onload = async (evt) => {\n        try {\n          const [name, data] = await this.encryptFileData(\n            file.name,\n            evt.target.result as ArrayBuffer,\n            key\n          );\n          send.file.fileName = name;\n          resolve(data);\n        } catch (e) {\n          reject(e);\n        }\n      };\n      reader.onerror = () => {\n        reject(\"Error reading file.\");\n      };\n    });\n  }\n\n  private async encryptFileData(\n    fileName: string,\n    data: ArrayBuffer,\n    key: SymmetricCryptoKey\n  ): Promise<[EncString, EncArrayBuffer]> {\n    const encFileName = await this.cryptoService.encrypt(fileName, key);\n    const encFileData = await this.cryptoService.encryptToBytes(new Uint8Array(data), key);\n    return [encFileName, encFileData];\n  }\n\n  private async updateObservables(sendsMap: { [id: string]: SendData }) {\n    const sends = Object.values(sendsMap || {}).map((f) => new Send(f));\n    this._sends.next(sends);\n\n    if (await this.cryptoService.hasUserKey()) {\n      this._sendViews.next(await this.decryptSends(sends));\n    }\n  }\n\n  private async decryptSends(sends: Send[]) {\n    const decryptSendPromises = sends.map((s) => s.decrypt());\n    const decryptedSends = await Promise.all(decryptSendPromises);\n\n    decryptedSends.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n    return decryptedSends;\n  }\n}\n","import { BehaviorSubject } from \"rxjs\";\n\nimport { Send } from \"@bitwarden/common/tools/send/models/domain/send\";\nimport { SendView } from \"@bitwarden/common/tools/send/models/view/send.view\";\nimport { SendService } from \"@bitwarden/common/tools/send/services/send.service\";\n\nimport { browserSession, sessionSync } from \"../platform/decorators/session-sync-observable\";\n\n@browserSession\nexport class BrowserSendService extends SendService {\n  @sessionSync({ initializer: Send.fromJSON, initializeAs: \"array\" })\n  protected _sends: BehaviorSubject<Send[]>;\n  @sessionSync({ initializer: SendView.fromJSON, initializeAs: \"array\" })\n  protected _sendViews: BehaviorSubject<SendView[]>;\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { SearchService } from \"../../abstractions/search.service\";\nimport { VaultTimeoutSettingsService } from \"../../abstractions/vault-timeout/vault-timeout-settings.service\";\nimport { VaultTimeoutService as VaultTimeoutServiceAbstraction } from \"../../abstractions/vault-timeout/vault-timeout.service\";\nimport { AuthService } from \"../../auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"../../auth/enums/authentication-status\";\nimport { ClientType } from \"../../enums\";\nimport { VaultTimeoutAction } from \"../../enums/vault-timeout-action.enum\";\nimport { CryptoService } from \"../../platform/abstractions/crypto.service\";\nimport { MessagingService } from \"../../platform/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../platform/abstractions/platform-utils.service\";\nimport { StateService } from \"../../platform/abstractions/state.service\";\nimport { CipherService } from \"../../vault/abstractions/cipher.service\";\nimport { CollectionService } from \"../../vault/abstractions/collection.service\";\nimport { FolderService } from \"../../vault/abstractions/folder/folder.service.abstraction\";\n\nexport class VaultTimeoutService implements VaultTimeoutServiceAbstraction {\n  private inited = false;\n\n  constructor(\n    private cipherService: CipherService,\n    private folderService: FolderService,\n    private collectionService: CollectionService,\n    private cryptoService: CryptoService,\n    protected platformUtilsService: PlatformUtilsService,\n    private messagingService: MessagingService,\n    private searchService: SearchService,\n    private stateService: StateService,\n    private authService: AuthService,\n    private vaultTimeoutSettingsService: VaultTimeoutSettingsService,\n    private lockedCallback: (userId?: string) => Promise<void> = null,\n    private loggedOutCallback: (expired: boolean, userId?: string) => Promise<void> = null\n  ) {}\n\n  async init(checkOnInterval: boolean) {\n    if (this.inited) {\n      return;\n    }\n    // TODO: Remove after 2023.10 release (https://bitwarden.atlassian.net/browse/PM-3483)\n    await this.migrateKeyForNeverLockIfNeeded();\n\n    this.inited = true;\n    if (checkOnInterval) {\n      this.startCheck();\n    }\n  }\n\n  startCheck() {\n    this.checkVaultTimeout();\n    setInterval(() => this.checkVaultTimeout(), 10 * 1000); // check every 10 seconds\n  }\n\n  async checkVaultTimeout(): Promise<void> {\n    if (await this.platformUtilsService.isViewOpen()) {\n      return;\n    }\n\n    const accounts = await firstValueFrom(this.stateService.accounts$);\n    for (const userId in accounts) {\n      if (userId != null && (await this.shouldLock(userId))) {\n        await this.executeTimeoutAction(userId);\n      }\n    }\n  }\n\n  async lock(userId?: string): Promise<void> {\n    const authed = await this.stateService.getIsAuthenticated({ userId: userId });\n    if (!authed) {\n      return;\n    }\n\n    const availableActions = await firstValueFrom(\n      this.vaultTimeoutSettingsService.availableVaultTimeoutActions$()\n    );\n    const supportsLock = availableActions.includes(VaultTimeoutAction.Lock);\n    if (!supportsLock) {\n      await this.logOut(userId);\n    }\n\n    if (userId == null || userId === (await this.stateService.getUserId())) {\n      this.searchService.clearIndex();\n      await this.folderService.clearCache();\n    }\n\n    await this.stateService.setEverBeenUnlocked(true, { userId: userId });\n    await this.stateService.setUserKeyAutoUnlock(null, { userId: userId });\n    await this.stateService.setCryptoMasterKeyAuto(null, { userId: userId });\n\n    await this.cryptoService.clearUserKey(false, userId);\n    await this.cryptoService.clearMasterKey(userId);\n    await this.cryptoService.clearOrgKeys(true, userId);\n    await this.cryptoService.clearKeyPair(true, userId);\n\n    await this.cipherService.clearCache(userId);\n    await this.collectionService.clearCache(userId);\n\n    this.messagingService.send(\"locked\", { userId: userId });\n\n    if (this.lockedCallback != null) {\n      await this.lockedCallback(userId);\n    }\n  }\n\n  async logOut(userId?: string): Promise<void> {\n    if (this.loggedOutCallback != null) {\n      await this.loggedOutCallback(false, userId);\n    }\n  }\n\n  private async shouldLock(userId: string): Promise<boolean> {\n    const authStatus = await this.authService.getAuthStatus(userId);\n    if (\n      authStatus === AuthenticationStatus.Locked ||\n      authStatus === AuthenticationStatus.LoggedOut\n    ) {\n      return false;\n    }\n\n    const vaultTimeout = await this.vaultTimeoutSettingsService.getVaultTimeout(userId);\n    if (vaultTimeout == null || vaultTimeout < 0) {\n      return false;\n    }\n\n    const lastActive = await this.stateService.getLastActive({ userId: userId });\n    if (lastActive == null) {\n      return false;\n    }\n\n    const vaultTimeoutSeconds = vaultTimeout * 60;\n    const diffSeconds = (new Date().getTime() - lastActive) / 1000;\n    return diffSeconds >= vaultTimeoutSeconds;\n  }\n\n  private async executeTimeoutAction(userId: string): Promise<void> {\n    const timeoutAction = await firstValueFrom(\n      this.vaultTimeoutSettingsService.vaultTimeoutAction$(userId)\n    );\n    timeoutAction === VaultTimeoutAction.LogOut\n      ? await this.logOut(userId)\n      : await this.lock(userId);\n  }\n\n  private async migrateKeyForNeverLockIfNeeded(): Promise<void> {\n    // Web can't set vault timeout to never\n    if (this.platformUtilsService.getClientType() == ClientType.Web) {\n      return;\n    }\n    const accounts = await firstValueFrom(this.stateService.accounts$);\n    for (const userId in accounts) {\n      if (userId != null) {\n        await this.cryptoService.migrateAutoKeyIfNeeded(userId);\n        // Legacy users should be logged out since we're not on the web vault and can't migrate.\n        if (await this.cryptoService.isLegacyUser(null, userId)) {\n          await this.logOut(userId);\n        }\n      }\n    }\n  }\n}\n","import { VaultTimeoutService as BaseVaultTimeoutService } from \"@bitwarden/common/services/vault-timeout/vault-timeout.service\";\n\nimport { SafariApp } from \"../../browser/safariApp\";\n\nexport default class VaultTimeoutService extends BaseVaultTimeoutService {\n  startCheck() {\n    this.checkVaultTimeout();\n    if (this.platformUtilsService.isSafari()) {\n      this.checkSafari();\n    } else {\n      setInterval(() => this.checkVaultTimeout(), 10 * 1000); // check every 10 seconds\n    }\n  }\n\n  // This is a work-around to safari adding an arbitrary delay to setTimeout and\n  //  setIntervals. It works by calling the native extension which sleeps for 10s,\n  //  efficiently replicating setInterval.\n  async checkSafari() {\n    // eslint-disable-next-line\n    while (true) {\n      try {\n        await SafariApp.sendMessageToApp(\"sleep\");\n        this.checkVaultTimeout();\n      } catch (e) {\n        // eslint-disable-next-line\n        console.log(\"Exception Safari VaultTimeout\", e);\n      }\n    }\n  }\n}\n","import { inject } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport {\n  BehaviorSubject,\n  EmptyError,\n  filter,\n  firstValueFrom,\n  fromEvent,\n  fromEventPattern,\n  map,\n  merge,\n  Observable,\n  Subject,\n  switchMap,\n  take,\n  takeUntil,\n  throwError,\n} from \"rxjs\";\n\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { UserRequestedFallbackAbortReason } from \"@bitwarden/common/vault/abstractions/fido2/fido2-client.service.abstraction\";\nimport {\n  Fido2UserInterfaceService as Fido2UserInterfaceServiceAbstraction,\n  Fido2UserInterfaceSession,\n  NewCredentialParams,\n  PickCredentialParams,\n} from \"@bitwarden/common/vault/abstractions/fido2/fido2-user-interface.service.abstraction\";\n\nimport { BrowserApi } from \"../../platform/browser/browser-api\";\nimport { BrowserPopoutWindowService } from \"../../platform/popup/abstractions/browser-popout-window.service\";\n\nconst BrowserFido2MessageName = \"BrowserFido2UserInterfaceServiceMessage\";\n\n/**\n * Function to retrieve FIDO2 session data from query parameters.\n * Expected to be used within components tied to routes with these query parameters.\n */\nexport function fido2PopoutSessionData$() {\n  const route = inject(ActivatedRoute);\n\n  return route.queryParams.pipe(\n    map((queryParams) => ({\n      isFido2Session: queryParams.sessionId != null,\n      sessionId: queryParams.sessionId as string,\n      fallbackSupported: queryParams.fallbackSupported === \"true\",\n      userVerification: queryParams.userVerification === \"true\",\n    }))\n  );\n}\n\nexport class SessionClosedError extends Error {\n  constructor() {\n    super(\"Fido2UserInterfaceSession was closed\");\n  }\n}\n\nexport type BrowserFido2Message = { sessionId: string } & (\n  | /**\n   * This message is used by popouts to announce that they are ready\n   * to recieve messages.\n   **/ {\n      type: \"ConnectResponse\";\n    }\n  /**\n   * This message is used to announce the creation of a new session.\n   * It is used by popouts to know when to close.\n   **/\n  | {\n      type: \"NewSessionCreatedRequest\";\n    }\n  | {\n      type: \"PickCredentialRequest\";\n      cipherIds: string[];\n      userVerification: boolean;\n      fallbackSupported: boolean;\n    }\n  | {\n      type: \"PickCredentialResponse\";\n      cipherId?: string;\n      userVerified: boolean;\n    }\n  | {\n      type: \"ConfirmNewCredentialRequest\";\n      credentialName: string;\n      userName: string;\n      userVerification: boolean;\n      fallbackSupported: boolean;\n    }\n  | {\n      type: \"ConfirmNewCredentialResponse\";\n      cipherId: string;\n      userVerified: boolean;\n    }\n  | {\n      type: \"InformExcludedCredentialRequest\";\n      existingCipherIds: string[];\n      fallbackSupported: boolean;\n    }\n  | {\n      type: \"InformCredentialNotFoundRequest\";\n      fallbackSupported: boolean;\n    }\n  | {\n      type: \"AbortRequest\";\n    }\n  | {\n      type: \"AbortResponse\";\n      fallbackRequested: boolean;\n    }\n);\n\n/**\n * Browser implementation of the {@link Fido2UserInterfaceService}.\n * The user interface is implemented as a popout and the service uses the browser's messaging API to communicate with it.\n */\nexport class BrowserFido2UserInterfaceService implements Fido2UserInterfaceServiceAbstraction {\n  constructor(\n    private browserPopoutWindowService: BrowserPopoutWindowService,\n    private authService: AuthService\n  ) {}\n\n  async newSession(\n    fallbackSupported: boolean,\n    tab: chrome.tabs.Tab,\n    abortController?: AbortController\n  ): Promise<Fido2UserInterfaceSession> {\n    return await BrowserFido2UserInterfaceSession.create(\n      this.browserPopoutWindowService,\n      this.authService,\n      fallbackSupported,\n      tab,\n      abortController\n    );\n  }\n}\n\nexport class BrowserFido2UserInterfaceSession implements Fido2UserInterfaceSession {\n  static async create(\n    browserPopoutWindowService: BrowserPopoutWindowService,\n    authService: AuthService,\n    fallbackSupported: boolean,\n    tab: chrome.tabs.Tab,\n    abortController?: AbortController\n  ): Promise<BrowserFido2UserInterfaceSession> {\n    return new BrowserFido2UserInterfaceSession(\n      browserPopoutWindowService,\n      authService,\n      fallbackSupported,\n      tab,\n      abortController\n    );\n  }\n\n  static sendMessage(msg: BrowserFido2Message) {\n    BrowserApi.sendMessage(BrowserFido2MessageName, msg);\n  }\n\n  static abortPopout(sessionId: string, fallbackRequested = false) {\n    this.sendMessage({\n      sessionId: sessionId,\n      type: \"AbortResponse\",\n      fallbackRequested: fallbackRequested,\n    });\n  }\n\n  static confirmNewCredentialResponse(sessionId: string, cipherId: string, userVerified: boolean) {\n    this.sendMessage({\n      sessionId: sessionId,\n      type: \"ConfirmNewCredentialResponse\",\n      cipherId,\n      userVerified,\n    });\n  }\n\n  private closed = false;\n  private messages$ = (BrowserApi.messageListener$() as Observable<BrowserFido2Message>).pipe(\n    filter((msg) => msg.sessionId === this.sessionId)\n  );\n  private connected$ = new BehaviorSubject(false);\n  private windowClosed$: Observable<number>;\n  private destroy$ = new Subject<void>();\n\n  private constructor(\n    private readonly browserPopoutWindowService: BrowserPopoutWindowService,\n    private readonly authService: AuthService,\n    private readonly fallbackSupported: boolean,\n    private readonly tab: chrome.tabs.Tab,\n    readonly abortController = new AbortController(),\n    readonly sessionId = Utils.newGuid()\n  ) {\n    this.messages$\n      .pipe(\n        filter((msg) => msg.type === \"ConnectResponse\"),\n        take(1),\n        takeUntil(this.destroy$)\n      )\n      .subscribe(() => {\n        this.connected$.next(true);\n      });\n\n    // Handle session aborted by RP\n    fromEvent(abortController.signal, \"abort\")\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => {\n        this.close();\n        BrowserFido2UserInterfaceSession.sendMessage({\n          type: \"AbortRequest\",\n          sessionId: this.sessionId,\n        });\n      });\n\n    // Handle session aborted by user\n    this.messages$\n      .pipe(\n        filter((msg) => msg.type === \"AbortResponse\"),\n        take(1),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((msg) => {\n        if (msg.type === \"AbortResponse\") {\n          this.close();\n          this.abort(msg.fallbackRequested);\n        }\n      });\n\n    this.windowClosed$ = fromEventPattern(\n      (handler: any) => chrome.windows.onRemoved.addListener(handler),\n      (handler: any) => chrome.windows.onRemoved.removeListener(handler)\n    );\n\n    BrowserFido2UserInterfaceSession.sendMessage({\n      type: \"NewSessionCreatedRequest\",\n      sessionId,\n    });\n  }\n\n  async pickCredential({\n    cipherIds,\n    userVerification,\n  }: PickCredentialParams): Promise<{ cipherId: string; userVerified: boolean }> {\n    const data: BrowserFido2Message = {\n      type: \"PickCredentialRequest\",\n      cipherIds,\n      sessionId: this.sessionId,\n      userVerification,\n      fallbackSupported: this.fallbackSupported,\n    };\n\n    await this.send(data);\n    const response = await this.receive(\"PickCredentialResponse\");\n\n    return { cipherId: response.cipherId, userVerified: response.userVerified };\n  }\n\n  async confirmNewCredential({\n    credentialName,\n    userName,\n    userVerification,\n  }: NewCredentialParams): Promise<{ cipherId: string; userVerified: boolean }> {\n    const data: BrowserFido2Message = {\n      type: \"ConfirmNewCredentialRequest\",\n      sessionId: this.sessionId,\n      credentialName,\n      userName,\n      userVerification,\n      fallbackSupported: this.fallbackSupported,\n    };\n\n    await this.send(data);\n    const response = await this.receive(\"ConfirmNewCredentialResponse\");\n\n    return { cipherId: response.cipherId, userVerified: response.userVerified };\n  }\n\n  async informExcludedCredential(existingCipherIds: string[]): Promise<void> {\n    const data: BrowserFido2Message = {\n      type: \"InformExcludedCredentialRequest\",\n      sessionId: this.sessionId,\n      existingCipherIds,\n      fallbackSupported: this.fallbackSupported,\n    };\n\n    await this.send(data);\n    await this.receive(\"AbortResponse\");\n  }\n\n  async ensureUnlockedVault(): Promise<void> {\n    if ((await this.authService.getAuthStatus()) !== AuthenticationStatus.Unlocked) {\n      await this.connect();\n    }\n  }\n\n  async informCredentialNotFound(): Promise<void> {\n    const data: BrowserFido2Message = {\n      type: \"InformCredentialNotFoundRequest\",\n      sessionId: this.sessionId,\n      fallbackSupported: this.fallbackSupported,\n    };\n\n    await this.send(data);\n    await this.receive(\"AbortResponse\");\n  }\n\n  async close() {\n    await this.browserPopoutWindowService.closeFido2Popout();\n    this.closed = true;\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private async abort(fallback = false) {\n    this.abortController.abort(fallback ? UserRequestedFallbackAbortReason : undefined);\n  }\n\n  private async send(msg: BrowserFido2Message): Promise<void> {\n    if (!this.connected$.value) {\n      await this.connect();\n    }\n    BrowserFido2UserInterfaceSession.sendMessage(msg);\n  }\n\n  private async receive<T extends BrowserFido2Message[\"type\"]>(\n    type: T\n  ): Promise<BrowserFido2Message & { type: T }> {\n    try {\n      const response = await firstValueFrom(\n        this.messages$.pipe(\n          filter((msg) => msg.sessionId === this.sessionId && msg.type === type),\n          takeUntil(this.destroy$)\n        )\n      );\n      return response as BrowserFido2Message & { type: T };\n    } catch (error) {\n      if (error instanceof EmptyError) {\n        throw new SessionClosedError();\n      }\n      throw error;\n    }\n  }\n\n  private async connect(): Promise<void> {\n    if (this.closed) {\n      throw new Error(\"Cannot re-open closed session\");\n    }\n\n    const connectPromise = firstValueFrom(\n      merge(\n        this.connected$.pipe(filter((connected) => connected === true)),\n        fromEvent(this.abortController.signal, \"abort\").pipe(\n          switchMap(() => throwError(() => new SessionClosedError()))\n        )\n      )\n    );\n\n    const popoutId = await this.browserPopoutWindowService.openFido2Popout(this.tab, {\n      sessionId: this.sessionId,\n      senderTabId: this.tab.id,\n      fallbackSupported: this.fallbackSupported,\n    });\n\n    this.windowClosed$\n      .pipe(\n        filter((windowId) => {\n          return popoutId === windowId;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe(() => {\n        this.close();\n        this.abort(true);\n      });\n\n    await connectPromise;\n  }\n}\n","import { BehaviorSubject, concatMap } from \"rxjs\";\n\nimport { CryptoService } from \"../../../platform/abstractions/crypto.service\";\nimport { I18nService } from \"../../../platform/abstractions/i18n.service\";\nimport { StateService } from \"../../../platform/abstractions/state.service\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { CipherService } from \"../../../vault/abstractions/cipher.service\";\nimport { InternalFolderService as InternalFolderServiceAbstraction } from \"../../../vault/abstractions/folder/folder.service.abstraction\";\nimport { CipherData } from \"../../../vault/models/data/cipher.data\";\nimport { FolderData } from \"../../../vault/models/data/folder.data\";\nimport { Folder } from \"../../../vault/models/domain/folder\";\nimport { FolderView } from \"../../../vault/models/view/folder.view\";\n\nexport class FolderService implements InternalFolderServiceAbstraction {\n  protected _folders: BehaviorSubject<Folder[]> = new BehaviorSubject([]);\n  protected _folderViews: BehaviorSubject<FolderView[]> = new BehaviorSubject([]);\n\n  folders$ = this._folders.asObservable();\n  folderViews$ = this._folderViews.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private i18nService: I18nService,\n    private cipherService: CipherService,\n    private stateService: StateService\n  ) {\n    this.stateService.activeAccountUnlocked$\n      .pipe(\n        concatMap(async (unlocked) => {\n          if (Utils.global.bitwardenContainerService == null) {\n            return;\n          }\n\n          if (!unlocked) {\n            this._folders.next([]);\n            this._folderViews.next([]);\n            return;\n          }\n\n          const data = await this.stateService.getEncryptedFolders();\n\n          await this.updateObservables(data);\n        })\n      )\n      .subscribe();\n  }\n\n  async clearCache(): Promise<void> {\n    this._folderViews.next([]);\n  }\n\n  // TODO: This should be moved to EncryptService or something\n  async encrypt(model: FolderView, key?: SymmetricCryptoKey): Promise<Folder> {\n    const folder = new Folder();\n    folder.id = model.id;\n    folder.name = await this.cryptoService.encrypt(model.name, key);\n    return folder;\n  }\n\n  async get(id: string): Promise<Folder> {\n    const folders = this._folders.getValue();\n\n    return folders.find((folder) => folder.id === id);\n  }\n\n  async getAllFromState(): Promise<Folder[]> {\n    const folders = await this.stateService.getEncryptedFolders();\n    const response: Folder[] = [];\n    for (const id in folders) {\n      // eslint-disable-next-line\n      if (folders.hasOwnProperty(id)) {\n        response.push(new Folder(folders[id]));\n      }\n    }\n    return response;\n  }\n\n  /**\n   * @deprecated For the CLI only\n   * @param id id of the folder\n   */\n  async getFromState(id: string): Promise<Folder> {\n    const foldersMap = await this.stateService.getEncryptedFolders();\n    const folder = foldersMap[id];\n    if (folder == null) {\n      return null;\n    }\n\n    return new Folder(folder);\n  }\n\n  /**\n   * @deprecated Only use in CLI!\n   */\n  async getAllDecryptedFromState(): Promise<FolderView[]> {\n    const data = await this.stateService.getEncryptedFolders();\n    const folders = Object.values(data || {}).map((f) => new Folder(f));\n\n    return this.decryptFolders(folders);\n  }\n\n  async upsert(folder: FolderData | FolderData[]): Promise<void> {\n    let folders = await this.stateService.getEncryptedFolders();\n    if (folders == null) {\n      folders = {};\n    }\n\n    if (folder instanceof FolderData) {\n      const f = folder as FolderData;\n      folders[f.id] = f;\n    } else {\n      (folder as FolderData[]).forEach((f) => {\n        folders[f.id] = f;\n      });\n    }\n\n    await this.updateObservables(folders);\n    await this.stateService.setEncryptedFolders(folders);\n  }\n\n  async replace(folders: { [id: string]: FolderData }): Promise<void> {\n    await this.updateObservables(folders);\n    await this.stateService.setEncryptedFolders(folders);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    if (userId == null || userId == (await this.stateService.getUserId())) {\n      this._folders.next([]);\n      this._folderViews.next([]);\n    }\n    await this.stateService.setEncryptedFolders(null, { userId: userId });\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const folders = await this.stateService.getEncryptedFolders();\n    if (folders == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      if (folders[id] == null) {\n        return;\n      }\n      delete folders[id];\n    } else {\n      (id as string[]).forEach((i) => {\n        delete folders[i];\n      });\n    }\n\n    await this.updateObservables(folders);\n    await this.stateService.setEncryptedFolders(folders);\n\n    // Items in a deleted folder are re-assigned to \"No Folder\"\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers != null) {\n      const updates: CipherData[] = [];\n      for (const cId in ciphers) {\n        if (ciphers[cId].folderId === id) {\n          ciphers[cId].folderId = null;\n          updates.push(ciphers[cId]);\n        }\n      }\n      if (updates.length > 0) {\n        this.cipherService.upsert(updates);\n      }\n    }\n  }\n\n  private async updateObservables(foldersMap: { [id: string]: FolderData }) {\n    const folders = Object.values(foldersMap || {}).map((f) => new Folder(f));\n\n    this._folders.next(folders);\n\n    if (await this.cryptoService.hasUserKey()) {\n      this._folderViews.next(await this.decryptFolders(folders));\n    }\n  }\n\n  private async decryptFolders(folders: Folder[]) {\n    const decryptFolderPromises = folders.map((f) => f.decrypt());\n    const decryptedFolders = await Promise.all(decryptFolderPromises);\n\n    decryptedFolders.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n\n    const noneFolder = new FolderView();\n    noneFolder.name = this.i18nService.t(\"noneFolder\");\n    decryptedFolders.push(noneFolder);\n\n    return decryptedFolders;\n  }\n}\n","import { BehaviorSubject } from \"rxjs\";\n\nimport { Folder } from \"@bitwarden/common/vault/models/domain/folder\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { FolderService as BaseFolderService } from \"@bitwarden/common/vault/services/folder/folder.service\";\n\nimport { browserSession, sessionSync } from \"../../platform/decorators/session-sync-observable\";\n\n@browserSession\nexport class BrowserFolderService extends BaseFolderService {\n  @sessionSync({ initializer: Folder.fromJSON, initializeAs: \"array\" })\n  protected _folders: BehaviorSubject<Folder[]>;\n  @sessionSync({ initializer: FolderView.fromJSON, initializeAs: \"array\" })\n  protected _folderViews: BehaviorSubject<FolderView[]>;\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { CipherStatus } from \"./cipher-status.model\";\n\nexport type VaultFilterFunction = (cipher: CipherView) => boolean;\n\nexport class VaultFilter {\n  cipherType?: CipherType;\n  selectedCollection = false; // This is needed because of how the \"Unassigned\" collection works. It has a null id.\n  selectedCollectionId?: string;\n  status?: CipherStatus;\n  selectedFolder = false; // This is needed because of how the \"No Folder\" folder works. It has a null id.\n  selectedFolderId?: string;\n  selectedOrganizationId?: string;\n  myVaultOnly = false;\n  refreshCollectionsAndFolders = false;\n\n  constructor(init?: Partial<VaultFilter>) {\n    Object.assign(this, init);\n  }\n\n  resetFilter() {\n    this.cipherType = null;\n    this.status = null;\n    this.selectedCollection = false;\n    this.selectedCollectionId = null;\n    this.selectedFolder = false;\n    this.selectedFolderId = null;\n  }\n\n  resetOrganization() {\n    this.myVaultOnly = false;\n    this.selectedOrganizationId = null;\n    this.resetFilter();\n  }\n\n  buildFilter(): VaultFilterFunction {\n    return (cipher) => {\n      let cipherPassesFilter = true;\n      if (this.status === \"favorites\" && cipherPassesFilter) {\n        cipherPassesFilter = cipher.favorite;\n      }\n      if (this.status === \"trash\" && cipherPassesFilter) {\n        cipherPassesFilter = cipher.isDeleted;\n      }\n      if (this.cipherType != null && cipherPassesFilter) {\n        cipherPassesFilter = cipher.type === this.cipherType;\n      }\n      if (this.selectedFolder && this.selectedFolderId == null && cipherPassesFilter) {\n        cipherPassesFilter = cipher.folderId == null;\n      }\n      if (this.selectedFolder && this.selectedFolderId != null && cipherPassesFilter) {\n        cipherPassesFilter = cipher.folderId === this.selectedFolderId;\n      }\n      if (this.selectedCollection && this.selectedCollectionId == null && cipherPassesFilter) {\n        cipherPassesFilter =\n          cipher.organizationId != null &&\n          (cipher.collectionIds == null || cipher.collectionIds.length === 0);\n      }\n      if (this.selectedCollection && this.selectedCollectionId != null && cipherPassesFilter) {\n        cipherPassesFilter =\n          cipher.collectionIds != null && cipher.collectionIds.includes(this.selectedCollectionId);\n      }\n      if (this.selectedOrganizationId != null && cipherPassesFilter) {\n        cipherPassesFilter = cipher.organizationId === this.selectedOrganizationId;\n      }\n      if (this.myVaultOnly && cipherPassesFilter) {\n        cipherPassesFilter = cipher.organizationId === null;\n      }\n      return cipherPassesFilter;\n    };\n  }\n}\n","import { ITreeNodeObject, TreeNode } from \"@bitwarden/common/models/domain/tree-node\";\n\nexport class DynamicTreeNode<T extends ITreeNodeObject> {\n  fullList: T[];\n  nestedList: TreeNode<T>[];\n\n  hasId(id: string): boolean {\n    return this.fullList != null && this.fullList.filter((i: T) => i.id === id).length > 0;\n  }\n\n  constructor(init?: Partial<DynamicTreeNode<T>>) {\n    Object.assign(this, init);\n  }\n}\n","import { Observable } from \"rxjs\";\n\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { FolderData } from \"../../models/data/folder.data\";\nimport { Folder } from \"../../models/domain/folder\";\nimport { FolderView } from \"../../models/view/folder.view\";\n\nexport abstract class FolderService {\n  folders$: Observable<Folder[]>;\n  folderViews$: Observable<FolderView[]>;\n\n  clearCache: () => Promise<void>;\n  encrypt: (model: FolderView, key?: SymmetricCryptoKey) => Promise<Folder>;\n  get: (id: string) => Promise<Folder>;\n  getAllFromState: () => Promise<Folder[]>;\n  /**\n   * @deprecated Only use in CLI!\n   */\n  getFromState: (id: string) => Promise<Folder>;\n  /**\n   * @deprecated Only use in CLI!\n   */\n  getAllDecryptedFromState: () => Promise<FolderView[]>;\n}\n\nexport abstract class InternalFolderService extends FolderService {\n  upsert: (folder: FolderData | FolderData[]) => Promise<void>;\n  replace: (folders: { [id: string]: FolderData }) => Promise<void>;\n  clear: (userId: string) => Promise<any>;\n  delete: (id: string | string[]) => Promise<any>;\n}\n","import { UriMatchType } from \"../../enums\";\nimport { SymmetricCryptoKey } from \"../../platform/models/domain/symmetric-crypto-key\";\nimport { CipherType } from \"../enums/cipher-type\";\nimport { CipherData } from \"../models/data/cipher.data\";\nimport { Cipher } from \"../models/domain/cipher\";\nimport { Field } from \"../models/domain/field\";\nimport { CipherView } from \"../models/view/cipher.view\";\nimport { FieldView } from \"../models/view/field.view\";\n\nexport abstract class CipherService {\n  clearCache: (userId?: string) => Promise<void>;\n  encrypt: (\n    model: CipherView,\n    keyForEncryption?: SymmetricCryptoKey,\n    keyForCipherKeyDecryption?: SymmetricCryptoKey,\n    originalCipher?: Cipher\n  ) => Promise<Cipher>;\n  encryptFields: (fieldsModel: FieldView[], key: SymmetricCryptoKey) => Promise<Field[]>;\n  encryptField: (fieldModel: FieldView, key: SymmetricCryptoKey) => Promise<Field>;\n  get: (id: string) => Promise<Cipher>;\n  getAll: () => Promise<Cipher[]>;\n  getAllDecrypted: () => Promise<CipherView[]>;\n  getAllDecryptedForGrouping: (groupingId: string, folder?: boolean) => Promise<CipherView[]>;\n  getAllDecryptedForUrl: (\n    url: string,\n    includeOtherTypes?: CipherType[],\n    defaultMatch?: UriMatchType\n  ) => Promise<CipherView[]>;\n  getAllFromApiForOrganization: (organizationId: string) => Promise<CipherView[]>;\n  getLastUsedForUrl: (url: string, autofillOnPageLoad: boolean) => Promise<CipherView>;\n  getLastLaunchedForUrl: (url: string, autofillOnPageLoad: boolean) => Promise<CipherView>;\n  getNextCipherForUrl: (url: string) => Promise<CipherView>;\n  updateLastUsedIndexForUrl: (url: string) => void;\n  updateLastUsedDate: (id: string) => Promise<void>;\n  updateLastLaunchedDate: (id: string) => Promise<void>;\n  saveNeverDomain: (domain: string) => Promise<void>;\n  createWithServer: (cipher: Cipher, orgAdmin?: boolean) => Promise<any>;\n  updateWithServer: (cipher: Cipher, orgAdmin?: boolean, isNotClone?: boolean) => Promise<any>;\n  shareWithServer: (\n    cipher: CipherView,\n    organizationId: string,\n    collectionIds: string[]\n  ) => Promise<any>;\n  shareManyWithServer: (\n    ciphers: CipherView[],\n    organizationId: string,\n    collectionIds: string[]\n  ) => Promise<any>;\n  saveAttachmentWithServer: (\n    cipher: Cipher,\n    unencryptedFile: any,\n    admin?: boolean\n  ) => Promise<Cipher>;\n  saveAttachmentRawWithServer: (\n    cipher: Cipher,\n    filename: string,\n    data: ArrayBuffer,\n    admin?: boolean\n  ) => Promise<Cipher>;\n  saveCollectionsWithServer: (cipher: Cipher) => Promise<any>;\n  upsert: (cipher: CipherData | CipherData[]) => Promise<any>;\n  replace: (ciphers: { [id: string]: CipherData }) => Promise<any>;\n  clear: (userId: string) => Promise<any>;\n  moveManyWithServer: (ids: string[], folderId: string) => Promise<any>;\n  delete: (id: string | string[]) => Promise<any>;\n  deleteWithServer: (id: string, asAdmin?: boolean) => Promise<any>;\n  deleteManyWithServer: (ids: string[], asAdmin?: boolean) => Promise<any>;\n  deleteAttachment: (id: string, attachmentId: string) => Promise<void>;\n  deleteAttachmentWithServer: (id: string, attachmentId: string) => Promise<void>;\n  sortCiphersByLastUsed: (a: CipherView, b: CipherView) => number;\n  sortCiphersByLastUsedThenName: (a: CipherView, b: CipherView) => number;\n  getLocaleSortingFunction: () => (a: CipherView, b: CipherView) => number;\n  softDelete: (id: string | string[]) => Promise<any>;\n  softDeleteWithServer: (id: string, asAdmin?: boolean) => Promise<any>;\n  softDeleteManyWithServer: (ids: string[], asAdmin?: boolean) => Promise<any>;\n  restore: (\n    cipher: { id: string; revisionDate: string } | { id: string; revisionDate: string }[]\n  ) => Promise<any>;\n  restoreWithServer: (id: string, asAdmin?: boolean) => Promise<any>;\n  restoreManyWithServer: (\n    ids: string[],\n    organizationId?: string,\n    asAdmin?: boolean\n  ) => Promise<void>;\n  getKeyForCipherKeyDecryption: (cipher: Cipher) => Promise<any>;\n}\n","import { TreeNode } from \"../../models/domain/tree-node\";\nimport { CollectionData } from \"../models/data/collection.data\";\nimport { Collection } from \"../models/domain/collection\";\nimport { CollectionView } from \"../models/view/collection.view\";\n\nexport abstract class CollectionService {\n  clearCache: (userId?: string) => Promise<void>;\n  encrypt: (model: CollectionView) => Promise<Collection>;\n  decryptMany: (collections: Collection[]) => Promise<CollectionView[]>;\n  get: (id: string) => Promise<Collection>;\n  getAll: () => Promise<Collection[]>;\n  getAllDecrypted: () => Promise<CollectionView[]>;\n  getAllNested: (collections?: CollectionView[]) => Promise<TreeNode<CollectionView>[]>;\n  getNested: (id: string) => Promise<TreeNode<CollectionView>>;\n  upsert: (collection: CollectionData | CollectionData[]) => Promise<any>;\n  replace: (collections: { [id: string]: CollectionData }) => Promise<any>;\n  clear: (userId: string) => Promise<any>;\n  delete: (id: string | string[]) => Promise<any>;\n}\n","import { Observable } from \"rxjs\";\n\nimport { ListResponse } from \"../../../models/response/list.response\";\nimport { PolicyType } from \"../../enums\";\nimport { PolicyData } from \"../../models/data/policy.data\";\nimport { MasterPasswordPolicyOptions } from \"../../models/domain/master-password-policy-options\";\nimport { Policy } from \"../../models/domain/policy\";\nimport { ResetPasswordPolicyOptions } from \"../../models/domain/reset-password-policy-options\";\nimport { PolicyResponse } from \"../../models/response/policy.response\";\n\nexport abstract class PolicyService {\n  policies$: Observable<Policy[]>;\n  get$: (policyType: PolicyType, policyFilter?: (policy: Policy) => boolean) => Observable<Policy>;\n  masterPasswordPolicyOptions$: (policies?: Policy[]) => Observable<MasterPasswordPolicyOptions>;\n  policyAppliesToActiveUser$: (\n    policyType: PolicyType,\n    policyFilter?: (policy: Policy) => boolean\n  ) => Observable<boolean>;\n\n  /**\n   * @deprecated Do not call this, use the policies$ observable collection\n   */\n  getAll: (type?: PolicyType, userId?: string) => Promise<Policy[]>;\n  evaluateMasterPassword: (\n    passwordStrength: number,\n    newPassword: string,\n    enforcedPolicyOptions?: MasterPasswordPolicyOptions\n  ) => boolean;\n  getResetPasswordPolicyOptions: (\n    policies: Policy[],\n    orgId: string\n  ) => [ResetPasswordPolicyOptions, boolean];\n  mapPoliciesFromToken: (policiesResponse: ListResponse<PolicyResponse>) => Policy[];\n  policyAppliesToUser: (\n    policyType: PolicyType,\n    policyFilter?: (policy: Policy) => boolean,\n    userId?: string\n  ) => Promise<boolean>;\n}\n\nexport abstract class InternalPolicyService extends PolicyService {\n  upsert: (policy: PolicyData) => Promise<any>;\n  replace: (policies: { [id: string]: PolicyData }) => Promise<void>;\n  clear: (userId?: string) => Promise<any>;\n}\n","import { Injectable } from \"@angular/core\";\nimport { firstValueFrom, from, mergeMap, Observable } from \"rxjs\";\n\nimport {\n  isMember,\n  OrganizationService,\n} from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { ServiceUtils } from \"@bitwarden/common/misc/serviceUtils\";\nimport { TreeNode } from \"@bitwarden/common/models/domain/tree-node\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { DeprecatedVaultFilterService as DeprecatedVaultFilterServiceAbstraction } from \"../../abstractions/deprecated-vault-filter.service\";\nimport { DynamicTreeNode } from \"../models/dynamic-tree-node.model\";\n\nconst NestingDelimiter = \"/\";\n\n@Injectable()\nexport class VaultFilterService implements DeprecatedVaultFilterServiceAbstraction {\n  constructor(\n    protected stateService: StateService,\n    protected organizationService: OrganizationService,\n    protected folderService: FolderService,\n    protected cipherService: CipherService,\n    protected collectionService: CollectionService,\n    protected policyService: PolicyService\n  ) {}\n\n  async storeCollapsedFilterNodes(collapsedFilterNodes: Set<string>): Promise<void> {\n    await this.stateService.setCollapsedGroupings(Array.from(collapsedFilterNodes));\n  }\n\n  async buildCollapsedFilterNodes(): Promise<Set<string>> {\n    return new Set(await this.stateService.getCollapsedGroupings());\n  }\n\n  async buildOrganizations(): Promise<Organization[]> {\n    let organizations = await this.organizationService.getAll();\n    if (organizations != null) {\n      organizations = organizations.filter(isMember).sort((a, b) => a.name.localeCompare(b.name));\n    }\n\n    return organizations;\n  }\n\n  buildNestedFolders(organizationId?: string): Observable<DynamicTreeNode<FolderView>> {\n    const transformation = async (storedFolders: FolderView[]) => {\n      let folders: FolderView[];\n\n      // If no org or \"My Vault\" is selected, show all folders\n      if (organizationId == null || organizationId == \"MyVault\") {\n        folders = storedFolders;\n      } else {\n        // Otherwise, show only folders that have ciphers from the selected org and the \"no folder\" folder\n        const ciphers = await this.cipherService.getAllDecrypted();\n        const orgCiphers = ciphers.filter((c) => c.organizationId == organizationId);\n        folders = storedFolders.filter(\n          (f) => orgCiphers.some((oc) => oc.folderId == f.id) || f.id == null\n        );\n      }\n\n      const nestedFolders = await this.getAllFoldersNested(folders);\n      return new DynamicTreeNode<FolderView>({\n        fullList: folders,\n        nestedList: nestedFolders,\n      });\n    };\n\n    return this.folderService.folderViews$.pipe(\n      mergeMap((folders) => from(transformation(folders)))\n    );\n  }\n\n  async buildCollections(organizationId?: string): Promise<DynamicTreeNode<CollectionView>> {\n    const storedCollections = await this.collectionService.getAllDecrypted();\n    let collections: CollectionView[];\n    if (organizationId != null) {\n      collections = storedCollections.filter((c) => c.organizationId === organizationId);\n    } else {\n      collections = storedCollections;\n    }\n    const nestedCollections = await this.collectionService.getAllNested(collections);\n    return new DynamicTreeNode<CollectionView>({\n      fullList: collections,\n      nestedList: nestedCollections,\n    });\n  }\n\n  async checkForSingleOrganizationPolicy(): Promise<boolean> {\n    return await firstValueFrom(\n      this.policyService.policyAppliesToActiveUser$(PolicyType.SingleOrg)\n    );\n  }\n\n  async checkForPersonalOwnershipPolicy(): Promise<boolean> {\n    return await firstValueFrom(\n      this.policyService.policyAppliesToActiveUser$(PolicyType.PersonalOwnership)\n    );\n  }\n\n  protected async getAllFoldersNested(folders: FolderView[]): Promise<TreeNode<FolderView>[]> {\n    const nodes: TreeNode<FolderView>[] = [];\n    folders.forEach((f) => {\n      const folderCopy = new FolderView();\n      folderCopy.id = f.id;\n      folderCopy.revisionDate = f.revisionDate;\n      const parts = f.name != null ? f.name.replace(/^\\/+|\\/+$/g, \"\").split(NestingDelimiter) : [];\n      ServiceUtils.nestedTraverse(nodes, 0, parts, folderCopy, null, NestingDelimiter);\n    });\n    return nodes;\n  }\n\n  async getFolderNested(id: string): Promise<TreeNode<FolderView>> {\n    const folders = await this.getAllFoldersNested(\n      await firstValueFrom(this.folderService.folderViews$)\n    );\n    return ServiceUtils.getTreeNodeObjectFromList(folders, id) as TreeNode<FolderView>;\n  }\n}\n","import { VaultFilter } from \"@bitwarden/angular/vault/vault-filter/models/vault-filter.model\";\nimport { VaultFilterService as BaseVaultFilterService } from \"@bitwarden/angular/vault/vault-filter/services/vault-filter.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nexport class VaultFilterService extends BaseVaultFilterService {\n  vaultFilter: VaultFilter = new VaultFilter();\n\n  allVaults = \"allVaults\";\n  myVault = \"myVault\";\n\n  constructor(\n    stateService: StateService,\n    organizationService: OrganizationService,\n    folderService: FolderService,\n    cipherService: CipherService,\n    collectionService: CollectionService,\n    policyService: PolicyService\n  ) {\n    super(\n      stateService,\n      organizationService,\n      folderService,\n      cipherService,\n      collectionService,\n      policyService\n    );\n    this.vaultFilter.myVaultOnly = false;\n    this.vaultFilter.selectedOrganizationId = null;\n  }\n\n  getVaultFilter() {\n    return this.vaultFilter;\n  }\n\n  setVaultFilter(filter: string) {\n    if (filter === this.allVaults) {\n      this.vaultFilter.myVaultOnly = false;\n      this.vaultFilter.selectedOrganizationId = null;\n    } else if (filter === this.myVault) {\n      this.vaultFilter.myVaultOnly = true;\n      this.vaultFilter.selectedOrganizationId = null;\n    } else {\n      this.vaultFilter.myVaultOnly = false;\n      this.vaultFilter.selectedOrganizationId = filter;\n    }\n  }\n\n  clear() {\n    this.setVaultFilter(this.allVaults);\n  }\n\n  filterCipherForSelectedVault(cipher: CipherView) {\n    if (!this.vaultFilter.selectedOrganizationId && !this.vaultFilter.myVaultOnly) {\n      return false;\n    }\n    if (this.vaultFilter.selectedOrganizationId) {\n      if (cipher.organizationId === this.vaultFilter.selectedOrganizationId) {\n        return false;\n      }\n    } else if (this.vaultFilter.myVaultOnly) {\n      if (!cipher.organizationId) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { VaultTimeoutService } from \"@bitwarden/common/abstractions/vault-timeout/vault-timeout.service\";\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { PasswordGenerationServiceAbstraction } from \"@bitwarden/common/tools/generator/password\";\n\nimport { BrowserApi } from \"../platform/browser/browser-api\";\n\nimport MainBackground from \"./main.background\";\nimport LockedVaultPendingNotificationsItem from \"./models/lockedVaultPendingNotificationsItem\";\n\nexport default class CommandsBackground {\n  private isSafari: boolean;\n  private isVivaldi: boolean;\n\n  constructor(\n    private main: MainBackground,\n    private passwordGenerationService: PasswordGenerationServiceAbstraction,\n    private platformUtilsService: PlatformUtilsService,\n    private vaultTimeoutService: VaultTimeoutService,\n    private authService: AuthService\n  ) {\n    this.isSafari = this.platformUtilsService.isSafari();\n    this.isVivaldi = this.platformUtilsService.isVivaldi();\n  }\n\n  async init() {\n    BrowserApi.messageListener(\"commands.background\", (msg: any) => {\n      if (msg.command === \"unlockCompleted\" && msg.data.target === \"commands.background\") {\n        this.processCommand(msg.data.commandToRetry.msg.command, msg.data.commandToRetry.sender);\n      }\n    });\n\n    if (chrome && chrome.commands) {\n      chrome.commands.onCommand.addListener(async (command: string) => {\n        await this.processCommand(command);\n      });\n    }\n  }\n\n  private async processCommand(command: string, sender?: chrome.runtime.MessageSender) {\n    switch (command) {\n      case \"generate_password\":\n        await this.generatePasswordToClipboard();\n        break;\n      case \"autofill_login\":\n        await this.autoFillLogin(sender ? sender.tab : null);\n        break;\n      case \"open_popup\":\n        await this.openPopup();\n        break;\n      case \"lock_vault\":\n        await this.vaultTimeoutService.lock();\n        break;\n      default:\n        break;\n    }\n  }\n\n  private async generatePasswordToClipboard() {\n    const options = (await this.passwordGenerationService.getOptions())?.[0] ?? {};\n    const password = await this.passwordGenerationService.generatePassword(options);\n    this.platformUtilsService.copyToClipboard(password, { window: window });\n    this.passwordGenerationService.addHistory(password);\n  }\n\n  private async autoFillLogin(tab?: chrome.tabs.Tab) {\n    if (!tab) {\n      tab = await BrowserApi.getTabFromCurrentWindowId();\n    }\n\n    if (tab == null) {\n      return;\n    }\n\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      const retryMessage: LockedVaultPendingNotificationsItem = {\n        commandToRetry: {\n          msg: { command: \"autofill_login\" },\n          sender: { tab: tab },\n        },\n        target: \"commands.background\",\n      };\n      await BrowserApi.tabSendMessageData(\n        tab,\n        \"addToLockedVaultPendingNotifications\",\n        retryMessage\n      );\n\n      BrowserApi.tabSendMessageData(tab, \"promptForLogin\");\n      return;\n    }\n\n    await this.main.collectPageDetailsForContentScript(tab, \"autofill_cmd\");\n  }\n\n  private async openPopup() {\n    // Chrome APIs cannot open popup\n    if (!this.isSafari) {\n      return;\n    }\n\n    this.main.openPopup();\n  }\n}\n","import { NotificationsService } from \"@bitwarden/common/abstractions/notifications.service\";\nimport { VaultTimeoutService } from \"@bitwarden/common/abstractions/vault-timeout/vault-timeout.service\";\nimport { VaultTimeoutAction } from \"@bitwarden/common/enums/vault-timeout-action.enum\";\n\nimport { BrowserStateService } from \"../platform/services/abstractions/browser-state.service\";\n\nconst IdleInterval = 60 * 5; // 5 minutes\n\nexport default class IdleBackground {\n  private idle: any;\n  private idleTimer: number = null;\n  private idleState = \"active\";\n\n  constructor(\n    private vaultTimeoutService: VaultTimeoutService,\n    private stateService: BrowserStateService,\n    private notificationsService: NotificationsService\n  ) {\n    this.idle = chrome.idle || (browser != null ? browser.idle : null);\n  }\n\n  async init() {\n    if (!this.idle) {\n      return;\n    }\n\n    const idleHandler = (newState: string) => {\n      if (newState === \"active\") {\n        this.notificationsService.reconnectFromActivity();\n      } else {\n        this.notificationsService.disconnectFromInactivity();\n      }\n    };\n    if (this.idle.onStateChanged && this.idle.setDetectionInterval) {\n      this.idle.setDetectionInterval(IdleInterval);\n      this.idle.onStateChanged.addListener(idleHandler);\n    } else {\n      this.pollIdle(idleHandler);\n    }\n\n    if (this.idle.onStateChanged) {\n      this.idle.onStateChanged.addListener(async (newState: string) => {\n        if (newState === \"locked\") {\n          // If the screen is locked or the screensaver activates\n          const timeout = await this.stateService.getVaultTimeout();\n          if (timeout === -2) {\n            // On System Lock vault timeout option\n            const action = await this.stateService.getVaultTimeoutAction();\n            if (action === VaultTimeoutAction.LogOut) {\n              await this.vaultTimeoutService.logOut();\n            } else {\n              await this.vaultTimeoutService.lock();\n            }\n          }\n        }\n      });\n    }\n  }\n\n  private pollIdle(handler: (newState: string) => void) {\n    if (this.idleTimer != null) {\n      window.clearTimeout(this.idleTimer);\n      this.idleTimer = null;\n    }\n    this.idle.queryState(IdleInterval, (state: string) => {\n      if (state !== this.idleState) {\n        this.idleState = state;\n        handler(state);\n      }\n      this.idleTimer = window.setTimeout(() => this.pollIdle(handler), 5000);\n    });\n  }\n}\n","import { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { AppIdService } from \"@bitwarden/common/platform/abstractions/app-id.service\";\nimport { CryptoFunctionService } from \"@bitwarden/common/platform/abstractions/crypto-function.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport {\n  MasterKey,\n  SymmetricCryptoKey,\n  UserKey,\n} from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\n\nimport { BrowserApi } from \"../platform/browser/browser-api\";\n\nimport RuntimeBackground from \"./runtime.background\";\n\nconst MessageValidTimeout = 10 * 1000;\nconst EncryptionAlgorithm = \"sha1\";\n\ntype Message = {\n  command: string;\n\n  // Filled in by this service\n  userId?: string;\n  timestamp?: number;\n\n  // Used for sharing secret\n  publicKey?: string;\n};\n\ntype OuterMessage = {\n  message: Message | EncString;\n  appId: string;\n};\n\ntype ReceiveMessage = {\n  timestamp: number;\n  command: string;\n  response?: any;\n\n  // Unlock key\n  keyB64?: string;\n  userKeyB64?: string;\n};\n\ntype ReceiveMessageOuter = {\n  command: string;\n  appId: string;\n\n  // Should only have one of these.\n  message?: EncString;\n  sharedSecret?: string;\n};\n\nexport class NativeMessagingBackground {\n  private connected = false;\n  private connecting: boolean;\n  private port: browser.runtime.Port | chrome.runtime.Port;\n\n  private resolver: any = null;\n  private privateKey: Uint8Array = null;\n  private publicKey: Uint8Array = null;\n  private secureSetupResolve: any = null;\n  private sharedSecret: SymmetricCryptoKey;\n  private appId: string;\n  private validatingFingerprint: boolean;\n\n  constructor(\n    private cryptoService: CryptoService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private runtimeBackground: RuntimeBackground,\n    private i18nService: I18nService,\n    private messagingService: MessagingService,\n    private appIdService: AppIdService,\n    private platformUtilsService: PlatformUtilsService,\n    private stateService: StateService,\n    private logService: LogService,\n    private authService: AuthService\n  ) {\n    this.stateService.setBiometricFingerprintValidated(false);\n\n    if (chrome?.permissions?.onAdded) {\n      // Reload extension to activate nativeMessaging\n      chrome.permissions.onAdded.addListener((permissions) => {\n        BrowserApi.reloadExtension(null);\n      });\n    }\n  }\n\n  async connect() {\n    this.appId = await this.appIdService.getAppId();\n    this.stateService.setBiometricFingerprintValidated(false);\n\n    return new Promise<void>((resolve, reject) => {\n      this.port = BrowserApi.connectNative(\"com.8bit.bitwarden\");\n\n      this.connecting = true;\n\n      const connectedCallback = () => {\n        this.connected = true;\n        this.connecting = false;\n        resolve();\n      };\n\n      // Safari has a bundled native component which is always available, no need to\n      // check if the desktop app is running.\n      if (this.platformUtilsService.isSafari()) {\n        connectedCallback();\n      }\n\n      this.port.onMessage.addListener(async (message: ReceiveMessageOuter) => {\n        switch (message.command) {\n          case \"connected\":\n            connectedCallback();\n            break;\n          case \"disconnected\":\n            if (this.connecting) {\n              reject(\"startDesktop\");\n            }\n            this.connected = false;\n            this.port.disconnect();\n            break;\n          case \"setupEncryption\": {\n            // Ignore since it belongs to another device\n            if (message.appId !== this.appId) {\n              return;\n            }\n\n            const encrypted = Utils.fromB64ToArray(message.sharedSecret);\n            const decrypted = await this.cryptoFunctionService.rsaDecrypt(\n              encrypted,\n              this.privateKey,\n              EncryptionAlgorithm\n            );\n\n            if (this.validatingFingerprint) {\n              this.validatingFingerprint = false;\n              this.stateService.setBiometricFingerprintValidated(true);\n            }\n            this.sharedSecret = new SymmetricCryptoKey(decrypted);\n            this.secureSetupResolve();\n            break;\n          }\n          case \"invalidateEncryption\":\n            // Ignore since it belongs to another device\n            if (message.appId !== this.appId) {\n              return;\n            }\n\n            this.sharedSecret = null;\n            this.privateKey = null;\n            this.connected = false;\n\n            this.messagingService.send(\"showDialog\", {\n              title: { key: \"nativeMessagingInvalidEncryptionTitle\" },\n              content: { key: \"nativeMessagingInvalidEncryptionDesc\" },\n              acceptButtonText: { key: \"ok\" },\n              cancelButtonText: null,\n              type: \"danger\",\n            });\n            break;\n          case \"verifyFingerprint\": {\n            if (this.sharedSecret == null) {\n              this.validatingFingerprint = true;\n              this.showFingerprintDialog();\n            }\n            break;\n          }\n          case \"wrongUserId\":\n            this.showWrongUserDialog();\n            break;\n          default:\n            // Ignore since it belongs to another device\n            if (!this.platformUtilsService.isSafari() && message.appId !== this.appId) {\n              return;\n            }\n\n            this.onMessage(message.message);\n        }\n      });\n\n      this.port.onDisconnect.addListener((p: any) => {\n        let error;\n        if (BrowserApi.isWebExtensionsApi) {\n          error = p.error.message;\n        } else {\n          error = chrome.runtime.lastError.message;\n        }\n\n        this.sharedSecret = null;\n        this.privateKey = null;\n        this.connected = false;\n\n        const reason = error != null ? \"desktopIntegrationDisabled\" : null;\n        reject(reason);\n      });\n    });\n  }\n\n  showWrongUserDialog() {\n    this.messagingService.send(\"showDialog\", {\n      title: { key: \"nativeMessagingWrongUserTitle\" },\n      content: { key: \"nativeMessagingWrongUserDesc\" },\n      acceptButtonText: { key: \"ok\" },\n      cancelButtonText: null,\n      type: \"danger\",\n    });\n  }\n\n  async send(message: Message) {\n    if (!this.connected) {\n      await this.connect();\n    }\n\n    message.userId = await this.stateService.getUserId();\n    message.timestamp = Date.now();\n\n    if (this.platformUtilsService.isSafari()) {\n      this.postMessage(message as any);\n    } else {\n      this.postMessage({ appId: this.appId, message: await this.encryptMessage(message) });\n    }\n  }\n\n  async encryptMessage(message: Message) {\n    if (this.sharedSecret == null) {\n      await this.secureCommunication();\n    }\n\n    return await this.cryptoService.encrypt(JSON.stringify(message), this.sharedSecret);\n  }\n\n  getResponse(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.resolver = resolve;\n    });\n  }\n\n  private postMessage(message: OuterMessage) {\n    // Wrap in try-catch to when the port disconnected without triggering `onDisconnect`.\n    try {\n      const msg: any = message;\n      if (message.message instanceof EncString) {\n        // Alternative, backwards-compatible serialization of EncString\n        msg.message = {\n          encryptedString: message.message.encryptedString,\n          encryptionType: message.message.encryptionType,\n          data: message.message.data,\n          iv: message.message.iv,\n          mac: message.message.mac,\n        };\n      }\n      this.port.postMessage(msg);\n    } catch (e) {\n      this.logService.error(\"NativeMessaging port disconnected, disconnecting.\");\n\n      this.sharedSecret = null;\n      this.privateKey = null;\n      this.connected = false;\n\n      this.messagingService.send(\"showDialog\", {\n        title: { key: \"nativeMessagingInvalidEncryptionTitle\" },\n        content: { key: \"nativeMessagingInvalidEncryptionDesc\" },\n        acceptButtonText: { key: \"ok\" },\n        cancelButtonText: null,\n        type: \"danger\",\n      });\n    }\n  }\n\n  private async onMessage(rawMessage: ReceiveMessage | EncString) {\n    let message = rawMessage as ReceiveMessage;\n    if (!this.platformUtilsService.isSafari()) {\n      message = JSON.parse(\n        await this.cryptoService.decryptToUtf8(rawMessage as EncString, this.sharedSecret)\n      );\n    }\n\n    if (Math.abs(message.timestamp - Date.now()) > MessageValidTimeout) {\n      this.logService.error(\"NativeMessage is to old, ignoring.\");\n      return;\n    }\n\n    switch (message.command) {\n      case \"biometricUnlock\": {\n        await this.stateService.setBiometricAwaitingAcceptance(null);\n\n        if (message.response === \"not enabled\") {\n          this.messagingService.send(\"showDialog\", {\n            title: { key: \"biometricsNotEnabledTitle\" },\n            content: { key: \"biometricsNotEnabledDesc\" },\n            acceptButtonText: { key: \"ok\" },\n            cancelButtonText: null,\n            type: \"danger\",\n          });\n          break;\n        } else if (message.response === \"not supported\") {\n          this.messagingService.send(\"showDialog\", {\n            title: { key: \"biometricsNotSupportedTitle\" },\n            content: { key: \"biometricsNotSupportedDesc\" },\n            acceptButtonText: { key: \"ok\" },\n            cancelButtonText: null,\n            type: \"danger\",\n          });\n          break;\n        }\n\n        const enabled = await this.stateService.getBiometricUnlock();\n        if (enabled === null || enabled === false) {\n          if (message.response === \"unlocked\") {\n            await this.stateService.setBiometricUnlock(true);\n          }\n          break;\n        }\n\n        // Ignore unlock if already unlocked\n        if ((await this.authService.getAuthStatus()) === AuthenticationStatus.Unlocked) {\n          break;\n        }\n\n        if (message.response === \"unlocked\") {\n          try {\n            if (message.userKeyB64) {\n              const userKey = new SymmetricCryptoKey(\n                Utils.fromB64ToArray(message.userKeyB64)\n              ) as UserKey;\n              await this.cryptoService.setUserKey(userKey);\n            } else if (message.keyB64) {\n              // Backwards compatibility to support cases in which the user hasn't updated their desktop app\n              // TODO: Remove after 2023.10 release (https://bitwarden.atlassian.net/browse/PM-3472)\n              let encUserKey = await this.stateService.getEncryptedCryptoSymmetricKey();\n              encUserKey ||= await this.stateService.getMasterKeyEncryptedUserKey();\n              if (!encUserKey) {\n                throw new Error(\"No encrypted user key found\");\n              }\n              const masterKey = new SymmetricCryptoKey(\n                Utils.fromB64ToArray(message.keyB64)\n              ) as MasterKey;\n              const userKey = await this.cryptoService.decryptUserKeyWithMasterKey(\n                masterKey,\n                new EncString(encUserKey)\n              );\n              await this.cryptoService.setMasterKey(masterKey);\n              await this.cryptoService.setUserKey(userKey);\n            } else {\n              throw new Error(\"No key received\");\n            }\n          } catch (e) {\n            this.logService.error(\"Unable to set key: \" + e);\n            this.messagingService.send(\"showDialog\", {\n              title: { key: \"biometricsFailedTitle\" },\n              content: { key: \"biometricsFailedDesc\" },\n              acceptButtonText: { key: \"ok\" },\n              cancelButtonText: null,\n              type: \"danger\",\n            });\n\n            // Exit early\n            if (this.resolver) {\n              this.resolver(message);\n            }\n            return;\n          }\n\n          // Verify key is correct by attempting to decrypt a secret\n          try {\n            await this.cryptoService.getFingerprint(await this.stateService.getUserId());\n          } catch (e) {\n            this.logService.error(\"Unable to verify key: \" + e);\n            await this.cryptoService.clearKeys();\n            this.showWrongUserDialog();\n\n            // Exit early\n            if (this.resolver) {\n              this.resolver(message);\n            }\n            return;\n          }\n\n          this.runtimeBackground.processMessage({ command: \"unlocked\" }, null);\n        }\n        break;\n      }\n      default:\n        this.logService.error(\"NativeMessage, got unknown command: \" + message.command);\n        break;\n    }\n\n    if (this.resolver) {\n      this.resolver(message);\n    }\n  }\n\n  private async secureCommunication() {\n    const [publicKey, privateKey] = await this.cryptoFunctionService.rsaGenerateKeyPair(2048);\n    this.publicKey = publicKey;\n    this.privateKey = privateKey;\n\n    this.sendUnencrypted({\n      command: \"setupEncryption\",\n      publicKey: Utils.fromBufferToB64(publicKey),\n      userId: await this.stateService.getUserId(),\n    });\n\n    return new Promise((resolve, reject) => (this.secureSetupResolve = resolve));\n  }\n\n  private async sendUnencrypted(message: Message) {\n    if (!this.connected) {\n      await this.connect();\n    }\n\n    message.timestamp = Date.now();\n\n    this.postMessage({ appId: this.appId, message: message });\n  }\n\n  private async showFingerprintDialog() {\n    const fingerprint = await this.cryptoService.getFingerprint(\n      await this.stateService.getUserId(),\n      this.publicKey\n    );\n\n    this.messagingService.send(\"showNativeMessagingFinterprintDialog\", {\n      fingerprint: fingerprint,\n    });\n  }\n}\n","type Runner<T> = (abortController: AbortController) => Promise<T>;\n\n/**\n * Manages abort controllers for long running tasks and allow separate\n * execution contexts to abort each other by using ids.\n */\nexport class AbortManager {\n  private abortControllers = new Map<string, AbortController>();\n\n  runWithAbortController<T>(id: string, runner: Runner<T>): Promise<T> {\n    const abortController = new AbortController();\n    this.abortControllers.set(id, abortController);\n    return runner(abortController).finally(() => {\n      this.abortControllers.delete(id);\n    });\n  }\n\n  abort(id: string) {\n    this.abortControllers.get(id)?.abort();\n  }\n}\n","import { NotificationsService } from \"@bitwarden/common/abstractions/notifications.service\";\nimport { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\nimport { ConfigServiceAbstraction } from \"@bitwarden/common/platform/abstractions/config/config.service.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\nimport { SystemService } from \"@bitwarden/common/platform/abstractions/system.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\n\nimport { AutofillService } from \"../autofill/services/abstractions/autofill.service\";\nimport { BrowserApi } from \"../platform/browser/browser-api\";\nimport { BrowserPopoutWindowService } from \"../platform/popup/abstractions/browser-popout-window.service\";\nimport { BrowserStateService } from \"../platform/services/abstractions/browser-state.service\";\nimport { BrowserEnvironmentService } from \"../platform/services/browser-environment.service\";\nimport BrowserPlatformUtilsService from \"../platform/services/browser-platform-utils.service\";\nimport { AbortManager } from \"../vault/background/abort-manager\";\n\nimport MainBackground from \"./main.background\";\nimport LockedVaultPendingNotificationsItem from \"./models/lockedVaultPendingNotificationsItem\";\n\nexport default class RuntimeBackground {\n  private autofillTimeout: any;\n  private pageDetailsToAutoFill: any[] = [];\n  private onInstalledReason: string = null;\n  private lockedVaultPendingNotifications: LockedVaultPendingNotificationsItem[] = [];\n  private abortManager = new AbortManager();\n\n  constructor(\n    private main: MainBackground,\n    private autofillService: AutofillService,\n    private platformUtilsService: BrowserPlatformUtilsService,\n    private i18nService: I18nService,\n    private notificationsService: NotificationsService,\n    private stateService: BrowserStateService,\n    private systemService: SystemService,\n    private environmentService: BrowserEnvironmentService,\n    private messagingService: MessagingService,\n    private logService: LogService,\n    private configService: ConfigServiceAbstraction,\n    private browserPopoutWindowService: BrowserPopoutWindowService\n  ) {\n    // onInstalled listener must be wired up before anything else, so we do it in the ctor\n    chrome.runtime.onInstalled.addListener((details: any) => {\n      this.onInstalledReason = details.reason;\n    });\n  }\n\n  async init() {\n    if (!chrome.runtime) {\n      return;\n    }\n\n    await this.checkOnInstalled();\n    const backgroundMessageListener = (\n      msg: any,\n      sender: chrome.runtime.MessageSender,\n      sendResponse: any\n    ) => {\n      const messagesWithResponse = [\n        \"checkFido2FeatureEnabled\",\n        \"fido2RegisterCredentialRequest\",\n        \"fido2GetCredentialRequest\",\n      ];\n\n      if (messagesWithResponse.includes(msg.command)) {\n        this.processMessage(msg, sender).then(\n          (value) => sendResponse({ result: value }),\n          (error) => sendResponse({ error: { ...error, message: error.message } })\n        );\n        return true;\n      }\n\n      this.processMessage(msg, sender);\n      return false;\n    };\n\n    BrowserApi.messageListener(\"runtime.background\", backgroundMessageListener);\n    if (this.main.popupOnlyContext) {\n      (window as any).bitwardenBackgroundMessageListener = backgroundMessageListener;\n    }\n  }\n\n  async processMessage(msg: any, sender: chrome.runtime.MessageSender) {\n    const cipherId = msg.data?.cipherId;\n\n    switch (msg.command) {\n      case \"loggedIn\":\n      case \"unlocked\": {\n        let item: LockedVaultPendingNotificationsItem;\n\n        if (this.lockedVaultPendingNotifications?.length > 0) {\n          item = this.lockedVaultPendingNotifications.pop();\n          await this.browserPopoutWindowService.closeUnlockPrompt();\n        }\n\n        await this.main.refreshBadge();\n        await this.main.refreshMenu(false);\n        this.notificationsService.updateConnection(msg.command === \"unlocked\");\n        this.systemService.cancelProcessReload();\n\n        if (item) {\n          await BrowserApi.focusWindow(item.commandToRetry.sender.tab.windowId);\n          await BrowserApi.focusTab(item.commandToRetry.sender.tab.id);\n          await BrowserApi.tabSendMessageData(\n            item.commandToRetry.sender.tab,\n            \"unlockCompleted\",\n            item\n          );\n        }\n        break;\n      }\n      case \"addToLockedVaultPendingNotifications\":\n        this.lockedVaultPendingNotifications.push(msg.data);\n        break;\n      case \"logout\":\n        await this.main.logout(msg.expired, msg.userId);\n        break;\n      case \"syncCompleted\":\n        if (msg.successfully) {\n          setTimeout(async () => {\n            await this.main.refreshBadge();\n            await this.main.refreshMenu();\n          }, 2000);\n          this.main.avatarUpdateService.loadColorFromState();\n          this.configService.triggerServerConfigFetch();\n        }\n        break;\n      case \"openPopup\":\n        await this.main.openPopup();\n        break;\n      case \"promptForLogin\":\n      case \"bgReopenPromptForLogin\":\n        await this.browserPopoutWindowService.openUnlockPrompt(sender.tab?.windowId);\n        break;\n      case \"passwordReprompt\":\n        if (cipherId) {\n          await this.browserPopoutWindowService.openPasswordRepromptPrompt(sender.tab?.windowId, {\n            cipherId: cipherId,\n            senderTabId: sender.tab.id,\n            action: msg.data?.action,\n          });\n        }\n        break;\n      case \"openAddEditCipher\": {\n        const isNewCipher = !cipherId;\n        const cipherType = msg.data?.cipherType;\n        const senderTab = sender.tab;\n\n        if (!senderTab) {\n          break;\n        }\n\n        if (isNewCipher) {\n          await this.browserPopoutWindowService.openCipherCreation(senderTab.windowId, {\n            cipherType,\n            senderTabId: senderTab.id,\n            senderTabURI: senderTab.url,\n          });\n        } else {\n          await this.browserPopoutWindowService.openCipherEdit(senderTab.windowId, {\n            cipherId,\n            senderTabId: senderTab.id,\n            senderTabURI: senderTab.url,\n          });\n        }\n\n        break;\n      }\n      case \"closeTab\":\n        setTimeout(() => {\n          BrowserApi.closeBitwardenExtensionTab();\n        }, msg.delay ?? 0);\n        break;\n      case \"triggerAutofillScriptInjection\":\n        await this.autofillService.injectAutofillScripts(\n          sender,\n          await this.configService.getFeatureFlag<boolean>(FeatureFlag.AutofillV2)\n        );\n        break;\n      case \"bgCollectPageDetails\":\n        await this.main.collectPageDetailsForContentScript(sender.tab, msg.sender, sender.frameId);\n        break;\n      case \"bgUpdateContextMenu\":\n      case \"editedCipher\":\n      case \"addedCipher\":\n      case \"deletedCipher\":\n        await this.main.refreshBadge();\n        await this.main.refreshMenu();\n        break;\n      case \"bgReseedStorage\":\n        await this.main.reseedStorage();\n        break;\n      case \"collectPageDetailsResponse\":\n        switch (msg.sender) {\n          case \"autofiller\":\n          case \"autofill_cmd\": {\n            this.stateService.setLastActive(new Date().getTime());\n            const totpCode = await this.autofillService.doAutoFillActiveTab(\n              [\n                {\n                  frameId: sender.frameId,\n                  tab: msg.tab,\n                  details: msg.details,\n                },\n              ],\n              msg.sender === \"autofill_cmd\"\n            );\n            if (totpCode != null) {\n              this.platformUtilsService.copyToClipboard(totpCode, { window: window });\n            }\n            break;\n          }\n          case \"autofill_card\": {\n            await this.autofillService.doAutoFillActiveTab(\n              [\n                {\n                  frameId: sender.frameId,\n                  tab: msg.tab,\n                  details: msg.details,\n                },\n              ],\n              false,\n              CipherType.Card\n            );\n            break;\n          }\n          case \"autofill_identity\": {\n            await this.autofillService.doAutoFillActiveTab(\n              [\n                {\n                  frameId: sender.frameId,\n                  tab: msg.tab,\n                  details: msg.details,\n                },\n              ],\n              false,\n              CipherType.Identity\n            );\n            break;\n          }\n          case \"contextMenu\":\n            clearTimeout(this.autofillTimeout);\n            this.pageDetailsToAutoFill.push({\n              frameId: sender.frameId,\n              tab: msg.tab,\n              details: msg.details,\n            });\n            this.autofillTimeout = setTimeout(async () => await this.autofillPage(msg.tab), 300);\n            break;\n          default:\n            break;\n        }\n        break;\n      case \"authResult\": {\n        const vaultUrl = this.environmentService.getWebVaultUrl();\n\n        if (msg.referrer == null || Utils.getHostname(vaultUrl) !== msg.referrer) {\n          return;\n        }\n\n        if (msg.lastpass) {\n          this.messagingService.send(\"importCallbackLastPass\", {\n            code: msg.code,\n            state: msg.state,\n          });\n        } else {\n          try {\n            BrowserApi.createNewTab(\n              \"popup/index.html?uilocation=popout#/sso?code=\" +\n                encodeURIComponent(msg.code) +\n                \"&state=\" +\n                encodeURIComponent(msg.state)\n            );\n          } catch {\n            this.logService.error(\"Unable to open sso popout tab\");\n          }\n        }\n        break;\n      }\n      case \"webAuthnResult\": {\n        const vaultUrl = this.environmentService.getWebVaultUrl();\n\n        if (msg.referrer == null || Utils.getHostname(vaultUrl) !== msg.referrer) {\n          return;\n        }\n\n        const params =\n          `webAuthnResponse=${encodeURIComponent(msg.data)};` +\n          `remember=${encodeURIComponent(msg.remember)}`;\n        BrowserApi.openBitwardenExtensionTab(`popup/index.html#/2fa;${params}`, false);\n        break;\n      }\n      case \"reloadPopup\":\n        this.messagingService.send(\"reloadPopup\");\n        break;\n      case \"emailVerificationRequired\":\n        this.messagingService.send(\"showDialog\", {\n          title: { key: \"emailVerificationRequired\" },\n          content: { key: \"emailVerificationRequiredDesc\" },\n          acceptButtonText: { key: \"ok\" },\n          cancelButtonText: null,\n          type: \"info\",\n        });\n        break;\n      case \"getClickedElementResponse\":\n        this.platformUtilsService.copyToClipboard(msg.identifier, { window: window });\n        break;\n      case \"fido2AbortRequest\":\n        this.abortManager.abort(msg.abortedRequestId);\n        break;\n      case \"checkFido2FeatureEnabled\":\n        return await this.main.fido2ClientService.isFido2FeatureEnabled();\n      case \"fido2RegisterCredentialRequest\":\n        return await this.abortManager.runWithAbortController(\n          msg.requestId,\n          async (abortController) => {\n            try {\n              return await this.main.fido2ClientService.createCredential(\n                msg.data,\n                sender.tab,\n                abortController\n              );\n            } finally {\n              await BrowserApi.focusTab(sender.tab.id);\n              await BrowserApi.focusWindow(sender.tab.windowId);\n            }\n          }\n        );\n      case \"fido2GetCredentialRequest\":\n        return await this.abortManager.runWithAbortController(\n          msg.requestId,\n          async (abortController) => {\n            try {\n              return await this.main.fido2ClientService.assertCredential(\n                msg.data,\n                sender.tab,\n                abortController\n              );\n            } finally {\n              await BrowserApi.focusTab(sender.tab.id);\n              await BrowserApi.focusWindow(sender.tab.windowId);\n            }\n          }\n        );\n    }\n  }\n\n  private async autofillPage(tabToAutoFill: chrome.tabs.Tab) {\n    const totpCode = await this.autofillService.doAutoFill({\n      tab: tabToAutoFill,\n      cipher: this.main.loginToAutoFill,\n      pageDetails: this.pageDetailsToAutoFill,\n      fillNewPassword: true,\n      allowTotpAutofill: true,\n    });\n\n    if (totpCode != null) {\n      this.platformUtilsService.copyToClipboard(totpCode, { window: window });\n    }\n\n    // reset\n    this.main.loginToAutoFill = null;\n    this.pageDetailsToAutoFill = [];\n  }\n\n  private async checkOnInstalled() {\n    setTimeout(async () => {\n      if (this.onInstalledReason != null) {\n        if (this.onInstalledReason === \"install\") {\n          BrowserApi.createNewTab(\"https://bitwarden.com/browser-start/\");\n\n          if (await this.environmentService.hasManagedEnvironment()) {\n            await this.environmentService.setUrlsToManagedEnvironment();\n          }\n        }\n\n        this.onInstalledReason = null;\n      }\n    }, 100);\n  }\n}\n","import { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { UriMatchType } from \"@bitwarden/common/enums\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\n\nimport { BrowserApi } from \"../platform/browser/browser-api\";\n\nexport default class WebRequestBackground {\n  private pendingAuthRequests: any[] = [];\n  private webRequest: any;\n  private isFirefox: boolean;\n\n  constructor(\n    platformUtilsService: PlatformUtilsService,\n    private cipherService: CipherService,\n    private authService: AuthService\n  ) {\n    if (BrowserApi.manifestVersion === 2) {\n      this.webRequest = (window as any).chrome.webRequest;\n    }\n    this.isFirefox = platformUtilsService.isFirefox();\n  }\n\n  async init() {\n    if (!this.webRequest || !this.webRequest.onAuthRequired) {\n      return;\n    }\n\n    this.webRequest.onAuthRequired.addListener(\n      async (details: any, callback: any) => {\n        if (!details.url || this.pendingAuthRequests.indexOf(details.requestId) !== -1) {\n          if (callback) {\n            callback();\n          }\n          return;\n        }\n\n        this.pendingAuthRequests.push(details.requestId);\n\n        if (this.isFirefox) {\n          // eslint-disable-next-line\n          return new Promise(async (resolve, reject) => {\n            await this.resolveAuthCredentials(details.url, resolve, reject);\n          });\n        } else {\n          await this.resolveAuthCredentials(details.url, callback, callback);\n        }\n      },\n      { urls: [\"http://*/*\", \"https://*/*\"] },\n      [this.isFirefox ? \"blocking\" : \"asyncBlocking\"]\n    );\n\n    this.webRequest.onCompleted.addListener((details: any) => this.completeAuthRequest(details), {\n      urls: [\"http://*/*\"],\n    });\n    this.webRequest.onErrorOccurred.addListener(\n      (details: any) => this.completeAuthRequest(details),\n      {\n        urls: [\"http://*/*\"],\n      }\n    );\n  }\n\n  // eslint-disable-next-line\n  private async resolveAuthCredentials(domain: string, success: Function, error: Function) {\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      error();\n      return;\n    }\n\n    try {\n      const ciphers = await this.cipherService.getAllDecryptedForUrl(\n        domain,\n        null,\n        UriMatchType.Host\n      );\n      if (ciphers == null || ciphers.length !== 1) {\n        error();\n        return;\n      }\n\n      success({\n        authCredentials: {\n          username: ciphers[0].login.username,\n          password: ciphers[0].login.password,\n        },\n      });\n    } catch {\n      error();\n    }\n  }\n\n  private completeAuthRequest(details: any) {\n    const i = this.pendingAuthRequests.indexOf(details.requestId);\n    if (i > -1) {\n      this.pendingAuthRequests.splice(i, 1);\n    }\n  }\n}\n","import { AvatarUpdateService as AvatarUpdateServiceAbstraction } from \"@bitwarden/common/abstractions/account/avatar-update.service\";\nimport { ApiService as ApiServiceAbstraction } from \"@bitwarden/common/abstractions/api.service\";\nimport { AuditService as AuditServiceAbstraction } from \"@bitwarden/common/abstractions/audit.service\";\nimport { EventCollectionService as EventCollectionServiceAbstraction } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { EventUploadService as EventUploadServiceAbstraction } from \"@bitwarden/common/abstractions/event/event-upload.service\";\nimport { NotificationsService as NotificationsServiceAbstraction } from \"@bitwarden/common/abstractions/notifications.service\";\nimport { SearchService as SearchServiceAbstraction } from \"@bitwarden/common/abstractions/search.service\";\nimport { SettingsService as SettingsServiceAbstraction } from \"@bitwarden/common/abstractions/settings.service\";\nimport { TotpService as TotpServiceAbstraction } from \"@bitwarden/common/abstractions/totp.service\";\nimport { VaultTimeoutSettingsService as VaultTimeoutSettingsServiceAbstraction } from \"@bitwarden/common/abstractions/vault-timeout/vault-timeout-settings.service\";\nimport { InternalOrganizationServiceAbstraction } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { PolicyApiServiceAbstraction } from \"@bitwarden/common/admin-console/abstractions/policy/policy-api.service.abstraction\";\nimport { InternalPolicyService as InternalPolicyServiceAbstraction } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { ProviderService as ProviderServiceAbstraction } from \"@bitwarden/common/admin-console/abstractions/provider.service\";\nimport { PolicyApiService } from \"@bitwarden/common/admin-console/services/policy/policy-api.service\";\nimport { ProviderService } from \"@bitwarden/common/admin-console/services/provider.service\";\nimport { AccountService as AccountServiceAbstraction } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { AuthRequestCryptoServiceAbstraction } from \"@bitwarden/common/auth/abstractions/auth-request-crypto.service.abstraction\";\nimport { AuthService as AuthServiceAbstraction } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { DeviceTrustCryptoServiceAbstraction } from \"@bitwarden/common/auth/abstractions/device-trust-crypto.service.abstraction\";\nimport { DevicesServiceAbstraction } from \"@bitwarden/common/auth/abstractions/devices/devices.service.abstraction\";\nimport { DevicesApiServiceAbstraction } from \"@bitwarden/common/auth/abstractions/devices-api.service.abstraction\";\nimport { KeyConnectorService as KeyConnectorServiceAbstraction } from \"@bitwarden/common/auth/abstractions/key-connector.service\";\nimport { TokenService as TokenServiceAbstraction } from \"@bitwarden/common/auth/abstractions/token.service\";\nimport { TwoFactorService as TwoFactorServiceAbstraction } from \"@bitwarden/common/auth/abstractions/two-factor.service\";\nimport { UserVerificationApiServiceAbstraction } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification-api.service.abstraction\";\nimport { UserVerificationService as UserVerificationServiceAbstraction } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification.service.abstraction\";\nimport { AccountServiceImplementation } from \"@bitwarden/common/auth/services/account.service\";\nimport { AuthRequestCryptoServiceImplementation } from \"@bitwarden/common/auth/services/auth-request-crypto.service.implementation\";\nimport { AuthService } from \"@bitwarden/common/auth/services/auth.service\";\nimport { DeviceTrustCryptoService } from \"@bitwarden/common/auth/services/device-trust-crypto.service.implementation\";\nimport { DevicesServiceImplementation } from \"@bitwarden/common/auth/services/devices/devices.service.implementation\";\nimport { DevicesApiServiceImplementation } from \"@bitwarden/common/auth/services/devices-api.service.implementation\";\nimport { KeyConnectorService } from \"@bitwarden/common/auth/services/key-connector.service\";\nimport { TokenService } from \"@bitwarden/common/auth/services/token.service\";\nimport { TwoFactorService } from \"@bitwarden/common/auth/services/two-factor.service\";\nimport { UserVerificationApiService } from \"@bitwarden/common/auth/services/user-verification/user-verification-api.service\";\nimport { UserVerificationService } from \"@bitwarden/common/auth/services/user-verification/user-verification.service\";\nimport { AppIdService as AppIdServiceAbstraction } from \"@bitwarden/common/platform/abstractions/app-id.service\";\nimport { ConfigApiServiceAbstraction } from \"@bitwarden/common/platform/abstractions/config/config-api.service.abstraction\";\nimport { CryptoFunctionService as CryptoFunctionServiceAbstraction } from \"@bitwarden/common/platform/abstractions/crypto-function.service\";\nimport { CryptoService as CryptoServiceAbstraction } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { FileUploadService as FileUploadServiceAbstraction } from \"@bitwarden/common/platform/abstractions/file-upload/file-upload.service\";\nimport { I18nService as I18nServiceAbstraction } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService as LogServiceAbstraction } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { MessagingService as MessagingServiceAbstraction } from \"@bitwarden/common/platform/abstractions/messaging.service\";\nimport { PlatformUtilsService as PlatformUtilsServiceAbstraction } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport {\n  AbstractMemoryStorageService,\n  AbstractStorageService,\n} from \"@bitwarden/common/platform/abstractions/storage.service\";\nimport { SystemService as SystemServiceAbstraction } from \"@bitwarden/common/platform/abstractions/system.service\";\nimport { StateFactory } from \"@bitwarden/common/platform/factories/state-factory\";\nimport { GlobalState } from \"@bitwarden/common/platform/models/domain/global-state\";\nimport { AppIdService } from \"@bitwarden/common/platform/services/app-id.service\";\nimport { ConfigApiService } from \"@bitwarden/common/platform/services/config/config-api.service\";\nimport { ConsoleLogService } from \"@bitwarden/common/platform/services/console-log.service\";\nimport { ContainerService } from \"@bitwarden/common/platform/services/container.service\";\nimport { EncryptServiceImplementation } from \"@bitwarden/common/platform/services/cryptography/encrypt.service.implementation\";\nimport { MultithreadEncryptServiceImplementation } from \"@bitwarden/common/platform/services/cryptography/multithread-encrypt.service.implementation\";\nimport { FileUploadService } from \"@bitwarden/common/platform/services/file-upload/file-upload.service\";\nimport { MemoryStorageService } from \"@bitwarden/common/platform/services/memory-storage.service\";\nimport { SystemService } from \"@bitwarden/common/platform/services/system.service\";\nimport { WebCryptoFunctionService } from \"@bitwarden/common/platform/services/web-crypto-function.service\";\nimport { AvatarUpdateService } from \"@bitwarden/common/services/account/avatar-update.service\";\nimport { ApiService } from \"@bitwarden/common/services/api.service\";\nimport { AuditService } from \"@bitwarden/common/services/audit.service\";\nimport { EventCollectionService } from \"@bitwarden/common/services/event/event-collection.service\";\nimport { EventUploadService } from \"@bitwarden/common/services/event/event-upload.service\";\nimport { NotificationsService } from \"@bitwarden/common/services/notifications.service\";\nimport { SearchService } from \"@bitwarden/common/services/search.service\";\nimport { TotpService } from \"@bitwarden/common/services/totp.service\";\nimport { VaultTimeoutSettingsService } from \"@bitwarden/common/services/vault-timeout/vault-timeout-settings.service\";\nimport {\n  PasswordGenerationService,\n  PasswordGenerationServiceAbstraction,\n} from \"@bitwarden/common/tools/generator/password\";\nimport {\n  UsernameGenerationService,\n  UsernameGenerationServiceAbstraction,\n} from \"@bitwarden/common/tools/generator/username\";\nimport {\n  PasswordStrengthService,\n  PasswordStrengthServiceAbstraction,\n} from \"@bitwarden/common/tools/password-strength\";\nimport { SendApiService } from \"@bitwarden/common/tools/send/services/send-api.service\";\nimport { SendApiService as SendApiServiceAbstraction } from \"@bitwarden/common/tools/send/services/send-api.service.abstraction\";\nimport { InternalSendService as InternalSendServiceAbstraction } from \"@bitwarden/common/tools/send/services/send.service.abstraction\";\nimport { CipherService as CipherServiceAbstraction } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionService as CollectionServiceAbstraction } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { Fido2AuthenticatorService as Fido2AuthenticatorServiceAbstraction } from \"@bitwarden/common/vault/abstractions/fido2/fido2-authenticator.service.abstraction\";\nimport { Fido2ClientService as Fido2ClientServiceAbstraction } from \"@bitwarden/common/vault/abstractions/fido2/fido2-client.service.abstraction\";\nimport { Fido2UserInterfaceService as Fido2UserInterfaceServiceAbstraction } from \"@bitwarden/common/vault/abstractions/fido2/fido2-user-interface.service.abstraction\";\nimport { CipherFileUploadService as CipherFileUploadServiceAbstraction } from \"@bitwarden/common/vault/abstractions/file-upload/cipher-file-upload.service\";\nimport { FolderApiServiceAbstraction } from \"@bitwarden/common/vault/abstractions/folder/folder-api.service.abstraction\";\nimport { InternalFolderService as InternalFolderServiceAbstraction } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { SyncNotifierService as SyncNotifierServiceAbstraction } from \"@bitwarden/common/vault/abstractions/sync/sync-notifier.service.abstraction\";\nimport { SyncService as SyncServiceAbstraction } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CipherService } from \"@bitwarden/common/vault/services/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/services/collection.service\";\nimport { Fido2AuthenticatorService } from \"@bitwarden/common/vault/services/fido2/fido2-authenticator.service\";\nimport { Fido2ClientService } from \"@bitwarden/common/vault/services/fido2/fido2-client.service\";\nimport { CipherFileUploadService } from \"@bitwarden/common/vault/services/file-upload/cipher-file-upload.service\";\nimport { FolderApiService } from \"@bitwarden/common/vault/services/folder/folder-api.service\";\nimport { SyncNotifierService } from \"@bitwarden/common/vault/services/sync/sync-notifier.service\";\nimport { SyncService } from \"@bitwarden/common/vault/services/sync/sync.service\";\nimport {\n  VaultExportService,\n  VaultExportServiceAbstraction,\n} from \"@bitwarden/exporter/vault-export\";\nimport {\n  ImportApiServiceAbstraction,\n  ImportApiService,\n  ImportServiceAbstraction,\n  ImportService,\n} from \"@bitwarden/importer/core\";\n\nimport { BrowserOrganizationService } from \"../admin-console/services/browser-organization.service\";\nimport { BrowserPolicyService } from \"../admin-console/services/browser-policy.service\";\nimport ContextMenusBackground from \"../autofill/background/context-menus.background\";\nimport NotificationBackground from \"../autofill/background/notification.background\";\nimport TabsBackground from \"../autofill/background/tabs.background\";\nimport { CipherContextMenuHandler } from \"../autofill/browser/cipher-context-menu-handler\";\nimport { ContextMenuClickedHandler } from \"../autofill/browser/context-menu-clicked-handler\";\nimport { MainContextMenuHandler } from \"../autofill/browser/main-context-menu-handler\";\nimport { AutofillService as AutofillServiceAbstraction } from \"../autofill/services/abstractions/autofill.service\";\nimport AutofillService from \"../autofill/services/autofill.service\";\nimport { SafariApp } from \"../browser/safariApp\";\nimport { Account } from \"../models/account\";\nimport { BrowserApi } from \"../platform/browser/browser-api\";\nimport { flagEnabled } from \"../platform/flags\";\nimport { UpdateBadge } from \"../platform/listeners/update-badge\";\nimport BrowserPopoutWindowService from \"../platform/popup/browser-popout-window.service\";\nimport { BrowserStateService as StateServiceAbstraction } from \"../platform/services/abstractions/browser-state.service\";\nimport { BrowserConfigService } from \"../platform/services/browser-config.service\";\nimport { BrowserCryptoService } from \"../platform/services/browser-crypto.service\";\nimport { BrowserEnvironmentService } from \"../platform/services/browser-environment.service\";\nimport { BrowserI18nService } from \"../platform/services/browser-i18n.service\";\nimport BrowserLocalStorageService from \"../platform/services/browser-local-storage.service\";\nimport BrowserMessagingPrivateModeBackgroundService from \"../platform/services/browser-messaging-private-mode-background.service\";\nimport BrowserMessagingService from \"../platform/services/browser-messaging.service\";\nimport BrowserPlatformUtilsService from \"../platform/services/browser-platform-utils.service\";\nimport { BrowserStateService } from \"../platform/services/browser-state.service\";\nimport { KeyGenerationService } from \"../platform/services/key-generation.service\";\nimport { LocalBackedSessionStorageService } from \"../platform/services/local-backed-session-storage.service\";\nimport { PopupUtilsService } from \"../popup/services/popup-utils.service\";\nimport { BrowserSendService } from \"../services/browser-send.service\";\nimport { BrowserSettingsService } from \"../services/browser-settings.service\";\nimport VaultTimeoutService from \"../services/vault-timeout/vault-timeout.service\";\nimport { BrowserFido2UserInterfaceService } from \"../vault/fido2/browser-fido2-user-interface.service\";\nimport { BrowserFolderService } from \"../vault/services/browser-folder.service\";\nimport { VaultFilterService } from \"../vault/services/vault-filter.service\";\n\nimport CommandsBackground from \"./commands.background\";\nimport IdleBackground from \"./idle.background\";\nimport { NativeMessagingBackground } from \"./nativeMessaging.background\";\nimport RuntimeBackground from \"./runtime.background\";\nimport WebRequestBackground from \"./webRequest.background\";\n\nexport default class MainBackground {\n  messagingService: MessagingServiceAbstraction;\n  storageService: AbstractStorageService;\n  secureStorageService: AbstractStorageService;\n  memoryStorageService: AbstractMemoryStorageService;\n  i18nService: I18nServiceAbstraction;\n  platformUtilsService: PlatformUtilsServiceAbstraction;\n  logService: LogServiceAbstraction;\n  cryptoService: CryptoServiceAbstraction;\n  cryptoFunctionService: CryptoFunctionServiceAbstraction;\n  tokenService: TokenServiceAbstraction;\n  appIdService: AppIdServiceAbstraction;\n  apiService: ApiServiceAbstraction;\n  environmentService: BrowserEnvironmentService;\n  settingsService: SettingsServiceAbstraction;\n  cipherService: CipherServiceAbstraction;\n  folderService: InternalFolderServiceAbstraction;\n  collectionService: CollectionServiceAbstraction;\n  vaultTimeoutService: VaultTimeoutService;\n  vaultTimeoutSettingsService: VaultTimeoutSettingsServiceAbstraction;\n  syncService: SyncServiceAbstraction;\n  passwordGenerationService: PasswordGenerationServiceAbstraction;\n  passwordStrengthService: PasswordStrengthServiceAbstraction;\n  totpService: TotpServiceAbstraction;\n  autofillService: AutofillServiceAbstraction;\n  containerService: ContainerService;\n  auditService: AuditServiceAbstraction;\n  authService: AuthServiceAbstraction;\n  importApiService: ImportApiServiceAbstraction;\n  importService: ImportServiceAbstraction;\n  exportService: VaultExportServiceAbstraction;\n  searchService: SearchServiceAbstraction;\n  notificationsService: NotificationsServiceAbstraction;\n  stateService: StateServiceAbstraction;\n  systemService: SystemServiceAbstraction;\n  eventCollectionService: EventCollectionServiceAbstraction;\n  eventUploadService: EventUploadServiceAbstraction;\n  policyService: InternalPolicyServiceAbstraction;\n  sendService: InternalSendServiceAbstraction;\n  fileUploadService: FileUploadServiceAbstraction;\n  cipherFileUploadService: CipherFileUploadServiceAbstraction;\n  organizationService: InternalOrganizationServiceAbstraction;\n  providerService: ProviderServiceAbstraction;\n  keyConnectorService: KeyConnectorServiceAbstraction;\n  userVerificationService: UserVerificationServiceAbstraction;\n  twoFactorService: TwoFactorServiceAbstraction;\n  vaultFilterService: VaultFilterService;\n  usernameGenerationService: UsernameGenerationServiceAbstraction;\n  encryptService: EncryptService;\n  folderApiService: FolderApiServiceAbstraction;\n  policyApiService: PolicyApiServiceAbstraction;\n  sendApiService: SendApiServiceAbstraction;\n  userVerificationApiService: UserVerificationApiServiceAbstraction;\n  syncNotifierService: SyncNotifierServiceAbstraction;\n  fido2UserInterfaceService: Fido2UserInterfaceServiceAbstraction;\n  fido2AuthenticatorService: Fido2AuthenticatorServiceAbstraction;\n  fido2ClientService: Fido2ClientServiceAbstraction;\n  avatarUpdateService: AvatarUpdateServiceAbstraction;\n  mainContextMenuHandler: MainContextMenuHandler;\n  cipherContextMenuHandler: CipherContextMenuHandler;\n  configService: BrowserConfigService;\n  configApiService: ConfigApiServiceAbstraction;\n  devicesApiService: DevicesApiServiceAbstraction;\n  devicesService: DevicesServiceAbstraction;\n  deviceTrustCryptoService: DeviceTrustCryptoServiceAbstraction;\n  authRequestCryptoService: AuthRequestCryptoServiceAbstraction;\n  popupUtilsService: PopupUtilsService;\n  browserPopoutWindowService: BrowserPopoutWindowService;\n  accountService: AccountServiceAbstraction;\n\n  // Passed to the popup for Safari to workaround issues with theming, downloading, etc.\n  backgroundWindow = window;\n\n  onUpdatedRan: boolean;\n  onReplacedRan: boolean;\n  loginToAutoFill: CipherView = null;\n\n  private commandsBackground: CommandsBackground;\n  private contextMenusBackground: ContextMenusBackground;\n  private idleBackground: IdleBackground;\n  private notificationBackground: NotificationBackground;\n  private runtimeBackground: RuntimeBackground;\n  private tabsBackground: TabsBackground;\n  private webRequestBackground: WebRequestBackground;\n\n  private syncTimeout: any;\n  private isSafari: boolean;\n  private nativeMessagingBackground: NativeMessagingBackground;\n  popupOnlyContext: boolean;\n\n  constructor(public isPrivateMode: boolean = false) {\n    this.popupOnlyContext = isPrivateMode || BrowserApi.manifestVersion === 3;\n\n    // Services\n    const lockedCallback = async (userId?: string) => {\n      if (this.notificationsService != null) {\n        this.notificationsService.updateConnection(false);\n      }\n      await this.refreshBadge();\n      await this.refreshMenu(true);\n      if (this.systemService != null) {\n        await this.systemService.clearPendingClipboard();\n        await this.systemService.startProcessReload(this.authService);\n      }\n    };\n\n    const logoutCallback = async (expired: boolean, userId?: string) =>\n      await this.logout(expired, userId);\n\n    this.messagingService = this.popupOnlyContext\n      ? new BrowserMessagingPrivateModeBackgroundService()\n      : new BrowserMessagingService();\n    this.logService = new ConsoleLogService(false);\n    this.cryptoFunctionService = new WebCryptoFunctionService(window);\n    this.storageService = new BrowserLocalStorageService();\n    this.secureStorageService = new BrowserLocalStorageService();\n    this.memoryStorageService =\n      BrowserApi.manifestVersion === 3\n        ? new LocalBackedSessionStorageService(\n            new EncryptServiceImplementation(this.cryptoFunctionService, this.logService, false),\n            new KeyGenerationService(this.cryptoFunctionService)\n          )\n        : new MemoryStorageService();\n    this.accountService = new AccountServiceImplementation(this.messagingService, this.logService);\n    this.stateService = new BrowserStateService(\n      this.storageService,\n      this.secureStorageService,\n      this.memoryStorageService,\n      this.logService,\n      new StateFactory(GlobalState, Account),\n      this.accountService\n    );\n    this.platformUtilsService = new BrowserPlatformUtilsService(\n      this.messagingService,\n      (clipboardValue, clearMs) => {\n        if (this.systemService != null) {\n          this.systemService.clearClipboard(clipboardValue, clearMs);\n        }\n      },\n      async () => {\n        if (this.nativeMessagingBackground != null) {\n          const promise = this.nativeMessagingBackground.getResponse();\n\n          try {\n            await this.nativeMessagingBackground.send({ command: \"biometricUnlock\" });\n          } catch (e) {\n            return Promise.reject(e);\n          }\n\n          return promise.then((result) => result.response === \"unlocked\");\n        }\n      },\n      window\n    );\n    this.i18nService = new BrowserI18nService(BrowserApi.getUILanguage(window), this.stateService);\n    this.encryptService = flagEnabled(\"multithreadDecryption\")\n      ? new MultithreadEncryptServiceImplementation(\n          this.cryptoFunctionService,\n          this.logService,\n          true\n        )\n      : new EncryptServiceImplementation(this.cryptoFunctionService, this.logService, true);\n    this.cryptoService = new BrowserCryptoService(\n      this.cryptoFunctionService,\n      this.encryptService,\n      this.platformUtilsService,\n      this.logService,\n      this.stateService\n    );\n    this.tokenService = new TokenService(this.stateService);\n    this.appIdService = new AppIdService(this.storageService);\n    this.environmentService = new BrowserEnvironmentService(this.stateService, this.logService);\n    this.apiService = new ApiService(\n      this.tokenService,\n      this.platformUtilsService,\n      this.environmentService,\n      this.appIdService,\n      (expired: boolean) => this.logout(expired)\n    );\n    this.settingsService = new BrowserSettingsService(this.stateService);\n    this.fileUploadService = new FileUploadService(this.logService);\n    this.cipherFileUploadService = new CipherFileUploadService(\n      this.apiService,\n      this.fileUploadService\n    );\n    this.searchService = new SearchService(this.logService, this.i18nService);\n\n    this.collectionService = new CollectionService(\n      this.cryptoService,\n      this.i18nService,\n      this.stateService\n    );\n    this.syncNotifierService = new SyncNotifierService();\n    this.organizationService = new BrowserOrganizationService(this.stateService);\n    this.policyService = new BrowserPolicyService(this.stateService, this.organizationService);\n    this.policyApiService = new PolicyApiService(\n      this.policyService,\n      this.apiService,\n      this.stateService\n    );\n    this.keyConnectorService = new KeyConnectorService(\n      this.stateService,\n      this.cryptoService,\n      this.apiService,\n      this.tokenService,\n      this.logService,\n      this.organizationService,\n      this.cryptoFunctionService,\n      logoutCallback\n    );\n\n    this.passwordStrengthService = new PasswordStrengthService();\n\n    this.passwordGenerationService = new PasswordGenerationService(\n      this.cryptoService,\n      this.policyService,\n      this.stateService\n    );\n\n    this.twoFactorService = new TwoFactorService(this.i18nService, this.platformUtilsService);\n\n    // eslint-disable-next-line\n    const that = this;\n    const backgroundMessagingService = new (class extends MessagingServiceAbstraction {\n      // AuthService should send the messages to the background not popup.\n      send = (subscriber: string, arg: any = {}) => {\n        const message = Object.assign({}, { command: subscriber }, arg);\n        that.runtimeBackground.processMessage(message, that as any);\n      };\n    })();\n\n    this.devicesApiService = new DevicesApiServiceImplementation(this.apiService);\n    this.deviceTrustCryptoService = new DeviceTrustCryptoService(\n      this.cryptoFunctionService,\n      this.cryptoService,\n      this.encryptService,\n      this.stateService,\n      this.appIdService,\n      this.devicesApiService,\n      this.i18nService,\n      this.platformUtilsService\n    );\n\n    this.devicesService = new DevicesServiceImplementation(this.devicesApiService);\n\n    this.authRequestCryptoService = new AuthRequestCryptoServiceImplementation(this.cryptoService);\n\n    this.authService = new AuthService(\n      this.cryptoService,\n      this.apiService,\n      this.tokenService,\n      this.appIdService,\n      this.platformUtilsService,\n      backgroundMessagingService,\n      this.logService,\n      this.keyConnectorService,\n      this.environmentService,\n      this.stateService,\n      this.twoFactorService,\n      this.i18nService,\n      this.encryptService,\n      this.passwordStrengthService,\n      this.policyService,\n      this.deviceTrustCryptoService,\n      this.authRequestCryptoService\n    );\n\n    this.userVerificationApiService = new UserVerificationApiService(this.apiService);\n\n    this.userVerificationService = new UserVerificationService(\n      this.stateService,\n      this.cryptoService,\n      this.i18nService,\n      this.userVerificationApiService\n    );\n\n    this.configApiService = new ConfigApiService(this.apiService, this.authService);\n\n    this.configService = new BrowserConfigService(\n      this.stateService,\n      this.configApiService,\n      this.authService,\n      this.environmentService,\n      this.logService,\n      true\n    );\n\n    this.cipherService = new CipherService(\n      this.cryptoService,\n      this.settingsService,\n      this.apiService,\n      this.i18nService,\n      this.searchService,\n      this.stateService,\n      this.encryptService,\n      this.cipherFileUploadService,\n      this.configService\n    );\n    this.folderService = new BrowserFolderService(\n      this.cryptoService,\n      this.i18nService,\n      this.cipherService,\n      this.stateService\n    );\n    this.folderApiService = new FolderApiService(this.folderService, this.apiService);\n\n    this.vaultTimeoutSettingsService = new VaultTimeoutSettingsService(\n      this.cryptoService,\n      this.tokenService,\n      this.policyService,\n      this.stateService,\n      this.userVerificationService\n    );\n\n    this.vaultFilterService = new VaultFilterService(\n      this.stateService,\n      this.organizationService,\n      this.folderService,\n      this.cipherService,\n      this.collectionService,\n      this.policyService\n    );\n\n    this.vaultTimeoutService = new VaultTimeoutService(\n      this.cipherService,\n      this.folderService,\n      this.collectionService,\n      this.cryptoService,\n      this.platformUtilsService,\n      this.messagingService,\n      this.searchService,\n      this.stateService,\n      this.authService,\n      this.vaultTimeoutSettingsService,\n      lockedCallback,\n      logoutCallback\n    );\n    this.containerService = new ContainerService(this.cryptoService, this.encryptService);\n    this.sendService = new BrowserSendService(\n      this.cryptoService,\n      this.i18nService,\n      this.cryptoFunctionService,\n      this.stateService\n    );\n    this.sendApiService = new SendApiService(\n      this.apiService,\n      this.fileUploadService,\n      this.sendService\n    );\n    this.providerService = new ProviderService(this.stateService);\n    this.syncService = new SyncService(\n      this.apiService,\n      this.settingsService,\n      this.folderService,\n      this.cipherService,\n      this.cryptoService,\n      this.collectionService,\n      this.messagingService,\n      this.policyService,\n      this.sendService,\n      this.logService,\n      this.keyConnectorService,\n      this.stateService,\n      this.providerService,\n      this.folderApiService,\n      this.organizationService,\n      this.sendApiService,\n      logoutCallback\n    );\n    this.eventUploadService = new EventUploadService(\n      this.apiService,\n      this.stateService,\n      this.logService\n    );\n    this.eventCollectionService = new EventCollectionService(\n      this.cipherService,\n      this.stateService,\n      this.organizationService,\n      this.eventUploadService\n    );\n    this.totpService = new TotpService(this.cryptoFunctionService, this.logService);\n\n    this.autofillService = new AutofillService(\n      this.cipherService,\n      this.stateService,\n      this.totpService,\n      this.eventCollectionService,\n      this.logService,\n      this.settingsService,\n      this.userVerificationService\n    );\n    this.auditService = new AuditService(this.cryptoFunctionService, this.apiService);\n\n    this.importApiService = new ImportApiService(this.apiService);\n\n    this.importService = new ImportService(\n      this.cipherService,\n      this.folderService,\n      this.importApiService,\n      this.i18nService,\n      this.collectionService,\n      this.cryptoService\n    );\n\n    this.exportService = new VaultExportService(\n      this.folderService,\n      this.cipherService,\n      this.apiService,\n      this.cryptoService,\n      this.cryptoFunctionService,\n      this.stateService\n    );\n    this.notificationsService = new NotificationsService(\n      this.syncService,\n      this.appIdService,\n      this.apiService,\n      this.environmentService,\n      logoutCallback,\n      this.logService,\n      this.stateService,\n      this.authService,\n      this.messagingService\n    );\n\n    this.browserPopoutWindowService = new BrowserPopoutWindowService();\n\n    this.fido2UserInterfaceService = new BrowserFido2UserInterfaceService(\n      this.browserPopoutWindowService,\n      this.authService\n    );\n    this.fido2AuthenticatorService = new Fido2AuthenticatorService(\n      this.cipherService,\n      this.fido2UserInterfaceService,\n      this.syncService,\n      this.logService\n    );\n    this.fido2ClientService = new Fido2ClientService(\n      this.fido2AuthenticatorService,\n      this.configService,\n      this.authService,\n      this.stateService,\n      this.logService\n    );\n\n    const systemUtilsServiceReloadCallback = () => {\n      const forceWindowReload =\n        this.platformUtilsService.isSafari() ||\n        this.platformUtilsService.isFirefox() ||\n        this.platformUtilsService.isOpera();\n      BrowserApi.reloadExtension(forceWindowReload ? window : null);\n      return Promise.resolve();\n    };\n\n    this.systemService = new SystemService(\n      this.messagingService,\n      this.platformUtilsService,\n      systemUtilsServiceReloadCallback,\n      this.stateService\n    );\n\n    // Other fields\n    this.isSafari = this.platformUtilsService.isSafari();\n\n    // Background\n    this.runtimeBackground = new RuntimeBackground(\n      this,\n      this.autofillService,\n      this.platformUtilsService as BrowserPlatformUtilsService,\n      this.i18nService,\n      this.notificationsService,\n      this.stateService,\n      this.systemService,\n      this.environmentService,\n      this.messagingService,\n      this.logService,\n      this.configService,\n      this.browserPopoutWindowService\n    );\n    this.nativeMessagingBackground = new NativeMessagingBackground(\n      this.cryptoService,\n      this.cryptoFunctionService,\n      this.runtimeBackground,\n      this.i18nService,\n      this.messagingService,\n      this.appIdService,\n      this.platformUtilsService,\n      this.stateService,\n      this.logService,\n      this.authService\n    );\n    this.commandsBackground = new CommandsBackground(\n      this,\n      this.passwordGenerationService,\n      this.platformUtilsService,\n      this.vaultTimeoutService,\n      this.authService\n    );\n    this.notificationBackground = new NotificationBackground(\n      this.autofillService,\n      this.cipherService,\n      this.authService,\n      this.policyService,\n      this.folderService,\n      this.stateService,\n      this.environmentService\n    );\n\n    this.tabsBackground = new TabsBackground(this, this.notificationBackground);\n    if (!this.popupOnlyContext) {\n      const contextMenuClickedHandler = new ContextMenuClickedHandler(\n        (options) => this.platformUtilsService.copyToClipboard(options.text, { window: self }),\n        async (_tab) => {\n          const options = (await this.passwordGenerationService.getOptions())?.[0] ?? {};\n          const password = await this.passwordGenerationService.generatePassword(options);\n          this.platformUtilsService.copyToClipboard(password, { window: window });\n          this.passwordGenerationService.addHistory(password);\n        },\n        async (tab, cipher) => {\n          this.loginToAutoFill = cipher;\n          if (tab == null) {\n            return;\n          }\n\n          BrowserApi.tabSendMessage(tab, {\n            command: \"collectPageDetails\",\n            tab: tab,\n            sender: \"contextMenu\",\n          });\n        },\n        this.authService,\n        this.cipherService,\n        this.stateService,\n        this.totpService,\n        this.eventCollectionService,\n        this.userVerificationService\n      );\n\n      this.contextMenusBackground = new ContextMenusBackground(contextMenuClickedHandler);\n    }\n\n    this.idleBackground = new IdleBackground(\n      this.vaultTimeoutService,\n      this.stateService,\n      this.notificationsService\n    );\n    this.webRequestBackground = new WebRequestBackground(\n      this.platformUtilsService,\n      this.cipherService,\n      this.authService\n    );\n\n    this.usernameGenerationService = new UsernameGenerationService(\n      this.cryptoService,\n      this.stateService,\n      this.apiService\n    );\n\n    this.avatarUpdateService = new AvatarUpdateService(this.apiService, this.stateService);\n\n    if (!this.popupOnlyContext) {\n      this.mainContextMenuHandler = new MainContextMenuHandler(\n        this.stateService,\n        this.i18nService,\n        this.logService\n      );\n\n      this.cipherContextMenuHandler = new CipherContextMenuHandler(\n        this.mainContextMenuHandler,\n        this.authService,\n        this.cipherService\n      );\n    }\n  }\n\n  async bootstrap() {\n    this.containerService.attachToGlobal(window);\n\n    await this.stateService.init();\n\n    await this.vaultTimeoutService.init(true);\n    await (this.i18nService as BrowserI18nService).init();\n    await (this.eventUploadService as EventUploadService).init(true);\n    await this.runtimeBackground.init();\n    await this.notificationBackground.init();\n    await this.commandsBackground.init();\n\n    this.configService.init();\n    this.twoFactorService.init();\n\n    await this.tabsBackground.init();\n    if (!this.popupOnlyContext) {\n      this.contextMenusBackground?.init();\n    }\n    await this.idleBackground.init();\n    await this.webRequestBackground.init();\n\n    if (this.platformUtilsService.isFirefox() && !this.isPrivateMode) {\n      // Set Private Mode windows to the default icon - they do not share state with the background page\n      const privateWindows = await BrowserApi.getPrivateModeWindows();\n      privateWindows.forEach(async (win) => {\n        await new UpdateBadge(self).setBadgeIcon(\"\", win.id);\n      });\n\n      BrowserApi.onWindowCreated(async (win) => {\n        if (win.incognito) {\n          await new UpdateBadge(self).setBadgeIcon(\"\", win.id);\n        }\n      });\n    }\n\n    return new Promise<void>((resolve) => {\n      setTimeout(async () => {\n        await this.environmentService.setUrlsFromStorage();\n        // Workaround to ignore stateService.activeAccount until URLs are set\n        // TODO: Remove this when implementing ticket PM-2637\n        this.environmentService.initialized = true;\n        if (!this.isPrivateMode) {\n          await this.refreshBadge();\n        }\n        this.fullSync(true);\n        setTimeout(() => this.notificationsService.init(), 2500);\n        resolve();\n      }, 500);\n    });\n  }\n\n  async refreshBadge() {\n    await new UpdateBadge(self).run({ existingServices: this as any });\n  }\n\n  async refreshMenu(forLocked = false) {\n    if (!chrome.windows || !chrome.contextMenus) {\n      return;\n    }\n\n    await MainContextMenuHandler.removeAll();\n\n    if (forLocked) {\n      await this.mainContextMenuHandler?.noAccess();\n      this.onUpdatedRan = this.onReplacedRan = false;\n      return;\n    }\n\n    await this.mainContextMenuHandler?.init();\n\n    const tab = await BrowserApi.getTabFromCurrentWindow();\n    if (tab) {\n      await this.cipherContextMenuHandler?.update(tab.url);\n      this.onUpdatedRan = this.onReplacedRan = false;\n    }\n  }\n\n  async logout(expired: boolean, userId?: string) {\n    await this.eventUploadService.uploadEvents(userId);\n\n    await Promise.all([\n      this.syncService.setLastSync(new Date(0), userId),\n      this.cryptoService.clearKeys(userId),\n      this.settingsService.clear(userId),\n      this.cipherService.clear(userId),\n      this.folderService.clear(userId),\n      this.collectionService.clear(userId),\n      this.policyService.clear(userId),\n      this.passwordGenerationService.clear(userId),\n      this.vaultTimeoutSettingsService.clear(userId),\n      this.keyConnectorService.clear(),\n      this.vaultFilterService.clear(),\n    ]);\n\n    //Needs to be checked before state is cleaned\n    const needStorageReseed = await this.needsStorageReseed();\n\n    await this.stateService.clean({ userId: userId });\n\n    if (userId == null || userId === (await this.stateService.getUserId())) {\n      this.searchService.clearIndex();\n      this.messagingService.send(\"doneLoggingOut\", { expired: expired, userId: userId });\n    }\n\n    if (needStorageReseed) {\n      await this.reseedStorage();\n    }\n\n    if (BrowserApi.manifestVersion === 3) {\n      BrowserApi.sendMessage(\"updateBadge\");\n    }\n    await this.refreshBadge();\n    await this.mainContextMenuHandler.noAccess();\n    this.notificationsService.updateConnection(false);\n    await this.systemService.clearPendingClipboard();\n    await this.systemService.startProcessReload(this.authService);\n  }\n\n  private async needsStorageReseed(): Promise<boolean> {\n    const currentVaultTimeout = await this.stateService.getVaultTimeout();\n    return currentVaultTimeout == null ? false : true;\n  }\n\n  async collectPageDetailsForContentScript(tab: any, sender: string, frameId: number = null) {\n    if (tab == null || !tab.id) {\n      return;\n    }\n\n    const options: any = {};\n    if (frameId != null) {\n      options.frameId = frameId;\n    }\n\n    BrowserApi.tabSendMessage(\n      tab,\n      {\n        command: \"collectPageDetails\",\n        tab: tab,\n        sender: sender,\n      },\n      options\n    );\n  }\n\n  async openPopup() {\n    // Chrome APIs cannot open popup\n\n    // TODO: Do we need to open this popup?\n    if (!this.isSafari) {\n      return;\n    }\n    await SafariApp.sendMessageToApp(\"showPopover\", null, true);\n  }\n\n  async reseedStorage() {\n    if (\n      !this.platformUtilsService.isChrome() &&\n      !this.platformUtilsService.isVivaldi() &&\n      !this.platformUtilsService.isOpera()\n    ) {\n      return;\n    }\n\n    const getStorage = (): Promise<any> =>\n      new Promise((resolve) => {\n        chrome.storage.local.get(null, (o: any) => resolve(o));\n      });\n\n    const clearStorage = (): Promise<void> =>\n      new Promise((resolve) => {\n        chrome.storage.local.clear(() => resolve());\n      });\n\n    const storage = await getStorage();\n    await clearStorage();\n\n    for (const key in storage) {\n      // eslint-disable-next-line\n      if (!storage.hasOwnProperty(key)) {\n        continue;\n      }\n      await this.storageService.save(key, storage[key]);\n    }\n  }\n\n  private async fullSync(override = false) {\n    const syncInternal = 6 * 60 * 60 * 1000; // 6 hours\n    const lastSync = await this.syncService.getLastSync();\n\n    let lastSyncAgo = syncInternal + 1;\n    if (lastSync != null) {\n      lastSyncAgo = new Date().getTime() - lastSync.getTime();\n    }\n\n    if (override || lastSyncAgo >= syncInternal) {\n      await this.syncService.fullSync(override);\n      this.scheduleNextSync();\n    } else {\n      this.scheduleNextSync();\n    }\n  }\n\n  private scheduleNextSync() {\n    if (this.syncTimeout) {\n      clearTimeout(this.syncTimeout);\n    }\n\n    this.syncTimeout = setTimeout(async () => await this.fullSync(), 5 * 60 * 1000); // check every 5 minutes\n  }\n}\n","import {\n  flagEnabled as baseFlagEnabled,\n  devFlagEnabled as baseDevFlagEnabled,\n  devFlagValue as baseDevFlagValue,\n  SharedFlags,\n  SharedDevFlags,\n} from \"@bitwarden/common/platform/misc/flags\";\n\nimport { GroupPolicyEnvironment } from \"../admin-console/types/group-policy-environment\";\n\n// required to avoid linting errors when there are no flags\n/* eslint-disable-next-line @typescript-eslint/ban-types */\nexport type Flags = {} & SharedFlags;\n\n// required to avoid linting errors when there are no flags\n/* eslint-disable-next-line @typescript-eslint/ban-types */\nexport type DevFlags = {\n  storeSessionDecrypted?: boolean;\n  managedEnvironment?: GroupPolicyEnvironment;\n} & SharedDevFlags;\n\nexport function flagEnabled(flag: keyof Flags): boolean {\n  return baseFlagEnabled<Flags>(flag);\n}\n\nexport function devFlagEnabled(flag: keyof DevFlags) {\n  return baseDevFlagEnabled<DevFlags>(flag);\n}\n\nexport function devFlagValue(flag: keyof DevFlags) {\n  return baseDevFlagValue(flag);\n}\n","import { ClearClipboard, clearClipboardAlarmName } from \"../../autofill/clipboard\";\n\nimport { alarmKeys, clearAlarmTime, getAlarmTime } from \"./alarm-state\";\n\nexport const onAlarmListener = async (alarm: chrome.alarms.Alarm) => {\n  alarmKeys.forEach(async (key) => {\n    const executionTime = await getAlarmTime(key);\n    if (!executionTime) {\n      return;\n    }\n\n    const currentDate = Date.now();\n    if (executionTime > currentDate) {\n      return;\n    }\n\n    await clearAlarmTime(key);\n\n    switch (key) {\n      case clearClipboardAlarmName:\n        ClearClipboard.run();\n        break;\n      default:\n    }\n  });\n};\n","import { CachedServices } from \"../background/service-factories/factory-options\";\n\ntype Listener<T extends unknown[]> = (...args: [...T, CachedServices]) => Promise<void>;\n\nexport const combine = <T extends unknown[]>(\n  listeners: Listener<T>[],\n  startingServices: CachedServices = {}\n) => {\n  return async (...args: T) => {\n    const cachedServices = { ...startingServices };\n    for (const listener of listeners) {\n      await listener(...[...args, cachedServices]);\n    }\n  };\n};\n","import { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { StateFactory } from \"@bitwarden/common/platform/factories/state-factory\";\nimport { GlobalState } from \"@bitwarden/common/platform/models/domain/global-state\";\n\nimport { authServiceFactory } from \"../../auth/background/service-factories/auth-service.factory\";\nimport { autofillServiceFactory } from \"../../autofill/background/service_factories/autofill-service.factory\";\nimport { GeneratePasswordToClipboardCommand } from \"../../autofill/clipboard\";\nimport { AutofillTabCommand } from \"../../autofill/commands/autofill-tab-command\";\nimport { Account } from \"../../models/account\";\nimport { stateServiceFactory } from \"../../platform/background/service-factories/state-service.factory\";\nimport {\n  passwordGenerationServiceFactory,\n  PasswordGenerationServiceInitOptions,\n} from \"../../tools/background/service_factories/password-generation-service.factory\";\nimport { CachedServices } from \"../background/service-factories/factory-options\";\nimport { logServiceFactory } from \"../background/service-factories/log-service.factory\";\nimport { BrowserApi } from \"../browser/browser-api\";\n\nexport const onCommandListener = async (command: string, tab: chrome.tabs.Tab) => {\n  switch (command) {\n    case \"autofill_login\":\n      await doAutoFillLogin(tab);\n      break;\n    case \"generate_password\":\n      await doGeneratePasswordToClipboard(tab);\n      break;\n  }\n};\n\nconst doAutoFillLogin = async (tab: chrome.tabs.Tab): Promise<void> => {\n  const cachedServices: CachedServices = {};\n  const opts = {\n    cryptoFunctionServiceOptions: {\n      win: self,\n    },\n    encryptServiceOptions: {\n      logMacFailures: true,\n    },\n    logServiceOptions: {\n      isDev: false,\n    },\n    platformUtilsServiceOptions: {\n      clipboardWriteCallback: () => Promise.resolve(),\n      biometricCallback: () => Promise.resolve(false),\n      win: self,\n    },\n    stateServiceOptions: {\n      stateFactory: new StateFactory(GlobalState, Account),\n    },\n    apiServiceOptions: {\n      logoutCallback: () => Promise.resolve(),\n    },\n    keyConnectorServiceOptions: {\n      logoutCallback: () => Promise.resolve(),\n    },\n    i18nServiceOptions: {\n      systemLanguage: BrowserApi.getUILanguage(self),\n    },\n  };\n  const logService = await logServiceFactory(cachedServices, opts);\n  const authService = await authServiceFactory(cachedServices, opts);\n  const autofillService = await autofillServiceFactory(cachedServices, opts);\n\n  const authStatus = await authService.getAuthStatus();\n  if (authStatus < AuthenticationStatus.Unlocked) {\n    // TODO: Add back in unlock on autofill\n    logService.info(\"Currently not unlocked, MV3 does not support unlock on autofill currently.\");\n    return;\n  }\n\n  const command = new AutofillTabCommand(autofillService);\n  await command.doAutofillTabCommand(tab);\n};\n\nconst doGeneratePasswordToClipboard = async (tab: chrome.tabs.Tab): Promise<void> => {\n  const stateFactory = new StateFactory(GlobalState, Account);\n\n  const cache = {};\n  const options: PasswordGenerationServiceInitOptions = {\n    cryptoFunctionServiceOptions: {\n      win: self,\n    },\n    encryptServiceOptions: {\n      logMacFailures: false,\n    },\n    logServiceOptions: {\n      isDev: false,\n    },\n    platformUtilsServiceOptions: {\n      biometricCallback: () => Promise.resolve(true),\n      clipboardWriteCallback: () => Promise.resolve(),\n      win: self,\n    },\n    stateServiceOptions: {\n      stateFactory: stateFactory,\n    },\n  };\n\n  const command = new GeneratePasswordToClipboardCommand(\n    await passwordGenerationServiceFactory(cache, options),\n    await stateServiceFactory(cache, options)\n  );\n  command.generatePasswordToClipboard(tab);\n};\n","import { CipherContextMenuHandler } from \"../../autofill/browser/cipher-context-menu-handler\";\nimport { ContextMenuClickedHandler } from \"../../autofill/browser/context-menu-clicked-handler\";\n\nimport { combine } from \"./combine\";\nimport { onCommandListener } from \"./on-command-listener\";\nimport { onInstallListener } from \"./on-install-listener\";\nimport { UpdateBadge } from \"./update-badge\";\n\nconst windowsOnFocusChangedListener = combine([\n  UpdateBadge.windowsOnFocusChangedListener,\n  CipherContextMenuHandler.windowsOnFocusChangedListener,\n]);\n\nconst tabsOnActivatedListener = combine([\n  UpdateBadge.tabsOnActivatedListener,\n  CipherContextMenuHandler.tabsOnActivatedListener,\n]);\n\nconst tabsOnReplacedListener = combine([\n  UpdateBadge.tabsOnReplacedListener,\n  CipherContextMenuHandler.tabsOnReplacedListener,\n]);\n\nconst tabsOnUpdatedListener = combine([\n  UpdateBadge.tabsOnUpdatedListener,\n  CipherContextMenuHandler.tabsOnUpdatedListener,\n]);\n\nconst contextMenusClickedListener = ContextMenuClickedHandler.onClickedListener;\n\n// TODO: All message listeners should be RuntimeMessage in Notifications follow up then this type annotation can be inferred\nconst runtimeMessageListener = combine<\n  [message: { command: string }, sender: chrome.runtime.MessageSender]\n>([\n  UpdateBadge.messageListener,\n  CipherContextMenuHandler.messageListener,\n  ContextMenuClickedHandler.messageListener,\n]);\n\nexport {\n  windowsOnFocusChangedListener,\n  tabsOnActivatedListener,\n  tabsOnReplacedListener,\n  tabsOnUpdatedListener,\n  contextMenusClickedListener,\n  runtimeMessageListener,\n  onCommandListener,\n  onInstallListener,\n};\n","import MainBackground from \"../background/main.background\";\n\nimport { onAlarmListener } from \"./alarms/on-alarm-listener\";\nimport { registerAlarms } from \"./alarms/register-alarms\";\nimport { BrowserApi } from \"./browser/browser-api\";\nimport {\n  contextMenusClickedListener,\n  onCommandListener,\n  onInstallListener,\n  runtimeMessageListener,\n  windowsOnFocusChangedListener,\n  tabsOnActivatedListener,\n  tabsOnReplacedListener,\n  tabsOnUpdatedListener,\n} from \"./listeners\";\n\nif (BrowserApi.manifestVersion === 3) {\n  chrome.commands.onCommand.addListener(onCommandListener);\n  chrome.runtime.onInstalled.addListener(onInstallListener);\n  chrome.alarms.onAlarm.addListener(onAlarmListener);\n  registerAlarms();\n  chrome.windows.onFocusChanged.addListener(windowsOnFocusChangedListener);\n  chrome.tabs.onActivated.addListener(tabsOnActivatedListener);\n  chrome.tabs.onReplaced.addListener(tabsOnReplacedListener);\n  chrome.tabs.onUpdated.addListener(tabsOnUpdatedListener);\n  chrome.contextMenus.onClicked.addListener(contextMenusClickedListener);\n  BrowserApi.messageListener(\n    \"runtime.background\",\n    (message: { command: string }, sender, sendResponse) => {\n      runtimeMessageListener(message, sender);\n    }\n  );\n} else {\n  const bitwardenMain = ((window as any).bitwardenMain = new MainBackground());\n  bitwardenMain.bootstrap().then(() => {\n    // Finished bootstrapping\n  });\n}\n","import { StateFactory } from \"@bitwarden/common/platform/factories/state-factory\";\nimport { GlobalState } from \"@bitwarden/common/platform/models/domain/global-state\";\n\nimport { Account } from \"../../models/account\";\nimport {\n  EnvironmentServiceInitOptions,\n  environmentServiceFactory,\n} from \"../background/service-factories/environment-service.factory\";\nimport { BrowserApi } from \"../browser/browser-api\";\n\nexport async function onInstallListener(details: chrome.runtime.InstalledDetails) {\n  const cache = {};\n  const opts: EnvironmentServiceInitOptions = {\n    encryptServiceOptions: {\n      logMacFailures: false,\n    },\n    cryptoFunctionServiceOptions: {\n      win: self,\n    },\n    logServiceOptions: {\n      isDev: false,\n    },\n    stateServiceOptions: {\n      stateFactory: new StateFactory(GlobalState, Account),\n    },\n  };\n  const environmentService = await environmentServiceFactory(cache, opts);\n\n  setTimeout(async () => {\n    if (details.reason != null && details.reason === chrome.runtime.OnInstalledReason.INSTALL) {\n      BrowserApi.createNewTab(\"https://bitwarden.com/browser-start/\");\n\n      if (await environmentService.hasManagedEnvironment()) {\n        await environmentService.setUrlsToManagedEnvironment();\n      }\n    }\n  }, 100);\n}\n","const NUMBER_OF_ALARMS = 6;\n\nexport function registerAlarms() {\n  alarmsToBeCreated(NUMBER_OF_ALARMS);\n}\n\n/**\n * Creates staggered alarms that periodically (1min) raise OnAlarm events. The staggering is calculated based on the number of alarms passed in.\n * @param numberOfAlarms Number of named alarms, that shall be registered\n * @example\n * // alarmsToBeCreated(2) results in 2 alarms separated by 30 seconds\n * @example\n * // alarmsToBeCreated(4) results in 4 alarms separated by 15 seconds\n * @example\n * // alarmsToBeCreated(6) results in 6 alarms separated by 10 seconds\n * @example\n * // alarmsToBeCreated(60) results in 60 alarms separated by 1 second\n */\nfunction alarmsToBeCreated(numberOfAlarms: number): void {\n  const oneMinuteInMs = 60 * 1000;\n  const offset = oneMinuteInMs / numberOfAlarms;\n\n  let calculatedWhen: number = Date.now() + offset;\n\n  for (let index = 0; index < numberOfAlarms; index++) {\n    chrome.alarms.create(`bw_alarm${index}`, { periodInMinutes: 1, when: calculatedWhen });\n    calculatedWhen += offset;\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// expose the module cache\n__webpack_require__.c = __webpack_module_cache__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + \"encrypt-worker\" + \".js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t352: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk_bitwarden_browser\"] = self[\"webpackChunk_bitwarden_browser\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// module cache are used so entry inlining is disabled\n// startup\n// Load entry module and return exports\nvar __webpack_exports__ = __webpack_require__.O(undefined, [736], () => (__webpack_require__(82321)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","leafPrototypes","getProto","constructor","response","this","getResponseProperty","propertyName","exactName","Error","undefined","otherCasePropertyName","charAt","toUpperCase","toLowerCase","length","slice","ListResponse","t","super","data","map","dr","continuationToken","nodeURL","window","static","inited","isNode","process","release","name","isBrowser","isMobileBrowser","isMobile","isAppleMobileBrowser","isAppleMobile","global","g","self","str","Uint8Array","Buffer","from","binaryString","atob","bytes","i","charCodeAt","fromB64ToArray","fromUrlB64ToB64","parseInt","substr","strUtf8","unescape","encodeURIComponent","arr","buffer","toString","binary","byteLength","String","fromCharCode","btoa","fromB64toUrlB64","fromBufferToB64","b64Str","replace","encodedString","apply","decodeURIComponent","escape","Array","prototype","call","x","join","urlB64Str","output","fromB64ToUtf8","utfStr","fromBufferToUrlB64","fromUtf8ToArray","c","r","Math","random","id","RegExp","test","uriString","isNullOrWhitespace","trim","startsWith","indexOf","hostname","validHosts","url","getUrl","host","parseResult","isIp","domain","search","Map","split","forEach","pair","parts","set","i18nService","prop","a","b","collator","compare","localeCompare","obj","target","source","Object","assign","keys","filter","k","Number","isNaN","getUrlObject","s","bgColor","threshold","svgTextFill","bgColorHexNums","substring","hash","color","bitwardenContainerService","fromEntries","record","entries","e","destination","denormalizedPath","win","mobile","navigator","userAgent","vendor","opera","match","ms","Promise","resolve","setTimeout","generator","of","pipe","switchMap","targetDate","diffTime","getTime","Date","now","max","floor","hasProtocol","URL","regexpEmojiPresentation","originalMinimumPasswordLength","minimumPasswordLength","DomainMatchBlacklist","Set","init","PolicyData","organizationId","type","enabled","PolicyResponse","OrganizationApiKeyType","OrganizationConnectionType","OrganizationUserStatusType","OrganizationUserType","PolicyType","ProviderUserStatusType","ProviderUserType","ScimProviderType","PolicyApiService","policyService","apiService","stateService","getPolicy","send","getPolicies","getPoliciesByToken","token","email","organizationUserId","encodeRFC3986URIComponent","getPoliciesByInvitedUser","userId","getMasterPasswordPoliciesForInvitedUsers","orgId","getUserId","policies","mapPoliciesFromToken","firstValueFrom","masterPasswordPolicyOptions$","putPolicy","request","upsert","Provider","status","useEvents","canAccess","isProviderAdmin","Confirmed","canCreateOrganizations","canManageUsers","canAccessEventLogs","ProviderAdmin","ProviderService","get","providers","getProviders","hasOwnProperty","getAll","push","save","setProviders","AuthenticationStatus","ClientType","DeviceType","AccountServiceImplementation","messagingService","logService","accounts","BehaviorSubject","activeAccountId","lock","Subject","logout","accounts$","asObservable","activeAccount$","combineLatestWith","distinctUntilChanged","shareReplay","bufferSize","refCount","accountLock$","accountLogout$","addAccount","accountData","value","next","setAccountName","setAccountInfo","setAccountEmail","setAccountStatus","LoggedOut","Locked","switchAccount","delete","error","accountInfo","JSON","stringify","Android","iOS","AndroidAmazon","WindowsDesktop","MacOsDesktop","LinuxDesktop","UWP","EncryptedExportType","EncryptionType","EXPECTED_NUM_PARTS_BY_ENCRYPTION_TYPE","AesCbc256_B64","AesCbc128_HmacSha256_B64","AesCbc256_HmacSha256_B64","Rsa2048_OaepSha256_B64","Rsa2048_OaepSha1_B64","Rsa2048_OaepSha256_HmacSha256_B64","Rsa2048_OaepSha1_HmacSha256_B64","EventSystemUser","EventType","FieldType","FileUploadType","HashPurpose","HtmlStorageLocation","HttpStatusCode","KdfType","KdfConfig","iterations","memory","parallelism","PBKDF2_SHA256","KeySuffixOptions","LoginLinkedId","CardLinkedId","IdentityLinkedId","LogLevelType","NativeMessagingVersion","NotificationType","ProductType","ProviderType","SecureNoteType","StorageLocation","ThemeType","UriMatchType","SymmetricCryptoKey","key","encType","encKey","macKey","keyB64","encKeyB64","macKeyB64","toJSON","arrayBuffer","fromString","AuthenticationType","AuthRequestCryptoServiceImplementation","cryptoService","setUserKeyAfterDecryptingSharedUserKey","authReqResponse","authReqPrivateKey","userKey","decryptPubKeyEncryptedUserKey","setUserKey","setKeysAfterDecryptingSharedMasterKeyAndHash","masterKey","masterKeyHash","decryptPubKeyEncryptedMasterKeyAndHash","masterPasswordHash","decryptUserKeyWithMasterKey","setMasterKey","setMasterKeyHash","pubKeyEncryptedUserKey","privateKey","decryptedUserKeyBytes","rsaDecrypt","pubKeyEncryptedMasterKey","pubKeyEncryptedMasterKeyHash","decryptedMasterKeyArrayBuffer","decryptedMasterKeyHashArrayBuffer","fromBufferToUtf8","PreloginRequest","ErrorResponse","identityResponse","errorModel","responseErrorModel","message","validationErrors","captchaSiteKey","HCaptcha_SiteKey","captchaRequired","statusCode","getSingleMessage","getAllMessages","messages","item","prefix","lastSep","lastIndexOf","EncString","encryptedStringOrType","iv","mac","initFromData","initFromEncryptedString","ivBytes","macBytes","dataBytes","encryptedString","encryptionType","encPieces","parseEncryptedString","headerPieces","decrypt","decryptedValue","getKeyForDecryption","encryptService","getContainerService","getEncryptService","decryptToUtf8","getCryptoService","getOrgKey","getUserKeyWithLegacySupport","ForceResetPasswordReason","TwoFactorProviderType","Domain","buildDomainModel","dataObj","notEncList","objProp","buildDataModel","notEncStringList","decryptObj","viewModel","promises","theProp","p","then","mapProp","val","all","MasterPasswordPolicyOptions","minComplexity","minLength","requireUpper","requireLower","requireNumbers","requireSpecial","enforceOnLogin","policy","options","TokenRequest","twoFactor","device","alterIdentityTokenHeaders","headers","setTwoFactor","setPasswordlessAccessCode","accessCode","passwordlessAuthRequest","toIdentityToken","clientId","scope","client_id","deviceType","deviceIdentifier","identifier","deviceName","authRequest","provider","twoFactorToken","twoFactorProvider","twoFactorRemember","remember","PasswordTokenRequest","captchaResponse","grant_type","username","password","fromUtf8ToUrlB64","IdentityCaptchaResponse","siteKey","KeysRequest","publicKey","encryptedPrivateKey","AdminAuthRequestStorable","fromBufferToByteString","privateKeyBuffer","fromByteStringToArray","EnvironmentUrls","base","api","identity","icons","notifications","events","webVault","keyConnector","KeyConnectorUserDecryptionOption","keyConnectorUrl","TrustedDeviceUserDecryptionOption","hasAdminApproval","hasLoginApprovingDevice","hasManageResetPasswordPermission","ServerConfigData","serverConfigResponse","featureStates","version","gitHash","server","ThirdPartyServerConfigData","utcDate","toISOString","environment","EnvironmentServerConfigData","fromJSON","cloudRegion","vault","sso","EncryptionPair","encrypted","decrypted","ArrayBuffer","decryptedFromJson","encryptedFromJson","DataEncryptionPair","TemporaryDataEncryption","AccountData","ciphers","folders","sends","collections","passwordGenerationHistory","AccountKeys","organizationKeys","providerKeys","cryptoSymmetricKey","merge","deviceKey","cryptoMasterKey","initRecordEncryptionPairsFromJSON","decObj","AccountProfile","environmentUrls","vaultTimeoutAction","pinProtected","serverConfig","AccountTokens","AccountDecryptionOptions","accountDecryptionOptions","userDecryptionOptions","responseOptions","hasMasterPassword","trustedDeviceOption","keyConnectorOption","usingKeyConnector","LoginState","profile","settings","tokens","decryptionOptions","loginState","adminAuthRequest","json","AuthResult","resetMasterPassword","forcePasswordReset","None","twoFactorProviders","requiresCaptcha","requiresTwoFactor","DeviceRequest","appId","platformUtilsService","getDevice","getDeviceString","pushToken","TokenTwoFactorRequest","MasterPasswordPolicyResponse","KeyConnectorUserDecryptionOptionResponse","TrustedDeviceUserDecryptionOptionResponse","EncryptedPrivateKey","EncryptedUserKey","encryptedUserKey","UserDecryptionOptionsResponse","TrustedDeviceOption","KeyConnectorOption","IdentityTokenResponse","accessToken","access_token","expiresIn","expires_in","refreshToken","refresh_token","tokenType","token_type","kdf","kdfIterations","kdfMemory","kdfParallelism","apiUseKeyConnector","masterPasswordPolicy","UserDecryptionOptions","IdentityTwoFactorResponse","twoFactorProviders2","captchaToken","ssoEmail2faSessionToken","LogInStrategy","tokenService","appIdService","twoFactorService","captchaBypassToken","logInTwoFactor","tokenRequest","authResult","startLogIn","clearSelectedProvider","postIdentityToken","processTwoFactorResponse","processCaptchaResponse","processTokenResponse","buildDeviceRequest","getAppId","buildTwoFactor","userProvidedTwoFactor","storedTwoFactorToken","getTwoFactorToken","Remember","saveAccountInformation","tokenResponse","accountInformation","decodeToken","sub","getDeviceKey","accountKeys","getAdminAuthRequest","hasPremiumPersonally","premium","kdfType","fromResponse","result","encryptionKeyMigrationRequired","requiresEncryptionKeyMigration","getClientType","Web","AdminForcePasswordReset","setTwoFactorToken","setPrivateKey","createKeyPairForOldAccount","makeKeyPair","postAccountKeys","ssoEmail2FaSessionToken","PasswordLogInStrategy","passwordStrengthService","authService","forcePasswordResetReason","setForcePasswordResetReason","logIn","credentials","masterPassword","makePreloginKey","localMasterKeyHash","hashMasterKey","LocalAuthorization","masterPasswordPolicyOptions","getMasterPasswordPolicyOptionsFromResponse","evaluateMasterPassword","WeakMasterPassword","setMasterKeyEncryptedUserKey","getMasterKey","passwordStrength","getPasswordStrength","score","PasswordlessLogInStrategy","passwordlessCredentials","authRequestId","deviceTrustCryptoService","decryptedMasterKey","decryptedMasterKeyHash","decryptedUserKey","trySetUserKeyWithMasterKey","trustDeviceIfRequired","SsoTokenRequest","code","codeVerifier","redirectUri","code_verifier","redirect_uri","SsoLogInStrategy","keyConnectorService","authReqCryptoService","redirectUrl","ssoAuthResult","shouldSetMasterKeyFromKeyConnector","convertNewSsoUserToKeyConnector","getKeyConnectorUrl","setMasterKeyFromUrl","userHasMasterPassword","masterKeyEncryptedUserKey","trySetUserKeyWithApprovedAdminRequestIfExists","hasUserKey","trySetUserKeyWithDeviceKey","adminAuthReqStorable","adminAuthReqResponse","getAuthRequest","NotFound","setAdminAuthRequest","requestApproved","showToast","encDevicePrivateKey","encUserKey","decryptUserKeyWithDeviceKey","UserApiTokenRequest","clientSecret","client_secret","UserApiLogInStrategy","environmentService","setApiKeyClientId","setApiKeyClientSecret","PasswordlessAuthRequest","AuthService","logInStrategy","pushNotificationSubject","strategy","clearState","Password","Sso","UserApi","Passwordless","saveState","logOut","callback","authingWithUserApiKey","authingWithSso","authingWithPassword","authingWithPasswordless","getAuthStatus","getIsAuthenticated","hasUserKeyInMemory","hasUserKeyStored","Auto","getEverBeenUnlocked","getUserKeyFromStorage","Unlocked","kdfConfig","preloginResponse","postPrelogin","makeMasterKey","authResponsePushNotification","notification","getPushNotificationObs$","passwordlessLogin","pubKey","keyToEncrypt","encryptedMasterKeyHash","getKeyHash","rsaEncrypt","getUserKey","encryptedKey","putAuthRequest","startSessionTimeout","clearSessionTimeout","sessionTimeout","clearTimeout","SecretVerificationRequest","UpdateDevicesTrustRequest","DeviceKeysUpdateRequest","DeviceTrustCryptoService","cryptoFunctionService","devicesApiService","getShouldTrustDevice","setShouldTrustDevice","trustDevice","makeDeviceKey","devicePublicKey","devicePrivateKey","rsaGenerateKeyPair","devicePublicKeyEncryptedUserKey","userKeyEncryptedDevicePublicKey","deviceKeyEncryptedDevicePrivateKey","encrypt","deviceResponse","updateTrustedDeviceKeys","setDeviceKey","rotateDevicesTrust","newUserKey","oldUserKey","secretVerificationRequest","currentDeviceKeys","getDeviceKeys","decryptedDevicePublicKey","decryptToBytes","encryptedPublicKey","encryptedNewUserKey","encryptedDevicePublicKey","currentDeviceUpdateRequest","trustRequest","currentDevice","otherDevices","updateTrust","randomBytes","aesGenerateKey","encryptedDevicePrivateKey","supportsDeviceTrust","getAccountDecryptionOptions","DeviceView","DevicesServiceImplementation","getDevices$","defer","getDevices","deviceResponses","getDeviceByIdentifier$","getDeviceByIdentifier","isDeviceKnownForUser$","getKnownDevice","updateTrustedDeviceKeys$","DeviceResponse","creationDate","revisionDate","ProtectedDeviceResponse","TrustedDeviceKeysRequest","DevicesApiServiceImplementation","updateDevicesTrustRequestModel","KeyConnectorUserKeyRequest","SetKeyConnectorKeyRequest","orgIdentifier","KeyConnectorService","organizationService","logoutCallback","setUsesKeyConnector","usesKeyConnector","getUsesKeyConnector","userNeedsMigration","loggedInUsingSso","getIsExternal","requiredByOrganization","getManagingOrganization","userIsNotUsingKeyConnector","migrateUser","organization","keyConnectorRequest","postUserKeyToKeyConnector","handleKeyConnectorError","postConvertToKeyConnector","masterKeyResponse","getMasterKeyFromKeyConnector","keyArr","find","o","keyConnectorEnabled","Admin","Owner","isProviderUser","legacyKeyConnectorUrl","getEmail","makeUserKey","privKey","setPasswordRequest","postSetKeyConnectorKey","setConvertAccountRequired","setConvertAccountToKeyConnector","getConvertAccountRequired","getConvertAccountToKeyConnector","removeConvertAccountRequired","clear","TokenService","decoded","fromUrlB64ToUtf8","parse","setTokens","clientIdClientSecret","setToken","setRefreshToken","setClientId","setClientSecret","getClientId","getApiKeyClientId","getClientSecret","getApiKeyClientSecret","setAccessToken","getToken","getAccessToken","getRefreshToken","clearTwoFactorToken","clearToken","getTokenExpirationDate","exp","d","setUTCSeconds","tokenSecondsRemaining","offsetSeconds","msRemaining","valueOf","round","tokenNeedsRefresh","minutes","getEmailVerified","email_verified","getName","getIssuer","iss","isArray","amr","includes","TwoFactorProviders","Authenticator","description","priority","sort","Yubikey","Duo","OrganizationDuo","Email","WebAuthn","TwoFactorService","selectedTwoFactorProviderType","getSupportedProviders","twoFactorProvidersData","has","supportsDuo","supportsWebAuthn","getDefaultProvider","webAuthnSupported","providerType","providerPriority","_value","setSelectedProvider","clearProviders","VerificationType","UserVerificationApiService","postAccountVerifyOTP","postAccountRequestOTP","VerifyOTPRequest","OTP","UserVerificationService","userVerificationApiService","buildRequest","verification","requestClass","alreadyHashed","validateInput","otp","secret","getKdfType","getKdfConfig","verifyUser","compareAndUpdateKeyHash","requestOTP","hasMasterPasswordAndMasterKeyHash","getMasterKeyHash","MessagingService","AccountFactory","accountConstructor","create","args","GlobalStateFactory","globalStateConstructor","StateFactory","globalStateFactory","accountFactory","createGlobal","createAccount","WindowState","GlobalState","theme","System","AppIdService","storageService","makeAndGetAppId","getAnonymousAppId","existingId","htmlStorageLocation","Local","guid","newGuid","ServerConfigResponse","ThirdPartyServerConfigResponse","EnvironmentServerConfigResponse","ConfigApiService","authed","ConsoleLogService","isDev","timersMap","debug","write","Debug","info","Info","warning","Warning","level","console","log","warn","ContainerService","attachToGlobal","EncArrayBuffer","encBytes","minimumLength","ENC_TYPE_LENGTH","throwDecryptionError","b64","EncryptedObject","EncryptServiceImplementation","logMacFailures","plainValue","plainBuf","encObj","aesEncrypt","encryptToBytes","encValue","macLen","encString","resolveLegacyKey","fastParams","aesDecryptFastParameters","computedMac","hmacFast","macData","compareFast","logMacFailed","aesDecryptFast","encThing","hmac","aesDecrypt","decryptItems","items","msg","InitializerKey","CipherType","CipherRepromptType","AttachmentData","fileName","size","sizeName","CardData","cardholderName","brand","number","expMonth","expYear","FieldData","linkedId","IdentityData","title","firstName","middleName","lastName","address1","address2","address3","city","state","postalCode","country","company","phone","ssn","passportNumber","licenseNumber","Fido2CredentialData","credentialId","keyType","keyAlgorithm","keyCurve","keyValue","rpId","userHandle","counter","rpName","userDisplayName","discoverable","LoginUriData","uri","LoginData","passwordRevisionDate","totp","autofillOnPageLoad","uris","u","fido2Credentials","PasswordHistoryData","lastUsedDate","SecureNoteData","CipherData","collectionIds","folderId","edit","viewPassword","organizationUseTotp","favorite","notes","deletedDate","reprompt","Login","login","SecureNote","secureNote","Card","card","Identity","fields","f","attachments","passwordHistory","ph","AttachmentView","fileSize","LinkedMetadata","propertyKey","_i18nKey","i18nKey","linkedFieldOption","linkedFieldOptions","ItemView","CardView","_brand","_number","_subTitle","maskedCode","repeat","maskedNumber","subTitle","count","expiration","formatYear","year","cardNum","re","CardholderName","ExpMonth","ExpYear","Code","Brand","FieldView","newField","showValue","showCount","maskedValue","IdentityView","_firstName","_lastName","fullName","fullAddress","address","fullAddressPart2","addressPart2","Title","MiddleName","Address1","Address2","Address3","City","State","PostalCode","Country","Company","Phone","Ssn","Username","PassportNumber","LicenseNumber","FirstName","LastName","FullName","Fido2CredentialView","CanLaunchWhitelist","LoginUriView","_uri","_domain","_hostname","_host","_canLaunch","getDomain","RegularExpression","getHostname","getHost","hostnameOrUri","hostOrUri","isWebsite","canLaunch","launchUri","matchesUri","targetUri","equivalentDomains","defaultUriMatch","matchType","targetDomain","matchDomains","add","matchesDomain","Host","urlHost","Exact","StartsWith","Never","domainUrlHost","LoginView","l","hasUris","maskedPassword","some","hasTotp","hasFido2Credentials","PasswordHistoryView","SecureNoteView","n","CipherView","initializerKey","localData","hasPasswordHistory","hasAttachments","hasOldAttachments","hasFields","passwordRevisionDisplayDate","isDeleted","linkedFieldValue","linkedFieldI18nKey","view","Attachment","decryptAttachmentKey","decValue","toAttachmentData","toCardData","Field","toFieldData","toIdentityData","Fido2Credential","toFido2CredentialData","LoginUri","toLoginUriData","toLoginData","toPasswordHistoryData","toSecureNoteData","Cipher","model","reduce","promise","attachment","decAttachment","field","decField","decPh","toCipherData","classInitializers","MultithreadEncryptServiceImplementation","clear$","worker","Worker","restartTimeout","postMessage","fromEvent","jsonItem","className","takeUntil","defaultIfEmpty","terminate","timeout","AzureFileUploadService","upload","renewalCallback","azureUploadBlob","azureUploadBlocks","urlObject","Headers","toUTCString","searchParams","Request","body","cache","method","blobResponse","fetch","baseUrl","blockSize","getMaxBlockSize","blockIndex","numBlocks","ceil","blocksStaged","renewUrlIfNecessary","blockUrl","blockId","encodedBlockId","append","start","blockData","blockHeaders","blockRequest","blockResponse","blockListUrl","blockListXml","expiry","setTime","utfBlockId","fromUtf8ToB64","blockIdList","xml","Version","month","day","v","compareTo","BitwardenFileUploadService","encryptedFileName","encryptedFileData","apiCall","fd","FormData","blob","Blob","filepath","contentType","FileUploadService","azureFileUploadService","bitwardenFileUploadService","uploadData","fileUploadMethods","fileUploadType","Direct","postDirect","Azure","renewFileUploadUrl","rollback","AbstractStorageService","AbstractMemoryStorageService","TYPE","MemoryStorageService","store","remove","getBypassCache","SystemService","reloadCallback","reloadInterval","clearClipboardTimeout","clearClipboardTimeoutFunction","startProcessReload","getPinKeyEncryptedUserKeyEphemeral","cancelProcessReload","executeProcessReload","getBiometricFingerprintValidated","clearInterval","setInterval","clearClipboard","clipboardValue","timeoutMs","getClearClipboard","clearSeconds","clipboardValueNow","readFromClipboard","copyToClipboard","clearing","clearPendingClipboard","DecryptParameters","WebCryptoFunctionService","crypto","subtle","wasmSupported","checkIfWasmSupported","pbkdf2","salt","algorithm","wcLen","passwordBuf","toBuf","pbkdf2Params","toWebCryptoAlgorithm","impKey","importKey","deriveBits","argon2","passwordArr","saltArr","pass","time","mem","hashLen","ArgonType","Argon2id","unloadRuntime","hkdf","ikm","outputByteSize","hkdfParams","hkdfExpand","prk","infoBuf","infoArr","runningOkmLength","previousT","okm","md","md5","sha1","valueBytes","toByteString","update","digest","valueBuf","signingAlgorithm","sign","mac1","mac2","arr1","arr2","getBytes","rand","Uint32Array","createBuffer","putInt32","meta","encKeyByteString","macKeyByteString","decode64","parameters","mode","decipher","createDecipher","toWebCryptoAesMode","dataBuffer","finish","params","rsaParams","rsaExtractPublicKey","impPrivateKey","jwkPrivateKey","exportKey","jwkPublicKeyParams","kty","alg","ext","impPublicKey","bitLength","key1","key2","aesParams","generateKey","rawKey","modulusLength","publicExponent","keyPair","getRandomValues","buf","encodeUtf8","WebAssembly","instantiate","module","Module","Instance","UpdateAvatarRequest","avatarColor","AvatarUpdateService","_avatarUpdate$","avatarUpdate$","loadColorFromState","getAvatarColor","pushUpdate","putAvatar","setAvatarColor","OrganizationConnectionResponse","configType","rawConfig","config","CardApi","FieldApi","IdentityApi","Fido2CredentialApi","LoginUriApi","LoginApi","SecureNoteApi","AttachmentResponse","PasswordHistoryResponse","CipherResponse","h","SelectionReadOnlyResponse","readOnly","hidePasswords","CollectionResponse","externalId","CollectionDetailsResponse","CollectionAccessDetailsResponse","groups","users","assigned","OrganizationExportResponse","OrganizationSponsorshipSyncStatusResponse","lastSyncDate","ProviderOrganizationResponse","providerId","userCount","seats","plan","ProviderOrganizationOrganizationDetailsResponse","organizationName","OrganizationUserBulkPublicKeyResponse","ProviderUserBulkPublicKeyResponse","ProviderUserBulkResponse","PermissionsApi","accessEventLogs","accessImportExport","accessReports","createNewCollections","editAnyCollection","deleteAnyCollection","editAssignedCollections","deleteAssignedCollections","manageCiphers","manageGroups","manageSso","managePolicies","manageUsers","manageResetPassword","manageScim","ProviderUserResponse","permissions","ProviderUserUserDetailsResponse","ProviderResponse","businessName","billingEmail","ApiKeyResponse","apiKey","AuthRequestResponse","requestDeviceType","requestIpAddress","responseDate","requestDate","requestDateUTC","UTC","getUTCFullYear","getUTCMonth","getDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","dateNow","dateNowUTC","isExpired","isAnswered","DeviceVerificationResponse","isDeviceVerificationSectionEnabled","unknownDeviceVerificationEnabled","EmergencyAccessGranteeDetailsResponse","granteeId","waitTimeDays","EmergencyAccessGrantorDetailsResponse","grantorId","EmergencyAccessTakeoverResponse","keyEncrypted","EmergencyAccessViewResponse","KeyConnectorUserKeyResponse","PreloginResponse","RegisterResponse","SsoPreValidateResponse","TwoFactorAuthenticatorResponse","TwoFactorDuoResponse","secretKey","integrationKey","TwoFactorEmailResponse","TwoFactorProviderResponse","TwoFactorRecoverResponse","TwoFactorWebAuthnResponse","KeyResponse","migrated","ChallengeResponse","attestation","authenticatorSelection","challenge","fromUrlB64ToArray","excludeCredentials","extensions","pubKeyCredParams","rp","user","TwoFactorYubiKeyResponse","key3","key4","key5","nfc","BillingSourceResponse","cardBrand","needsVerification","BillingInvoiceResponse","pdfUrl","paid","date","amount","BillingTransactionResponse","createdDate","refunded","partiallyRefunded","refundedAmount","paymentMethodType","details","BillingHistoryResponse","invoices","transactions","hasNoHistory","BillingPaymentResponse","balance","paymentSource","ProfileOrganizationResponse","usePolicies","useGroups","useDirectory","useTotp","use2fa","useApi","useSso","useKeyConnector","useScim","useCustomPermissions","useResetPassword","useSecretsManager","usePasswordManager","useActivateAutofillPolicy","selfHost","usersGetPremium","maxCollections","maxStorageGb","hasPublicAndPrivateKeys","ssoBound","resetPasswordEnrolled","providerName","familySponsorshipFriendlyName","familySponsorshipAvailable","planProductType","familySponsorshipLastSyncDateString","familySponsorshipLastSyncDate","familySponsorshipValidUntilString","familySponsorshipValidUntil","familySponsorshipToDelete","accessSecretsManager","ProfileProviderOrganizationResponse","ProfileProviderResponse","ProfileResponse","organizations","providerOrganizations","emailVerified","masterPasswordHint","premiumPersonally","premiumFromOrganization","culture","twoFactorEnabled","securityStamp","PaymentResponse","userProfile","paymentIntentClientSecret","success","PlanResponse","product","isAnnual","nameLocalizationKey","descriptionLocalizationKey","canBeUsedByBusiness","trialPeriodDays","hasSelfHost","hasPolicies","hasGroups","hasDirectory","hasEvents","has2fa","hasApi","hasSso","hasResetPassword","upgradeSortOrder","displaySortOrder","legacyYear","disabled","passwordManager","secretsManager","PasswordManager","PasswordManagerPlanFeaturesResponse","SecretsManager","SecretsManagerPlanFeaturesResponse","stripeSeatPlanId","baseSeats","basePrice","seatPrice","hasAdditionalSeatsOption","maxAdditionalSeats","maxSeats","stripeServiceAccountPlanId","additionalPricePerServiceAccount","baseServiceAccount","maxServiceAccount","hasAdditionalServiceAccountOption","maxAdditionalServiceAccounts","maxProjects","stripePlanId","stripeStoragePlanId","stripePremiumAccessPlanId","premiumAccessOptionPrice","additionalStoragePricePerGb","baseStorageGb","hasAdditionalStorageOption","maxAdditionalStorage","hasPremiumAccessOption","SubscriptionResponse","storageName","storageGb","license","usingInAppPurchase","subscription","upcomingInvoice","discount","BillingSubscriptionResponse","BillingSubscriptionUpcomingInvoiceResponse","BillingCustomerDiscount","trialEndDate","periodStartDate","periodEndDate","cancelledDate","cancelAtEndDate","cancelled","BillingSubscriptionItemResponse","quantity","interval","sponsoredSubscriptionItem","addonSubscriptionItem","active","TaxInfoResponse","taxId","taxIdType","line1","line2","TaxRateResponse","rate","BreachAccountResponse","addedDate","breachDate","dataClasses","isActive","isVerified","logoPath","modifiedDate","pwnCount","GlobalDomainResponse","domains","excluded","DomainsResponse","globalEquivalentDomains","EventResponse","cipherId","collectionId","groupId","policyId","providerUserId","providerOrganizationId","actingUserId","ipAddress","installationId","systemUser","domainName","secretId","serviceAccountId","UserKeyResponse","AttachmentUploadDataResponse","attachmentId","cipherResponse","cipherMiniResponse","SendFileApi","SendTextApi","text","hidden","SendResponse","accessId","maxAccessCount","accessCount","expirationDate","deletionDate","disable","hideEmail","file","FolderResponse","SyncResponse","ApiService","customUserAgent","isWebClient","isDesktopClient","IEBrowser","ChromeBrowser","EdgeBrowser","FirefoxBrowser","OperaBrowser","SafariBrowser","UnknownBrowser","VivaldiBrowser","Accept","identityToken","getIdentityUrl","qsStringify","getCredentials","responseJson","isJsonResponse","TwoFactorProviders2","reject","refreshIdentityToken","doAuthRefresh","postAuthRequest","postAdminAuthRequest","getAuthResponse","path","getAuthRequests","getLastAuthRequest","activeRequests","m","getProfile","getUserSubscription","getTaxInfo","putProfile","putTaxInfo","postEmailToken","postEmail","postPassword","setPassword","postSecurityStamp","getAccountRevisionDate","postPasswordHint","postRegister","postPremium","postIapCheck","postReinstatePremium","postCancelPremium","postAccountStorage","postAccountPayment","postAccountLicense","postAccountKey","postAccountVerifyEmail","postAccountVerifyEmailToken","postAccountVerifyPassword","postAccountRecoverDelete","postAccountRecoverDeleteToken","postAccountKdf","deleteSsoUser","getSsoUserIdentifier","postUserApiKey","postUserRotateApiKey","putUpdateTempPassword","getUserBillingHistory","getUserBillingPayment","getCipher","getFullCipherDetails","getCipherAdmin","getCiphersOrganization","postCipher","postCipherCreate","postCipherAdmin","putCipher","putPartialCipher","putCipherAdmin","deleteCipher","deleteCipherAdmin","deleteManyCiphers","deleteManyCiphersAdmin","putMoveCiphers","putShareCipher","putShareCiphers","putCipherCollections","putCipherCollectionsAdmin","postPurgeCiphers","putDeleteCipher","putDeleteCipherAdmin","putDeleteManyCiphers","putDeleteManyCiphersAdmin","putRestoreCipher","putRestoreCipherAdmin","putRestoreManyCiphers","putRestoreManyCiphersAdmin","getAttachmentData","emergencyAccessId","postCipherAttachment","postCipherAttachmentLegacy","postCipherAttachmentAdminLegacy","deleteCipherAttachment","deleteCipherAttachmentAdmin","postShareCipherAttachment","renewAttachmentUploadUrl","postAttachmentFile","getCollectionAccessDetails","getUserCollections","getCollections","getManyCollectionsWithAccessDetails","getCollectionUsers","postCollection","putCollection","putCollectionUsers","deleteCollection","deleteManyCollections","deleteCollectionUser","getGroupUsers","putGroupUsers","deleteGroupUser","getPlans","postPublicImportDirectory","getTaxRates","getSettingsDomains","putSettingsDomains","getSync","getTwoFactorProviders","getTwoFactorOrganizationProviders","getTwoFactorAuthenticator","getTwoFactorEmail","getTwoFactorDuo","getTwoFactorOrganizationDuo","getTwoFactorYubiKey","getTwoFactorWebAuthn","getTwoFactorWebAuthnChallenge","getTwoFactorRecover","putTwoFactorAuthenticator","putTwoFactorEmail","putTwoFactorDuo","putTwoFactorOrganizationDuo","putTwoFactorYubiKey","putTwoFactorWebAuthn","rawId","getClientExtensionResults","AttestationObject","attestationObject","clientDataJson","clientDataJSON","deleteTwoFactorWebAuthn","putTwoFactorDisable","putTwoFactorOrganizationDisable","postTwoFactorRecover","postTwoFactorEmailSetup","postTwoFactorEmail","getDeviceVerificationSettings","putDeviceVerificationSettings","getEmergencyAccessTrusted","getEmergencyAccessGranted","getEmergencyAccess","getEmergencyGrantorPolicies","putEmergencyAccess","deleteEmergencyAccess","postEmergencyAccessInvite","postEmergencyAccessReinvite","postEmergencyAccessAccept","postEmergencyAccessConfirm","postEmergencyAccessInitiate","postEmergencyAccessApprove","postEmergencyAccessReject","postEmergencyAccessTakeover","postEmergencyAccessPassword","postEmergencyAccessView","getCloudCommunicationsEnabled","getOrganizationConnection","createOrganizationConnection","updateOrganizationConnection","organizationConnectionId","deleteOrganizationConnection","postProviderSetup","getProvider","putProvider","getProviderUsers","getProviderUser","postProviderUserInvite","postProviderUserReinvite","postManyProviderUserReinvite","postProviderUserBulkConfirm","deleteManyProviderUsers","postProviderUserAccept","postProviderUserConfirm","postProviderUsersPublicKey","putProviderUser","deleteProviderUser","getProviderClients","postProviderAddOrganization","postProviderCreateOrganization","deleteProviderOrganization","getEvents","end","addEventParameters","getEventsCipher","getEventsOrganization","getEventsOrganizationUser","getEventsProvider","getEventsProviderUser","postEventsCollect","authHeader","getActiveBearerToken","Authorization","getEventsUrl","getUserPublicKey","getHibpBreach","postBitPayInvoice","postSetupPayment","handleError","getKeyConnectorAlive","getOrganizationExport","getApplicationVersionNumber","nativeFetch","preValidateSso","postCreateSponsorship","sponsoredOrgId","isSelfHost","getSponsorshipSyncStatus","deleteRevokeSponsorship","sponsoringOrganizationId","deleteRemoveSponsorship","sponsoringOrgId","postPreValidateSponsorshipToken","sponsorshipToken","postRedeemSponsorship","postResendSponsorshipOffer","doRefreshToken","doApiTokenRefresh","decodedToken","deviceRequest","hasResponse","apiUrl","alterHeaders","getApiUrl","pathParts","requestUrl","normalizePath","requestInit","responseType","responseIsJson","tokenError","isTextResponse","Message","hasBaseUrl","typeHeader","AuditService","passwordLeaked","hashBytes","fromBufferToHex","hashStart","hashEnding","breachedAccounts","limit","throttleKey","descriptor","originalMethod","allThrottles","throttles","getThrottles","argsThrottleKey","queue","exec","onFinally","splice","catch","err","EventData","EventCollectionService","cipherService","eventUploadService","collect","eventType","uploadImmediately","orgIds","cipher","eventCollection","getEventCollection","event","setEventCollection","uploadEvents","EventRequest","EventUploadService","checkOnInterval","req","clearEvents","NotificationResponse","contextId","payload","SyncCipherCreate","SyncCipherDelete","SyncCipherUpdate","SyncLoginDelete","SyncCipherNotification","SyncFolderCreate","SyncFolderDelete","SyncFolderUpdate","SyncFolderNotification","SyncVault","SyncCiphers","SyncOrgKeys","SyncSettings","LogOut","UserNotification","SyncSendCreate","SyncSendUpdate","SyncSendDelete","SyncSendNotification","AuthRequest","AuthRequestPushNotification","NotificationsService","syncService","connected","inactive","reconnectTimer","urls","subscribe","getNotificationsUrl","signalrConnection","off","stop","withUrl","accessTokenFactory","skipNegotiation","transport","WebSockets","withHubProtocol","build","on","processNotification","onclose","reconnect","isAuthedAndUnlocked","updateConnection","sync","reconnectFromActivity","disconnectFromInactivity","isAuthenticated","payloadUserId","UserId","myUserId","syncUpsertCipher","syncDeleteCipher","syncUpsertFolder","syncDeleteFolder","fullSync","syncUpsertSend","syncDeleteSend","getApproveLoginRequests","notificationId","min","SearchService","indexedEntityId","indexing","index","immediateSearchLocales","defaultSearchableMinLength","searchableMinLength","locale$","locale","registeredPipeline","lunr","Pipeline","registerFunction","normalizeAccentsPipelineFunction","clearIndex","isSearchable","query","normalizeSearchQuery","indexCiphers","builder","Builder","pipeline","ref","boost","extractor","uriExtractor","fieldExtractor","attachmentExtractor","searchCiphers","results","every","getIndexForSearch","searchCiphersBasic","ciphersMap","searchResults","soWild","Query","wildcard","LEADING","TRAILING","q","tokenizer","term","deleted","loginUri","searchSends","toLocaleLowerCase","sendsMatched","lowPriorityMatched","concat","joined","Text","protocolIndex","queryIndex","searchableFields","metadata","normalize","B32Chars","SteamChars","TotpService","getCode","period","digits","keyB32","isOtpAuth","isSteamAuth","getQueryParams","digitParams","periodParam","algParam","epoch","timeHex","leftPad","decToHex","timeBytes","fromHexToArray","keyBytes","b32ToBytes","offset","fullCode","trunc","pow","getTimeInterval","b32ToHex","cleanedInput","bits","hex","byteIndex","chunk","signature","VaultTimeoutAction","VaultTimeoutSettingsService","userVerificationService","setVaultTimeoutOptions","action","setVaultTimeout","currentAction","getVaultTimeoutAction","setVaultTimeoutAction","refreshAdditionalKeys","availableVaultTimeoutActions$","getAvailableVaultTimeoutActions","isPinLockSet","pinIsEnabled","getProtectedPin","aUserKeyPinIsSet","getPinKeyEncryptedUserKey","anOldUserKeyPinIsSet","getEncryptedPinProtected","isBiometricLockSet","getBiometricUnlock","getVaultTimeout","vaultTimeout","policyAppliesToUser","MaximumVaultTimeout","vaultTimeoutAction$","availableActions","defaultValue","Lock","setEverBeenUnlocked","clearPinKeys","PasswordGeneratorPolicyOptions","defaultType","useUppercase","useLowercase","useNumbers","numberCount","useSpecial","specialCount","minNumberWords","capitalize","includeNumber","inEffect","EFFLongWordList","GeneratedPasswordHistory","DefaultOptions","ambiguous","minNumber","uppercase","minUppercase","lowercase","minLowercase","special","minSpecial","numWords","wordSeparator","PasswordGenerationService","generatePassword","generatePassphrase","sanitizePasswordLength","positions","shuffleArray","allCharSet","lowercaseCharSet","uppercaseCharSet","numberCharSet","specialCharSet","positionChars","randomCharIndex","randomNumber","listLength","wordList","wordIndex","appendRandomNumberToRandomWord","getOptions","getPasswordGenerationOptions","setPasswordGenerationOptions","enforcedOptions","enforcePasswordGeneratorPoliciesOnOptions","enforcedPolicyOptions","getPasswordGeneratorPolicyOptions","PasswordGenerator","currentPolicy","useUpper","useLower","minNumbers","saveOptions","getHistory","getDecryptedPasswordGenerationHistory","getEncryptedPasswordGenerationHistory","decryptHistory","setDecryptedPasswordGenerationHistory","addHistory","currentHistory","matchesPrevious","unshift","pop","newHistory","encryptHistory","setEncryptedPasswordGenerationHistory","normalizeOptions","num","history","array","j","forGeneration","minUppercaseCalc","minLowercaseCalc","minNumberCalc","minSpecialCalc","AnonAddyForwarder","generate","anonaddy","redirect","website","statusText","DuckDuckGoForwarder","FastmailForwarder","accountId","getAccountId","using","methodCalls","emailPrefix","fastmail","methodResponses","created","notCreated","primaryAccounts","FirefoxRelayForwarder","generated_for","full_address","ForwarderOptions","FastmailForwarderOptions","AnonAddyForwarderOptions","forwardemail","ForwardEmailForwarderOptions","simplelogin","SimpleLoginForwarderOptions","SimpleLoginForwarder","Authentication","note","alias","ForwardEmailForwarder","labels","wordCapitalize","wordIncludeNumber","subaddressType","catchallType","forwardedService","forwardedAnonAddyDomain","forwardedAnonAddyBaseUrl","forwardedForwardEmailDomain","forwardedSimpleLoginBaseUrl","UsernameGenerationService","generateUsername","generateCatchall","generateSubaddress","generateForwarded","generateWord","word","zeroPad","subaddressEmail","atIndex","emailBeginning","emailEnding","subaddressString","randomString","catchallDomain","startString","forwarder","forwarderOptions","forwardedSimpleLoginApiKey","forwardedAnonAddyApiToken","forwardedFirefoxApiToken","forwardedFastmailApiToken","forwardedDuckDuckGoToken","forwardedForwardEmailApiToken","getUsernameGenerationOptions","setUsernameGenerationOptions","charSet","width","SendType","PasswordStrengthService","emailInput","userInputs","globalUserInputs","emailToUserInputs","finalUserInputs","atPosition","SendFileData","SendTextData","SendData","File","SendRequest","fileLength","SendAccessResponse","creatorIdentifier","SendFileDownloadDataResponse","SendFileUploadDataResponse","sendResponse","SendApiService","fileUploadService","sendService","getSend","postSendAccess","getSendFileDownloadData","getSends","postSend","postFileTypeSend","renewSendFileUploadUrl","sendId","fileId","postSendFile","postSendFileLegacy","putSend","putSendRemovePassword","deleteSend","sendData","removePassword","uploadDataResponse","generateMethods","legacyServerSendFileUpload","generatePostDirectCallback","generateRenewFileUploadUrlCallback","generateRollbackCallback","renewResponse","getFlags","envFlags","flagEnabled","flag","flags","sequentialize","cacheKey","caches","getCache","argsCacheKey","SortedCiphersCache","comparator","sortedCiphersByUrl","timeouts","isCached","addCiphers","Ciphers","resetTimer","getLastUsed","getLastLaunched","getNext","updateLastUsedIndex","lastUsedIndex","lastLaunched","y","getNextIndex","CipherBulkDeleteRequest","ids","CipherBulkMoveRequest","CipherBulkRestoreRequest","AttachmentRequest","CipherRequest","lastKnownRevisionDate","keyApi","attachments2","attachmentRequest","CipherWithIdRequest","CipherBulkShareRequest","CipherCollectionsRequest","CipherCreateRequest","CipherPartialRequest","CipherShareRequest","CIPHER_KEY_ENC_MIN_SERVER_VER","SemVer","CipherService","settingsService","searchService","cipherFileUploadService","configService","sortedCiphersCache","sortCiphersByLastUsed","getDecryptedCipherCache","getDecryptedCiphers","setDecryptedCipherCache","setDecryptedCiphers","clearCache","clearDecryptedCiphersState","keyForEncryption","keyForCipherKeyDecryption","originalCipher","updateModelfromExistingCipher","adjustPasswordHistoryLength","getCipherKeyEncryptionEnabled","userOrOrgKey","getKeyForCipherKeyDecryption","encryptCipherWithCipherKey","encryptCipher","encryptAttachments","attachmentsModel","encAttachments","encryptObjProperty","encryptFields","fieldsModel","encFields","encField","encryptField","fieldModel","Boolean","encryptPasswordHistories","phModels","encPhs","encPh","encryptPasswordHistory","phModel","getEncryptedCiphers","getLocalData","getAllDecrypted","reindexCiphers","orgKeys","getOrgKeys","grouped","agg","decCiphers","groupedCiphers","flat","getLocaleSortingFunction","getAllDecryptedForGrouping","groupingId","folder","getAllDecryptedForUrl","includeOtherTypes","defaultMatch","getEquivalentDomains","getDefaultUriMatch","cipherIsLogin","getAllFromApiForOrganization","cr","getLastUsedForUrl","getCipherForUrl","getLastLaunchedForUrl","getNextCipherForUrl","updateLastUsedIndexForUrl","updateLastUsedDate","ciphersLocalData","setLocalData","decryptedCipherCache","cached","updateLastLaunchedDate","saveNeverDomain","getNeverDomains","setNeverDomains","createWithServer","orgAdmin","updateWithServer","isNotClone","shareWithServer","attachmentPromises","shareAttachmentWithServer","encCipher","encryptSharedCipher","shareManyWithServer","encCiphers","saveAttachmentWithServer","unencryptedFile","admin","reader","FileReader","readAsArrayBuffer","onload","evt","cData","saveAttachmentRawWithServer","onerror","filename","cipherKeyEncryptionEnabled","cipherEncKey","encFileName","dataEncKey","makeDataEncKey","encData","saveCollectionsWithServer","setEncryptedCiphers","clearEncryptedCiphersState","moveManyWithServer","deleteWithServer","asAdmin","deleteManyWithServer","deleteAttachment","deleteAttachmentWithServer","aLastUsed","bLastUsed","bothNotNull","sortCiphersByLastUsedThenName","aName","bName","softDelete","setDeletedDate","softDeleteWithServer","softDeleteManyWithServer","restore","clearDeletedDate","restoreWithServer","restoreManyWithServer","restores","existingCipher","existingHiddenFields","Hidden","hiddenFields","ef","matchedField","attachmentView","attachmentResponse","encBuf","decBuf","decryptFromBytes","theObj","modelProp","encryptCipherData","viewKey","domainKey","origin","lastUsed","autofillOnPageLoadDefault","getAutoFillOnPageLoadDefault","clearSortedCiphers","keyForCipherKeyEncryption","decryptedCipherKey","makeCipherKey","checkServerMeetsVersionRequirement$","TreeNode","node","parent","children","ServiceUtils","nodeTree","partIndex","delimiter","partName","nestedTraverse","newPartName","getTreeNodeObject","getTreeNodeObjectFromList","CollectionData","CollectionView","Collection","canEdit","org","canEditAnyCollection","canEditAssignedCollections","canDelete","canDeleteAnyCollection","canDeleteAssignedCollections","CollectionService","setDecryptedCollections","collection","decryptMany","decCollections","getSortFunction","getEncryptedCollections","decryptedCollections","getDecryptedCollections","getAllNested","nodes","collectionCopy","getNested","setEncryptedCollections","Fido2AlgorithmIdentifier","Fido2AuthenticatorErrorCode","Fido2AuthenticatorError","errorCode","UserRequestedFallbackAbortReason","FallbackRequestedError","fallbackRequested","POW_2_32","POW_2_53","TaggedValue","tag","CBOR","decode","tagger","simpleValue","dataView","DataView","ta","tagValueFunction","simpleValFunction","commitRead","readArrayBuffer","readUint8","readUint16","getUint16","readUint32","getUint32","readBreak","readLength","additionalInformation","readIndefiniteStringLength","majorType","initialByte","appendUtf16Data","utf16data","ret","decodeItem","tempArrayBuffer","tempDataView","exponent","fraction","setUint32","getFloat32","readFloat16","getFloat64","elements","fullArrayLength","fullArray","fullArrayOffset","string","retArray","retObject","encode","lastLength","byteView","prepareWrite","newByteLength","requiredLength","oldDataView","uint32count","commitWrite","writeUint8","setUint8","writeUint8Array","writeUint16","setUint16","writeUint32","writeUint64","low","high","writeTypeAndLength","encodeItem","is","setFloat64","writeFloat64","utf8data","charCode","converted","isView","SharedArrayBuffer","mod","writeVarUint","retView","getUint8","getParamSize","keySize","paramBytesForAlg","ES256","ES384","ES512","MAX_OCTET","ENCODED_TAG_SEQ","TAG_SEQ","ENCODED_TAG_INT","TAG_INT","countPadding","padding","joseToDer","paramBytes","getParamBytesForAlg","signatureBytes","TypeError","rPadding","sPadding","rLength","sLength","rsBytes","shortLength","dst","subarray","Fido2Utils","bufferSource","bufferSourceToUint8Array","isArrayBuffer","byteToHex","_","guidToRawFormat","isValidGuid","guidToStandardFormat","AAGUID","KeyUsages","userInterface","makeCredential","tab","abortController","userInterfaceSession","newSession","fallbackSupported","credTypesAndPubKeyAlgs","requestedAlgorithms","NotSupported","requireResidentKey","Unknown","requireUserVerification","ensureUnlockedVault","existingCipherIds","findExcludedCredentials","excludeCredentialDescriptorList","informExcludedCredential","NotAllowed","fido2Credential","userVerified","confirmNewCredential","credentialName","rpEntity","userName","userEntity","displayName","userVerification","namedCurve","createKeyPair","pkcs8Key","bufferToString","createKeyView","reencrypted","authData","generateAuthData","userPresence","fmt","attStmt","publicKeyAlgorithm","close","getAssertion","cipherOptions","allowCredentialDescriptorList","findCredentialsById","findCredentialsByRp","informCredentialNotFound","pickCredential","cipherIds","selectedCipherId","selectedCipher","selectedFido2Credential","selectedCredentialId","authenticatorData","sigBase","clientDataHash","generateSignature","getPrivateKeyFromFido2Credential","selectedCredential","stringToBuffer","credential","keyBuffer","rpIdHash","extensionData","attestationData","authDataFlags","attestedCredentialData","credentialIdLength","publicKeyJwk","keyX","keyY","coseBytes","FeatureFlag","isValidRpId","parsedOrigin","allowPrivateDomains","parsedRpId","subdomain","endsWith","authenticator","isFido2FeatureEnabled","getFeatureFlag","Fido2VaultCredentials","createCredential","AbortController","sameOriginWithAncestors","DOMException","neverDomains","kp","collectedClientData","crossOrigin","clientDataJSONBytes","makeCredentialParams","transports","residentKey","enterpriseAttestationPossible","mapToMakeCredentialParams","signal","aborted","setAbortTimeout","makeCredentialResult","reason","InvalidState","assertCredential","getAssertionParams","allowedCredentialIds","mapToGetAssertionParams","getAssertionResult","TIMEOUTS","NO_VERIFICATION","DEFAULT","MIN","MAX","WITH_VERIFICATION","clampedTimeout","abort","CipherFileUploadService","adminRequest","legacyServerAttachmentFileUpload","isAdmin","FolderData","FolderRequest","FolderApiService","folderService","postFolder","putFolder","deleteFolder","SyncNotifierService","_sync","sync$","OrganizationData","isMember","ProviderData","SyncService","collectionService","providerService","folderApiService","sendApiService","syncInProgress","getLastSync","lastSync","setLastSync","forceSync","allowThrowOnError","syncStarted","syncCompleted","needsSync","needsSyncing","syncProfile","syncFolders","syncCollections","syncCiphers","syncSends","syncSettings","syncPolicies","isEdit","localFolder","remoteFolder","shouldUpdate","localCipher","checkCollections","remoteCipher","localSend","remoteSend","successfully","stamp","getSecurityStamp","setProviderKeys","setOrgKeys","setSecurityStamp","setEmailVerified","setHasPremiumPersonally","setHasPremiumFromOrganization","syncProfileOrganizations","eqDomains","setEquivalentDomains","CardExport","FieldExport","IdentityExport","Fido2CredentialExport","LoginUriExport","LoginExport","template","toView","toDomain","PasswordHistoryExport","SecureNoteExport","Generic","CipherExport","values","CipherWithIdExport","CollectionExport","CollectionWithIdExport","FolderView","Folder","FolderExport","FolderWithIdExport","ExportHelper","extension","getFullYear","padNumber","getMonth","getHours","getMinutes","getSeconds","padCharacter","numString","VaultExportService","getExport","format","getEncryptedExport","getDecryptedExport","getPasswordProtectedExport","clearText","makePinKey","encKeyValidation","encText","jsonDoc","passwordProtected","encKeyValidation_DO_NOT_EDIT","getOrganizationEncryptedExport","getOrganizationDecryptedExport","getFileName","decFolders","getAllDecryptedFromState","foldersMap","exportCiphers","buildCommonCipher","getAllFromState","exportData","exportPromises","decCol","decCipher","collectionsMap","orgKey","login_uri","login_username","login_password","login_totp","ImportApiService","postImportCiphers","postImportOrganizationCiphers","ImportCiphersRequest","folderRelationships","ImportOrganizationCiphersRequest","collectionRelationships","KvpRequest","CollectionRequest","CollectionWithIdRequest","FolderWithIdRequest","newLineRegex","passwordFieldNames","usernameFieldNames","notesFieldNames","uriFieldNames","parseCsvOptions","encoding","skipEmptyLines","parseXml","doc","DOMParser","parseFromString","querySelector","parseCsv","header","parseOptions","splitNewLine","errors","row","parseSingleRowCsv","rowData","parsedRow","makeUriArray","fixUri","returnArr","nameFromUrl","getValueOrDefault","setCardExpiration","expiryRegex","expiryMatch","moveFoldersToCollections","querySelectorDirectChild","parentEl","els","querySelectorAllDirectChild","querySelectorAll","el","parentNode","initLoginCipher","cleanupCipher","processKvp","processFolder","folderName","folderIndex","addFolder","convertToNoteIfNeeded","processFullName","nameParts","AscendoCsvImporter","fieldLower","AvastCsvImporter","web","AvastJsonImporter","logins","custName","pwd","loginName","label","cards","holderName","cardNumber","cvv","getCardBrandByPatterns","AviraCsvImporter","secondary_username","BlackBerryCsvImporter","grouping","fav","extra","ChromeCsvImporter","androidPatternRegex","BitwardenCsvImporter","col","addCollection","collectionIndex","delimPosition","BitwardenJsonImporter","parseEncrypted","parseDecrypted","errorMessage","groupingsMap","parseCollections","parseFolders","cId","folderView","collectionView","BitwardenPasswordProtectedImporter","promptForPassword_callback","parsedData","cannotParseFile","checkPassword","clearTextData","jdoc","BlurCsvImporter","OfficialProps","ButtercupCsvImporter","processingCustomFields","ClipperzHtmlImporter","textarea","textContent","entry","currentVersion","property","actionType","labelLower","CodebookCsvImporter","Category","Favorite","Entry","Note","TOTP","Website","PIN","Account","_mappedCredentialsColumns","_mappedPersonalInfoAsIdentityColumns","_mappedSecureNoteColumns","DashlaneCsvImporter","parsePersonalInformationRecordAsIdentity","rowKeys","category","parseCredentialsRecord","parsePaymentRecord","parseIdRecord","parsePersonalInformationRecord","parseSecureNoteRecords","otpSecret","importUnmappedFields","account_name","mappedValues","cc_number","expiration_month","expiration_year","account_holder","account_number","first_name","middle_name","last_name","item_name","dataRow","phone_number","zip","HandledResults","DashlaneJsonImporter","ADDRESS","processAddress","AUTHENTIFIANT","processAuth","BANKSTATEMENT","processNote","IDCARD","PAYMENTMEANS_CREDITCARD","processCard","IDENTITY","processIdentity","secondaryLogin","pseudo","addressName","addressFull","zipcode","bank","owner","nameProperty","EncryptrCsvImporter","Label","Notes","CVV","Expiry","expParts","EnpassCsvImporter","firstRow","containsField","fieldValue","fieldName","fieldNameLower","androidUrlRegex","EnpassJsonImporter","foldersIndexMap","folderTree","buildFolderTree","flattenFolderTree","template_type","processLogin","cleanedValue","sensitive","uuid","parent_uuid","titlePrefix","tree","FirefoxCsvImporter","FskEntryTypesEnum","FSecureFskImporter","parseEntry","service","handleLoginEntry","CreditCard","handleCreditCardEntry","creditNumber","creditCvv","creditExpiry","GnomeJsonImporter","keyRing","display_name","attributes","username_value","attr","NotesHeader","ApplicationsHeader","WebsitesHeader","Delimiter","KasperskyTxtImporter","notesData","applicationsData","websitesData","workingData","parseDataCategory","applications","websites","w","nameKey","itemComment","itemCommentKey","colonIndex","KeePass2XmlImporter","KeePassFileNode","RootNode","rootGroup","traverse","isRootNode","groupPrefixName","groupName","nameEl","cipherIndex","entryString","valueEl","keyEl","attrs","ProtectInMemory","group","KeePassXCsvImporter","Group","KeeperCsvImporter","LastPassCsvImporter","hasFolder","buildBaseCipher","parseSecureNote","parseCard","parseIdentity","ccnum","cardCipher","profilename","firstname","lastname","ccname","cccsc","ccexp","ccexpParts","middlename","extraParts","processedNote","typeParts","mappedData","parseSecureNoteMapping","monthString","processingNotes","extraPart","LogMeOnceCsvImporter","MeldiumCsvImporter","DisplayName","UserName","Url","MSecureCsvImporter","mappedBaseColumns","_mappedUserAccountColumns","_mappedCreditCardColumns","_mappedIdentityColumns","_mappedIdCardColumns","_mappedTwoFaColumns","_mappedUserNoteColumns","MykiCsvImporter","nickname","additionalInfo","twofaSecret","authToken","cardName","exp_month","exp_year","firstAddressLine","secondAddressLine","zipCode","idType","idName","idCountry","idNumber","content","NordPassCsvImporter","recordType","evaluateType","cardholdername","cardnumber","cvc","expirydate","full_name","OnePassword1PifImporter","line","trashed","processStandardItem","processWinOpVaultItem","overview","URLs","parsePasswordHistory","notesPlain","parseFields","sections","section","openContents","faveIndex","typeName","location","secureContents","maxSize","designationKey","valueKey","fieldDesignation","street","fieldType","CategoryEnum","LoginFieldTypeEnum","OnePassword1PuxImporter","vaults","categoryUuid","Database","WirelessRouter","Server","API_Credential","BankAccount","SoftwareLicense","EmailAccount","MedicalRecord","DriversLicense","OutdoorLicense","Membership","Passport","RewardsProgram","SocialSecurityNumber","favIndex","processOverview","processLoginFields","processDetails","processSections","tags","inputString","loginFields","loginField","designation","CheckBox","parseSectionFields","anyField","getFieldName","extractValue","fillLogin","fillApiCredentials","fillCreditCard","fillBankAccount","fillIdentity","fillDriversLicense","fillOutdoorLicense","fillMembership","fillPassport","fillRewardsProgram","fillSSN","email_address","guarded","monthYear","historyItems","CipherImportContext","importRecord","lowerProperty","IgnoredProperties","OnePasswordCsvImporter","loginPropertyParsers","setLoginUsername","setLoginPassword","setLoginUris","creditCardPropertyParsers","setCreditCardNumber","setCreditCardVerification","setCreditCardCardholderName","setCreditCardExpiry","identityPropertyParsers","setIdentityFirstName","setIdentityInitial","setIdentityLastName","setIdentityUserName","setIdentityEmail","setIdentityPhone","setIdentityCompany","quoteChar","escapeChar","getProp","setNotes","setCipherType","altUsername","context","setKnownLoginValue","setKnownCreditCardValue","setKnownIdentityValue","setUnknownValue","getPropByRegexp","regexp","matchingKeys","getPropIncluding","includesMap","func","bind","readableDate","OnePasswordMacCsvImporter","OnePasswordWinCsvImporter","setIdentityAddress","expSplit","PadlockCsvImporter","PassKeepCsvImporter","getValue","PasskyJsonImporter","passkyExport","passwords","PassmanJsonImporter","custom_fields","customField","field_type","PasspackCsvImporter","tagsJson","Tags","tagJson","__parsed_extra","fieldsJson","extraFields","fieldJson","PasswordAgentCsvImporter","newVersion","altFormat","PasswordBossJsonImporter","login_url","identifiers","valObj","expDate","cf","PasswordDragonXmlImporter","records","categoryText","accountName","tagName","PasswordSafeXmlImporter","passwordSafe","notesDelimiter","getAttribute","groupText","PasswordWalletTxtImporter","ProtonPassItemState","ProtonPassJsonImporter","TRASHED","loginContent","totpUri","extraField","creditCardContent","verificationNumber","pin","PsonoJsonImporter","WEBSITE_mappedValues","APP_PWD_mappedValues","BOOKMARK_mappedValues","NOTES_mappedValues","TOTP_mappedValues","ENV_VARIABLES_mappedValues","GPG_mappedValues","psonoExport","handleItemParsing","parsePsonoItem","parseWebsiteLogins","parseApplicationPasswords","parseEnvironmentVariables","parseTOTP","parseBookmarks","parseNotes","website_password_title","website_password_notes","website_password_username","website_password_password","website_password_url","website_password_auto_submit","website_password_url_filter","application_password_title","application_password_notes","application_password_username","application_password_password","bookmark_title","bookmark_notes","bookmark_url","note_title","note_notes","totp_title","totp_notes","totp_code","environment_variables_title","environment_variables_notes","environment_variables_variables","KvPair","parseGPG","mail_gpg_own_key_title","mail_gpg_own_key_public","mail_gpg_own_key_name","mail_gpg_own_key_email","mail_gpg_own_key_private","RememBearCsvImporter","trash","cardholder","expiryMonth","expMonthNumber","expiryYear","expYearNumber","RoboFormCsvImporter","Name","Pwd","Rf_fields","SafariCsvImporter","OTPAuth","SafeInCloudXmlImporter","labelEl","cardEl","labelIdEl","labelId","fieldEl","notesEl","candidates","choice","SaferPassCsvImporter","SecureSafeCsvImporter","Comment","SplashIdCsvImporter","parseFieldsToNotes","startIndex","StickyPasswordXmlImporter","loginNodes","loginNode","usernameText","passwordText","titleText","linkText","notesText","accountLogin","account","parentElement","buildGroupText","PropertiesToIgnore","TrueKeyCsvImporter","memo","kind","expiryDate","document_content","UpmCsvImporter","YotiCsvImporter","ZohoVaultCsvImporter","ChamberName","parseData","SecretData","CustomData","featuredImportOptions","regularImportOptions","ImportService","importApiService","getImportOptions","import","importer","fileContents","selectedImportTarget","isUserAdmin","importResult","SyntaxError","halfway","last","badData","setImportTarget","handleOrganizationalImport","handleIndividualImport","errorResponse","handleServerError","getImporter","getImporterInstance","itemType","importTarget","targetCollection","noCollectionRelationShips","relationships","targetFolder","noFolderRelationShips","isNullOrEmpty","newFolderName","Organization","isOwner","isManager","Manager","canAccessImportExport","canAccessReports","canCreateNewCollections","canUseAdminCollections","canViewAllCollections","canViewAssignedCollections","canManageGroups","canManageSso","canManageDomainVerification","canManageScim","canManagePolicies","canManageUsersPassword","canManageDeviceApprovals","isExemptFromPolicies","canViewSubscription","canEditSubscription","hasProvider","Msp","canEditPaymentMethods","canViewBillingHistory","canAccessSecretsManager","isFreeOrg","OrganizationService","_organizations","organizations$","memberOrganizations$","orgs","activeAccountUnlocked$","concatMap","unlocked","getOrganizations","updateObservables","get$","organizationsMap","canManageSponsorships","hasOrganizations","getFromState","getByIdentifier","setOrganizations","SafariApp","command","resolveNow","BrowserApi","isSafariApi","messageId","MAX_SAFE_INTEGER","browser","runtime","sendNativeMessage","responseData","BrowserPlatformUtilsService","clipboardWriteCallback","biometricCallback","deviceCache","isFirefox","FirefoxExtension","isOpera","OperaExtension","isEdge","EdgeExtension","isVivaldi","VivaldiExtension","isChrome","ChromeExtension","isSafari","SafariExtension","Browser","chrome","opr","addons","safariVersion","isIE","isMacAppStore","isViewOpen","isPopupOpen","getViews","lockTimeout","createNewTab","extensionPage","getApplicationVersion","PublicKeyCredential","document","clearMs","sendMessageToApp","clipboard","writeText","queryCommandSupported","createElement","style","position","appendChild","select","execCommand","removeChild","readText","focus","supportsBiometric","getPlatformInfo","os","authenticateBiometric","supportsSecureStorage","getAutofillKeyboardShortcut","autofillCommand","commands","shortcut","manifestVersion","getManifest","manifest_version","windowId","windows","populate","tabsQueryFirst","WINDOW_ID_CURRENT","tabId","tabs","currentWindow","tabsQuery","tabSendMessage","sendMessage","lastError","responseCallback","incognito","onCreated","addListener","getBackgroundPage","focused","relativeUrl","fullUrl","getURL","parsedUrl","createdTab","focusWindow","windowType","tabToClose","removeTab","onMessage","isBackgroundPage","registeredMessageListeners","setupUnloadListeners","Observable","subscriber","handler","messageListener","removeListener","storage","onChanged","registeredStorageChangeListeners","onpagehide","arg","highlighted","isWebExtensionsApi","isFirefoxOnAndroid","finally","i18n","getUILanguage","reload","exemptCurrentHref","currentHref","href","application","connectNative","isChromeApi","permission","browserAction","sidebarAction","scripting","executeScript","allFrames","frameIds","frameId","files","injectImmediately","runAt","SyncedItemMetadata","itemBuilder","initializer","initializeAs","keyValuePair","SessionSyncer","subject","memoryStorageService","metaData","ignoreNUpdates","ReplaySubject","_buffer","observe","sessionKey","updateFromMemory","listenForUpdates","stream","skip","updateSession","updateMessageCommand","updateFromMessage","serializedValue","unBuiltValue","browserSession","findStorageService","__syncedItemMetadata","__sessionSyncers","buildSyncer","storageSerice","syncer","isMemoryStorageService","sessionSync","buildOptions","BrowserOrganizationService","Policy","ResetPasswordPolicyOptions","autoEnrollEnabled","PolicyService","_policies","policies$","getEncryptedPolicies","policyType","policyFilter","checkPoliciesThatApplyToUser","decryptedPolicies","getDecryptedPolicies","diskPolicies","setDecryptedPolicies","obsPolicies","filteredPolicies","MasterPassword","policyAppliesToActiveUser$","newPassword","toLocaleUpperCase","getResetPasswordPolicyOptions","resetPasswordPolicyOptions","ResetPassword","policiesResponse","setEncryptedPolicies","policiesMap","policySet","Accepted","StateService","BrowserPolicyService","handleActivateAutofillPolicy","ActivateAutofill","getActivateAutoFillOnPageLoadFromPolicy","getEnableAutoFillOnPageLoad","tap","activated","autofillEnabled","setActivateAutoFillOnPageLoadFromPolicy","ContextMenusBackground","contextMenuClickedHandler","contextMenus","onClicked","run","sender","cipherAction","commandToRetry","tabSendMessageData","NotificationQueueMessage","AddLoginQueueMessage","uriView","loginView","cipherView","NotificationQueueMessageType","NotificationBackground","autofillService","notificationQueue","processMessage","cleanupNotificationQueue","handleUnlockCompleted","getDataForTab","responseCommand","addLogin","changedPassword","removeTabFromNotificationQueue","retryMessage","saveOrUpdateCredentials","saveNever","forms","getFormsWithPasswordFields","unlockVault","checkNotificationQueue","doNotificationQueueCheck","currentTab","getTabFromCurrentWindow","expires","tabDomain","AddLogin","typeData","isVaultLocked","wasVaultLocked","getCurrentTheme","removeIndividualVault","webVaultURL","getWebVaultUrl","ChangePassword","UnlockVault","getTheme","matchMedia","matches","Dark","Light","loginInfo","authStatus","loginDomain","normalizedUsername","disabledAddLogin","getDisableAddLoginNotification","pushAddLoginToQueue","usernameMatches","getDisableChangedPasswordNotification","pushChangePasswordToQueue","changeData","currentPassword","passwordMatches","pushUnlockVaultToQueue","queueMessage","getDecryptedCipherById","updatePassword","folderExists","newCipher","toCipherView","editItem","senderTab","setAddEditCipherInfo","folderViews$","PersonalOwnership","messageData","TabsBackground","main","notificationBackground","onFocusChanged","focusedWindowId","refreshBadge","refreshMenu","onActivated","activeInfo","onReplaced","addedTabId","removedTabId","onReplacedRan","onUpdated","changeInfo","onUpdatedRan","factory","cachedServices","opts","instance","alwaysInitializeNewService","instanceOrPromise","doNotStoreInitializedService","logServiceFactory","logServiceOptions","BrowserMessagingService","messagingServiceFactory","AccountService","LogService","MigrationBuilder","migrations","with","migrate","addMigrator","helper","migrator","runMigrator","direction","newMigration","shouldMigrate","toVersion","updateVersion","MigrationHelper","getAccounts","userIds","IRREVERSIBLE","Migrator","fromVersion","startVersion","endVersion","FixPremiumMigrator","fixPremium","stateVersion","RemoveEverBeenUnlockedMigrator","everBeenUnlocked","removeEverBeenUnlocked","AddKeyTypeToOrgKeysMigrator","encryptedOrgKeys","newOrgKeys","updateOrgKey","RemoveLegacyEtmKeyMigrator","legacyEtmKey","updateAccount","MoveBiometricAutoPromptToAccount","noAutoPromptBiometrics","disableAutoBiometricsPrompt","MoveStateVersionMigrator","MinVersionMigrator","MIN_VERSION","migrationHelper","SendFileView","SendTextView","maskedText","SendView","urlB64Key","maxAccessCountReached","expired","pendingDelete","cryptoKey","globals","authenticatedAccounts","accountActivity","accountDeserializer","buildAccountMapFromJSON","jsonAccounts","partialKeys","DDG_SHARED_KEY","secureStorageService","stateFactory","accountService","useAccountCache","accountsSubject","activeAccountSubject","activeAccountUnlockedSubject","hasBeenInited","isRecoveredSession","accountDiskCache","setState","createGlobals","initAccountState","updateState","syncAccountFromDisk","storedActiveUser","activeUserId","pushAccounts","activeDiskAccount","getAccountFromDisk","diskAccount","setAccountEnvironment","scaffoldNewAccountStorage","setLastActive","setActiveUser","clearDecryptedDataForActiveUser","clean","reconcileOptions","defaultInMemoryOptions","deAuthenticateAccount","dynamicallySetActiveUser","removeAccountFromDisk","removeAccountFromMemory","getTimeoutBasedStorageOptions","getAccount","saveAccount","getAddEditCipherInfo","addEditCipherInfo","getAlwaysShowDock","getGlobals","defaultOnDiskOptions","alwaysShowDock","setAlwaysShowDock","saveGlobals","apiKeyClientId","apiKeyClientSecret","getAutoConfirmFingerPrints","autoConfirmFingerPrints","setAutoConfirmFingerprints","autoFillOnPageLoadDefault","setAutoFillOnPageLoadDefault","getBiometricAwaitingAcceptance","biometricAwaitingAcceptance","setBiometricAwaitingAcceptance","biometricFingerprintValidated","setBiometricFingerprintValidated","getBiometricText","biometricText","setBiometricText","biometricUnlock","setBiometricUnlock","getCanAccessPremium","getHasPremiumPersonally","getHasPremiumFromOrganization","hasPremiumFromOrganization","defaultOnDiskLocalOptions","setClearClipboard","getCollapsedGroupings","collapsedGroupings","setCollapsedGroupings","convertAccountToKeyConnector","getCryptoMasterKey","setCryptoMasterKey","nextStatus","nextValue","getMasterKeyEncryptedUserKey","getUserKeyAutoUnlock","keySuffix","defaultSecureStorageOptions","setUserKeyAutoUnlock","saveSecureStorageKey","getUserKeyBiometric","hasUserKeyBiometric","setUserKeyBiometric","pinKeyEncryptedUserKey","setPinKeyEncryptedUserKey","pinKeyEncryptedUserKeyEphemeral","setPinKeyEncryptedUserKeyEphemeral","getCryptoMasterKeyAuto","setCryptoMasterKeyAuto","getCryptoMasterKeyB64","setCryptoMasterKeyB64","getCryptoMasterKeyBiometric","hasCryptoMasterKeyBiometric","setCryptoMasterKeyBiometric","getDecryptedCryptoSymmetricKey","setDecryptedCryptoSymmetricKey","getDecryptedOrganizationKeys","recordToMap","setDecryptedOrganizationKeys","mapToRecord","getDecryptedPinProtected","setDecryptedPinProtected","getDecryptedPrivateKey","setDecryptedPrivateKey","getDecryptedProviderKeys","setDecryptedProviderKeys","getDecryptedSends","setDecryptedSends","setDefaultUriMatch","disableAddLoginNotification","setDisableAddLoginNotification","getDisableAutoBiometricsPrompt","setDisableAutoBiometricsPrompt","getDisableAutoTotpCopy","disableAutoTotpCopy","setDisableAutoTotpCopy","getDisableBadgeCounter","disableBadgeCounter","setDisableBadgeCounter","disableChangedPasswordNotification","setDisableChangedPasswordNotification","getDisableContextMenuItem","disableContextMenuItem","setDisableContextMenuItem","getDisableFavicon","disableFavicon","setDisableFavicon","getDisableGa","disableGa","setDisableGa","getDismissedAutofillCallout","dismissedAutoFillOnPageLoadCallout","setDismissedAutofillCallout","getDontShowCardsCurrentTab","dontShowCardsCurrentTab","setDontShowCardsCurrentTab","getDontShowIdentitiesCurrentTab","dontShowIdentitiesCurrentTab","setDontShowIdentitiesCurrentTab","getDuckDuckGoSharedKey","setDuckDuckGoSharedKey","existingDeviceKey","trustDeviceChoiceForDecryption","setAccountDecryptionOptions","setEmail","getEnableAlwaysOnTop","accountPreference","enableAlwaysOnTop","globalPreference","setEnableAlwaysOnTop","enableAutoFillOnPageLoad","setEnableAutoFillOnPageLoad","getEnableBrowserIntegration","enableBrowserIntegration","setEnableBrowserIntegration","getEnableBrowserIntegrationFingerprint","enableBrowserIntegrationFingerprint","setEnableBrowserIntegrationFingerprint","getEnableCloseToTray","enableCloseToTray","setEnableCloseToTray","getEnableDuckDuckGoBrowserIntegration","enableDuckDuckGoBrowserIntegration","setEnableDuckDuckGoBrowserIntegration","getEnableFullWidth","enableFullWidth","setEnableFullWidth","getEnableMinimizeToTray","enableMinimizeToTray","setEnableMinimizeToTray","getEnableStartToTray","enableStartToTray","setEnableStartToTray","getEnableTray","enableTray","setEnableTray","defaultOnDiskMemoryOptions","getEncryptedCryptoSymmetricKey","setEncryptedCryptoSymmetricKey","getEncryptedFolders","setEncryptedFolders","getEncryptedOrganizationKeys","setEncryptedOrganizationKeys","setEncryptedPinProtected","getEncryptedPrivateKey","setEncryptedPrivateKey","getEncryptedProviderKeys","setEncryptedProviderKeys","getEncryptedSends","setEncryptedSends","getEntityId","entityId","setEntityId","getEntityType","entityType","setEntityType","getEnvironmentUrls","getGlobalEnvironmentUrls","setEnvironmentUrls","getRegion","region","setRegion","getEverHadUserKey","everHadUserKey","setEverHadUserKey","getForcePasswordResetReason","getInstalledVersion","installedVersion","setInstalledVersion","setKdfConfig","setKdfType","keyHash","setKeyHash","getLastActive","getLocale","setLocale","getMainWindowSize","mainWindowSize","setMainWindowSize","getMinimizeOnCopyToClipboard","minimizeOnCopyToClipboard","setMinimizeOnCopyToClipboard","getNoAutoPromptBiometricsText","noAutoPromptBiometricsText","setNoAutoPromptBiometricsText","getOpenAtLogin","openAtLogin","setOpenAtLogin","getOrganizationInvitation","organizationInvitation","setOrganizationInvitation","getEmergencyAccessInvitation","emergencyAccessInvitation","setEmergencyAccessInvitation","passwordGenerationOptions","usernameGenerationOptions","getGeneratorOptions","generatorOptions","setGeneratorOptions","protectedPin","setProtectedPin","getPublicKey","setPublicKey","getRememberedEmail","rememberedEmail","setRememberedEmail","getSettings","setSettings","getSsoCodeVerifier","ssoCodeVerifier","setSsoCodeVerifier","getSsoOrgIdentifier","ssoOrganizationIdentifier","setSsoOrganizationIdentifier","getSsoState","ssoState","setSsoState","getUserSsoOrganizationIdentifier","setUserSsoOrganizationIdentifier","setTheme","accountVaultTimeoutAction","globalVaultTimeoutAction","approveLoginRequests","setApproveLoginRequests","getWindow","setWindow","setServerConfig","getServerConfig","activateAutoFillOnPageLoadFromPolicy","getSMOnboardingTasks","smOnboardingTasks","setSMOnboardingTasks","useMemory","storageLocation","getGlobalsFromMemory","useDisk","getGlobalsFromDisk","saveGlobalsToMemory","saveGlobalsToDisk","useSecureStorage","getAccountFromMemory","getUserIdFromMemory","cachedAccount","setDiskCache","Memory","Both","Disk","saveAccountToMemory","saveAccountToDisk","deleteDiskCache","deepClone","scaffoldNewAccountLocalStorage","scaffoldNewAccountSessionStorage","scaffoldNewAccountMemoryStorage","storedAccount","pruneInMemoryAccounts","requestedOptions","defaultOptions","Session","getActiveUserIdFromStorage","removeAccountFromLocalStorage","resetAccount","removeAccountFromSessionStorage","removeAccountFromSecureStorage","persistentAccountInformation","getGlobalRegion","timeoutAction","deserializer","stateUpdater","updatedState","withPrototypeForArrayMembers","memberConstructor","memberConverter","originalResult","isPromise","getOwnPropertyDescriptors","withPrototypeForObjectValues","valuesConstructor","valuesConverter","BrowserComponentState","BrowserGroupingsComponentState","collectionCounts","folderCounts","typeCounts","favoriteCiphers","noFolderCiphers","BrowserSendComponentState","AccountSettings","groupings","sendType","BrowserStateService","storageChangeListener","changes","namespace","getBrowserGroupingComponentState","setBrowserGroupingComponentState","getBrowserVaultItemsComponentState","setBrowserVaultItemsComponentState","getBrowserSendComponentState","setBrowserSendComponentState","getBrowserSendTypeComponentState","setBrowserSendTypeComponentState","AbstractChromeStorageService","chromeStorageApi","keyedObj","BrowserLocalStorageService","local","BrowserMemoryStorageService","session","LocalBackedSessionStorageService","keyGenerationService","localStorage","sessionStorage","getLocalSession","getSessionEncKey","sessionEncKey","localSession","setLocalSession","sessionJson","setSessionEncKey","setEncryptedLocalSession","setDecryptedLocalSession","jsonSession","encSession","storedKey","makeEphemeralKey","input","cryptoFunctionServiceFactory","cryptoFunctionServiceOptions","encryptServiceFactory","encryptServiceOptions","KeyGenerationService","numBytes","keyMaterial","diskStorageServiceFactory","memoryStorageServiceFactory","keyGenerationServiceFactory","stateServiceFactory","secureStorageServiceFactory","stateServiceOptions","accountServiceFactory","organizationServiceFactory","policyServiceFactory","tokenServiceFactory","Region","RegionDomain","appIdServiceFactory","urlsSubject","initialized","scimUrl","usUrls","scim","euUrls","setUrlsFromStorage","notificationsUrl","webVaultUrl","getCloudWebVaultUrl","cloudWebVaultUrl","setCloudWebVaultUrl","EU","US","getSendUrl","getIconsUrl","iconsUrl","identityUrl","eventsUrl","getScimUrl","savedUrls","envUrls","SelfHosted","setUrls","formatUrl","getUrls","cloudWebVault","isEmpty","selectedRegion","setUrlsInternal","isCloud","BrowserEnvironmentService","hasManagedEnvironment","getManagedEnvironment","settingsHaveChanged","env","managed","setUrlsToManagedEnvironment","environmentServiceFactory","platformUtilsServiceFactory","platformUtilsServiceOptions","apiServiceFactory","apiServiceOptions","BaseEncryptedOrganizationKey","EncryptedOrganizationKey","ProviderEncryptedOrganizationKey","toData","providerKey","getProviderKey","CryptoService","platformUtilService","storeAdditionalKeys","getKeyFromStorage","isLegacyUser","validateUserKey","clearAllStoredUserKeys","buildProtectedSymmetricKey","clearUserKey","clearStoredKeys","clearStoredUserKey","clearDeprecatedKeys","Pin","userKeyMasterKey","getOrDeriveMasterKey","makeKey","clearMasterKey","encryptUserKeyWithMasterKey","decUserKey","newKey","stretchKey","hashPurpose","clearMasterKeyHash","storedPasswordHash","localKeyHash","serverKeyHash","ServerAuthorization","providerOrgs","encOrgKeyData","decryptedOrganizationKeys","setKey","encOrgKey","fromData","decOrgKey","newSymKey","clearOrgKeys","memoryOnly","getProviderKeys","decryptedProviderKeys","encProviderKeys","clearProviderKeys","inMemoryPublicKey","getPrivateKey","makeOrgKey","shareKey","encPrivateKey","decryptedPrivateKey","getFingerprint","fingerprintMaterial","keyFingerprint","userFingerprint","hashPhrase","clearKeyPair","keysToClear","pinKey","decryptUserKeyWithPin","pinProtectedUserKey","decryptMasterKeyWithPin","pinProtectedMasterKey","pinProtectedMasterKeyString","makeSendKey","sendKey","clearKeys","privateKeyValue","rval","range","bitsNeeded","log2","bytesNeeded","mask","byteArray","initAccount","shouldStoreKey","storePinKey","encPin","minimumEntropy","entropyPerWord","hashArr","phrase","hashNumber","remainder","divide","encryptionKey","protectedSymKey","stretchedEncryptionKey","saltHash","migrateAutoKeyIfNeeded","oldAutoKey","decryptAndMigrateOldPinKey","masterPasswordOnRestart","oldPinKey","pinProtectedKey","encBuffer","BrowserCryptoService","Biometric","cryptoServiceFactory","TranslationService","systemLanguage","localesDirectory","getLocalesJson","supportedTranslationLocales","defaultLocale","localeNames","defaultMessages","localeMessages","translationLocale","Intl","Collator","numeric","sensitivity","loadMessages","p1","p2","p3","translate","messagesObj","formattedLocale","locales","placeholders","placeProp","replaceToken","replaceContent","_locale","_translationLocale","I18nService","getMessage","i18nServiceFactory","i18nServiceOptions","deviceTrustCryptoServiceFactory","devicesApiServiceFactory","authServiceFactory","keyConnectorServiceOptions","keyConnectorServiceFactory","twoFactorServiceFactory","passwordStrengthServiceFactory","authRequestCryptoServiceFactory","cipherFileUploadServiceFactory","fileUploadServiceFactory","SettingsService","_settings","_disableFavicon","settings$","disableFavicon$","ed","BrowserSettingsService","settingsServiceFactory","ServerConfig","serverConfigData","getAgeInMilliseconds","isValid","expiresSoon","ONE_HOUR_IN_MILLISECONDS","ConfigService","configApiService","_serverConfig","serverConfig$","_forceFetchConfig","refreshTimer$","timer","cloudRegion$","latestServerConfig$","delayWhen","saveConfig","catchError","getFeatureFlag$","triggerServerConfigFetch","minimumRequiredServerVersion","configServiceFactory","configApiServiceFactory","configServiceOptions","cipherServiceFactory","searchServiceFactory","AUTOFILL_CARD_ID","AUTOFILL_ID","AUTOFILL_IDENTITY_ID","COPY_IDENTIFIER_ID","COPY_PASSWORD_ID","COPY_USERNAME_ID","COPY_VERIFICATIONCODE_ID","CREATE_CARD_ID","CREATE_IDENTITY_ID","CREATE_LOGIN_ID","GENERATE_PASSWORD_ID","NOOP_COMMAND_SUFFIX","ROOT_ID","SEPARATOR_ID","MainContextMenuHandler","initRunning","_options","serviceOptions","removeAll","contexts","parentId","menuItemId","loadOptions","optionId","sanitizedTitle","sanitizeContextMenuTitle","createChildItem","noAccess","noCards","noIdentities","noLogins","NOT_IMPLEMENTED","_args","LISTENED_TO_COMMANDS","CipherContextMenuHandler","mainContextMenuHandler","mv3Create","serviceCache","cipherContextMenuHandler","getTab","shouldListen","activeTabs","getActiveTabs","ciphersByType","existingCiphersOfType","updateForCipher","totpServiceFactory","userVerificationServiceFactory","userVerificationApiServiceFactory","eventCollectionServiceFactory","eventUploadServiceFactory","passwordGenerationServiceFactory","AutofillScript","script","properties","autosubmit","AutoFillConstants","UsernameFieldNames","TotpFieldNames","PasswordFieldIgnoreList","ExcludedAutofillTypes","CreditCardAutoFillConstants","CardAttributes","CardAttributesExtended","CardHolderFieldNames","CardHolderFieldNameValues","CardNumberFieldNames","CardNumberFieldNameValues","CardExpiryFieldNames","CardExpiryFieldNameValues","ExpiryMonthFieldNames","ExpiryYearFieldNames","CVVFieldNames","CardBrandFieldNames","MonthAbbr","YearAbbrShort","YearAbbrLong","IdentityAutoFillConstants","IdentityAttributes","FullNameFieldNames","FullNameFieldNameValues","TitleFieldNames","FirstnameFieldNames","MiddlenameFieldNames","LastnameFieldNames","EmailFieldNames","AddressFieldNames","AddressFieldNameValues","Address1FieldNames","Address2FieldNames","Address3FieldNames","PostalCodeFieldNames","CityFieldNames","StateFieldNames","CountryFieldNames","PhoneFieldNames","UserNameFieldNames","CompanyFieldNames","IsoCountries","afghanistan","albania","algeria","andorra","angola","anguilla","antarctica","argentina","armenia","aruba","australia","austria","azerbaijan","bahamas","bahrain","bangladesh","barbados","belarus","belgium","belize","benin","bermuda","bhutan","bolivia","botswana","brazil","bulgaria","burundi","cambodia","cameroon","canada","chad","chile","china","colombia","comoros","congo","croatia","cuba","cyprus","denmark","djibouti","dominica","ecuador","egypt","eritrea","estonia","ethiopia","fiji","finland","france","gabon","gambia","georgia","germany","ghana","gibraltar","greece","greenland","grenada","guadeloupe","guam","guatemala","guernsey","guinea","guyana","haiti","honduras","hungary","iceland","india","indonesia","iraq","ireland","israel","italy","jamaica","japan","jersey","jordan","kazakhstan","kenya","kiribati","kuwait","kyrgyzstan","latvia","lebanon","lesotho","liberia","liechtenstein","lithuania","luxembourg","macao","macedonia","madagascar","malawi","malaysia","maldives","mali","malta","martinique","mauritania","mauritius","mayotte","mexico","moldova","monaco","mongolia","montenegro","montserrat","morocco","mozambique","myanmar","namibia","nauru","nepal","netherlands","nicaragua","niger","nigeria","niue","norway","oman","pakistan","palau","panama","paraguay","peru","philippines","pitcairn","poland","portugal","qatar","reunion","romania","rwanda","samoa","senegal","serbia","seychelles","singapore","slovakia","slovenia","somalia","spain","sudan","suriname","swaziland","sweden","switzerland","taiwan","tajikistan","tanzania","thailand","togo","tokelau","tonga","tunisia","turkey","turkmenistan","tuvalu","uganda","ukraine","uruguay","uzbekistan","vanuatu","venezuela","vietnam","yemen","zambia","zimbabwe","IsoStates","alabama","alaska","arizona","arkansas","california","colorado","connecticut","delaware","florida","hawaii","idaho","illinois","indiana","iowa","kansas","kentucky","louisiana","maine","maryland","massachusetts","michigan","minnesota","mississippi","missouri","montana","nebraska","nevada","ohio","oklahoma","oregon","pennsylvania","tennessee","texas","utah","vermont","virginia","washington","wisconsin","wyoming","IsoProvinces","alberta","manitoba","ontario","quebec","saskatchewan","AutofillService","totpService","eventCollectionService","injectAutofillScripts","autofillV2","injectedScripts","injectedScript","executeScriptInTab","pageDetails","formData","passwordFields","loadPasswordFields","passwordFieldsWithoutForm","pf","form","formKeys","formCount","soloFormKey","formKey","formPasswordFields","uf","findUsernameField","doAutoFill","canAccessPremium","didAutofill","pd","fillScript","generateFillScript","skipUsernameOnlyFill","onlyEmptyFields","onlyVisibleFields","fillNewPassword","allowTotpAutofill","tabUrl","untrustedIframe","allowUntrustedIframe","delay_between_operations","skipLastUsed","Cipher_ClientAutofilled","doAutoFillOnTab","fromCommand","lastLaunchedCipher","totpCode","doAutoFillActiveTab","cipherType","getActiveTab","filledFields","fieldNames","hasValue","opid","viewable","matchingIndex","findMatchingFieldIndex","matchingField","Linked","fillByOpid","generateLoginFillScript","generateCardFillScript","generateIdentityFillScript","usernames","totps","inUntrustedIframe","passField","findTotpField","elementNumber","fieldIsFuzzyMatch","autoCompleteType","totpValue","setFillScriptForFocus","fillFields","forCustomFieldsOnly","isExcludedType","isFieldMatch","makeScriptAction","selectInfo","siOptions","option","fieldAttrsContain","maxLength","fullMonth","fullYear","partYear","makeScriptActionWithValue","pageUrl","containsVal","doesContain","filledState","stateLower","isoState","filledCountry","countryLower","isoCountry","excludedTypes","containsOptions","checkValueContains","cipherData","dataProp","fieldProp","dataValue","doFill","canBeHidden","canBeReadOnly","mustBeEmpty","isPassword","valueIsLikePassword","readonly","htmlID","htmlName","placeholder","passwordField","withoutForm","usernameField","totpField","names","fieldPropertyIsPrefixMatch","fieldPropertyIsMatch","separator","sepIndex","fieldVal","regexParts","csvParts","csvVals","fuzzyMatch","lastField","lastPasswordField","autofillServiceFactory","clearClipboardAlarmName","ClearClipboard","sendTabsMessage","alarmKeys","alarmState","setAlarmTimeInternal","commandName","GeneratePasswordToClipboardCommand","passwordGenerationService","generatePasswordToClipboard","delay_ms","clearAlarmTime","setAlarmTime","AutofillTabCommand","doAutofillTabCommand","collectPageDetails","doAutofillTabWithCipherCommand","ContextMenuClickedHandler","autofillAction","generatePasswordToClipboardCommand","getIdentifier","isCreateCipherAction","additionalCiphersToGet","parentMenuItemId","getCipherCreationType","isPasswordRepromptRequired","Cipher_ClientCopiedPassword","UpdateBadge","existingServices","listenedToCommands","badgeAction","getBrowserAction","getSidebarAction","initServices","setBadgeBackgroundColor","setLoggedOut","setLocked","setUnlocked","setBadgeIcon","clearBadgeText","setBadgeText","countText","isOperaSidebar","setActionText","setSideBarText","iconSuffix","setActionIcon","setSidebarActionIcon","setTitle","setIcon","useSyncApiCalls","lastFocusedWindow","existingServiceCache","singleActionPopoutTabIds","defaultPopoutWindowOptions","height","openUnlockPrompt","senderWindowId","openSingleActionPopout","closeUnlockPrompt","closeSingleActionPopout","openPasswordRepromptPrompt","senderTabId","promptWindowPath","openCipherCreation","senderTabURI","openCipherEdit","closePasswordRepromptPrompt","openFido2Popout","senderWindow","sessionId","closeFido2Popout","popupWindowURL","singleActionPopoutKey","popupWidth","windowOptions","left","top","popupWindow","createWindow","popoutKey","BrowserConfigService","BrowserI18nService","BrowserMessagingPrivateModeBackgroundService","bitwardenPopupMainMessageListener","SendFile","SendText","Send","SendService","_sends","_sendViews","sends$","sendViews$","fileData","passwordHash","encryptFileData","parseFile","decSends","sendsMap","decryptSends","decryptSendPromises","decryptedSends","BrowserSendService","vaultTimeoutSettingsService","lockedCallback","loggedOutCallback","migrateKeyForNeverLockIfNeeded","startCheck","checkVaultTimeout","shouldLock","executeTimeoutAction","lastActive","vaultTimeoutSeconds","VaultTimeoutService","checkSafari","SessionClosedError","BrowserFido2UserInterfaceService","browserPopoutWindowService","BrowserFido2UserInterfaceSession","closed","messages$","messageListener$","connected$","destroy$","take","windowClosed$","fromEventPattern","onRemoved","receive","connect","complete","fallback","EmptyError","connectPromise","throwError","popoutId","FolderService","_folders","_folderViews","folders$","decryptFolders","updates","decryptFolderPromises","decryptedFolders","noneFolder","BrowserFolderService","VaultFilter","selectedCollection","selectedFolder","myVaultOnly","refreshCollectionsAndFolders","resetFilter","selectedCollectionId","selectedFolderId","resetOrganization","selectedOrganizationId","buildFilter","cipherPassesFilter","DynamicTreeNode","hasId","fullList","storeCollapsedFilterNodes","collapsedFilterNodes","buildCollapsedFilterNodes","buildOrganizations","buildNestedFolders","transformation","storedFolders","orgCiphers","oc","nestedFolders","getAllFoldersNested","nestedList","mergeMap","buildCollections","storedCollections","nestedCollections","checkForSingleOrganizationPolicy","SingleOrg","checkForPersonalOwnershipPolicy","folderCopy","getFolderNested","VaultFilterService","vaultFilter","allVaults","myVault","getVaultFilter","setVaultFilter","filterCipherForSelectedVault","CommandsBackground","vaultTimeoutService","processCommand","onCommand","autoFillLogin","openPopup","getTabFromCurrentWindowId","collectPageDetailsForContentScript","IdleBackground","notificationsService","idleTimer","idleState","idle","idleHandler","newState","onStateChanged","setDetectionInterval","pollIdle","queryState","NativeMessagingBackground","runtimeBackground","resolver","secureSetupResolve","onAdded","reloadExtension","port","connecting","connectedCallback","disconnect","sharedSecret","validatingFingerprint","acceptButtonText","cancelButtonText","showFingerprintDialog","showWrongUserDialog","onDisconnect","timestamp","encryptMessage","secureCommunication","getResponse","rawMessage","abs","userKeyB64","sendUnencrypted","fingerprint","AbortManager","abortControllers","runWithAbortController","runner","RuntimeBackground","systemService","pageDetailsToAutoFill","onInstalledReason","lockedVaultPendingNotifications","abortManager","onInstalled","checkOnInstalled","backgroundMessageListener","popupOnlyContext","bitwardenBackgroundMessageListener","focusTab","avatarUpdateService","isNewCipher","closeBitwardenExtensionTab","delay","AutofillV2","reseedStorage","autofillTimeout","autofillPage","vaultUrl","referrer","lastpass","openBitwardenExtensionTab","abortedRequestId","fido2ClientService","requestId","tabToAutoFill","loginToAutoFill","WebRequestBackground","pendingAuthRequests","webRequest","onAuthRequired","resolveAuthCredentials","onCompleted","completeAuthRequest","onErrorOccurred","authCredentials","MainBackground","isPrivateMode","backgroundWindow","nativeMessagingBackground","syncNotifierService","policyApiService","that","backgroundMessagingService","devicesService","authRequestCryptoService","vaultFilterService","containerService","auditService","importService","exportService","fido2UserInterfaceService","fido2AuthenticatorService","forceWindowReload","commandsBackground","tabsBackground","_tab","contextMenusBackground","idleBackground","webRequestBackground","usernameGenerationService","bootstrap","getPrivateModeWindows","onWindowCreated","forLocked","needStorageReseed","needsStorageReseed","override","syncInternal","lastSyncAgo","scheduleNextSync","syncTimeout","onAlarmListener","alarm","executionTime","alarmTime","getAlarmTime","combine","listeners","startingServices","listener","onCommandListener","doAutoFillLogin","doGeneratePasswordToClipboard","windowsOnFocusChangedListener","tabsOnActivatedListener","tabsOnReplacedListener","tabsOnUpdatedListener","contextMenusClickedListener","onClickedListener","runtimeMessageListener","OnInstalledReason","INSTALL","alarms","onAlarm","numberOfAlarms","calculatedWhen","periodInMinutes","when","alarmsToBeCreated","bitwardenMain","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","loaded","__webpack_modules__","O","chunkIds","fn","notFulfilled","Infinity","fulfilled","getPrototypeOf","__esModule","ns","def","current","getOwnPropertyNames","definition","defineProperty","enumerable","chunkId","globalThis","Function","Symbol","toStringTag","nmd","paths","scriptUrl","importScripts","currentScript","src","scripts","getElementsByTagName","baseURI","installedChunks","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}